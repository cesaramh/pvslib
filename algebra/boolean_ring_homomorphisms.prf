(boolean_ring_homomorphisms
 (S_TCC1 0
  (S_TCC1-1 nil 3794228854 ("" (rewrite "fullset_is_ring_U") nil nil)
   ((fullset_is_ring_U formula-decl nil boolean_ring_homomorphisms
     nil))
   nil
   (S assuming
    "algebra@ring[boolean_ring_homomorphisms.U, boolean_ring_homomorphisms.s, boolean_ring_homomorphisms.p, boolean_ring_homomorphisms.zeroU].ring"
    "fullset_is_ring: ASSUMPTION ring_def[ring.T, ring.+, ring.*, ring.zero].ring?(sets[ring.T].fullset)")))
 (img_hom_bool_ring 0
  (img_hom_bool_ring-1 nil 3794228904
   ("" (skosimp)
    (("" (expand "boolean_ring?")
      (("" (split)
        (("1" (lemma "image_homo_is_subring [T,+,*,zero, U,s,p,zeroU]")
          (("1" (inst -1 "R!1" "S!1" "phi!1")
            (("1" (expand "subring?") (("1" (assert) nil nil)) nil)
             ("2" (typepred "R!1")
              (("2" (expand "boolean_ring?") (("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma "fullset_is_ring_U") (("2" (propax) nil nil))
            nil)
           ("3" (lemma "fullset_is_ring_T") (("3" (propax) nil nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (typepred "phi!1")
            (("2" (expand "R_homomorphism?")
              (("2" (flatten)
                (("2" (expand "homomorphism?")
                  (("2" (typepred "x!1")
                    (("2" (expand "extend")
                      (("2" (expand "restrict")
                        (("2" (expand "image")
                          (("2" (hide-all-but (-1 -7 1))
                            (("2" (case "S!1(x!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "image")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst -3 "x!2" "x!2")
                                      (("1"
                                        (typepred "x!2")
                                        (("1"
                                          (typepred "R!1")
                                          (("1"
                                            (expand "boolean_ring?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst -2 "x!2")
                                                (("1"
                                                  (replaces -2 -6)
                                                  (("1"
                                                    (replace -4 -5 rl)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (prop) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean_ring? const-decl "bool" boolean_ring_def nil)
    (homomorphism? const-decl "bool" homomorphisms_def nil)
    (image const-decl "set[R]" function_image nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (image const-decl "set[R]" function_image nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zeroU formal-const-decl "U" boolean_ring_homomorphisms nil)
    (p formal-const-decl "[U, U -> U]" boolean_ring_homomorphisms nil)
    (s formal-const-decl "[U, U -> U]" boolean_ring_homomorphisms nil)
    (U formal-nonempty-type-decl nil boolean_ring_homomorphisms nil)
    (zero formal-const-decl "T" boolean_ring_homomorphisms nil)
    (* formal-const-decl "[T, T -> T]" boolean_ring_homomorphisms nil)
    (+ formal-const-decl "[T, T -> T]" boolean_ring_homomorphisms nil)
    (T formal-nonempty-type-decl nil boolean_ring_homomorphisms nil)
    (image_homo_is_subring formula-decl nil ring_homomorphism_lemmas
     nil)
    (fullset const-decl "set" sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subring? const-decl "bool" ring_def algebra)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (boolean_ring type-eq-decl nil boolean_ring_def nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (fullset_is_ring_U formula-decl nil boolean_ring_homomorphisms nil)
    (fullset_is_ring_T formula-decl nil boolean_ring_homomorphisms
     nil))
   shostak)))