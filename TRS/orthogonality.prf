(orthogonality
 (IMP_orthogonality_basis_TCC1 0
  (IMP_orthogonality_basis_TCC1-2 "" 3912758134
   ("" (rewrite var_countable) nil nil) nil shostak
   (IMP_orthogonality_basis assuming
    "orthogonality_basis[orthogonality.variable, orthogonality.symbol, orthogonality.arity].orthogonality_basis"
    "var_countable: ASSUMPTION countability[term_adt[orthogonality_basis.variable, orthogonality_basis.symbol, orthogonality_basis.arity].term].is_countably_infinite(variables_term[orthogonality_basis.variable, orthogonality_basis.symbol, orthogonality_basis.arity].V)"))
  (IMP_orthogonality_basis_TCC1-1 nil 3673546671
   ("" (rewrite var_countable) nil)
   ((var_countable formula-decl nil orthogonality nil)) nil
   (IMP_orthogonality_basis assuming
    "orthogonality_basis[orthogonality.variable, orthogonality.symbol, orthogonality.arity].orthogonality_basis"
    "var_countable: ASSUMPTION countability[term_adt[orthogonality_basis.variable, orthogonality_basis.symbol, orthogonality_basis.arity].term].is_countably_infinite(variables_term[orthogonality_basis.variable, orthogonality_basis.symbol, orthogonality_basis.arity].V)")))
 (sub_pos_TCC1 0
  (sub_pos_TCC1-2 "" 3912758134 ("" (subtype-tcc) nil nil) nil shostak
   (sub_pos subtype "0" "below[fsp`length]"))
  (sub_pos_TCC1-1 nil 3501314307 ("" (subtype-tcc) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (sub_pos subtype "0" "below[fsp`length]")))
 (sub_pos_TCC2 0
  (sub_pos_TCC2-2 "" 3912758134
   ("" (skosimp*)
    (("" (typepred "fsp!1") (("" (rewrite "rest_of_PP_is_PP") nil nil))
      nil))
    nil)
   nil shostak
   (sub_pos subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp)"
    "PP[variable, symbol, arity]"))
  (sub_pos_TCC2-1 nil 3501314307
   (""
    (then (skosimp*) (typepred "fsp!1") (rewrite "rest_of_PP_is_PP"))
    nil)
   ((rest_of_PP_is_PP formula-decl nil positions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil))
   nil
   (sub_pos subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp)"
    "PP[variable, symbol, arity]")))
 (sub_pos_TCC3 0
  (sub_pos_TCC3-2 "" 3912758134 ("" (termination-tcc) nil nil) nil
   shostak
   (sub_pos termination
    "orthogonality.sub_pos(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp), orthogonality.p)"
    "nil"))
  (sub_pos_TCC3-1 nil 3501314307 ("" (termination-tcc) nil)
   ((PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (parallel const-decl "bool" positions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (<= const-decl "bool" positions nil)
    (/= const-decl "boolean" notequal nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (rest const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sub_pos termination
    "orthogonality.sub_pos(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp), orthogonality.p)"
    "nil")))
 (sub_pos_TCC4 0
  (sub_pos_TCC4-2 "" 3912758134
   ("" (skosimp*)
    (("" (typepred "fsp!1") (("" (rewrite "rest_of_PP_is_PP") nil nil))
      nil))
    nil)
   nil shostak
   (sub_pos subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp)"
    "PP[variable, symbol, arity]"))
  (sub_pos_TCC4-1 nil 3501314307
   (""
    (then (skosimp*) (typepred "fsp!1") (rewrite "rest_of_PP_is_PP"))
    nil)
   ((rest_of_PP_is_PP formula-decl nil positions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil))
   nil
   (sub_pos subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp)"
    "PP[variable, symbol, arity]")))
 (sub_pos_TCC5 0
  (sub_pos_TCC5-2 "" 3912758135 ("" (termination-tcc) nil nil) nil
   shostak
   (sub_pos termination
    "orthogonality.sub_pos(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp), orthogonality.p)"
    "nil"))
  (sub_pos_TCC5-1 nil 3501314307 ("" (termination-tcc) nil)
   ((PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (parallel const-decl "bool" positions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (<= const-decl "bool" positions nil)
    (/= const-decl "boolean" notequal nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (rest const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sub_pos termination
    "orthogonality.sub_pos(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp), orthogonality.p)"
    "nil")))
 (Pos_Over_TCC1 0
  (Pos_Over_TCC1-2 "" 3912758135
   ("" (skeep) (("" (rewrite rest_of_PP_is_PP) nil nil)) nil) nil
   shostak
   (Pos_Over subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1)"
    "PP[variable, symbol, arity]"))
  (Pos_Over_TCC1-1 nil 3501314307
   ("" (then (skeep) (rewrite rest_of_PP_is_PP)) nil)
   ((arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (rest_of_PP_is_PP formula-decl nil positions nil))
   nil
   (Pos_Over subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1)"
    "PP[variable, symbol, arity]")))
 (Pos_Over_TCC2 0
  (Pos_Over_TCC2-2 "" 3912758135
   ("" (skeep)
    (("" (expand* rest ^ min empty_seq)
      (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (Pos_Over termination
    "orthogonality.Pos_Over(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1), orthogonality.fsp2)"
    "nil"))
  (Pos_Over_TCC2-1 nil 3501314307
   ("" (then (skeep) (expand* rest ^ min empty_seq) (lift-if) (assert))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rest const-decl "finseq" seq_extras structures)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil))
   nil
   (Pos_Over termination
    "orthogonality.Pos_Over(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1), orthogonality.fsp2)"
    "nil")))
 (Pos_Over_TCC3 0
  (Pos_Over_TCC3-2 "" 3912758135
   ("" (skosimp*)
    (("" (typepred "fsp1!1")
      (("" (rewrite "rest_of_PP_is_PP") nil nil)) nil))
    nil)
   nil shostak
   (Pos_Over subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1)"
    "PP[variable, symbol, arity]"))
  (Pos_Over_TCC3-1 nil 3501314307
   (""
    (then (skosimp*) (typepred "fsp1!1") (rewrite "rest_of_PP_is_PP"))
    nil)
   ((rest_of_PP_is_PP formula-decl nil positions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil))
   nil
   (Pos_Over subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1)"
    "PP[variable, symbol, arity]")))
 (Pos_Over_TCC4 0
  (Pos_Over_TCC4-2 "" 3912758135 ("" (termination-tcc) nil nil) nil
   shostak
   (Pos_Over termination
    "orthogonality.Pos_Over(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1), orthogonality.fsp2)"
    "nil"))
  (Pos_Over_TCC4-1 nil 3501314307 ("" (termination-tcc) nil)
   ((PP type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (O const-decl "finseq" finite_sequences nil)
    (<= const-decl "bool" positions nil)
    (parallel const-decl "bool" positions nil)
    (PP? const-decl "bool" positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (Pos_Over termination
    "orthogonality.Pos_Over(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1), orthogonality.fsp2)"
    "nil")))
 (Pos_Under_TCC1 0
  (Pos_Under_TCC1-2 "" 3912758136 ("" (subtype-tcc) nil nil) nil
   shostak (Pos_Under subtype "0" "below[fsp2`length]"))
  (Pos_Under_TCC1-1 nil 3501581101 ("" (subtype-tcc) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (Pos_Under subtype "0" "below[fsp2`length]")))
 (Pos_Under_TCC2 0
  (Pos_Under_TCC2-2 "" 3912758136
   ("" (skeep) (("" (rewrite rest_of_PP_is_PP) nil nil)) nil) nil
   shostak
   (Pos_Under subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp2)"
    "PP[variable, symbol, arity]"))
  (Pos_Under_TCC2-1 nil 3521391411
   ("" (then (skeep) (rewrite rest_of_PP_is_PP)) nil)
   ((arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (rest_of_PP_is_PP formula-decl nil positions nil))
   nil
   (Pos_Under subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp2)"
    "PP[variable, symbol, arity]")))
 (Pos_Under_TCC3 0
  (Pos_Under_TCC3-2 "" 3912758136
   ("" (skeep)
    (("" (expand* rest ^ min empty_seq)
      (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (Pos_Under termination
    "orthogonality.Pos_Under(orthogonality.fsp1, seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp2))"
    "nil"))
  (Pos_Under_TCC3-1 nil 3521391411
   ("" (then (skeep) (expand* rest ^ min empty_seq) (lift-if) (assert))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rest const-decl "finseq" seq_extras structures)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil))
   nil
   (Pos_Under termination
    "orthogonality.Pos_Under(orthogonality.fsp1, seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp2))"
    "nil")))
 (Pos_Equal_TCC1 0
  (Pos_Equal_TCC1-2 "" 3912758136
   ("" (skosimp*)
    (("" (typepred "fsp1!1")
      (("" (rewrite "rest_of_PP_is_PP") nil nil)) nil))
    nil)
   nil shostak
   (Pos_Equal subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1)"
    "PP[variable, symbol, arity]"))
  (Pos_Equal_TCC1-1 nil 3501581101
   (""
    (then (skosimp*) (typepred "fsp1!1") (rewrite "rest_of_PP_is_PP"))
    nil)
   ((rest_of_PP_is_PP formula-decl nil positions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil))
   nil
   (Pos_Equal subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1)"
    "PP[variable, symbol, arity]")))
 (Pos_Equal_TCC2 0
  (Pos_Equal_TCC2-2 "" 3912758136
   ("" (skosimp*) (("" (rewrite "length_rest") nil nil)) nil) nil
   shostak
   (Pos_Equal termination
    "orthogonality.Pos_Equal(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1), orthogonality.fsp2)"
    "nil"))
  (Pos_Equal_TCC2-1 nil 3501581101
   ("" (then (skosimp*) (rewrite "length_rest")) nil)
   ((position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length_rest formula-decl nil seq_extras structures))
   nil
   (Pos_Equal termination
    "orthogonality.Pos_Equal(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1), orthogonality.fsp2)"
    "nil")))
 (Pos_Equal_TCC3 0
  (Pos_Equal_TCC3-2 "" 3912758136
   ("" (skosimp*)
    (("" (typepred "fsp1!1")
      (("" (rewrite "rest_of_PP_is_PP") nil nil)) nil))
    nil)
   nil shostak
   (Pos_Equal subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1)"
    "PP[variable, symbol, arity]"))
  (Pos_Equal_TCC3-1 nil 3501581101
   (""
    (then (skosimp*) (typepred "fsp1!1") (rewrite "rest_of_PP_is_PP"))
    nil)
   ((rest_of_PP_is_PP formula-decl nil positions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil))
   nil
   (Pos_Equal subtype
    "seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1)"
    "PP[variable, symbol, arity]")))
 (Pos_Equal_TCC4 0
  (Pos_Equal_TCC4-2 "" 3912758136
   ("" (skosimp*) (("" (rewrite "length_rest") nil nil)) nil) nil
   shostak
   (Pos_Equal termination
    "orthogonality.Pos_Equal(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1), orthogonality.fsp2)"
    "nil"))
  (Pos_Equal_TCC4-1 nil 3501581101
   ("" (then (skosimp*) (rewrite "length_rest")) nil)
   ((position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length_rest formula-decl nil seq_extras structures))
   nil
   (Pos_Equal termination
    "orthogonality.Pos_Equal(seq_extras[position[variable, symbol, arity]].rest(orthogonality.fsp1), orthogonality.fsp2)"
    "nil")))
 (sub_pos_element 0
  (sub_pos_element-1 nil 3520006367
   ("" (measure-induct "fsp`length" "fsp")
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length = 0")
          (("1" (hide -2)
            (("1" (hide 2)
              (("1" (expand* member_seq finseq_appl)
                (("1" (skosimp)
                  (("1" (typepred i!1) (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 p1 p2)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (expand member_seq -3)
                    (("2" (expand finseq_appl)
                      (("2" (skosimp)
                        (("2" (case "i!1=0")
                          (("1" (replaces -1)
                            (("1" (prop)
                              (("1"
                                (expand sub_pos -1)
                                (("1"
                                  (expand* add_first insert?)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand sub_pos 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand*
                                       add_first
                                       insert?
                                       finseq_appl)
                                      (("2"
                                        (expand*
                                         member_seq
                                         finseq_appl)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst 2 "i!2+1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand sub_pos -1)
                                (("3"
                                  (expand*
                                   add_first
                                   insert?
                                   finseq_appl)
                                  (("3"
                                    (lift-if)
                                    (("3"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand <=)
                                        (("2"
                                          (inst 1 p2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (replace -1 -4 rl)
                                        (("3"
                                          (lemma equal_prefix[posnat])
                                          (("3"
                                            (inst -1 p1 p2 empty_seq)
                                            (("3"
                                              (rewrite seq_o_empty)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (rewrite empty_0 3)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (expand member_seq 1)
                                (("4"
                                  (expand finseq_appl)
                                  (("4"
                                    (inst 1 0)
                                    (("1"
                                      (expand*
                                       sub_pos
                                       add_first
                                       insert?
                                       finseq_appl)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand <=)
                                            (("1"
                                              (inst 1 p2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             equal_prefix[posnat])
                                            (("2"
                                              (inst -1 p1 p2 empty_seq)
                                              (("2"
                                                (rewrite seq_o_empty)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite empty_0 4)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand*
                                       sub_pos
                                       add_first
                                       insert?)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand <=)
                                            (("2"
                                              (inst 1 p2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             equal_prefix[posnat])
                                            (("3"
                                              (inst -1 p1 p2 empty_seq)
                                              (("3"
                                                (rewrite seq_o_empty)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (rewrite empty_0 4)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (prop)
                              (("1"
                                (expand sub_pos -1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (expand* add_first insert?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand sub_pos 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (expand*
                                     add_first
                                     insert?
                                     finseq_appl)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (expand*
                                         member_seq
                                         finseq_appl)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst 2 "i!2+1")
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand* member_seq finseq_appl)
                                (("3"
                                  (inst 1 "i!1-1")
                                  (("1"
                                    (expand rest 1)
                                    (("1" (expand* ^) nil nil))
                                    nil)
                                   ("2"
                                    (expand* rest ^ min empty_seq)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 1)
                                (("4"
                                  (expand* rest ^ min)
                                  (("4"
                                    (expand* member_seq finseq_appl)
                                    (("4"
                                      (inst 1 "i!1-1")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (O const-decl "finseq" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (PP type-eq-decl nil positions nil)
    (sub_pos def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (i!1 skolem-const-decl "below[x`length]" orthogonality nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (x skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (p1 skolem-const-decl "position[variable, symbol, arity]"
     orthogonality nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (equal_prefix formula-decl nil seq_extras structures)
    (<= const-decl "bool" positions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (parallel_pos_are_dif 0
  (parallel_pos_are_dif-1 nil 3510930419
   ("" (skeep)
    (("" (skeep)
      (("" (expand finseq_appl)
        (("" (expand PP?)
          (("" (expand finseq_appl)
            (("" (prop)
              (("1" (typepred i)
                (("1" (typepred j) (("1" (assert) nil nil)) nil)) nil)
               ("2" (inst -1 i j)
                (("2" (assert)
                  (("2" (expand parallel)
                    (("2" (flatten)
                      (("2" (expand <=)
                        (("2" (inst 2 empty_seq)
                          (("2" (rewrite seq_o_empty)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (parallel const-decl "bool" positions nil)
    (<= const-decl "bool" positions nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PP? const-decl "bool" positions nil))
   shostak))
 (same_pos_in_Pos_Equal 0
  (same_pos_in_Pos_Equal-1 nil 3512894597
   ("" (measure-induct "fsp1`length" "fsp1")
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length = 0")
          (("1" (hide -2 -4 -6 1)
            (("1" (expand* member_seq finseq_appl)
              (("1" (skosimp)
                (("1" (typepred i!1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 fsp2 p)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (assert)
                    (("2" (prop)
                      (("1" (expand Pos_Equal 2)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1"
                              (expand* add_first insert? finseq_appl)
                              (("1"
                                (expand member_seq (-2 1))
                                (("1"
                                  (expand finseq_appl)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst 1 i!1+1)
                                      (("1"
                                        (lift-if)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand member_seq -3)
                        (("2" (skosimp)
                          (("2" (case "i!1=0")
                            (("1" (replaces -1)
                              (("1"
                                (expand finseq_appl)
                                (("1"
                                  (expand Pos_Equal)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand*
                                       add_first
                                       insert?
                                       finseq_appl)
                                      (("1"
                                        (expand member_seq 3)
                                        (("1"
                                          (expand finseq_appl)
                                          (("1"
                                            (inst 3 0)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand rest 2)
                              (("2"
                                (expand* ^ min)
                                (("2"
                                  (expand member_seq 2)
                                  (("2"
                                    (inst 2 i!1-1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (expand finseq_appl)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (x skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (fsp2 skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (TRUE const-decl "bool" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "below[x`length]" orthogonality nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (Pos_Over_is_sub_seq 0
  (Pos_Over_is_sub_seq-1 nil 3512913456
   ("" (measure-induct "fsp1`length" fsp1)
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length = 0")
          (("1" (hide -2)
            (("1" (expand Pos_Over)
              (("1" (assert)
                (("1" (expand empty_seq)
                  (("1" (expand subseq) (("1" (skeep) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 fsp2)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (assert)
                    (("2" (expand Pos_Over 2)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand* add_first insert? finseq_appl)
                            (("1" (expand subseq 1)
                              (("1"
                                (expand finseq_appl)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand member_seq)
                                        (("1"
                                          (inst 1 0)
                                          (("1"
                                            (expand finseq_appl)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma subseq_rest[position])
                                        (("2"
                                          (inst
                                           -1
                                           "Pos_Over(rest(x), fsp2)"
                                           x)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand subseq -1)
                                              (("2"
                                                (inst -1 "i!1 - 1")
                                                (("2"
                                                  (expand finseq_appl)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand add_first 1)
                            (("2" (expand* insert? finseq_appl)
                              (("2"
                                (expand subseq 1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand finseq_appl)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (expand member_seq)
                                          (("1"
                                            (inst 1 0)
                                            (("1"
                                              (expand finseq_appl)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma subseq_rest[position])
                                          (("2"
                                            (inst
                                             -1
                                             "Pos_Over(rest(x), fsp2)"
                                             x)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand subseq -1)
                                                (("2"
                                                  (inst -1 "i!1 - 1")
                                                  (("2"
                                                    (expand
                                                     finseq_appl)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (rewrite subseq_rest 3) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_first const-decl "finseq" seq_extras structures)
    (subseq_rest formula-decl nil predicate_fseq2set nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (Pos_Equal_is_sub_seq 0
  (Pos_Equal_is_sub_seq-1 nil 3512917234
   ("" (measure-induct "fsp1`length" "fsp1")
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length = 0")
          (("1" (hide -2)
            (("1" (expand Pos_Equal)
              (("1" (expand empty_seq)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (expand subseq) (("1" (skeep) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 fsp2)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (assert)
                    (("2" (expand Pos_Equal 2)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand* add_first insert? finseq_appl)
                            (("1" (expand subseq 1)
                              (("1"
                                (skosimp)
                                (("1"
                                  (expand finseq_appl)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand member_seq 1)
                                        (("1"
                                          (expand finseq_appl)
                                          (("1" (inst 1 0) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma subseq_rest[position])
                                        (("2"
                                          (inst
                                           -1
                                           "Pos_Equal(rest(x), fsp2)"
                                           x)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand subseq -1)
                                              (("2"
                                                (expand finseq_appl)
                                                (("2"
                                                  (inst -1 "i!1-1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite subseq_rest 2) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_first const-decl "finseq" seq_extras structures)
    (subseq_rest formula-decl nil predicate_fseq2set nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (sub_pos_is_sub_seq 0
  (sub_pos_is_sub_seq-1 nil 3523638341
   ("" (measure-induct "fsp`length" "fsp")
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (hide -2)
            (("1" (expand sub_pos)
              (("1" (expand empty_seq)
                (("1" (assert)
                  (("1" (expand subseq) (("1" (skeep) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 p)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (expand sub_pos 2)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand* add_first insert? finseq_appl)
                            (("1" (expand subseq 2)
                              (("1"
                                (expand finseq_appl)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand*
                                         member_seq
                                         finseq_appl)
                                        (("1" (inst 1 0) nil nil))
                                        nil)
                                       ("2"
                                        (lemma subseq_rest[position])
                                        (("2"
                                          (inst
                                           -1
                                           "sub_pos(rest(x), p)"
                                           x)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand subseq -1)
                                              (("2"
                                                (expand finseq_appl)
                                                (("2"
                                                  (inst -1 "i!1-1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite subseq_rest 2) nil nil)
                           ("3" (rewrite subseq_rest 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (PP type-eq-decl nil positions nil)
    (sub_pos def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_first const-decl "finseq" seq_extras structures)
    (subseq_rest formula-decl nil predicate_fseq2set nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (Pos_Under_is_sub_seq 0
  (Pos_Under_is_sub_seq-1 nil 3512918956
   ("" (measure-induct "fsp2`length" "fsp2")
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (hide -2)
            (("1" (expand Pos_Under 1)
              (("1" (expand empty_seq)
                (("1" (assert)
                  (("1" (expand subseq) (("1" (skeep) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 fsp1)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (assert)
                    (("2" (expand Pos_Under 2)
                      (("2" (expand o)
                        (("2" (expand subseq 2)
                          (("2" (expand finseq_appl)
                            (("2" (skeep)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (lemma sub_pos_is_sub_seq)
                                    (("1"
                                      (inst -1 fsp1 "x`seq(0)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand subseq -1)
                                          (("1"
                                            (expand finseq_appl)
                                            (("1" (inst -1 i) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand subseq -1)
                                    (("2"
                                      (expand finseq_appl)
                                      (("2"
                                        (inst
                                         -1
                                         "i - sub_pos(fsp1, x`seq(0))`length")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Under def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fsp1 skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (x skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (i skolem-const-decl
       "below[Pos_Under(fsp1, rest(x))`length + sub_pos(fsp1, x`seq(0))`length]"
       orthogonality nil)
    (sub_pos_is_sub_seq formula-decl nil orthogonality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub_pos def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (Pos_Over_is_PP 0
  (Pos_Over_is_PP-1 nil 3543069642
   ("" (measure-induct "fsp1`length" "fsp1")
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length = 0")
          (("1" (expand Pos_Over 1)
            (("1" (expand empty_seq)
              (("1" (expand PP? 1 1) (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 fsp2)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (assert)
                    (("2" (expand Pos_Over 2)
                      (("2" (prop)
                        (("1"
                          (rewrite add_first_parallel_pos_to_PP_is_PP)
                          (("1" (skeep)
                            (("1" (expand finseq_appl)
                              (("1"
                                (lemma Pos_Over_is_sub_seq)
                                (("1"
                                  (inst -1 "rest(x)" fsp2)
                                  (("1"
                                    (rewrite rest_of_PP_is_PP)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand* subseq finseq_appl)
                                        (("1"
                                          (inst -1 i)
                                          (("1"
                                            (expand*
                                             member_seq
                                             finseq_appl)
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (typepred i!1)
                                                (("1"
                                                  (expand rest -2 2)
                                                  (("1"
                                                    (expand rest -1)
                                                    (("1"
                                                      (expand* ^ min)
                                                      (("1"
                                                        (expand
                                                         empty_seq
                                                         -1)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 PP?
                                                                 -5)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "1+i!1"
                                                                     0)
                                                                    (("1"
                                                                      (expand
                                                                       finseq_appl)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (rewrite add_first_parallel_pos_to_PP_is_PP
                           1)
                          (("2" (skeep)
                            (("2" (expand finseq_appl)
                              (("2"
                                (lemma Pos_Over_is_sub_seq)
                                (("2"
                                  (inst -1 "rest(x)" fsp2)
                                  (("2"
                                    (rewrite rest_of_PP_is_PP)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand*
                                         subseq
                                         member_seq
                                         finseq_appl)
                                        (("2"
                                          (inst -1 i)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (typepred i!1)
                                              (("2"
                                                (expand rest -2 2)
                                                (("2"
                                                  (expand rest -1)
                                                  (("2"
                                                    (expand* ^ min)
                                                    (("2"
                                                      (expand
                                                       empty_seq
                                                       -1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (expand
                                                               PP?
                                                               -5)
                                                              (("2"
                                                                (expand
                                                                 finseq_appl)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     1+i!1
                                                                     0)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (Pos_Over_is_sub_seq formula-decl nil orthogonality nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_first_parallel_pos_to_PP_is_PP formula-decl nil positions nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (Pos_Over_is_SPP_TCC1 0
  (Pos_Over_is_SPP_TCC1-2 "" 3912758142 ("" (subtype-tcc) nil nil) nil
   shostak
   (Pos_Over_is_SPP subtype "orthogonality.fsp1"
    "PP[variable, symbol, arity]"))
  (Pos_Over_is_SPP_TCC1-1 nil 3526896502 ("" (subtype-tcc) nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (SP? const-decl "bool" positions nil)
    (SPP? const-decl "bool" positions nil))
   nil
   (Pos_Over_is_SPP subtype "orthogonality.fsp1"
    "PP[variable, symbol, arity]")))
 (Pos_Over_is_SPP_TCC2 0
  (Pos_Over_is_SPP_TCC2-2 "" 3912758142 ("" (subtype-tcc) nil nil) nil
   shostak
   (Pos_Over_is_SPP subtype "orthogonality.fsp2"
    "PP[variable, symbol, arity]"))
  (Pos_Over_is_SPP_TCC2-1 nil 3526896502 ("" (subtype-tcc) nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (SP? const-decl "bool" positions nil)
    (SPP? const-decl "bool" positions nil))
   nil
   (Pos_Over_is_SPP subtype "orthogonality.fsp2"
    "PP[variable, symbol, arity]")))
 (Pos_Over_is_SPP 0
  (Pos_Over_is_SPP-1 nil 3512923080
   ("" (measure-induct "fsp1`length" "fsp1")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (expand SPP?)
          (("1" (flatten)
            (("1" (rewrite Pos_Over_is_PP)
              (("1" (case "x`length = 0")
                (("1" (expand Pos_Over 1)
                  (("1" (assert)
                    (("1" (expand SP? 1)
                      (("1" (skeep)
                        (("1" (typepred i)
                          (("1" (expand empty_seq -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "rest(x)")
                  (("2" (rewrite length_rest)
                    (("2" (inst -1 fsp2 s)
                      (("2" (rewrite rest_of_PP_is_PP)
                        (("2" (rewrite rest_of_SP_is_SP)
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (expand Pos_Over 2)
                                (("2"
                                  (rewrite
                                   add_first_parallel_pos_to_SP_is_SP)
                                  (("1" (prop) nil nil)
                                   ("2"
                                    (hide 3)
                                    (("2"
                                      (expand SP? -4)
                                      (("2"
                                        (inst -4 0)
                                        (("2"
                                          (expand finseq_appl)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (expand SPP? -2) (("2" (flatten) nil nil)) nil)) nil)
     ("3" (skeep)
      (("3" (expand SPP? -1) (("3" (flatten) nil nil)) nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (PP? const-decl "bool" positions nil)
    (SPP? const-decl "bool" positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (SP? const-decl "bool" positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (rest_of_SP_is_SP formula-decl nil positions nil)
    (SP type-eq-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (Pos_Over_is_PP formula-decl nil orthogonality nil))
   shostak))
 (pos_up_in_Pos_Over 0
  (pos_up_in_Pos_Over-1 nil 3520001568
   ("" (measure-induct "fsp1`length" "fsp1")
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length = 0")
          (("1" (hide-all-but (-1 -5))
            (("1" (expand* member_seq)
              (("1" (skosimp)
                (("1" (typepred i!1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 fsp2 p1 p2)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (assert)
                    (("2" (prop)
                      (("1" (expand Pos_Over 3)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (expand* add_first insert?)
                                (("1"
                                  (expand member_seq (-2 1))
                                  (("1"
                                    (expand finseq_appl)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst 1 "i!1+1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand add_first 1)
                                (("2"
                                  (expand insert?)
                                  (("2"
                                    (expand member_seq (-2 1))
                                    (("2"
                                      (expand finseq_appl)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst 1 "i!1+1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand member_seq -3)
                        (("2" (skosimp)
                          (("2" (case "i!1=0")
                            (("1" (replaces -1)
                              (("1"
                                (expand Pos_Over)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand* add_first insert?)
                                      (("1"
                                        (expand member_seq 1)
                                        (("1"
                                          (expand finseq_appl)
                                          (("1"
                                            (inst 1 0)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand add_first 1)
                                      (("2"
                                        (expand insert?)
                                        (("2"
                                          (expand member_seq 1)
                                          (("2"
                                            (expand finseq_appl)
                                            (("2"
                                              (inst 1 0)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand finseq_appl)
                                      (("3"
                                        (lemma sub_pos_element)
                                        (("3"
                                          (inst -1 fsp2 p1 p2)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand* rest ^ min empty_seq)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand member_seq 2)
                                    (("2"
                                      (expand finseq_appl)
                                      (("2"
                                        (inst 2 i!1-1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (/= const-decl "boolean" notequal nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (O const-decl "finseq" finite_sequences nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (x skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (fsp2 skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (sub_pos_element formula-decl nil orthogonality nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (parallel_pos_in_Pos_Over 0
  (parallel_pos_in_Pos_Over-1 nil 3520093699
   ("" (measure-induct "fsp1`length" "fsp1")
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (hide -2)
            (("1" (expand member_seq -4)
              (("1" (skosimp)
                (("1" (typepred i!1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 fsp2 p)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (assert)
                    (("2" (prop)
                      (("1" (expand Pos_Over 2)
                        (("1" (lift-if)
                          (("1" (expand add_first 2 2)
                            (("1" (expand* insert? finseq_appl)
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand member_seq (-2 1))
                                    (("1"
                                      (expand finseq_appl)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst 1 i!1+1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand member_seq (-2 1))
                                    (("2"
                                      (expand finseq_appl)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst 1 i!1+1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand member_seq -3)
                        (("2" (expand finseq_appl)
                          (("2" (skosimp)
                            (("2" (case "i!1=0")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (expand Pos_Over)
                                  (("1"
                                    (expand add_first 3 2)
                                    (("1"
                                      (expand insert?)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand member_seq 3)
                                            (("1"
                                              (expand finseq_appl)
                                              (("1"
                                                (inst 3 0)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand* rest ^ min empty_seq)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand member_seq 2)
                                    (("2"
                                      (expand finseq_appl)
                                      (("2"
                                        (inst 2 i!1-1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (add_first const-decl "finseq" seq_extras structures)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (sub_pos_in_Pos_Under_aux 0
  (sub_pos_in_Pos_Under_aux-1 nil 3523713933
   ("" (measure-induct "fsp`length" "fsp")
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (hide -2)
            (("1" (expand member_seq -3)
              (("1" (skosimp)
                (("1" (typepred i!1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 p1 p2)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (assert)
                    (("2" (prop)
                      (("1" (expand sub_pos 3)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand* add_first insert?)
                              (("1"
                                (expand member_seq (-2 2))
                                (("1"
                                  (expand finseq_appl)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst 2 i!1+1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand member_seq -2)
                        (("2" (skosimp)
                          (("2" (expand finseq_appl)
                            (("2" (case "i!1=0")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (expand sub_pos)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand* add_first insert?)
                                        (("1"
                                          (expand member_seq 4)
                                          (("1"
                                            (expand finseq_appl)
                                            (("1"
                                              (inst 4 0)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand* rest ^ min empty_seq)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand member_seq 2)
                                    (("2"
                                      (expand finseq_appl)
                                      (("2"
                                        (inst 2 i!1-1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (sub_pos def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (p1 skolem-const-decl "position[variable, symbol, arity]"
     orthogonality nil)
    (x skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (sub_pos_in_Pos_Under 0
  (sub_pos_in_Pos_Under-1 nil 3512224851
   ("" (measure-induct "fsp2`length" "fsp2")
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (hide-all-but (-1 -6))
            (("1" (expand member_seq)
              (("1" (skosimp)
                (("1" (typepred i!1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 fsp1 p1 p2)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (prop)
                    (("1" (expand Pos_Under 3)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (rewrite member_seq_in_seq2set 3)
                            (("1" (rewrite seq2set_comp)
                              (("1"
                                (flatten)
                                (("1"
                                  (rewrite member_seq_in_seq2set -1)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand member_seq -4)
                      (("2" (skosimp)
                        (("2" (expand finseq_appl)
                          (("2" (case "i!1=0")
                            (("1" (replaces -1)
                              (("1"
                                (expand Pos_Under 4)
                                (("1"
                                  (rewrite member_seq_in_seq2set 4)
                                  (("1"
                                    (rewrite seq2set_comp)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide 5)
                                        (("1"
                                          (lemma
                                           member_seq_in_seq2set[position])
                                          (("1"
                                            (inst
                                             -1
                                             "sub_pos(fsp1, x`seq(0))"
                                             p1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 sub_pos_in_Pos_Under_aux)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand* rest ^ min empty_seq)
                              (("2"
                                (assert)
                                (("2"
                                  (expand member_seq 2)
                                  (("2"
                                    (expand finseq_appl)
                                    (("2"
                                      (inst 2 "i!1-1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Under def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (sub_pos def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (O const-decl "finseq" finite_sequences nil)
    (member_seq_in_seq2set formula-decl nil predicate_fseq2set nil)
    (seq2set_comp formula-decl nil predicate_fseq2set nil)
    (sub_pos_in_Pos_Under_aux formula-decl nil orthogonality nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (sub_pos_is_under 0
  (sub_pos_is_under-1 nil 3541265611
   ("" (measure-induct "fsp`length" fsp)
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (hide -2)
            (("1" (expand sub_pos -3)
              (("1" (expand empty_seq)
                (("1" (assert)
                  (("1" (expand member_seq) (("1" (skosimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 p p1)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (prop)
                    (("1" (expand sub_pos -2)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (expand* add_first insert?)
                              (("1"
                                (expand member_seq -2)
                                (("1"
                                  (expand finseq_appl)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand*
                                           member_seq
                                           finseq_appl)
                                          (("2"
                                            (inst 4 "i!1-1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand sub_pos -3)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (prop)
                            (("2" (expand* add_first insert?)
                              (("2"
                                (expand member_seq -2)
                                (("2"
                                  (expand finseq_appl)
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand*
                                           member_seq
                                           finseq_appl)
                                          (("2"
                                            (inst 3 "i!1-1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (PP type-eq-decl nil positions nil)
    (sub_pos def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (<= const-decl "bool" positions nil)
    (/= const-decl "boolean" notequal nil)
    (rest const-decl "finseq" seq_extras structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (x skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (p skolem-const-decl "position[variable, symbol, arity]"
     orthogonality nil)
    (i!1 skolem-const-decl "below[1 + sub_pos(rest(x), p)`length]"
     orthogonality nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (i!1 skolem-const-decl "below[1 + sub_pos(rest(x), p)`length]"
     orthogonality nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (sub_pos_is_PP 0
  (sub_pos_is_PP-1 nil 3542122742
   ("" (measure-induct "fsp`length" fsp)
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (expand sub_pos 1)
            (("1" (expand PP? 1)
              (("1" (expand finseq_appl)
                (("1" (expand empty_seq 1 1) (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 p)
                (("2" (rewrite rest_of_PP_is_PP)
                  (("2" (expand sub_pos 2)
                    (("2" (assert)
                      (("2" (prop)
                        (("2"
                          (rewrite add_first_parallel_pos_to_PP_is_PP)
                          (("2" (skeep)
                            (("2" (expand finseq_appl)
                              (("2"
                                (lemma sub_pos_is_sub_seq)
                                (("2"
                                  (inst -1 "rest(x)" p)
                                  (("2"
                                    (rewrite rest_of_PP_is_PP)
                                    (("2"
                                      (expand*
                                       subseq
                                       member_seq
                                       finseq_appl)
                                      (("2"
                                        (inst -1 i)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (typepred i!1)
                                            (("2"
                                              (expand rest -2 2)
                                              (("2"
                                                (expand rest -1)
                                                (("2"
                                                  (expand* ^ min)
                                                  (("2"
                                                    (expand
                                                     empty_seq
                                                     -1)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (prop)
                                                          (("2"
                                                            (expand
                                                             PP?
                                                             -5)
                                                            (("2"
                                                              (expand
                                                               finseq_appl)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -5
                                                                   1+i!1
                                                                   0)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (sub_pos def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (rest const-decl "finseq" seq_extras structures)
    (sub_pos_is_sub_seq formula-decl nil orthogonality nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (add_first_parallel_pos_to_PP_is_PP formula-decl nil positions nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (sub_pos_is_SPP_TCC1 0
  (sub_pos_is_SPP_TCC1-2 "" 3912758146 ("" (subtype-tcc) nil nil) nil
   shostak
   (sub_pos_is_SPP subtype "orthogonality.fsp"
    "PP[variable, symbol, arity]"))
  (sub_pos_is_SPP_TCC1-1 nil 3541259986 ("" (subtype-tcc) nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (SP? const-decl "bool" positions nil)
    (SPP? const-decl "bool" positions nil))
   nil
   (sub_pos_is_SPP subtype "orthogonality.fsp"
    "PP[variable, symbol, arity]")))
 (sub_pos_is_SPP 0
  (sub_pos_is_SPP-1 nil 3541259987
   ("" (measure-induct "fsp`length" fsp)
    (("1" (skeep)
      (("1" (skeep)
        (("1" (expand SPP?)
          (("1" (flatten)
            (("1" (split)
              (("1" (rewrite sub_pos_is_PP) nil nil)
               ("2" (case "x`length=0")
                (("1" (expand* SP? finseq_appl)
                  (("1" (skeep)
                    (("1" (typepred i)
                      (("1" (expand sub_pos -1)
                        (("1" (lift-if)
                          (("1" (expand empty_seq -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "rest(x)")
                  (("2" (rewrite length_rest)
                    (("2" (inst -1 p s)
                      (("2" (rewrite rest_of_PP_is_PP)
                        (("2" (rewrite rest_of_SP_is_SP)
                          (("2" (expand sub_pos 2)
                            (("2" (assert)
                              (("2"
                                (prop)
                                (("2"
                                  (rewrite
                                   add_first_parallel_pos_to_SP_is_SP)
                                  (("2"
                                    (expand SP? -5)
                                    (("2"
                                      (inst -5 0)
                                      (("2"
                                        (expand finseq_appl)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand SPP?) (("2" (skeep) nil nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (PP? const-decl "bool" positions nil)
    (SPP? const-decl "bool" positions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PP type-eq-decl nil positions nil)
    (sub_pos def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (SP? const-decl "bool" positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length_rest formula-decl nil seq_extras structures)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (rest_of_SP_is_SP formula-decl nil positions nil)
    (SP type-eq-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (sub_pos_is_PP formula-decl nil orthogonality nil))
   shostak))
 (Pos_Under_character 0
  (Pos_Under_character-1 nil 3568648165
   ("" (expand finseq_appl)
    (("" (measure-induct "fsp2`length" fsp2)
      (("" (skeep)
        (("" (skeep)
          (("" (case "x`length=0")
            (("1" (hide -2 -3 -4 1)
              (("1" (expand Pos_Under)
                (("1" (assert)
                  (("1" (expand empty_seq)
                    (("1" (expand member_seq) (("1" (skosimp) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -1 "rest(x)")
              (("2" (rewrite length_rest)
                (("2" (expand Pos_Under -4)
                  (("2" (assert)
                    (("2" (lemma member_seq_in_seq2set[position])
                      (("2"
                        (inst -1
                         "sub_pos(fsp1, x`seq(0)) o Pos_Under(fsp1, rest(x))"
                         p)
                        (("2" (assert)
                          (("2" (rewrite seq2set_comp)
                            (("2" (split)
                              (("1"
                                (inst 2 0)
                                (("1"
                                  (rewrite member_seq_in_seq2set 2)
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (inst -2 fsp1 p)
                                (("2"
                                  (rewrite rest_of_PP_is_PP)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite
                                       member_seq_in_seq2set
                                       -2)
                                      (("2"
                                        (skolem -2 j)
                                        (("2"
                                          (typepred j)
                                          (("2"
                                            (expand rest (-1 -3))
                                            (("2"
                                              (expand* ^ min)
                                              (("2"
                                                (expand empty_seq -1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (inst 6 1+j)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (length_rest formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (seq2set_comp formula-decl nil predicate_fseq2set nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (member_seq_in_seq2set formula-decl nil predicate_fseq2set nil)
    (rest const-decl "finseq" seq_extras structures)
    (sub_pos def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (Pos_Under def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (PP type-eq-decl nil positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (PP? const-decl "bool" positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (union_positions 0
  (union_positions-1 nil 3503131407
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (prop)
          (("1" (case "fsp1`length = 0")
            (("1" (expand seq2set -2)
              (("1" (skosimp)
                (("1" (typepred kk!1) (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (rewrite seq2set_comp)
              (("2" (rewrite seq2set_comp)
                (("2" (flatten)
                  (("2" (case "PP?(add_first(x!1, fsp2))")
                    (("1" (hide 3 4)
                      (("1" (lemma parallel_pos_in_Pos_Over)
                        (("1" (inst -1 fsp1 fsp2 x!1)
                          (("1" (prop)
                            (("1" (rewrite member_seq_in_seq2set) nil
                              nil)
                             ("2" (rewrite member_seq_in_seq2set) nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite add_first_parallel_pos_to_PP_is_PP)
                      (("2" (hide 2)
                        (("2" (expand finseq_appl)
                          (("2" (skeep)
                            (("2" (expand parallel)
                              (("2"
                                (case "fsp2`seq(i) = x!1")
                                (("1"
                                  (lemma
                                   member_seq_in_seq2set[position])
                                  (("1"
                                    (inst-cp -1 fsp1 x!1)
                                    (("1"
                                      (inst
                                       -1
                                       "Pos_Equal(fsp1, fsp2)"
                                       x!1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite
                                           same_pos_in_Pos_Equal)
                                          (("1"
                                            (expand member_seq 1)
                                            (("1"
                                              (expand finseq_appl)
                                              (("1"
                                                (inst 1 i)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (split)
                                  (("1"
                                    (hide 3 4)
                                    (("1"
                                      (lemma sub_pos_in_Pos_Under)
                                      (("1"
                                        (inst
                                         -1
                                         fsp1
                                         fsp2
                                         x!1
                                         "fsp2`seq(i)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite
                                             member_seq_in_seq2set)
                                            (("1"
                                              (rewrite
                                               member_seq_in_seq2set)
                                              (("1"
                                                (rewrite
                                                 member_seq_in_seq2set)
                                                (("1"
                                                  (expand seq2set 1)
                                                  (("1"
                                                    (expand
                                                     finseq_appl)
                                                    (("1"
                                                      (inst 1 i)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 4 5)
                                    (("2"
                                      (lemma pos_up_in_Pos_Over)
                                      (("2"
                                        (expand <=)
                                        (("2"
                                          (skolem -2 p2)
                                          (("2"
                                            (inst -1 fsp1 fsp2 x!1 p2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (rewrite
                                                   member_seq_in_seq2set)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (rewrite empty_0 -1)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (rewrite
                                                       seq_o_empty)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (rewrite
                                                   member_seq_in_seq2set)
                                                  nil
                                                  nil)
                                                 ("4"
                                                  (expand*
                                                   member_seq
                                                   finseq_appl)
                                                  (("4"
                                                    (inst 1 i)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite seq2set_comp)
            (("2" (rewrite seq2set_comp)
              (("2" (split)
                (("1" (lemma Pos_Over_is_sub_seq)
                  (("1" (inst -1 fsp1 fsp2)
                    (("1" (assert)
                      (("1" (expand* subseq finseq_appl)
                        (("1" (expand seq2set -2)
                          (("1" (expand finseq_appl)
                            (("1" (skosimp)
                              (("1"
                                (inst -1 kk!1)
                                (("1"
                                  (rewrite member_seq_in_seq2set)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma Pos_Equal_is_sub_seq)
                  (("2" (inst -1 fsp1 fsp2)
                    (("2" (assert)
                      (("2" (expand seq2set -2)
                        (("2" (expand* subseq finseq_appl)
                          (("2" (skosimp)
                            (("2" (inst -1 kk!1)
                              (("2"
                                (rewrite member_seq_in_seq2set)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma Pos_Under_is_sub_seq)
                  (("3" (inst -1 fsp1 fsp2)
                    (("3" (assert)
                      (("3" (expand seq2set -2)
                        (("3" (expand* subseq finseq_appl)
                          (("3" (skosimp)
                            (("3" (inst -1 kk!1)
                              (("3"
                                (rewrite member_seq_in_seq2set)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subseq const-decl "bool" predicate_fseq2set nil)
    (Pos_Over_is_sub_seq formula-decl nil orthogonality nil)
    (Pos_Equal_is_sub_seq formula-decl nil orthogonality nil)
    (Pos_Under_is_sub_seq formula-decl nil orthogonality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (add_first const-decl "finseq" seq_extras structures)
    (parallel_pos_in_Pos_Over formula-decl nil orthogonality nil)
    (member_seq_in_seq2set formula-decl nil predicate_fseq2set nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (same_pos_in_Pos_Equal formula-decl nil orthogonality nil)
    (<= const-decl "bool" positions nil)
    (TRUE const-decl "bool" booleans nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (pos_up_in_Pos_Over formula-decl nil orthogonality nil)
    (sub_pos_in_Pos_Under formula-decl nil orthogonality nil)
    (parallel const-decl "bool" positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_first_parallel_pos_to_PP_is_PP formula-decl nil positions nil)
    (seq2set_comp formula-decl nil predicate_fseq2set nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (set type-eq-decl nil sets nil)
    (Pos_Under def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil))
   shostak))
 (Pos_Over_character 0
  (Pos_Over_character-1 nil 3564423476
   ("" (measure-induct "fsp1`length" fsp1)
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (hide -2)
            (("1" (skeep)
              (("1" (typepred i)
                (("1" (expand Pos_Over -1)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (expand empty_seq -1)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep 2)
            (("2" (inst -1 "rest(x)")
              (("2" (rewrite length_rest)
                (("2" (inst -1 fsp2)
                  (("2" (rewrite rest_of_PP_is_PP)
                    (("2" (assert)
                      (("2" (case i=0)
                        (("1" (replaces -1)
                          (("1" (expand Pos_Over 2)
                            (("1" (expand add_first 2 3)
                              (("1"
                                (expand insert?)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand Pos_Over 3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand add_first 3)
                                          (("1"
                                            (expand insert?)
                                            (("1"
                                              (lemma sub_pos_is_under)
                                              (("1"
                                                (inst
                                                 -1
                                                 fsp2
                                                 "x`seq(0)"
                                                 "sub_pos(fsp2, x`seq(0))`seq(0)")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     sub_pos_is_sub_seq)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       fsp2
                                                       "x`seq(0)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand*
                                                           subseq
                                                           finseq_appl)
                                                          (("1"
                                                            (inst -1 0)
                                                            (("1"
                                                              (expand*
                                                               member_seq
                                                               finseq_appl)
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   4
                                                                   i!1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand*
                                                     member_seq
                                                     finseq_appl)
                                                    (("2"
                                                      (inst 1 0)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand Pos_Over 5)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -1 0)
                                          (("2"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (inst 6 j!1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand Pos_Over (3 4))
                          (("2" (lift-if)
                            (("2" (prop)
                              (("1"
                                (assert)
                                (("1"
                                  (expand add_first 1 2)
                                  (("1"
                                    (expand add_first 4)
                                    (("1"
                                      (expand insert?)
                                      (("1"
                                        (expand finseq_appl)
                                        (("1"
                                          (inst -2 i-1)
                                          (("1"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (inst 5 j!1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand add_first 1 2)
                                  (("2"
                                    (expand add_first 4)
                                    (("2"
                                      (expand* insert? finseq_appl)
                                      (("2"
                                        (inst -2 i-1)
                                        (("2"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (inst 5 j!1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (inst -1 i)
                                  (("3"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (inst 7 j!1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (add_first const-decl "finseq" seq_extras structures)
    (<= const-decl "bool" positions nil)
    (/= const-decl "boolean" notequal nil)
    (length_rest formula-decl nil seq_extras structures)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (insert? const-decl "finseq" seq_extras structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub_pos def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (sub_pos_is_sub_seq formula-decl nil orthogonality nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (sub_pos_is_under formula-decl nil orthogonality nil)
    (TRUE const-decl "bool" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rest const-decl "finseq" seq_extras structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (Pos_Equal_character 0
  (Pos_Equal_character-1 nil 3572636765
   ("" (measure-induct "fsp1`length" fsp1)
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (skeep)
            (("1" (typepred i)
              (("1" (expand Pos_Equal -1)
                (("1" (expand empty_seq) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skeep 2)
            (("2" (expand Pos_Equal 2)
              (("2" (assert)
                (("2" (case "member_seq(x`seq(0), fsp2)")
                  (("1" (copy -1)
                    (("1" (expand member_seq -2)
                      (("1" (expand finseq_appl)
                        (("1" (skosimp)
                          (("1" (case "i=0")
                            (("1" (inst 2 i!1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand*
                                   add_first
                                   insert?
                                   finseq_appl)
                                  nil
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred i)
                              (("2"
                                (expand Pos_Equal -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand* add_first insert?)
                                    (("2"
                                      (inst -4 "rest(x)")
                                      (("2"
                                        (rewrite length_rest)
                                        (("2"
                                          (inst -4 fsp2)
                                          (("2"
                                            (rewrite rest_of_PP_is_PP)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -4 i-1)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (expand
                                                     finseq_appl)
                                                    (("2"
                                                      (inst 3 j!1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst -1 "rest(x)")
                      (("2" (rewrite length_rest)
                        (("2" (inst -1 fsp2)
                          (("2" (rewrite rest_of_PP_is_PP)
                            (("2" (assert)
                              (("2"
                                (typepred i)
                                (("2"
                                  (expand Pos_Equal -1)
                                  (("2" (inst -2 i) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (x skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (fsp2 skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (i skolem-const-decl "below[Pos_Equal(x, fsp2)`length]"
       orthogonality nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (length_rest formula-decl nil seq_extras structures)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rest const-decl "finseq" seq_extras structures)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (Pos_Equal_is_PP 0
  (Pos_Equal_is_PP-1 nil 3573324669
   ("" (measure-induct "fsp1`length" fsp1)
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (hide -2)
            (("1" (expand* Pos_Equal empty_seq)
              (("1" (expand PP? 1) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (expand Pos_Equal 2)
            (("2" (assert)
              (("2" (prop)
                (("1" (rewrite add_first_parallel_pos_to_PP_is_PP)
                  (("1" (hide 2)
                    (("1" (skeep)
                      (("1" (expand finseq_appl)
                        (("1" (lemma Pos_Equal_is_sub_seq)
                          (("1" (inst -1 "rest(x)" fsp2)
                            (("1" (rewrite rest_of_PP_is_PP)
                              (("1"
                                (assert)
                                (("1"
                                  (expand* subseq finseq_appl)
                                  (("1"
                                    (inst -1 i)
                                    (("1"
                                      (expand member_seq -1)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (expand finseq_appl)
                                          (("1"
                                            (typepred i!1)
                                            (("1"
                                              (expand rest -1)
                                              (("1"
                                                (expand rest -2 2)
                                                (("1"
                                                  (expand* ^ min)
                                                  (("1"
                                                    (expand
                                                     empty_seq
                                                     -1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             PP?
                                                             -5)
                                                            (("1"
                                                              (expand
                                                               finseq_appl)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   1+i!1
                                                                   0)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -2 "rest(x)")
                    (("2" (rewrite length_rest)
                      (("2" (inst -2 fsp2)
                        (("2" (rewrite rest_of_PP_is_PP)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "rest(x)")
                  (("2" (rewrite length_rest)
                    (("2" (inst -1 fsp2)
                      (("2" (rewrite rest_of_PP_is_PP)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (length_rest formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (Pos_Equal_is_sub_seq formula-decl nil orthogonality nil)
    (add_first_parallel_pos_to_PP_is_PP formula-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (Pos_Over_and_Pos_Equal_is_PP 0
  (Pos_Over_and_Pos_Equal_is_PP-1 nil 3572441424
   ("" (skeep)
    (("" (expand o)
      (("" (expand PP? 1)
        (("" (expand finseq_appl)
          (("" (prop)
            (("" (skeep 2)
              (("" (lift-if)
                (("" (lift-if)
                  (("" (lift-if)
                    (("" (lift-if)
                      (("" (assert)
                        (("" (prop)
                          (("1" (lemma Pos_Over_is_PP)
                            (("1" (inst -1 fsp1 fsp2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand PP? -1)
                                  (("1"
                                    (expand finseq_appl)
                                    (("1"
                                      (inst -1 i j)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma Pos_Over_is_sub_seq)
                            (("2" (inst-cp -1 fsp2 fsp1)
                              (("2"
                                (inst -1 fsp1 fsp2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma Pos_Over_character)
                                    (("2"
                                      (inst-cp -1 fsp2 fsp1)
                                      (("2"
                                        (inst -1 fsp1 fsp2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand*
                                             subseq
                                             finseq_appl)
                                            (("2"
                                              (inst -1 i)
                                              (("2"
                                                (inst -3 i)
                                                (("2"
                                                  (inst
                                                   -2
                                                   "j - Pos_Over(fsp1, fsp2)`length")
                                                  (("2"
                                                    (inst
                                                     -4
                                                     "j - Pos_Over(fsp1, fsp2)`length")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand*
                                                         member_seq
                                                         finseq_appl)
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (expand*
                                                                 add_first
                                                                 insert?)
                                                                (("1"
                                                                  (expand
                                                                   PP?
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     finseq_appl)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       0
                                                                       i!2+1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (expand*
                                                                 add_first
                                                                 insert?)
                                                                (("1"
                                                                  (expand
                                                                   PP?
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     finseq_appl)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       i!1+1
                                                                       0)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (expand
                                                                   parallel
                                                                   4)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (replaces
                                                                       -4)
                                                                      (("1"
                                                                        (replaces
                                                                         -4)
                                                                        (("1"
                                                                          (expand
                                                                           PP?
                                                                           -7)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (expand
                                                                               <=)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -2)
                                                                                  (("1"
                                                                                    (case
                                                                                     "p1!1`length=0")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       empty_0)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           seq_o_empty)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       o
                                                                                       -2)
                                                                                      (("2"
                                                                                        (decompose-equality)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               finseq_appl)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 i!1
                                                                                 j!1)
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (expand
                                                                                     parallel)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         <=
                                                                                         (-1
                                                                                          -2
                                                                                          1))
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "p1!1 o p1!2")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 o_assoc)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     <=)
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -2)
                                                                                        (("2"
                                                                                          (case
                                                                                           "p1!1`length=0")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             empty_0)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 seq_o_empty)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             o
                                                                                             -2)
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               -2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -4)
                                                                      (("2"
                                                                        (replaces
                                                                         -4)
                                                                        (("2"
                                                                          (case
                                                                           "i!2 = j!2")
                                                                          (("1"
                                                                            (expand
                                                                             <=)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (replaces
                                                                                 -2)
                                                                                (("1"
                                                                                  (case
                                                                                   " p1!1`length=0")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     empty_0)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         seq_o_empty)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     o
                                                                                     -3)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       -3)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             PP?
                                                                             -8)
                                                                            (("2"
                                                                              (expand
                                                                               finseq_appl)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -8
                                                                                   i!2
                                                                                   j!2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       parallel)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           <=
                                                                                           (-1
                                                                                            -3
                                                                                            7))
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 7
                                                                                                 "p1!1 o p1!2")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   o_assoc)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma Pos_Equal_is_sub_seq)
                            (("3" (inst -1 fsp1 fsp2)
                              (("3"
                                (assert)
                                (("3"
                                  (expand* subseq finseq_appl)
                                  (("3"
                                    (inst
                                     -1
                                     "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + j")
                                    (("3"
                                      (lemma Pos_Over_is_sub_seq)
                                      (("3"
                                        (inst -1 fsp1 fsp2)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (expand*
                                             subseq
                                             finseq_appl)
                                            (("3"
                                              (inst -1 i)
                                              (("3"
                                                (expand*
                                                 member_seq
                                                 finseq_appl)
                                                (("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (lemma
                                                     Pos_Over_character)
                                                    (("3"
                                                      (inst
                                                       -1
                                                       fsp1
                                                       fsp2)
                                                      (("3"
                                                        (lemma
                                                         Pos_Equal_character)
                                                        (("3"
                                                          (inst
                                                           -1
                                                           fsp1
                                                           fsp2)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + j")
                                                              (("3"
                                                                (inst
                                                                 -2
                                                                 i)
                                                                (("3"
                                                                  (split)
                                                                  (("1"
                                                                    (expand*
                                                                     add_first
                                                                     insert?)
                                                                    (("1"
                                                                      (expand
                                                                       PP?
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               0
                                                                               j!1+1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (expand
                                                                       parallel)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (replaces
                                                                           -4)
                                                                          (("1"
                                                                            (replaces
                                                                             -4)
                                                                            (("1"
                                                                              (case
                                                                               i!1=i!2)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -3)
                                                                                  (("1"
                                                                                    (case
                                                                                     j!2=j!1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       PP?
                                                                                       -6)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -6
                                                                                           j!2
                                                                                           j!1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             finseq_appl)
                                                                                            (("2"
                                                                                              (expand
                                                                                               parallel)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 PP?
                                                                                 -6)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -6
                                                                                       i!1
                                                                                       i!2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -4)
                                                                          (("2"
                                                                            (replaces
                                                                             -4)
                                                                            (("2"
                                                                              (case
                                                                               i!2=i!1)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -3)
                                                                                  (("1"
                                                                                    (case
                                                                                     j!2=j!1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       PP?
                                                                                       -6)
                                                                                      (("2"
                                                                                        (expand
                                                                                         finseq_appl)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -6
                                                                                             j!2
                                                                                             j!1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 parallel)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 PP?
                                                                                 -6)
                                                                                (("2"
                                                                                  (expand
                                                                                   finseq_appl)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -6
                                                                                       i!2
                                                                                       i!1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           parallel)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (lemma Pos_Over_is_sub_seq)
                            (("4" (inst-cp -1 fsp2 fsp1)
                              (("4"
                                (inst -1 fsp1 fsp2)
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand* subseq finseq_appl)
                                    (("4"
                                      (inst -1 j)
                                      (("4"
                                        (inst
                                         -2
                                         "i - Pos_Over(fsp1, fsp2)`length")
                                        (("4"
                                          (expand*
                                           member_seq
                                           finseq_appl)
                                          (("4"
                                            (skosimp*)
                                            (("4"
                                              (lemma
                                               Pos_Over_character)
                                              (("4"
                                                (inst-cp -1 fsp2 fsp1)
                                                (("4"
                                                  (inst -1 fsp1 fsp2)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (inst -1 j)
                                                      (("4"
                                                        (inst
                                                         -2
                                                         "i - Pos_Over(fsp1, fsp2)`length")
                                                        (("4"
                                                          (split -1)
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand*
                                                               add_first
                                                               insert?)
                                                              (("1"
                                                                (expand
                                                                 PP?
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   finseq_appl)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     i!2+1
                                                                     0)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (expand*
                                                               add_first
                                                               insert?)
                                                              (("1"
                                                                (expand
                                                                 PP?
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   finseq_appl)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     0
                                                                     i!1+1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (replaces
                                                                 -3)
                                                                (("2"
                                                                  (replaces
                                                                   -3)
                                                                  (("2"
                                                                    (expand
                                                                     parallel)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (case
                                                                         "i!2=j!2")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             <=)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (replaces
                                                                                 -3)
                                                                                (("1"
                                                                                  (case
                                                                                   "p1!3`length=0")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     empty_0)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         seq_o_empty)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     o
                                                                                     -1)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           PP?
                                                                           -8)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -8
                                                                               i!2
                                                                               j!2)
                                                                              (("2"
                                                                                (expand
                                                                                 finseq_appl)
                                                                                (("2"
                                                                                  (expand
                                                                                   parallel)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       <=
                                                                                       (-1
                                                                                        -3
                                                                                        7))
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (inst
                                                                                             7
                                                                                             "p1!1 o p1!2")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               o_assoc)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "i!1=j!1")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             <=)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (replaces
                                                                                 -2)
                                                                                (("1"
                                                                                  (case
                                                                                   "p1!2`length=0")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     empty_0)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         seq_o_empty)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     o
                                                                                     -1)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           PP?
                                                                           -7)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -7
                                                                               i!1
                                                                               j!1)
                                                                              (("2"
                                                                                (expand
                                                                                 finseq_appl)
                                                                                (("2"
                                                                                  (expand
                                                                                   parallel)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       <=
                                                                                       (-1
                                                                                        -2
                                                                                        7))
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (inst
                                                                                             7
                                                                                             "p1!1 o p1!2")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               o_assoc)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (lemma Pos_Over_is_PP)
                            (("5" (inst -1 fsp2 fsp1)
                              (("5"
                                (assert)
                                (("5"
                                  (expand PP? -1)
                                  (("5"
                                    (expand finseq_appl)
                                    (("5"
                                      (inst
                                       -1
                                       "i - Pos_Over(fsp1, fsp2)`length"
                                       "j - Pos_Over(fsp1, fsp2)`length")
                                      (("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (lemma Pos_Equal_is_sub_seq)
                            (("6" (inst -1 fsp1 fsp2)
                              (("6"
                                (lemma Pos_Over_is_sub_seq)
                                (("6"
                                  (inst -1 fsp2 fsp1)
                                  (("6"
                                    (assert)
                                    (("6"
                                      (expand* subseq finseq_appl)
                                      (("6"
                                        (inst
                                         -1
                                         "i - Pos_Over(fsp1, fsp2)`length")
                                        (("6"
                                          (inst
                                           -2
                                           "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + j")
                                          (("6"
                                            (expand*
                                             member_seq
                                             finseq_appl)
                                            (("6"
                                              (skosimp*)
                                              (("6"
                                                (lemma
                                                 Pos_Equal_character)
                                                (("6"
                                                  (lemma
                                                   Pos_Over_character)
                                                  (("6"
                                                    (inst -1 fsp2 fsp1)
                                                    (("6"
                                                      (inst
                                                       -2
                                                       fsp1
                                                       fsp2)
                                                      (("6"
                                                        (assert)
                                                        (("6"
                                                          (inst
                                                           -1
                                                           "i - Pos_Over(fsp1, fsp2)`length")
                                                          (("6"
                                                            (inst
                                                             -2
                                                             "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + j")
                                                            (("6"
                                                              (skosimp)
                                                              (("6"
                                                                (split)
                                                                (("1"
                                                                  (expand*
                                                                   add_first
                                                                   insert?)
                                                                  (("1"
                                                                    (expand
                                                                     PP?
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       finseq_appl)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         0
                                                                         i!2+1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (replaces
                                                                     -3)
                                                                    (("2"
                                                                      (replaces
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         parallel)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (case
                                                                             "i!1=j!1")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 <=)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (case
                                                                                     "i!2=j!2")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -3)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       PP?
                                                                                       -5)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -5
                                                                                           i!2
                                                                                           j!2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             finseq_appl)
                                                                                            (("2"
                                                                                              (expand
                                                                                               parallel
                                                                                               -5)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   <=
                                                                                                   7)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -3
                                                                                                     -2
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       7
                                                                                                       p1!2)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               PP?
                                                                               -6)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -6
                                                                                   i!1
                                                                                   j!1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "i!1=j!1")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "i!2=j!2")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     <=)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (case
                                                                                           "p1!1`length=0")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             empty_0)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 seq_o_empty)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             o
                                                                                             -1)
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   PP?
                                                                                   -5)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -5
                                                                                       i!2
                                                                                       j!2)
                                                                                      (("2"
                                                                                        (expand
                                                                                         finseq_appl)
                                                                                        (("2"
                                                                                          (expand
                                                                                           parallel)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               PP?
                                                                               -6)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -6
                                                                                   i!1
                                                                                   j!1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("7" (lemma Pos_Over_is_sub_seq)
                            (("7" (inst -1 fsp1 fsp2)
                              (("7"
                                (lemma Pos_Equal_is_sub_seq)
                                (("7"
                                  (inst -1 fsp1 fsp2)
                                  (("7"
                                    (assert)
                                    (("7"
                                      (expand* subseq finseq_appl)
                                      (("7"
                                        (inst
                                         -1
                                         "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + i")
                                        (("7"
                                          (inst -2 j)
                                          (("7"
                                            (expand*
                                             member_seq
                                             finseq_appl)
                                            (("7"
                                              (skosimp*)
                                              (("7"
                                                (lemma
                                                 Pos_Over_character)
                                                (("7"
                                                  (inst -1 fsp1 fsp2)
                                                  (("7"
                                                    (lemma
                                                     Pos_Equal_character)
                                                    (("7"
                                                      (inst
                                                       -1
                                                       fsp1
                                                       fsp2)
                                                      (("7"
                                                        (assert)
                                                        (("7"
                                                          (inst
                                                           -1
                                                           "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + i")
                                                          (("7"
                                                            (inst -2 j)
                                                            (("7"
                                                              (skosimp)
                                                              (("7"
                                                                (split)
                                                                (("1"
                                                                  (expand*
                                                                   add_first
                                                                   insert?)
                                                                  (("1"
                                                                    (expand
                                                                     PP?
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       finseq_appl)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         j!1+1
                                                                         0)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (replaces
                                                                     -3)
                                                                    (("2"
                                                                      (replaces
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         parallel)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (case
                                                                             "i!1=i!2")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "j!1=j!2")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   -3)
                                                                                  (("2"
                                                                                    (expand
                                                                                     PP?
                                                                                     -6)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -6
                                                                                         j!1
                                                                                         j!2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           finseq_appl)
                                                                                          (("2"
                                                                                            (expand
                                                                                             parallel)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               PP?
                                                                               -6)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -6
                                                                                   i!1
                                                                                   i!2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "i!1=i!2")
                                                                            (("1"
                                                                              (case
                                                                               "j!1=j!2")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 PP?
                                                                                 -8)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     j!1
                                                                                     j!2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       finseq_appl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         parallel)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               PP?
                                                                               -6)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -6
                                                                                   i!1
                                                                                   i!2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("8" (lemma Pos_Over_is_sub_seq)
                            (("8" (lemma Pos_Equal_is_sub_seq)
                              (("8"
                                (inst -1 fsp1 fsp2)
                                (("8"
                                  (inst -2 fsp2 fsp1)
                                  (("8"
                                    (assert)
                                    (("8"
                                      (expand* subseq finseq_appl)
                                      (("8"
                                        (inst
                                         -1
                                         "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + i")
                                        (("8"
                                          (inst
                                           -2
                                           "j - Pos_Over(fsp1, fsp2)`length")
                                          (("8"
                                            (expand*
                                             member_seq
                                             finseq_appl)
                                            (("8"
                                              (skosimp*)
                                              (("8"
                                                (lemma
                                                 Pos_Over_character)
                                                (("8"
                                                  (lemma
                                                   Pos_Equal_character)
                                                  (("8"
                                                    (inst -1 fsp1 fsp2)
                                                    (("8"
                                                      (inst
                                                       -2
                                                       fsp2
                                                       fsp1)
                                                      (("8"
                                                        (assert)
                                                        (("8"
                                                          (inst
                                                           -1
                                                           "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + i")
                                                          (("8"
                                                            (inst
                                                             -2
                                                             "j - Pos_Over(fsp1, fsp2)`length")
                                                            (("8"
                                                              (skosimp)
                                                              (("8"
                                                                (split)
                                                                (("1"
                                                                  (expand*
                                                                   add_first
                                                                   insert?)
                                                                  (("1"
                                                                    (expand
                                                                     PP?
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       finseq_appl)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         i!1+1
                                                                         0)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (replaces
                                                                     -3)
                                                                    (("2"
                                                                      (replaces
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         parallel)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (case
                                                                             i!1=j!2)
                                                                            (("1"
                                                                              (case
                                                                               "i!2=j!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 PP?
                                                                                 -7)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -7
                                                                                     i!2
                                                                                     j!1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       finseq_appl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         parallel)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               PP?
                                                                               -5)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -5
                                                                                   i!1
                                                                                   j!2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (expand
                                                                                       parallel)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           <=
                                                                                           (-1
                                                                                            -2
                                                                                            7))
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 7
                                                                                                 "p1!1 o p1!2")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   o_assoc)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             i!2=j!1)
                                                                            (("1"
                                                                              (case
                                                                               "j!2=i!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 PP?
                                                                                 -6)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -6
                                                                                     j!2
                                                                                     i!1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       finseq_appl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         parallel)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               PP?
                                                                               -6)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -6
                                                                                   i!2
                                                                                   j!1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (expand
                                                                                       parallel)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("9" (lemma Pos_Equal_is_PP)
                            (("9" (inst -1 fsp1 fsp2)
                              (("9"
                                (assert)
                                (("9"
                                  (expand PP? -1)
                                  (("9"
                                    (expand finseq_appl)
                                    (("9"
                                      (inst
                                       -1
                                       "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + i"
                                       "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + j")
                                      (("9" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PP? const-decl "bool" positions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Pos_Equal_is_PP formula-decl nil orthogonality nil)
    (Pos_Equal_is_sub_seq formula-decl nil orthogonality nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Pos_Equal_character formula-decl nil orthogonality nil)
    (Pos_Over_is_sub_seq formula-decl nil orthogonality nil)
    (Pos_Over_character formula-decl nil orthogonality nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" positions nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (parallel const-decl "bool" positions nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Pos_Over_is_PP formula-decl nil orthogonality nil)
    (< const-decl "bool" reals nil) (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (Pos_Over_and_Pos_Equal_dominance 0
  (Pos_Over_and_Pos_Equal_dominance-1 nil 3568629679
   ("" (skeep)
    (("" (skeep)
      (("" (typepred i)
        (("" (lemma union_positions)
          (("" (inst -1 fsp1 fsp2)
            (("" (expand SPP?)
              (("" (flatten)
                (("" (assert)
                  (("" (case "seq2set(fsp1)(fsp1`seq(i))")
                    (("1" (replaces -2)
                      (("1" (rewrite seq2set_comp)
                        (("1" (split)
                          (("1" (rewrite seq2set_comp)
                            (("1" (split)
                              (("1"
                                (lemma member_seq_in_seq2set[position])
                                (("1"
                                  (inst
                                   -1
                                   "Pos_Over(fsp1, fsp2)"
                                   "fsp1`seq(i)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand* member_seq finseq_appl)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (typepred i!1)
                                          (("1"
                                            (inst 1 i!1)
                                            (("1"
                                              (expand <=)
                                              (("1"
                                                (inst 1 empty_seq)
                                                (("1"
                                                  (rewrite seq_o_empty)
                                                  (("1"
                                                    (expand o)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand o)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma member_seq_in_seq2set[position])
                                (("2"
                                  (inst
                                   -1
                                   "Pos_Equal(fsp1, fsp2)"
                                   "fsp1`seq(i)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand* member_seq finseq_appl)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred i!1)
                                          (("2"
                                            (inst
                                             1
                                             "Pos_Over(fsp1, fsp2)`length + Pos_Over(fsp2, fsp1)`length + i!1")
                                            (("1"
                                              (expand o)
                                              (("1"
                                                (expand <=)
                                                (("1"
                                                  (inst 1 empty_seq)
                                                  (("1"
                                                    (rewrite
                                                     seq_o_empty)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand o)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma member_seq_in_seq2set[position])
                            (("2"
                              (inst -1 "Pos_Under(fsp1, fsp2)"
                               "fsp1`seq(i)")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma Pos_Under_character)
                                  (("2"
                                    (inst -1 fsp1 fsp2 "fsp1`seq(i)")
                                    (("2"
                                      (expand finseq_appl)
                                      (("2"
                                        (skolem -1 j)
                                        (("2"
                                          (lemma sub_pos_is_under)
                                          (("2"
                                            (inst
                                             -1
                                             fsp1
                                             "fsp2`seq(j)"
                                             "fsp1`seq(i)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand <= -1)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (lemma
                                                       pos_up_in_Pos_Over)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         fsp2
                                                         fsp1
                                                         "fsp2`seq(j)"
                                                         "p1!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               member_seq
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 finseq_appl)
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "Pos_Over(fsp1,fsp2)`length + i!1")
                                                                    (("1"
                                                                      (expand
                                                                       o
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         <=
                                                                         2)
                                                                        (("1"
                                                                          (inst
                                                                           2
                                                                           p1!1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       o
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               empty_0)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   seq_o_empty)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               member_seq
                                                               1)
                                                              (("3"
                                                                (expand
                                                                 finseq_appl)
                                                                (("3"
                                                                  (inst
                                                                   1
                                                                   j)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (expand
                                                               member_seq
                                                               1)
                                                              (("4"
                                                                (expand
                                                                 finseq_appl)
                                                                (("4"
                                                                  (inst
                                                                   1
                                                                   i)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand seq2set 1)
                      (("2" (expand finseq_appl)
                        (("2" (inst 1 i) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (Pos_Under def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (O const-decl "finseq" finite_sequences nil)
    (seq2set_comp formula-decl nil predicate_fseq2set nil)
    (i!1 skolem-const-decl "below[Pos_Over(fsp2, fsp1)`length]"
     orthogonality nil)
    (empty_0 formula-decl nil seq_extras structures)
    (pos_up_in_Pos_Over formula-decl nil orthogonality nil)
    (sub_pos_is_under formula-decl nil orthogonality nil)
    (Pos_Under_character formula-decl nil orthogonality nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "below[Pos_Equal(fsp1, fsp2)`length]"
     orthogonality nil)
    (member_seq_in_seq2set formula-decl nil predicate_fseq2set nil)
    (fsp1 skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (fsp2 skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (i!1 skolem-const-decl "below[Pos_Over(fsp1, fsp2)`length]"
     orthogonality nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (<= const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (SPP? const-decl "bool" positions nil)
    (union_positions formula-decl nil orthogonality nil))
   shostak))
 (divergence_in_Pos_Over_aux_TCC1 0
  (divergence_in_Pos_Over_aux_TCC1-2 "" 3912758157
   ("" (skosimp) (("" (expand* "#" PP? finseq_appl) nil nil)) nil) nil
   shostak
   (divergence_in_Pos_Over_aux subtype
    "set2seq[position[variable, symbol, arity]].#(orthogonality.p)"
    "PP[variable, symbol, arity]"))
  (divergence_in_Pos_Over_aux_TCC1-1 nil 3573980593
   ("" (then (skosimp) (expand* "#" PP? finseq_appl)) nil)
   ((PP? const-decl "bool" positions nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures))
   nil
   (divergence_in_Pos_Over_aux subtype
    "set2seq[position[variable, symbol, arity]].#(orthogonality.p)"
    "PP[variable, symbol, arity]")))
 (divergence_in_Pos_Over_aux_TCC2 0
  (divergence_in_Pos_Over_aux_TCC2-3 "" 3803860916
   ("" (skosimp)
    (("" (expand parallel_reduction_fix?)
      (("" (skosimp)
        (("" (expand* member_seq finseq_appl)
          (("" (skosimp)
            (("" (lemma Pos_Over_character)
              (("" (inst -1 "#(p!1)" fsp2!1)
                (("" (expand "#" -1 1)
                  (("" (expand SPP?)
                    (("" (flatten)
                      (("" (expand PP? -1 1)
                        (("" (assert)
                          (("" (inst -1 i!1)
                            (("" (split)
                              (("1"
                                (replace -2 -1 rl)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (lemma
                                     replace_par_pos_preservs_pos)
                                    (("1"
                                      (inst
                                       -1
                                       fsp2!1
                                       "sigma_rhs(fss!1, fse!1)"
                                       p!1
                                       t!1)
                                      (("1"
                                        (expand SPP?)
                                        (("1"
                                          (expand sigma_rhs 1)
                                          (("1"
                                            (expand empty_seq)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (rewrite
                                                 add_first_parallel_pos_to_SP_is_SP)
                                                nil
                                                nil)
                                               ("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2 -1 rl)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (lemma
                                       replace_par_pos_preservs_PP)
                                      (("2"
                                        (inst
                                         -1
                                         fsp2!1
                                         "sigma_rhs(fss!1, fse!1)"
                                         t!1)
                                        (("2"
                                          (expand sigma_rhs -1 1)
                                          (("2"
                                            (expand* SPP? finseq_appl)
                                            (("2"
                                              (inst -1 j!1)
                                              (("2"
                                                (replace -7 -1 rl)
                                                (("2"
                                                  (lemma
                                                   closed_positions)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     p!1
                                                     "fsp2!1`seq(j!1)"
                                                     t2!1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (SPP? const-decl "bool" positions nil)
    (PP? const-decl "bool" positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (PP type-eq-decl nil positions nil) (< const-decl "bool" reals nil)
    (closed_positions formula-decl nil positions nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (SP type-eq-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (Pos_Over_character formula-decl nil orthogonality nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis
     nil))
   shostak
   (divergence_in_Pos_Over_aux subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)"))
  (divergence_in_Pos_Over_aux_TCC2-2 "" 3756670241
   ("" (skosimp)
    (("" (expand parallel_reduction_fix?)
      (("" (skosimp)
        (("" (expand* member_seq finseq_appl)
          (("" (skosimp)
            (("" (lemma Pos_Over_character)
              (("" (inst -1 "#(p!1)" fsp2!1)
                (("" (expand "#" -1 1)
                  (("" (expand SPP?)
                    (("" (flatten)
                      (("" (expand PP? -1 1)
                        (("" (assert)
                          (("" (inst -1 i!1)
                            (("" (split)
                              (("1"
                                (replace -9 -1 rl)
                                (("1"
                                  (hide -9)
                                  (("1"
                                    (lemma
                                     replace_par_pos_preservs_pos)
                                    (("1"
                                      (inst
                                       -1
                                       fsp2!1
                                       "sigma_rhs(fss!1, fse!1)"
                                       p!1
                                       t!1)
                                      (("1"
                                        (expand SPP?)
                                        (("1"
                                          (expand sigma_rhs 1)
                                          (("1"
                                            (expand empty_seq)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (rewrite
                                                 add_first_parallel_pos_to_SP_is_SP)
                                                nil
                                                nil)
                                               ("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -9 -1 rl)
                                (("2"
                                  (hide -9)
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (lemma
                                       replace_par_pos_preservs_PP)
                                      (("2"
                                        (inst
                                         -1
                                         fsp2!1
                                         "sigma_rhs(fss!1, fse!1)"
                                         t!1)
                                        (("2"
                                          (expand sigma_rhs -1 1)
                                          (("2"
                                            (expand* SPP? finseq_appl)
                                            (("2"
                                              (inst -1 j!1)
                                              (("2"
                                                (replace -8 -1 rl)
                                                (("2"
                                                  (lemma
                                                   closed_positions)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     p!1
                                                     "fsp2!1`seq(j!1)"
                                                     t2!1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (closed_positions formula-decl nil positions nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (SP type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (SPP? const-decl "bool" positions nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis
     nil))
   shostak
   (divergence_in_Pos_Over_aux subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)"))
  (divergence_in_Pos_Over_aux_TCC2-1 nil 3573980593
   ("" (skosimp)
    (("" (expand parallel_reduction_fix?)
      (("" (skosimp)
        (("" (expand* member_seq finseq_appl)
          (("" (skosimp)
            (("" (lemma Pos_Over_character)
              (("" (inst -1 "#(p!1)" fsp2!1)
                (("" (expand "#" -1 1)
                  (("" (expand SPP?)
                    (("" (flatten)
                      (("" (expand PP? -1 1)
                        (("" (assert)
                          (("" (inst -1 i!1)
                            (("" (split)
                              (("1"
                                (replace -2 -1 rl)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (lemma
                                     replace_par_pos_preservs_pos)
                                    (("1"
                                      (inst
                                       -1
                                       fsp2!1
                                       "sigma_rhs(fss!1, fse!1)"
                                       p!1
                                       t!1)
                                      (("1"
                                        (expand SPP?)
                                        (("1"
                                          (expand sigma_rhs 1)
                                          (("1"
                                            (expand empty_seq)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (rewrite
                                                 add_first_parallel_pos_to_SP_is_SP)
                                                nil
                                                nil)
                                               ("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2 -1 rl)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (lemma
                                       replace_par_pos_preservs_PP)
                                      (("2"
                                        (inst
                                         -1
                                         fsp2!1
                                         "sigma_rhs(fss!1, fse!1)"
                                         t!1)
                                        (("2"
                                          (expand sigma_rhs -1 1)
                                          (("2"
                                            (expand* SPP? finseq_appl)
                                            (("2"
                                              (inst -1 j!1)
                                              (("2"
                                                (replace -7 -1 rl)
                                                (("2"
                                                  (lemma
                                                   closed_positions)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     p!1
                                                     "fsp2!1`seq(j!1)"
                                                     t2!1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (SP type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (closed_positions formula-decl nil positions nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (SPP? const-decl "bool" positions nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil))
   nil
   (divergence_in_Pos_Over_aux subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)")))
 (divergence_in_Pos_Over_aux_TCC3 0
  (divergence_in_Pos_Over_aux_TCC3-2 "" 3756670289
   ("" (skosimp)
    (("" (expand SPP?)
      (("" (rewrite complement_pos_is_PP)
        (("" (flatten)
          (("" (expand* SP? finseq_appl)
            (("" (skosimp)
              (("" (lemma complement_pos_character)
                ((""
                  (inst -1 fsp2!1 p!1
                   "complement_pos(p!1, fsp2!1)`seq(i!1)")
                  (("" (assert)
                    (("" (prop)
                      (("1" (skosimp)
                        (("1" (inst - i!2)
                          (("1" (rewrite pos_subterm_ax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "seq2set")
                        (("2" (expand "finseq_appl")
                          (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complement_pos_is_PP formula-decl nil orthogonality_basis nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (SP? const-decl "bool" positions nil)
    (complement_pos_character formula-decl nil orthogonality_basis nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (below type-eq-decl nil naturalnumbers nil)
    (term type-decl nil term_adt nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (complement_pos def-decl
     "finseq[position[variable, symbol, arity]]" orthogonality_basis
     nil)
    (< const-decl "bool" reals nil)
    (SPP? const-decl "bool" positions nil))
   shostak
   (divergence_in_Pos_Over_aux subtype
    "orthogonality_basis[orthogonality.variable, orthogonality.symbol, orthogonality.arity].complement_pos(orthogonality.p, orthogonality.fsp2)"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].SPP(subterm[orthogonality.variable, orthogonality.symbol, orthogonality.arity].subtermOF(orthogonality.t, orthogonality.p))"))
  (divergence_in_Pos_Over_aux_TCC3-1 nil 3573980593
   ("" (skosimp)
    (("" (expand SPP?)
      (("" (rewrite complement_pos_is_PP)
        (("" (flatten)
          (("" (expand* SP? finseq_appl)
            (("" (skosimp)
              (("" (lemma complement_pos_character)
                ((""
                  (inst -1 fsp2!1 p!1
                   "complement_pos(p!1, fsp2!1)`seq(i!1)")
                  (("" (assert)
                    (("" (prop)
                      (("1" (skosimp)
                        (("1" (inst -6 i!2)
                          (("1" (rewrite pos_subterm_ax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "seq2set")
                        (("2" (expand "finseq_appl")
                          (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SPP? const-decl "bool" positions nil)
    (complement_pos def-decl
     "finseq[position[variable, symbol, arity]]" orthogonality_basis
     nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (term type-decl nil term_adt nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (complement_pos_character formula-decl nil orthogonality_basis nil)
    (SP? const-decl "bool" positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (complement_pos_is_PP formula-decl nil orthogonality_basis nil))
   nil
   (divergence_in_Pos_Over_aux subtype
    "orthogonality_basis[orthogonality.variable, orthogonality.symbol, orthogonality.arity].complement_pos(orthogonality.p, orthogonality.fsp2)"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].SPP(subterm[orthogonality.variable, orthogonality.symbol, orthogonality.arity].subtermOF(orthogonality.t, orthogonality.p))")))
 (divergence_in_Pos_Over_aux 0
  (divergence_in_Pos_Over_aux-1 nil 3573982917
   ("" (measure-induct "fsp2`length" fsp2)
    (("1" (skeep)
      (("1" (skeep)
        (("1" (case "x`length=0")
          (("1" (hide -2)
            (("1" (expand complement_pos)
              (("1" (expand empty_seq)
                (("1" (assert)
                  (("1" (expand parallel_reduction_fix?)
                    (("1" (inst 1 empty_seq empty_seq)
                      (("1" (expand empty_seq)
                        (("1" (skosimp)
                          (("1" (expand replace_par_pos)
                            (("1" (assert)
                              (("1"
                                (expand subtermsOF 1)
                                (("1"
                                  (expand sigma_lhs 1)
                                  (("1"
                                    (expand empty_seq)
                                    (("1"
                                      (decompose-equality 1)
                                      (("1" (skeep) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "subset?")
                          (("2" (expand "subset?")
                            (("2" (skeep)
                              (("2"
                                (expand member)
                                (("2"
                                  (expand "seq2set")
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (typepred kk)
                                        (("2"
                                          (hide (-2 1))
                                          (("2"
                                            (expand empty_seq)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand parallel_reduction_fix? -3)
            (("2" (skosimp)
              (("2" (expand* replace_par_pos finseq_appl)
                (("2" (assert)
                  (("2" (inst -1 "rest(x)")
                    (("2" (rewrite length_rest)
                      (("2"
                        (inst -1 E p
                         "replaceTerm(t, sigma_rhs(fss!1, fse!1)`seq(0), x`seq(0))"
                         t2)
                        (("2" (expand SPP?)
                          (("2" (rewrite rest_of_PP_is_PP)
                            (("2" (flatten)
                              (("2"
                                (prop)
                                (("1"
                                  (expand complement_pos 2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand
                                         parallel_reduction_fix?)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst
                                             1
                                             "add_first(fse!1`seq(0), fse!2)"
                                             "add_first(fss!1`seq(0), fss!2)")
                                            (("1"
                                              (expand
                                               add_first
                                               1
                                               (1 2 3 4))
                                              (("1"
                                                (expand insert?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand*
                                                       add_first
                                                       insert?
                                                       finseq_appl)
                                                      (("1"
                                                        (expand
                                                         subtermsOF
                                                         1)
                                                        (("1"
                                                          (expand
                                                           sigma_lhs
                                                           1)
                                                          (("1"
                                                            (expand
                                                             finseq_appl)
                                                            (("1"
                                                              (decompose-equality)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     subtermsOF
                                                                     -11)
                                                                    (("1"
                                                                      (expand
                                                                       sigma_lhs
                                                                       -11)
                                                                      (("1"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -11)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             0)
                                                                            (("1"
                                                                              (typepred
                                                                               "choose(complement_pos_set(<=, o)(p, x`seq(0)))")
                                                                              (("1"
                                                                                (expand
                                                                                 complement_pos_set
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   emptyset)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       2
                                                                                       rl)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         pos_subterm)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           p
                                                                                           "choose(complement_pos_set(<=, o)(p, x`seq(0)))"
                                                                                           t)
                                                                                          (("1"
                                                                                            (expand*
                                                                                             SP?
                                                                                             finseq_appl)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -12
                                                                                               0)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand*
                                                                             SP?
                                                                             finseq_appl)
                                                                            (("2"
                                                                              (inst
                                                                               -10
                                                                               x1!1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     complement_pos_character)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "rest(x)"
                                                                       p
                                                                       "complement_pos(p, rest(x))`seq(x!1 - 1)")
                                                                      (("1"
                                                                        (expand
                                                                         "seq2set")
                                                                        (("1"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (typepred
                                                                                 i!1)
                                                                                (("1"
                                                                                  (expand
                                                                                   rest
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     rest
                                                                                     -2
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand*
                                                                                       ^
                                                                                       min
                                                                                       empty_seq)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (expand
                                                                                               subtermsOF
                                                                                               -6)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 sigma_lhs
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   finseq_appl)
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     -6)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x!1 - 1")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         6
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -7)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             pos_subterm)
                                                                                                            (("1"
                                                                                                              (inst-cp
                                                                                                               -1
                                                                                                               p
                                                                                                               "complement_pos(p, rest(x))`seq(x!1 - 1)"
                                                                                                               "replaceTerm(t, sigma_rhs(fss!1, fse!1)`seq(0), x`seq(0))")
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   p
                                                                                                                   "complement_pos(p, rest(x))`seq(x!1 - 1)"
                                                                                                                   t)
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       6
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         6
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             6
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               replace_persistence)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "x`seq(0)"
                                                                                                                                 "x`seq(1+i!1)"
                                                                                                                                 t
                                                                                                                                 "sigma_rhs(fss!1, fse!1)`seq(0)")
                                                                                                                                (("1"
                                                                                                                                  (expand*
                                                                                                                                   SP?
                                                                                                                                   PP?
                                                                                                                                   finseq_appl)
                                                                                                                                  (("1"
                                                                                                                                    (inst-cp
                                                                                                                                     -8
                                                                                                                                     1+i!1)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -8
                                                                                                                                       0)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -6
                                                                                                                                           0
                                                                                                                                           1+i!1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand*
                                                                                                                       SP?
                                                                                                                       finseq_appl)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -8
                                                                                                                         1+i!1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   replace_preserv_parallel_pos)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x`seq(0)"
                                                                                                                     "x`seq(1+i!1)"
                                                                                                                     t
                                                                                                                     "sigma_rhs(fss!1, fse!1)`seq(0)")
                                                                                                                    (("2"
                                                                                                                      (expand*
                                                                                                                       SP?
                                                                                                                       PP?
                                                                                                                       finseq_appl)
                                                                                                                      (("2"
                                                                                                                        (inst-cp
                                                                                                                         -9
                                                                                                                         1+i!1)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -9
                                                                                                                           0)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -7
                                                                                                                               0
                                                                                                                               1+i!1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -8
                                                                                                       -9
                                                                                                       -15)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         pos_subterm_ax)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             complement_pos_character)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "rest(x)"
                                                                                                               p
                                                                                                               "complement_pos(p, rest(x))`seq(x1!1)")
                                                                                                              (("2"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     i!3)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       rest
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         rest
                                                                                                                         -2
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           ^
                                                                                                                           min
                                                                                                                           empty_seq)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -2
                                                                                                                             1
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (expand*
                                                                                                                               SP?
                                                                                                                               PP?
                                                                                                                               finseq_appl)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 replace_preserv_parallel_pos)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -11
                                                                                                                                   1+i!3)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (inst
                                                                                                                                   -11
                                                                                                                                   0)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (inst
                                                                                                                                   -10
                                                                                                                                   0
                                                                                                                                   1+i!3)
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "seq2set")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "finseq_appl")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                2
                                                                                4))
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-2
                                                                    -3
                                                                    1))
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skeep)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep)
                                                                nil
                                                                nil)
                                                               ("6"
                                                                (skeep)
                                                                nil
                                                                nil)
                                                               ("7"
                                                                (skeep)
                                                                (("7"
                                                                  (hide
                                                                   -4
                                                                   -5
                                                                   3)
                                                                  (("7"
                                                                    (lemma
                                                                     complement_pos_character)
                                                                    (("7"
                                                                      (inst
                                                                       -1
                                                                       "rest(x)"
                                                                       p
                                                                       "complement_pos(p, rest(x))`seq(i_1 - 1)")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (typepred
                                                                             i!1)
                                                                            (("1"
                                                                              (expand
                                                                               rest
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 rest
                                                                                 -2
                                                                                 1)
                                                                                (("1"
                                                                                  (expand*
                                                                                   ^
                                                                                   min
                                                                                   empty_seq)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand*
                                                                                           SP?
                                                                                           finseq_appl)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -7
                                                                                             1+i!1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               pos_subterm_ax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            2
                                                                            4))
                                                                          (("2"
                                                                            (expand
                                                                             "seq2set")
                                                                            (("2"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (skeep)
                                                                (("8"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (skosimp)
                                                                (("9"
                                                                  (typepred
                                                                   "choose(complement_pos_set(<=, o)(p, x`seq(0)))")
                                                                  (("9"
                                                                    (expand
                                                                     complement_pos_set
                                                                     -1
                                                                     1)
                                                                    (("9"
                                                                      (expand
                                                                       emptyset)
                                                                      (("9"
                                                                        (prop)
                                                                        (("9"
                                                                          (hide
                                                                           -7
                                                                           -8
                                                                           3)
                                                                          (("9"
                                                                            (expand*
                                                                             SP?
                                                                             finseq_appl)
                                                                            (("9"
                                                                              (inst
                                                                               -8
                                                                               0)
                                                                              (("9"
                                                                                (rewrite
                                                                                 pos_subterm_ax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       replace_par_pos
                                                       1)
                                                      (("2"
                                                        (rewrite
                                                         sigma_rhs_rest)
                                                        (("1"
                                                          (rewrite
                                                           rest_add_first)
                                                          (("1"
                                                            (rewrite
                                                             rest_add_first)
                                                            (("1"
                                                              (rewrite
                                                               rest_add_first)
                                                              (("1"
                                                                (expand
                                                                 finseq_appl)
                                                                (("1"
                                                                  (expand*
                                                                   add_first
                                                                   insert?
                                                                   finseq_appl)
                                                                  (("1"
                                                                    (expand
                                                                     sigma_rhs
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       finseq_appl)
                                                                      (("1"
                                                                        (expand
                                                                         sigma_rhs
                                                                         -5
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           finseq_appl)
                                                                          (("1"
                                                                            (typepred
                                                                             "choose(complement_pos_set(<=, o)(p, x`seq(0)))")
                                                                            (("1"
                                                                              (expand
                                                                               complement_pos_set
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 emptyset)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     -7)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       replace_distributivity
                                                                                       -7)
                                                                                      (("1"
                                                                                        (expand*
                                                                                         SP?
                                                                                         finseq_appl)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -9
                                                                                           0)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           add_first
                                                           1)
                                                          (("2"
                                                            (expand
                                                             insert?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred (fse!1 fse!2))
                                              (("2"
                                                (expand*
                                                 add_first
                                                 insert?
                                                 finseq_appl)
                                                (("2"
                                                  (hide-all-but
                                                   (-1 -2 1 2))
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (expand
                                                       "subset?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand
                                                           member)
                                                          (("2"
                                                            (expand
                                                             seq2set
                                                             -3)
                                                            (("2"
                                                              (expand
                                                               "finseq_appl")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (hide
                                                                       -4)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "seq2set")
                                                                            (("1"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "seq2set")
                                                                            (("2"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand
                                         parallel_reduction_fix?)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst 2 fse!2 fss!2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (hide -4 -10)
                                                  (("1"
                                                    (expand*
                                                     nonempty?
                                                     empty?
                                                     member)
                                                    (("1"
                                                      (expand
                                                       subtermsOF
                                                       (-4 1))
                                                      (("1"
                                                        (expand
                                                         sigma_lhs
                                                         (-4 1))
                                                        (("1"
                                                          (expand*
                                                           empty_seq
                                                           finseq_appl)
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (skeep)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     2)
                                                                    (("1"
                                                                      (lemma
                                                                       complement_pos_character)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "rest(x)"
                                                                         p
                                                                         "complement_pos(p, rest(x))`seq(x!1)")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (typepred
                                                                               i!1)
                                                                              (("1"
                                                                                (expand
                                                                                 rest
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   rest
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand*
                                                                                     ^
                                                                                     min
                                                                                     empty_seq)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             -6)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               x!1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 5
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     SP?
                                                                                                     PP?
                                                                                                     finseq_appl)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       replace_persistence)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -7
                                                                                                         0)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (expand*
                                                                                                           member_seq
                                                                                                           finseq_appl)
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               Pos_Over_character)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 " #(p)"
                                                                                                                 x)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "#"
                                                                                                                   -1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     PP?
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       i!2)
                                                                                                                      (("2"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           add_first
                                                                                                                           insert?)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             PP?
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               finseq_appl)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 1
                                                                                                                                 0)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp)
                                                                                                                          (("2"
                                                                                                                            (reveal
                                                                                                                             -3)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               parallel)
                                                                                                                              (("2"
                                                                                                                                (split)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   j!1=0)
                                                                                                                                  (("1"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -3
                                                                                                                                        -14
                                                                                                                                        1))
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -3
                                                                                                                                         -2
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -3
                                                                                                                                           1
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             <=)
                                                                                                                                            (("1"
                                                                                                                                              (skosimp*)
                                                                                                                                              (("1"
                                                                                                                                                (replaces
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "p1!2`length=0")
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     empty_0)
                                                                                                                                                    (("1"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (rewrite
                                                                                                                                                         seq_o_empty)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     o
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (decompose-equality
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (inst
                                                                                                                                     -2
                                                                                                                                     0
                                                                                                                                     j!1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           <=
                                                                                                                                           (-1
                                                                                                                                            -2
                                                                                                                                            2))
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (replaces
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 2
                                                                                                                                                 "p1!1 o p1!2")
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   o_assoc)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replace
                                                                                                                                   -14
                                                                                                                                   -3
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -14
                                                                                                                                     1
                                                                                                                                     rl)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       <=
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (skosimp)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -6
                                                                                                                                           p1!1)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             complement_pos_set
                                                                                                                                             8)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               emptyset)
                                                                                                                                              (("2"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   <=
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     1
                                                                                                                                                     p1!1)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (lemma
                                                                                                                                                   complement_pos_empty)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "rest(x)"
                                                                                                                                                     p)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (-1
                                                                                                                                                          -3
                                                                                                                                                          1))
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           seq_first_rest[position])
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             x)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand*
                                                                                                                                                                 first
                                                                                                                                                                 finseq_appl)
                                                                                                                                                                (("2"
                                                                                                                                                                  (replaces
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -1
                                                                                                                                                                     1
                                                                                                                                                                     rl)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand*
                                                                                                                                                                       PP?
                                                                                                                                                                       finseq_appl
                                                                                                                                                                       parallel)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand*
                                                                                               SP?
                                                                                               PP?
                                                                                               finseq_appl)
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -10
                                                                                                 1+i!1)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   replace_persistence)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x`seq(0)"
                                                                                                     p
                                                                                                     t
                                                                                                     "sigma_rhs(fss!1, fse!1)`seq(0)")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -11
                                                                                                       0)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -8
                                                                                                           -14
                                                                                                           2
                                                                                                           5)
                                                                                                          (("2"
                                                                                                            (expand*
                                                                                                             member_seq
                                                                                                             finseq_appl)
                                                                                                            (("2"
                                                                                                              (skosimp)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 Pos_Over_character)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "#(p)"
                                                                                                                   x)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "#"
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       PP?
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         i!3)
                                                                                                                        (("2"
                                                                                                                          (split)
                                                                                                                          (("1"
                                                                                                                            (expand*
                                                                                                                             add_first
                                                                                                                             insert?
                                                                                                                             PP?
                                                                                                                             finseq_appl)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               1
                                                                                                                               0)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skosimp)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -15
                                                                                                                               -1
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -15
                                                                                                                                 1
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -15)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     parallel
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (split)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "j!1 = 0")
                                                                                                                                        (("1"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (hide-all-but
                                                                                                                                             (-1
                                                                                                                                              -2
                                                                                                                                              1))
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               <=)
                                                                                                                                              (("1"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("1"
                                                                                                                                                  (replaces
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "p1!2`length=0")
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       empty_0)
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (rewrite
                                                                                                                                                           seq_o_empty)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       o
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (decompose-equality
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (inst
                                                                                                                                           -10
                                                                                                                                           0
                                                                                                                                           j!1)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               parallel)
                                                                                                                                              (("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   <=
                                                                                                                                                   (-1
                                                                                                                                                    -2
                                                                                                                                                    7))
                                                                                                                                                  (("2"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("2"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         7
                                                                                                                                                         "p1!1 o p1!2")
                                                                                                                                                        (("2"
                                                                                                                                                          (rewrite
                                                                                                                                                           o_assoc)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         <=
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (skosimp)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -7
                                                                                                                                             p1!1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               complement_pos_set
                                                                                                                                               5)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 emptyset)
                                                                                                                                                (("2"
                                                                                                                                                  (prop)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     <=
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       1
                                                                                                                                                       p1!1)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (lemma
                                                                                                                                                     complement_pos_empty)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "rest(x)"
                                                                                                                                                       p)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           (-1
                                                                                                                                                            -10
                                                                                                                                                            1))
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             seq_first_rest[position])
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               x)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand*
                                                                                                                                                                   first
                                                                                                                                                                   finseq_appl)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1
                                                                                                                                                                       1
                                                                                                                                                                       rl)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand*
                                                                                                                                                                         PP?
                                                                                                                                                                         finseq_appl)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand*
                                                                                               SP?
                                                                                               PP?
                                                                                               finseq_appl)
                                                                                              (("3"
                                                                                                (hide
                                                                                                 -8
                                                                                                 4)
                                                                                                (("3"
                                                                                                  (rewrite
                                                                                                   replace_preserv_parallel_pos)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -9
                                                                                                     0)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand*
                                                                                                       member_seq
                                                                                                       finseq_appl)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           Pos_Over_character)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "#(p)"
                                                                                                             x)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "#"
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 PP?
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   i!3)
                                                                                                                  (("2"
                                                                                                                    (split)
                                                                                                                    (("1"
                                                                                                                      (expand*
                                                                                                                       add_first
                                                                                                                       insert?
                                                                                                                       PP?
                                                                                                                       finseq_appl)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         1
                                                                                                                         0)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (skosimp)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -15
                                                                                                                         -1
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -15
                                                                                                                           1
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -15)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               parallel)
                                                                                                                              (("2"
                                                                                                                                (split)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "j!1=0")
                                                                                                                                  (("1"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -2
                                                                                                                                        1))
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         <=)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (replaces
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "p1!2`length=0")
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 empty_0)
                                                                                                                                                (("1"
                                                                                                                                                  (replaces
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     seq_o_empty)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand
                                                                                                                                                 o
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (decompose-equality
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      -2
                                                                                                                                      -10
                                                                                                                                      1))
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -3
                                                                                                                                       0
                                                                                                                                       j!1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             <=)
                                                                                                                                            (("2"
                                                                                                                                              (skosimp*)
                                                                                                                                              (("2"
                                                                                                                                                (replaces
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   2
                                                                                                                                                   "p1!1 o p1!2")
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     o_assoc)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   <=
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (skosimp)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -7
                                                                                                                                       p1!1)
                                                                                                                                      (("2"
                                                                                                                                        (expand*
                                                                                                                                         complement_pos_set
                                                                                                                                         emptyset)
                                                                                                                                        (("2"
                                                                                                                                          (prop)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             <=
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               1
                                                                                                                                               p1!1)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (lemma
                                                                                                                                             complement_pos_empty)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "rest(x)"
                                                                                                                                               p)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   (-1
                                                                                                                                                    -10
                                                                                                                                                    1))
                                                                                                                                                  (("2"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       seq_first_rest[position])
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         x)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand*
                                                                                                                                                             first
                                                                                                                                                             finseq_appl)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -1
                                                                                                                                                               1
                                                                                                                                                               rl)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand*
                                                                                                                                                                 PP?
                                                                                                                                                                 finseq_appl)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   parallel)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (expand*
                                                                                               SP?
                                                                                               finseq_appl)
                                                                                              (("4"
                                                                                                (inst
                                                                                                 -10
                                                                                                 0)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("5"
                                                                                              (expand
                                                                                               sigma_rhs
                                                                                               1)
                                                                                              (("5"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              4))
                                                                            (("2"
                                                                              (expand
                                                                               "seq2set")
                                                                              (("2"
                                                                                (expand
                                                                                 "finseq_appl")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-3
                                                                          1))
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (lemma
                                                                         complement_pos_character)
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "rest(x)"
                                                                           p
                                                                           "complement_pos(p, rest(x))`seq(i)")
                                                                          (("3"
                                                                            (prop)
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (typepred
                                                                                 i!1)
                                                                                (("1"
                                                                                  (expand
                                                                                   rest
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     rest
                                                                                     -2
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand*
                                                                                       ^
                                                                                       min
                                                                                       empty_seq)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (expand*
                                                                                               SP?
                                                                                               finseq_appl)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 1+i!1)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -8
                                                                                                    5))
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       pos_subterm_ax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                4))
                                                                              (("2"
                                                                                (expand
                                                                                 "seq2set")
                                                                                (("2"
                                                                                  (expand
                                                                                   "finseq_appl")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   replace_persistence
                                                   -4)
                                                  (("1"
                                                    (expand*
                                                     SP?
                                                     finseq_appl)
                                                    (("1"
                                                      (inst -6 0)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3 -4 -10 2)
                                                    (("2"
                                                      (expand*
                                                       member_seq
                                                       finseq_appl)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (lemma
                                                           Pos_Over_character)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "#(p)"
                                                             x)
                                                            (("2"
                                                              (expand
                                                               "#"
                                                               -1
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 PP?
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   i!1)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (expand*
                                                                       add_first
                                                                       insert?
                                                                       PP?
                                                                       finseq_appl)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         1
                                                                         0)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (replace
                                                                         -10
                                                                         -1
                                                                         rl)
                                                                        (("2"
                                                                          (replace
                                                                           -10
                                                                           1
                                                                           rl)
                                                                          (("2"
                                                                            (hide
                                                                             -10)
                                                                            (("2"
                                                                              (expand
                                                                               parallel)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (case
                                                                                   j!1=0)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -2
                                                                                        1))
                                                                                      (("1"
                                                                                        (expand
                                                                                         <=)
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -2)
                                                                                            (("1"
                                                                                              (case
                                                                                               "p1!2`length=0")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 empty_0)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     seq_o_empty)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 o
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (decompose-equality
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand*
                                                                                     PP?
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -5
                                                                                         0
                                                                                         j!1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           parallel)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               <=
                                                                                               (-1
                                                                                                -2
                                                                                                5))
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     5
                                                                                                     "p1!1 o p1!2")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       o_assoc)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand*
                                                                                   nonempty?
                                                                                   empty?
                                                                                   member
                                                                                   complement_pos_set
                                                                                   emptyset)
                                                                                  (("2"
                                                                                    (expand
                                                                                     <=
                                                                                     -1)
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -3
                                                                                         p1!1)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             <=
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               p1!1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "j!1=0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand*
                                                                                               PP?
                                                                                               finseq_appl)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -6
                                                                                                   0
                                                                                                   j!1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       parallel)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand rest 1)
                                  (("2"
                                    (expand* ^ min empty_seq)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (expand SP?)
                                          (("1" (skeep) nil nil))
                                          nil)
                                         ("2"
                                          (expand SP?)
                                          (("2" (skeep) nil nil))
                                          nil)
                                         ("3"
                                          (expand* SP? PP? finseq_appl)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (skosimp)
                                              (("3"
                                                (rewrite
                                                 replace_preserv_parallel_pos)
                                                (("1"
                                                  (inst -2 1+i!1)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (inst -2 0)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (inst -1 0 1+i!1)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 3)
                                  (("3"
                                    (expand parallel_reduction_fix?)
                                    (("3"
                                      (inst
                                       1
                                       "rest(fse!1)"
                                       "rest(fss!1)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide-all-but (-3 1))
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-4 1))
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (expand rest 1)
                                          (("3"
                                            (expand* ^ min empty_seq)
                                            (("3"
                                              (lift-if)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (lift-if)
                                                  (("3"
                                                    (lift-if)
                                                    (("3"
                                                      (lift-if)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (lift-if)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 subtermsOF
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   sigma_lhs
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (skeep)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 subtermsOF
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   sigma_lhs
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("2"
                                                                        (skeep)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 subtermsOF
                                                                 3)
                                                                (("3"
                                                                  (expand
                                                                   sigma_lhs
                                                                   3)
                                                                  (("3"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("3"
                                                                      (decompose-equality
                                                                       3)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 subtermsOF
                                                                 1)
                                                                (("4"
                                                                  (expand
                                                                   sigma_lhs
                                                                   1)
                                                                  (("4"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("4"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("4"
                                                                        (skeep)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (expand
                                                                 subtermsOF
                                                                 1)
                                                                (("5"
                                                                  (expand
                                                                   sigma_lhs
                                                                   1)
                                                                  (("5"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("5"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("5"
                                                                        (skeep)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (expand
                                                                 subtermsOF
                                                                 3)
                                                                (("6"
                                                                  (expand
                                                                   sigma_lhs
                                                                   3)
                                                                  (("6"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("6"
                                                                      (decompose-equality
                                                                       3)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("8"
                                                                (expand
                                                                 subtermsOF
                                                                 1)
                                                                (("8"
                                                                  (expand
                                                                   sigma_lhs
                                                                   1)
                                                                  (("8"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("8"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("8"
                                                                        (skeep)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (expand
                                                                 subtermsOF
                                                                 1)
                                                                (("9"
                                                                  (expand
                                                                   sigma_lhs
                                                                   1)
                                                                  (("9"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("9"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("9"
                                                                        (skeep)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (expand
                                                                 subtermsOF
                                                                 3)
                                                                (("10"
                                                                  (expand
                                                                   sigma_lhs
                                                                   3)
                                                                  (("10"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("10"
                                                                      (decompose-equality
                                                                       3)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (expand
                                                                 subtermsOF
                                                                 1)
                                                                (("11"
                                                                  (expand
                                                                   sigma_lhs
                                                                   1)
                                                                  (("11"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("11"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("11"
                                                                        (skeep)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("12"
                                                                (expand
                                                                 subtermsOF
                                                                 1)
                                                                (("12"
                                                                  (expand
                                                                   sigma_lhs
                                                                   1)
                                                                  (("12"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("12"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("12"
                                                                        (skeep)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("13"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("14"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("15"
                                                                (expand*
                                                                 subtermsOF
                                                                 sigma_lhs)
                                                                (("15"
                                                                  (expand*
                                                                   empty_seq
                                                                   finseq_appl)
                                                                  (("15"
                                                                    (decompose-equality
                                                                     3)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         -5)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "1+x!1")
                                                                          (("1"
                                                                            (expand*
                                                                             SP?
                                                                             PP?
                                                                             finseq_appl)
                                                                            (("1"
                                                                              (rewrite
                                                                               replace_persistence)
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 0)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -3
                                                                                 "1+x!1")
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (inst
                                                                                 -2
                                                                                 0
                                                                                 "1+x!1")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand*
                                                                           SP?
                                                                           finseq_appl)
                                                                          (("2"
                                                                            (inst
                                                                             -4
                                                                             x1!1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand*
                                                                           SP?
                                                                           PP?
                                                                           finseq_appl)
                                                                          (("3"
                                                                            (rewrite
                                                                             replace_preserv_parallel_pos)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "1+i")
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -2
                                                                               0)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (inst
                                                                               -1
                                                                               0
                                                                               "1+i")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (expand*
                                                                         SP?
                                                                         PP?
                                                                         finseq_appl)
                                                                        (("3"
                                                                          (rewrite
                                                                           replace_preserv_parallel_pos)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "1+i")
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -2
                                                                             0)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (inst
                                                                             -1
                                                                             0
                                                                             "1+i")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (rewrite sigma_rhs_rest)
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred fse!1)
                                        (("2"
                                          (expand rest 1)
                                          (("2"
                                            (hide-all-but (-1 1 2))
                                            (("2"
                                              (expand "subset?")
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "seq2set")
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^")
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (typepred
                                                                       kk)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       kk)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (expand* member_seq finseq_appl)
                                  (("4"
                                    (skosimp)
                                    (("4"
                                      (lemma Pos_Over_character)
                                      (("4"
                                        (inst -1 "#(p)" x)
                                        (("4"
                                          (expand "#" -1 1)
                                          (("4"
                                            (expand PP? -1 1)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (inst -1 i!1)
                                                (("4"
                                                  (split)
                                                  (("1"
                                                    (expand*
                                                     add_first
                                                     insert?
                                                     PP?
                                                     finseq_appl)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (inst -1 1 0)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             replace_preserv_parallel_pos)
                                                            (("1"
                                                              (expand*
                                                               SP?
                                                               finseq_appl)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 0)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (replace
                                                       -9
                                                       -1
                                                       rl)
                                                      (("2"
                                                        (replace
                                                         -9
                                                         1
                                                         rl)
                                                        (("2"
                                                          (hide -9)
                                                          (("2"
                                                            (lemma
                                                             replace_preserv_parallel_pos)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x`seq(0)"
                                                               "x`seq(j!1)"
                                                               t
                                                               "sigma_rhs(fss!1, fse!1)`seq(0)")
                                                              (("2"
                                                                (expand*
                                                                 SP?
                                                                 PP?
                                                                 finseq_appl)
                                                                (("2"
                                                                  (inst-cp
                                                                   -4
                                                                   j!1)
                                                                  (("2"
                                                                    (inst
                                                                     -4
                                                                     0)
                                                                    (("2"
                                                                      (case
                                                                       "j!1=0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           -4)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               replace_preserv_pos)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "x`seq(0)"
                                                                                 t
                                                                                 "sigma_rhs(fss!1, fse!1)`seq(0)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     pos_ax)
                                                                                    (("1"
                                                                                      (expand
                                                                                       <=
                                                                                       -3)
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           p
                                                                                           p1!1
                                                                                           "replaceTerm(t, sigma_rhs(fss!1, fse!1)`seq(0), x`seq(0))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (expand
                                                                             <=
                                                                             -2)
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (lemma
                                                                                 pos_ax)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   p
                                                                                   p1!1
                                                                                   "replaceTerm(t, sigma_rhs(fss!1, fse!1)`seq(0), x`seq(0))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -2
                                                                             0
                                                                             j!1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (expand* member_seq finseq_appl)
                                  (("5"
                                    (skosimp)
                                    (("5"
                                      (lemma Pos_Over_character)
                                      (("5"
                                        (inst -1 "#(p)" x)
                                        (("5"
                                          (expand "#" -1 1)
                                          (("5"
                                            (expand PP? -1 1)
                                            (("5"
                                              (assert)
                                              (("5"
                                                (inst -1 i!1)
                                                (("5"
                                                  (split)
                                                  (("1"
                                                    (lemma
                                                     parallel_pos_in_Pos_Over)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "#(p)"
                                                       "rest(x)"
                                                       p)
                                                      (("1"
                                                        (expand
                                                         "#"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           PP?
                                                           -1
                                                           1)
                                                          (("1"
                                                            (rewrite
                                                             rest_of_PP_is_PP)
                                                            (("1"
                                                              (replace
                                                               -10
                                                               -2
                                                               rl)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand*
                                                                   member_seq
                                                                   finseq_appl)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "#"
                                                                   1)
                                                                  (("2"
                                                                    (expand*
                                                                     member_seq
                                                                     finseq_appl)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       0)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (rewrite
                                                                   add_first_parallel_pos_to_PP_is_PP)
                                                                  (("1"
                                                                    (expand
                                                                     finseq_appl)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (typepred
                                                                         i)
                                                                        (("1"
                                                                          (expand
                                                                           rest
                                                                           (-1
                                                                            1))
                                                                          (("1"
                                                                            (expand*
                                                                             ^
                                                                             min
                                                                             empty_seq)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (expand*
                                                                                     add_first
                                                                                     insert?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       PP?
                                                                                       -2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         finseq_appl)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           2+i
                                                                                           0)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     rest_of_PP_is_PP)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (case j!1=0)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replace
                                                           -9
                                                           -1
                                                           rl)
                                                          (("1"
                                                            (replace
                                                             -9
                                                             1
                                                             rl)
                                                            (("1"
                                                              (hide -9)
                                                              (("1"
                                                                (lemma
                                                                 parallel_pos_in_Pos_Over)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "#(p)"
                                                                   "rest(x)"
                                                                   p)
                                                                  (("1"
                                                                    (expand
                                                                     "#"
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       PP?
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         rest_of_PP_is_PP)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (expand*
                                                                             member_seq
                                                                             finseq_appl)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "#"
                                                                             1)
                                                                            (("2"
                                                                              (expand*
                                                                               member_seq
                                                                               finseq_appl)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 0)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (rewrite
                                                                             add_first_parallel_pos_to_PP_is_PP)
                                                                            (("1"
                                                                              (expand
                                                                               finseq_appl)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (typepred
                                                                                   i)
                                                                                  (("1"
                                                                                    (expand
                                                                                     rest
                                                                                     (-1
                                                                                      1))
                                                                                    (("1"
                                                                                      (expand*
                                                                                       ^
                                                                                       min
                                                                                       empty_seq)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (hide
                                                                                               6)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 parallel)
                                                                                                (("1"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     PP?
                                                                                                     finseq_appl)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         0
                                                                                                         1+i)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             parallel)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 <=
                                                                                                                 (-1
                                                                                                                  -3
                                                                                                                  9))
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       9
                                                                                                                       "p1!1 o p1!2")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         o_assoc)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     pos_up_in_Pos_Over)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       <=
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "#(p)"
                                                                                                           "rest(x)"
                                                                                                           p
                                                                                                           p1!1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "#"
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               PP?
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 rest_of_PP_is_PP)
                                                                                                                (("2"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     member_seq
                                                                                                                     finseq_appl)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     empty_0
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         seq_o_empty
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           -3
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (expand*
                                                                                                                             PP?
                                                                                                                             finseq_appl
                                                                                                                             parallel)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -4
                                                                                                                                 0
                                                                                                                                 1+i)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (expand
                                                                                                                     "#"
                                                                                                                     1)
                                                                                                                    (("3"
                                                                                                                      (expand*
                                                                                                                       member_seq
                                                                                                                       finseq_appl)
                                                                                                                      (("3"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         0)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (expand
                                                                                                                     rest
                                                                                                                     1)
                                                                                                                    (("4"
                                                                                                                      (expand*
                                                                                                                       ^
                                                                                                                       min
                                                                                                                       empty_seq)
                                                                                                                      (("4"
                                                                                                                        (lift-if)
                                                                                                                        (("4"
                                                                                                                          (assert)
                                                                                                                          (("4"
                                                                                                                            (expand*
                                                                                                                             member_seq
                                                                                                                             finseq_appl)
                                                                                                                            (("4"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               i)
                                                                                                                              (("4"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               rest_of_PP_is_PP)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -7 5)
                                                        (("2"
                                                          (lemma
                                                           pos_up_in_Pos_Over)
                                                          (("2"
                                                            (replace
                                                             -9
                                                             -2
                                                             rl)
                                                            (("2"
                                                              (replace
                                                               -9
                                                               2
                                                               rl)
                                                              (("2"
                                                                (hide
                                                                 -9)
                                                                (("2"
                                                                  (expand
                                                                   <=
                                                                   -2)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "#(p)"
                                                                       "rest(x)"
                                                                       p
                                                                       p1!1)
                                                                      (("2"
                                                                        (expand
                                                                         "#"
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           PP?
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             rest_of_PP_is_PP)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand*
                                                                                 member_seq
                                                                                 finseq_appl)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (rewrite
                                                                                 empty_0
                                                                                 -1)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     seq_o_empty
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "#"
                                                                                 1)
                                                                                (("3"
                                                                                  (expand*
                                                                                   member_seq
                                                                                   finseq_appl)
                                                                                  (("3"
                                                                                    (inst
                                                                                     1
                                                                                     0)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (expand
                                                                                 rest
                                                                                 1)
                                                                                (("4"
                                                                                  (expand*
                                                                                   ^
                                                                                   min
                                                                                   empty_seq)
                                                                                  (("4"
                                                                                    (lift-if)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (expand*
                                                                                         member_seq
                                                                                         finseq_appl)
                                                                                        (("4"
                                                                                          (inst
                                                                                           1
                                                                                           j!1-1)
                                                                                          (("4"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (hide 2)
        (("2" (expand SPP?)
          (("2" (flatten)
            (("2" (rewrite complement_pos_is_PP)
              (("2" (expand* SP? finseq_appl)
                (("2" (skeep)
                  (("2" (lemma complement_pos_character)
                    (("2"
                      (inst -1 fsp2 p "complement_pos(p, fsp2)`seq(i)")
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (skosimp)
                            (("1" (inst -3 i!1)
                              (("1" (rewrite pos_subterm_ax) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "seq2set")
                              (("2"
                                (expand "finseq_appl")
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma Pos_Over_character)
          (("3" (inst -1 "#(p)" fsp2)
            (("3" (expand "#" -1 1)
              (("3" (expand PP? -1 1)
                (("3" (expand SPP?)
                  (("3" (flatten)
                    (("3" (assert)
                      (("3" (expand* member_seq finseq_appl)
                        (("3" (skosimp)
                          (("3" (inst -1 i!1)
                            (("3" (replace -6 -1 rl)
                              (("3"
                                (hide -6)
                                (("3"
                                  (split)
                                  (("1"
                                    (expand parallel_reduction_fix?)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (replaces -7)
                                        (("1"
                                          (rewrite
                                           replace_par_pos_preservs_pos)
                                          (("1"
                                            (expand SPP?)
                                            (("1"
                                              (rewrite
                                               add_first_parallel_pos_to_SP_is_SP)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (expand sigma_rhs 1)
                                            (("2"
                                              (expand empty_seq)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (lemma
                                       replace_par_pos_preservs_PP)
                                      (("2"
                                        (expand finseq_appl)
                                        (("2"
                                          (expand*
                                           parallel_reduction_fix?)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replaces -8)
                                              (("2"
                                                (inst
                                                 -1
                                                 fsp2
                                                 "sigma_rhs(fss!1, fse!1)"
                                                 t)
                                                (("2"
                                                  (expand SPP?)
                                                  (("2"
                                                    (expand
                                                     sigma_rhs
                                                     -1
                                                     1)
                                                    (("2"
                                                      (expand
                                                       empty_seq)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             j!1)
                                                            (("2"
                                                              (lemma
                                                               closed_positions)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 p
                                                                 "fsp2`seq(j!1)"
                                                                 "replace_par_pos(t, fsp2, sigma_rhs(fss!1, fse!1))")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (expand SPP?) (("4" (flatten) nil nil)) nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep) (("5" (expand* "#" PP? finseq_appl) nil nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (PP? const-decl "bool" positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (SPP type-eq-decl nil positions nil)
    (SPP? const-decl "bool" positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (term type-decl nil term_adt nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (PP type-eq-decl nil positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (complement_pos def-decl
     "finseq[position[variable, symbol, arity]]" orthogonality_basis
     nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (replaceTerm def-decl "term" replacement nil)
    (rest_of_PP_is_PP formula-decl nil positions nil)
    (empty? const-decl "bool" sets nil)
    (fss!2 skolem-const-decl "finseq[Sub[variable, symbol, arity]]"
     orthogonality nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (complement_pos_empty formula-decl nil orthogonality_basis nil)
    (parallel const-decl "bool" positions nil)
    (Pos_Over_character formula-decl nil orthogonality nil)
    (add_first const-decl "finseq" seq_extras structures)
    (fse!1 skolem-const-decl "{fse | subset?(fse, E)}" orthogonality
     nil)
    (fse!2 skolem-const-decl "{fse | subset?(fse, E)}" orthogonality
     nil)
    (insert? const-decl "finseq" seq_extras structures)
    (i_1 skolem-const-decl "below[1 +
       complement_pos[variable, symbol, arity]
           (p, rest[position[variable, symbol, arity]](x))`length]"
     orthogonality nil)
    (complement_pos_character formula-decl nil orthogonality_basis nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (replace_persistence formula-decl nil replacement nil)
    (replace_preserv_parallel_pos formula-decl nil replacement nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (x!1 skolem-const-decl
     "below[1 + complement_pos(p, rest(x))`length]" orthogonality nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pos_subterm formula-decl nil subterm nil)
    (SP? const-decl "bool" positions nil)
    (emptyset const-decl "set" sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ext def-decl "term" substitution nil)
    (lhs const-decl "term" rewrite_rules nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (fss!2 skolem-const-decl "finseq[Sub[variable, symbol, arity]]"
     orthogonality nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (O const-decl "finseq" finite_sequences nil)
    (<= const-decl "bool" positions nil)
    (complement_pos_set const-decl "set[T]" predicate_fseq2set nil)
    (PRED type-eq-decl nil defined_types nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (x skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_rhs_rest formula-decl nil orthogonality_basis nil)
    (replace_distributivity formula-decl nil replacement nil)
    (rhs const-decl "term" rewrite_rules nil)
    (rest_add_first formula-decl nil seq_extras structures)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (fss!1 skolem-const-decl "finseq[Sub[variable, symbol, arity]]"
     orthogonality nil)
    (pos_ax formula-decl nil positions nil)
    (replace_preserv_pos formula-decl nil replacement nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (pos_up_in_Pos_Over formula-decl nil orthogonality nil)
    (parallel_pos_in_Pos_Over formula-decl nil orthogonality nil)
    (i skolem-const-decl "below[length(rest(x))]" orthogonality nil)
    (add_first_parallel_pos_to_PP_is_PP formula-decl nil positions nil)
    (length_rest formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (replace_par_pos def-decl "term" orthogonality_basis nil)
    (subtermsOF const-decl "finseq[term]" orthogonality_basis nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (p skolem-const-decl "position[variable, symbol, arity]"
     orthogonality nil)
    (t skolem-const-decl "term" orthogonality nil)
    (sigma_lhs const-decl "finseq[term]" orthogonality_basis nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (E skolem-const-decl "set[rewrite_rule[variable, symbol, arity]]"
     orthogonality nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (complement_pos_is_PP formula-decl nil orthogonality_basis nil)
    (closed_positions formula-decl nil positions nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (SP type-eq-decl nil positions nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil))
   shostak))
 (divergence_in_Pos_Over_TCC1 0
  (divergence_in_Pos_Over_TCC1-4 "" 3912758176
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand* member_seq finseq_appl)
        (("" (skosimp)
          (("" (lemma Pos_Over_is_sub_seq)
            (("" (inst -1 fsp1!1 fsp2!1)
              (("" (expand SPP?)
                (("" (flatten)
                  (("" (assert)
                    (("" (expand* subseq finseq_appl)
                      (("" (inst -1 i!1)
                        (("" (expand* member_seq finseq_appl)
                          (("" (skosimp)
                            (("" (expand SP? -8)
                              ((""
                                (expand finseq_appl)
                                ((""
                                  (inst - i!2)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t)"))
  (divergence_in_Pos_Over_TCC1-3 "" 3803861373
   (""
    (then (skosimp) (skosimp) (expand* member_seq finseq_appl)
     (skosimp) (lemma Pos_Over_is_sub_seq) (inst -1 fsp1!1 fsp2!1)
     (expand SPP?) (flatten) (assert) (expand* subseq finseq_appl)
     (inst -1 i!1) (expand* member_seq finseq_appl) (skosimp)
     (expand SP? -8) (expand finseq_appl) (inst - i!2) (assert))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (Pos_Over_is_sub_seq formula-decl nil orthogonality nil)
    (SPP? const-decl "bool" positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (< const-decl "bool" reals nil)
    (SP? const-decl "bool" positions nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t)"))
  (divergence_in_Pos_Over_TCC1-2 "" 3756670475
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand* member_seq finseq_appl)
        (("" (skosimp)
          (("" (lemma Pos_Over_is_sub_seq)
            (("" (inst -1 fsp1!1 fsp2!1)
              (("" (expand SPP?)
                (("" (flatten)
                  (("" (assert)
                    (("" (expand* subseq finseq_appl)
                      (("" (inst -1 i!1)
                        (("" (expand* member_seq finseq_appl)
                          (("" (skosimp)
                            (("" (expand SP? -3)
                              ((""
                                (expand finseq_appl)
                                ((""
                                  (inst - i!2)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (SP? const-decl "bool" positions nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (SPP? const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t)"))
  (divergence_in_Pos_Over_TCC1-1 nil 3573811506
   ("" (skosimp)
    (("" (skosimp)
      (("" (hide -2)
        (("" (expand* member_seq finseq_appl)
          (("" (skosimp)
            (("" (lemma Pos_Over_is_sub_seq)
              (("" (inst -1 fsp1!1 fsp2!1)
                (("" (expand SPP?)
                  (("" (flatten)
                    (("" (assert)
                      (("" (expand* subseq finseq_appl)
                        (("" (inst -1 i!1)
                          (("" (expand* member_seq finseq_appl)
                            (("" (skosimp)
                              ((""
                                (expand SP? -7)
                                ((""
                                  (expand finseq_appl)
                                  ((""
                                    (inst -7 i!2)
                                    (("" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (SP? const-decl "bool" positions nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (SPP? const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t)")))
 (divergence_in_Pos_Over_TCC2 0
  (divergence_in_Pos_Over_TCC2-4 "" 3912758177
   ("" (skosimp)
    (("" (skeep)
      (("" (lemma Pos_Over_is_sub_seq)
        (("" (inst -1 fsp1!1 fsp2!1)
          (("" (expand SPP?)
            (("" (flatten)
              (("" (assert)
                (("" (expand* subseq member_seq finseq_appl)
                  (("" (skosimp)
                    (("" (inst -1 i!1)
                      (("" (skosimp)
                        (("" (expand parallel_reduction_fix? -4)
                          (("" (skosimp)
                            (("" (replace -7 1)
                              ((""
                                (lemma replace_par_pos_preservs_PP)
                                ((""
                                  (inst
                                   -1
                                   fsp1!1
                                   "sigma_rhs(fss!1, fse!1)"
                                   t!1)
                                  ((""
                                    (expand SPP?)
                                    ((""
                                      (expand sigma_rhs -1 1)
                                      ((""
                                        (expand empty_seq)
                                        ((""
                                          (expand finseq_appl)
                                          ((""
                                            (lift-if)
                                            ((""
                                              (assert)
                                              ((""
                                                (inst -1 i!2)
                                                (("" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t1)"))
  (divergence_in_Pos_Over_TCC2-3 "" 3803862989
   (""
    (then (skosimp) (skeep) (lemma Pos_Over_is_sub_seq)
     (inst -1 fsp1!1 fsp2!1) (expand SPP?) (flatten) (assert)
     (expand* subseq member_seq finseq_appl) (skosimp) (inst -1 i!1)
     (skosimp) (expand parallel_reduction_fix? -4) (skosimp)
     (replace -7 1) (lemma replace_par_pos_preservs_PP)
     (inst -1 fsp1!1 "sigma_rhs(fss!1, fse!1)" t!1) (expand SPP?)
     (expand sigma_rhs -1 1) (expand empty_seq) (expand finseq_appl)
     (lift-if) (assert) (inst -1 i!2) (assert))
    nil)
   ((Pos_Over_is_sub_seq formula-decl nil orthogonality nil)
    (SPP? const-decl "bool" positions nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (< const-decl "bool" reals nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t1)"))
  (divergence_in_Pos_Over_TCC2-2 "" 3756670610
   ("" (skosimp)
    (("" (skeep)
      (("" (lemma Pos_Over_is_sub_seq)
        (("" (inst -1 fsp1!1 fsp2!1)
          (("" (expand SPP?)
            (("" (flatten)
              (("" (assert)
                (("" (expand* subseq member_seq finseq_appl)
                  (("" (skosimp)
                    (("" (inst -1 i!1)
                      (("" (skosimp)
                        (("" (expand parallel_reduction_fix? -6)
                          (("" (skosimp)
                            (("" (replace -9 1)
                              ((""
                                (lemma replace_par_pos_preservs_PP)
                                ((""
                                  (inst
                                   -1
                                   fsp1!1
                                   "sigma_rhs(fss!1, fse!1)"
                                   t!1)
                                  ((""
                                    (expand SPP?)
                                    ((""
                                      (expand sigma_rhs -1 1)
                                      ((""
                                        (expand empty_seq)
                                        ((""
                                          (expand finseq_appl)
                                          ((""
                                            (lift-if)
                                            ((""
                                              (assert)
                                              ((""
                                                (inst -1 i!2)
                                                (("" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (SPP? const-decl "bool" positions nil))
   shostak
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t1)"))
  (divergence_in_Pos_Over_TCC2-1 nil 3573811506
   ("" (skosimp)
    (("" (skeep)
      (("" (lemma Pos_Over_is_sub_seq)
        (("" (inst -1 fsp1!1 fsp2!1)
          (("" (expand SPP?)
            (("" (flatten)
              (("" (assert)
                (("" (expand* subseq member_seq finseq_appl)
                  (("" (skosimp)
                    (("" (inst -1 i!1)
                      (("" (skosimp)
                        (("" (expand parallel_reduction_fix? -4)
                          (("" (skosimp)
                            (("" (replace -7 1)
                              ((""
                                (lemma replace_par_pos_preservs_PP)
                                ((""
                                  (inst
                                   -1
                                   fsp1!1
                                   "sigma_rhs(fss!1, fse!1)"
                                   t!1)
                                  ((""
                                    (expand SPP?)
                                    ((""
                                      (expand sigma_rhs -1 1)
                                      ((""
                                        (expand empty_seq)
                                        ((""
                                          (expand finseq_appl)
                                          ((""
                                            (lift-if)
                                            ((""
                                              (assert)
                                              ((""
                                                (inst -1 i!2)
                                                (("" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (SPP? const-decl "bool" positions nil))
   nil
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t1)")))
 (divergence_in_Pos_Over_TCC3 0
  (divergence_in_Pos_Over_TCC3-3 "" 3803866235
   ("" (skosimp)
    (("" (skeep)
      (("" (expand parallel_reduction_fix? -2)
        (("" (skosimp)
          (("" (expand* member_seq finseq_appl)
            (("" (skosimp)
              (("" (lemma Pos_Over_character)
                (("" (inst -1 fsp1!1 fsp2!1)
                  (("" (expand SPP?)
                    (("" (flatten)
                      (("" (assert)
                        (("" (inst -1 i!1)
                          (("" (replace -2 -1 rl)
                            (("" (hide -2)
                              ((""
                                (split)
                                (("1"
                                  (replace -5 1)
                                  (("1"
                                    (rewrite
                                     replace_par_pos_preservs_pos)
                                    (("1"
                                      (expand SPP?)
                                      (("1"
                                        (rewrite
                                         add_first_parallel_pos_to_SP_is_SP)
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (expand sigma_rhs 1)
                                      (("2"
                                        (expand empty_seq)
                                        (("2"
                                          (lift-if)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (lemma replace_par_pos_preservs_PP)
                                    (("2"
                                      (inst
                                       -1
                                       fsp2!1
                                       "sigma_rhs(fss!1, fse!1)"
                                       t!1)
                                      (("2"
                                        (expand sigma_rhs -1 1)
                                        (("2"
                                          (expand SPP?)
                                          (("2"
                                            (expand finseq_appl)
                                            (("2"
                                              (inst -1 j!1)
                                              (("2"
                                                (replace -6 -1 rl)
                                                (("2"
                                                  (lemma
                                                   closed_positions)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     p!1
                                                     "fsp2!1`seq(j!1)"
                                                     t2!1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (Pos_Over_character formula-decl nil orthogonality nil)
    (SPP? const-decl "bool" positions nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (SP type-eq-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (closed_positions formula-decl nil positions nil)
    (< const-decl "bool" reals nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)"))
  (divergence_in_Pos_Over_TCC3-2 "" 3756671172
   ("" (skosimp)
    (("" (skeep)
      (("" (expand parallel_reduction_fix? -4)
        (("" (skosimp)
          (("" (expand* member_seq finseq_appl)
            (("" (skosimp)
              (("" (lemma Pos_Over_character)
                (("" (inst -1 fsp1!1 fsp2!1)
                  (("" (expand SPP?)
                    (("" (flatten)
                      (("" (assert)
                        (("" (inst -1 i!1)
                          (("" (replace -11 -1 rl)
                            (("" (hide -11)
                              ((""
                                (split)
                                (("1"
                                  (replace -10 1)
                                  (("1"
                                    (rewrite
                                     replace_par_pos_preservs_pos)
                                    (("1"
                                      (expand SPP?)
                                      (("1"
                                        (rewrite
                                         add_first_parallel_pos_to_SP_is_SP)
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (expand sigma_rhs 1)
                                      (("2"
                                        (expand empty_seq)
                                        (("2"
                                          (lift-if)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (lemma replace_par_pos_preservs_PP)
                                    (("2"
                                      (inst
                                       -1
                                       fsp2!1
                                       "sigma_rhs(fss!1, fse!1)"
                                       t!1)
                                      (("2"
                                        (expand sigma_rhs -1 1)
                                        (("2"
                                          (expand SPP?)
                                          (("2"
                                            (expand finseq_appl)
                                            (("2"
                                              (inst -1 j!1)
                                              (("2"
                                                (replace -11 -1 rl)
                                                (("2"
                                                  (lemma
                                                   closed_positions)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     p!1
                                                     "fsp2!1`seq(j!1)"
                                                     t2!1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (closed_positions formula-decl nil positions nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (SP type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (SPP? const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis
     nil))
   shostak
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)"))
  (divergence_in_Pos_Over_TCC3-1 nil 3573980925
   ("" (skosimp)
    (("" (skeep)
      (("" (expand parallel_reduction_fix? -2)
        (("" (skosimp)
          (("" (expand* member_seq finseq_appl)
            (("" (skosimp)
              (("" (lemma Pos_Over_character)
                (("" (inst -1 fsp1!1 fsp2!1)
                  (("" (expand SPP?)
                    (("" (flatten)
                      (("" (assert)
                        (("" (inst -1 i!1)
                          (("" (replace -2 -1 rl)
                            (("" (hide -2)
                              ((""
                                (split)
                                (("1"
                                  (replace -5 1)
                                  (("1"
                                    (rewrite
                                     replace_par_pos_preservs_pos)
                                    (("1"
                                      (expand SPP?)
                                      (("1"
                                        (rewrite
                                         add_first_parallel_pos_to_SP_is_SP)
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (expand sigma_rhs 1)
                                      (("2"
                                        (expand empty_seq)
                                        (("2"
                                          (lift-if)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (lemma replace_par_pos_preservs_PP)
                                    (("2"
                                      (inst
                                       -1
                                       fsp2!1
                                       "sigma_rhs(fss!1, fse!1)"
                                       t!1)
                                      (("2"
                                        (expand sigma_rhs -1 1)
                                        (("2"
                                          (expand SPP?)
                                          (("2"
                                            (expand finseq_appl)
                                            (("2"
                                              (inst -1 j!1)
                                              (("2"
                                                (replace -6 -1 rl)
                                                (("2"
                                                  (lemma
                                                   closed_positions)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     p!1
                                                     "fsp2!1`seq(j!1)"
                                                     t2!1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (closed_positions formula-decl nil positions nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (SP type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (SPP? const-decl "bool" positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis
     nil))
   nil
   (divergence_in_Pos_Over subtype "orthogonality.p"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)")))
 (divergence_in_Pos_Over 0
  (divergence_in_Pos_Over-1 nil 3573835906
   ("" (skeep)
    (("" (expand* member_seq finseq_appl)
      (("" (skosimp)
        (("" (lemma Pos_Over_is_sub_seq)
          (("" (inst -1 fsp1 fsp2)
            (("" (expand SPP?)
              (("" (flatten)
                (("" (assert)
                  (("" (expand* subseq finseq_appl)
                    (("" (inst -1 i!1)
                      (("" (expand* member_seq finseq_appl)
                        (("" (skosimp)
                          (("" (lemma divergence_in_Pos_Over_aux)
                            (("" (inst -1 E fsp2 p t t2)
                              ((""
                                (expand SPP?)
                                ((""
                                  (prop)
                                  (("1"
                                    (expand parallel_reduction_fix? -7)
                                    (("1"
                                      (skosimp -7)
                                      (("1"
                                        (inst
                                         1
                                         "fse!1`seq(i!2)"
                                         "fss!1`seq(i!2)")
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand subtermsOF -9)
                                            (("1"
                                              (expand sigma_lhs -9)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (expand*
                                                   empty_seq
                                                   finseq_appl)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide -3)
                                                      (("1"
                                                        (decompose-equality
                                                         -2)
                                                        (("1"
                                                          (inst -1 i!2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           SP?
                                                           -7)
                                                          (("2"
                                                            (expand
                                                             finseq_appl)
                                                            (("2"
                                                              (inst
                                                               -7
                                                               x!1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             replace_par_pos_subterm)
                                            (("2"
                                              (inst
                                               -1
                                               fsp1
                                               "sigma_rhs(fss!1, fse!1)"
                                               t)
                                              (("2"
                                                (expand SPP?)
                                                (("2"
                                                  (expand
                                                   sigma_rhs
                                                   -1
                                                   1)
                                                  (("2"
                                                    (expand empty_seq)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         finseq_appl)
                                                        (("2"
                                                          (inst -1 i!2)
                                                          (("2"
                                                            (replace
                                                             -11
                                                             -1
                                                             rl)
                                                            (("2"
                                                              (expand
                                                               sigma_rhs
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 finseq_appl)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand
                                             parallel_reduction?
                                             1)
                                            (("3"
                                              (inst
                                               1
                                               "complement_pos(p, fsp2)")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (typepred fse!1)
                                          (("3"
                                            (hide-all-but (-1 1))
                                            (("3"
                                              (expand "subset?")
                                              (("3"
                                                (expand "subset?")
                                                (("3"
                                                  (expand "member")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand
                                                         "seq2set")
                                                        (("3"
                                                          (expand
                                                           "finseq_appl")
                                                          (("3"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand SP? -3)
                                      (("2"
                                        (expand finseq_appl)
                                        (("2"
                                          (inst -3 i!2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (lemma Pos_Over_character)
                                      (("3"
                                        (inst -1 fsp1 fsp2)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst -1 i!1)
                                            (("3"
                                              (replace -9 -1 rl)
                                              (("3"
                                                (replace -9 -2 rl)
                                                (("3"
                                                  (hide -9)
                                                  (("3"
                                                    (split)
                                                    (("1"
                                                      (expand*
                                                       member_seq
                                                       finseq_appl)
                                                      (("1"
                                                        (inst 1 0)
                                                        (("1"
                                                          (expand "#")
                                                          (("1"
                                                            (expand
                                                             Pos_Over
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand*
                                                                 add_first
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   insert?)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "#")
                                                          (("2"
                                                            (expand
                                                             Pos_Over
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 add_first
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   insert?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (expand*
                                                         "#"
                                                         Pos_Over)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (expand*
                                                               add_first
                                                               insert?
                                                               member_seq
                                                               finseq_appl)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 0)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 1)
                                                              (("2"
                                                                (expand*
                                                                 add_first
                                                                 insert?)
                                                                (("2"
                                                                  (expand
                                                                   PP?
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     finseq_appl)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       0
                                                                       1+j!1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           parallel)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               sub_pos_element)
                                                              (("3"
                                                                (expand
                                                                 <=
                                                                 -2)
                                                                (("3"
                                                                  (skosimp)
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     fsp2
                                                                     p
                                                                     p1!1)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           member_seq
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             finseq_appl)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               j!1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (rewrite
                                                                             empty_0
                                                                             -1)
                                                                            (("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (rewrite
                                                                                 seq_o_empty)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (divergence_in_Pos_Over_aux formula-decl nil orthogonality nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (p skolem-const-decl "position[variable, symbol, arity]"
     orthogonality nil)
    (fsp2 skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rest const-decl "finseq" seq_extras structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (parallel const-decl "bool" positions nil)
    (<= const-decl "bool" positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (TRUE const-decl "bool" booleans nil)
    (sub_pos_element formula-decl nil orthogonality nil)
    (Pos_Over_character formula-decl nil orthogonality nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fsp1 skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (i!2 skolem-const-decl "below[fsp1`length]" orthogonality nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (E skolem-const-decl "set[rewrite_rule[variable, symbol, arity]]"
     orthogonality nil)
    (fse!1 skolem-const-decl "{fse | subset?(fse, E)}" orthogonality
     nil)
    (member const-decl "bool" sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (fss!1 skolem-const-decl "finseq[Sub[variable, symbol, arity]]"
     orthogonality nil)
    (parallel_reduction? const-decl "bool" orthogonality_basis nil)
    (SPP type-eq-decl nil positions nil)
    (complement_pos def-decl
     "finseq[position[variable, symbol, arity]]" orthogonality_basis
     nil)
    (replace_par_pos_subterm formula-decl nil orthogonality_basis nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (subtermsOF const-decl "finseq[term]" orthogonality_basis nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (lhs const-decl "term" rewrite_rules nil)
    (ext def-decl "term" substitution nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (SP? const-decl "bool" positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (sigma_lhs const-decl "finseq[term]" orthogonality_basis nil)
    (subset? const-decl "bool" sets nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (below type-eq-decl nil naturalnumbers nil)
    (term type-decl nil term_adt nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil) (< const-decl "bool" reals nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (SPP? const-decl "bool" positions nil)
    (Pos_Over_is_sub_seq formula-decl nil orthogonality nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (subterm_joinability_TCC1 0
  (subterm_joinability_TCC1-3 "" 3803875412
   ("" (expand finseq_appl)
    (("" (skosimp)
      (("" (skosimp)
        (("" (hide -2)
          (("" (expand parallel_reduction_fix?)
            (("" (skosimp)
              (("" (lemma replace_par_pos_preservs_PP)
                (("" (inst -1 fsp1!1 "sigma_rhs(fss!1, fse!1)" t!1)
                  (("" (expand sigma_rhs -1 1)
                    (("" (expand* SPP? empty_seq finseq_appl)
                      (("" (flatten)
                        (("" (assert)
                          (("" (lift-if)
                            (("" (assert)
                              ((""
                                (replace -2 1)
                                ((""
                                  (expand o 1)
                                  ((""
                                    (prop)
                                    (("1"
                                      (lemma Pos_Over_is_sub_seq)
                                      (("1"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand*
                                             subseq
                                             member_seq
                                             finseq_appl)
                                            (("1"
                                              (inst -1 i!1)
                                              (("1"
                                                (name-replace
                                                 "A"
                                                 "Pos_Over(fsp1!1, fsp2!1)`seq(i!1)")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (inst -3 i!2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma Pos_Over_character)
                                      (("2"
                                        (inst -1 fsp2!1 fsp1!1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             -1
                                             "i!1 - Pos_Over(fsp1!1, fsp2!1)`length")
                                            (("2"
                                              (name-replace
                                               "A"
                                               "Pos_Over(fsp2!1, fsp1!1)`seq(i!1 - Pos_Over(fsp1!1, fsp2!1)`length)")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replace -8 2)
                                                  (("1"
                                                    (rewrite
                                                     replace_par_pos_preservs_pos)
                                                    (("1"
                                                      (expand SPP?)
                                                      (("1"
                                                        (rewrite
                                                         add_first_parallel_pos_to_SP_is_SP)
                                                        (("1"
                                                          (lemma
                                                           Pos_Over_is_sub_seq)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             fsp2!1
                                                             fsp1!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand*
                                                                 subseq
                                                                 member_seq
                                                                 finseq_appl)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "i!1 - Pos_Over(fsp1!1, fsp2!1)`length")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (expand
                                                                       SP?
                                                                       -11)
                                                                      (("1"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (inst
                                                                           -11
                                                                           i!2)
                                                                          (("1"
                                                                            (expand
                                                                             A
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       sigma_rhs
                                                       1)
                                                      (("2"
                                                        (expand
                                                         empty_seq)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -3 j!1)
                                                    (("2"
                                                      (lemma
                                                       closed_positions)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         A
                                                         "fsp1!1`seq(j!1)"
                                                         t1!1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma Pos_Equal_is_sub_seq)
                                      (("3"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (expand*
                                             subseq
                                             member_seq
                                             finseq_appl)
                                            (("3"
                                              (inst
                                               -1
                                               "-1 * Pos_Over(fsp1!1, fsp2!1)`length - Pos_Over(fsp2!1, fsp1!1)`length + i!1")
                                              (("3"
                                                (skosimp)
                                                (("3"
                                                  (replaces -1)
                                                  (("3"
                                                    (inst -1 i!2)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (TRUE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Pos_Over_is_sub_seq formula-decl nil orthogonality nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (SP type-eq-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (A skolem-const-decl "position[variable, symbol, arity]"
     orthogonality nil)
    (closed_positions formula-decl nil positions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Pos_Over_character formula-decl nil orthogonality nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Pos_Equal_is_sub_seq formula-decl nil orthogonality nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (SPP? const-decl "bool" positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   shostak
   (subterm_joinability subtype
    "finite_sequences[position[variable, symbol, arity]].finseq_appl(orthogonality.fsp)(orthogonality.i)"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t1)"))
  (subterm_joinability_TCC1-2 "" 3756671541
   ("" (expand finseq_appl)
    (("" (skosimp)
      (("" (skosimp)
        (("" (hide -5)
          (("" (expand parallel_reduction_fix?)
            (("" (skosimp)
              (("" (lemma replace_par_pos_preservs_PP)
                (("" (inst -1 fsp1!1 "sigma_rhs(fss!1, fse!1)" t!1)
                  (("" (expand sigma_rhs -1 1)
                    (("" (expand* SPP? empty_seq finseq_appl)
                      (("" (flatten)
                        (("" (assert)
                          (("" (lift-if)
                            (("" (assert)
                              ((""
                                (replace -11 1)
                                ((""
                                  (expand o 1)
                                  ((""
                                    (prop)
                                    (("1"
                                      (lemma Pos_Over_is_sub_seq)
                                      (("1"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand*
                                             subseq
                                             member_seq
                                             finseq_appl)
                                            (("1"
                                              (inst -1 i!1)
                                              (("1"
                                                (name-replace
                                                 "A"
                                                 "Pos_Over(fsp1!1, fsp2!1)`seq(i!1)")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (inst -3 i!2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma Pos_Over_character)
                                      (("2"
                                        (inst -1 fsp2!1 fsp1!1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             -1
                                             "i!1 - Pos_Over(fsp1!1, fsp2!1)`length")
                                            (("2"
                                              (name-replace
                                               "A"
                                               "Pos_Over(fsp2!1, fsp1!1)`seq(i!1 - Pos_Over(fsp1!1, fsp2!1)`length)")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replace -12 2)
                                                  (("1"
                                                    (rewrite
                                                     replace_par_pos_preservs_pos)
                                                    (("1"
                                                      (expand SPP?)
                                                      (("1"
                                                        (rewrite
                                                         add_first_parallel_pos_to_SP_is_SP)
                                                        (("1"
                                                          (lemma
                                                           Pos_Over_is_sub_seq)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             fsp2!1
                                                             fsp1!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand*
                                                                 subseq
                                                                 member_seq
                                                                 finseq_appl)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "i!1 - Pos_Over(fsp1!1, fsp2!1)`length")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (expand
                                                                       SP?
                                                                       -9)
                                                                      (("1"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (inst
                                                                           -9
                                                                           i!2)
                                                                          (("1"
                                                                            (expand
                                                                             A
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       sigma_rhs
                                                       1)
                                                      (("2"
                                                        (expand
                                                         empty_seq)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -3 j!1)
                                                    (("2"
                                                      (lemma
                                                       closed_positions)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         A
                                                         "fsp1!1`seq(j!1)"
                                                         t1!1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma Pos_Equal_is_sub_seq)
                                      (("3"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (expand*
                                             subseq
                                             member_seq
                                             finseq_appl)
                                            (("3"
                                              (inst
                                               -1
                                               "-1 * Pos_Over(fsp1!1, fsp2!1)`length -

                                              Pos_Over(fsp2!1, fsp1!1)`length

                                              + i!1")
                                              (("3"
                                                (skosimp)
                                                (("3"
                                                  (replaces -1)
                                                  (("3"
                                                    (inst -1 i!2)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (SPP? const-decl "bool" positions nil)
    (O const-decl "finseq" finite_sequences nil)
    (closed_positions formula-decl nil positions nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (SP type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak
   (subterm_joinability subtype
    "finite_sequences[position[variable, symbol, arity]].finseq_appl(orthogonality.fsp)(orthogonality.i)"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t1)"))
  (subterm_joinability_TCC1-1 nil 3573902467
   ("" (expand finseq_appl)
    (("" (skosimp)
      (("" (skosimp)
        (("" (hide -2)
          (("" (expand parallel_reduction_fix?)
            (("" (skosimp)
              (("" (lemma replace_par_pos_preservs_PP)
                (("" (inst -1 fsp1!1 "sigma_rhs(fss!1, fse!1)" t!1)
                  (("" (expand sigma_rhs -1 1)
                    (("" (expand* SPP? empty_seq finseq_appl)
                      (("" (flatten)
                        (("" (assert)
                          (("" (lift-if)
                            (("" (assert)
                              ((""
                                (replace -2 1)
                                ((""
                                  (expand o 1)
                                  ((""
                                    (prop)
                                    (("1"
                                      (lemma Pos_Over_is_sub_seq)
                                      (("1"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand*
                                             subseq
                                             member_seq
                                             finseq_appl)
                                            (("1"
                                              (inst -1 i!1)
                                              (("1"
                                                (name-replace
                                                 "A"
                                                 "Pos_Over(fsp1!1, fsp2!1)`seq(i!1)")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (inst -3 i!2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma Pos_Over_character)
                                      (("2"
                                        (inst -1 fsp2!1 fsp1!1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             -1
                                             "i!1 - Pos_Over(fsp1!1, fsp2!1)`length")
                                            (("2"
                                              (name-replace
                                               "A"
                                               "Pos_Over(fsp2!1, fsp1!1)`seq(i!1 - Pos_Over(fsp1!1, fsp2!1)`length)")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replace -8 2)
                                                  (("1"
                                                    (rewrite
                                                     replace_par_pos_preservs_pos)
                                                    (("1"
                                                      (expand SPP?)
                                                      (("1"
                                                        (rewrite
                                                         add_first_parallel_pos_to_SP_is_SP)
                                                        (("1"
                                                          (lemma
                                                           Pos_Over_is_sub_seq)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             fsp2!1
                                                             fsp1!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand*
                                                                 subseq
                                                                 member_seq
                                                                 finseq_appl)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "i!1 - Pos_Over(fsp1!1, fsp2!1)`length")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (expand
                                                                       SP?
                                                                       -11)
                                                                      (("1"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (inst
                                                                           -11
                                                                           i!2)
                                                                          (("1"
                                                                            (expand
                                                                             A
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       sigma_rhs
                                                       1)
                                                      (("2"
                                                        (expand
                                                         empty_seq)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -3 j!1)
                                                    (("2"
                                                      (lemma
                                                       closed_positions)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         A
                                                         "fsp1!1`seq(j!1)"
                                                         t1!1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma Pos_Equal_is_sub_seq)
                                      (("3"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (expand*
                                             subseq
                                             member_seq
                                             finseq_appl)
                                            (("3"
                                              (inst
                                               -1
                                               "-1 * Pos_Over(fsp1!1, fsp2!1)`length -
                                          Pos_Over(fsp2!1, fsp1!1)`length
                                          + i!1")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (inst -1 i!2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred i!1)
                                                (("2"
                                                  (replace -3 -1)
                                                  (("2"
                                                    (expand o -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (SPP? const-decl "bool" positions nil)
    (O const-decl "finseq" finite_sequences nil)
    (closed_positions formula-decl nil positions nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (SP type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (subterm_joinability subtype
    "finite_sequences[position[variable, symbol, arity]].finseq_appl(orthogonality.fsp)(orthogonality.i)"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t1)")))
 (subterm_joinability_TCC2 0
  (subterm_joinability_TCC2-3 "" 3803876231
   ("" (expand finseq_appl)
    (("" (skosimp)
      (("" (skosimp)
        (("" (hide -3)
          (("" (expand parallel_reduction_fix?)
            (("" (skosimp)
              (("" (lemma replace_par_pos_preservs_PP)
                (("" (inst -1 fsp2!1 "sigma_rhs(fss!1, fse!1)" t!1)
                  (("" (expand sigma_rhs -1 1)
                    (("" (expand* SPP? empty_seq finseq_appl)
                      (("" (flatten)
                        (("" (assert)
                          (("" (lift-if)
                            (("" (assert)
                              ((""
                                (replace -2 1)
                                ((""
                                  (expand o 1)
                                  ((""
                                    (prop)
                                    (("1"
                                      (lemma Pos_Over_character)
                                      (("1"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -1 i!1)
                                            (("1"
                                              (name-replace
                                               "A"
                                               "Pos_Over(fsp1!1, fsp2!1)`seq(i!1)")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (replace -9 1)
                                                  (("1"
                                                    (rewrite
                                                     replace_par_pos_preservs_pos)
                                                    (("1"
                                                      (expand SPP?)
                                                      (("1"
                                                        (rewrite
                                                         add_first_parallel_pos_to_SP_is_SP)
                                                        (("1"
                                                          (lemma
                                                           Pos_Over_is_sub_seq)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             fsp1!1
                                                             fsp2!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand*
                                                                 subseq
                                                                 member_seq
                                                                 finseq_appl)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   i!1)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (expand
                                                                       SP?
                                                                       -14)
                                                                      (("1"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (inst
                                                                           -14
                                                                           i!2)
                                                                          (("1"
                                                                            (expand
                                                                             A
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       sigma_rhs
                                                       1)
                                                      (("2"
                                                        (expand
                                                         empty_seq)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -4 j!1)
                                                    (("2"
                                                      (lemma
                                                       closed_positions)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         A
                                                         "fsp2!1`seq(j!1)"
                                                         t2!1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma Pos_Over_is_sub_seq)
                                      (("2"
                                        (inst -1 fsp2!1 fsp1!1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand*
                                             subseq
                                             member_seq
                                             finseq_appl)
                                            (("2"
                                              (inst
                                               -1
                                               "i!1 - Pos_Over(fsp1!1, fsp2!1)`length")
                                              (("2"
                                                (name-replace
                                                 "A"
                                                 "Pos_Over(fsp2!1, fsp1!1)`seq(i!1 - Pos_Over(fsp1!1, fsp2!1)`length)")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (inst -2 i!2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma Pos_Equal_character)
                                      (("3"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst
                                             -1
                                             "-1 * Pos_Over(fsp1!1, fsp2!1)`length - Pos_Over(fsp2!1, fsp1!1)`length + i!1")
                                            (("3"
                                              (skosimp)
                                              (("3"
                                                (replaces -1)
                                                (("3"
                                                  (inst -1 j!1)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (< const-decl "bool" reals nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (SP type-eq-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (A skolem-const-decl "position[variable, symbol, arity]"
     orthogonality nil)
    (Pos_Over_is_sub_seq formula-decl nil orthogonality nil)
    (closed_positions formula-decl nil positions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Pos_Over_character formula-decl nil orthogonality nil)
    (TRUE const-decl "bool" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Pos_Equal_character formula-decl nil orthogonality nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (SPP? const-decl "bool" positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   shostak
   (subterm_joinability subtype
    "finite_sequences[position[variable, symbol, arity]].finseq_appl(orthogonality.fsp)(orthogonality.i)"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)"))
  (subterm_joinability_TCC2-2 "" 3756671879
   ("" (expand finseq_appl)
    (("" (skosimp)
      (("" (skosimp)
        (("" (hide -4)
          (("" (expand parallel_reduction_fix?)
            (("" (skosimp)
              (("" (lemma replace_par_pos_preservs_PP)
                (("" (inst -1 fsp2!1 "sigma_rhs(fss!1, fse!1)" t!1)
                  (("" (expand sigma_rhs -1 1)
                    (("" (expand* SPP? empty_seq finseq_appl)
                      (("" (flatten)
                        (("" (assert)
                          (("" (lift-if)
                            (("" (assert)
                              ((""
                                (replace -11 1)
                                ((""
                                  (expand o 1)
                                  ((""
                                    (prop)
                                    (("1"
                                      (lemma Pos_Over_character)
                                      (("1"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -1 i!1)
                                            (("1"
                                              (name-replace
                                               "A"
                                               "Pos_Over(fsp1!1, fsp2!1)`seq(i!1)")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (replace -13 1)
                                                  (("1"
                                                    (rewrite
                                                     replace_par_pos_preservs_pos)
                                                    (("1"
                                                      (expand SPP?)
                                                      (("1"
                                                        (rewrite
                                                         add_first_parallel_pos_to_SP_is_SP)
                                                        (("1"
                                                          (lemma
                                                           Pos_Over_is_sub_seq)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             fsp1!1
                                                             fsp2!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand*
                                                                 subseq
                                                                 member_seq
                                                                 finseq_appl)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   i!1)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (expand
                                                                       SP?
                                                                       -8)
                                                                      (("1"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           i!2)
                                                                          (("1"
                                                                            (expand
                                                                             A
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       sigma_rhs
                                                       1)
                                                      (("2"
                                                        (expand
                                                         empty_seq)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -4 j!1)
                                                    (("2"
                                                      (lemma
                                                       closed_positions)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         A
                                                         "fsp2!1`seq(j!1)"
                                                         t2!1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma Pos_Over_is_sub_seq)
                                      (("2"
                                        (inst -1 fsp2!1 fsp1!1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand*
                                             subseq
                                             member_seq
                                             finseq_appl)
                                            (("2"
                                              (inst
                                               -1
                                               "i!1 - Pos_Over(fsp1!1, fsp2!1)`length")
                                              (("2"
                                                (name-replace
                                                 "A"
                                                 "Pos_Over(fsp2!1, fsp1!1)`seq(i!1 - Pos_Over(fsp1!1, fsp2!1)`length)")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (inst -2 i!2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma Pos_Equal_character)
                                      (("3"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst
                                             -1
                                             "-1 * Pos_Over(fsp1!1, fsp2!1)`length -

                                                  Pos_Over(fsp2!1, fsp1!1)`length

                                                  + i!1")
                                            (("3"
                                              (skosimp)
                                              (("3"
                                                (replaces -1)
                                                (("3"
                                                  (inst -1 j!1)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (SPP? const-decl "bool" positions nil)
    (O const-decl "finseq" finite_sequences nil)
    (closed_positions formula-decl nil positions nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (SP type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak
   (subterm_joinability subtype
    "finite_sequences[position[variable, symbol, arity]].finseq_appl(orthogonality.fsp)(orthogonality.i)"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)"))
  (subterm_joinability_TCC2-1 nil 3573902467
   ("" (expand finseq_appl)
    (("" (skosimp)
      (("" (skosimp)
        (("" (hide -3)
          (("" (expand parallel_reduction_fix?)
            (("" (skosimp)
              (("" (lemma replace_par_pos_preservs_PP)
                (("" (inst -1 fsp2!1 "sigma_rhs(fss!1, fse!1)" t!1)
                  (("" (expand sigma_rhs -1 1)
                    (("" (expand* SPP? empty_seq finseq_appl)
                      (("" (flatten)
                        (("" (assert)
                          (("" (lift-if)
                            (("" (assert)
                              ((""
                                (replace -2 1)
                                ((""
                                  (expand o 1)
                                  ((""
                                    (prop)
                                    (("1"
                                      (lemma Pos_Over_character)
                                      (("1"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -1 i!1)
                                            (("1"
                                              (name-replace
                                               "A"
                                               "Pos_Over(fsp1!1, fsp2!1)`seq(i!1)")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (replace -9 1)
                                                  (("1"
                                                    (rewrite
                                                     replace_par_pos_preservs_pos)
                                                    (("1"
                                                      (expand SPP?)
                                                      (("1"
                                                        (rewrite
                                                         add_first_parallel_pos_to_SP_is_SP)
                                                        (("1"
                                                          (lemma
                                                           Pos_Over_is_sub_seq)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             fsp1!1
                                                             fsp2!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand*
                                                                 subseq
                                                                 member_seq
                                                                 finseq_appl)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   i!1)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (expand
                                                                       SP?
                                                                       -14)
                                                                      (("1"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (inst
                                                                           -14
                                                                           i!2)
                                                                          (("1"
                                                                            (expand
                                                                             A
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       sigma_rhs
                                                       1)
                                                      (("2"
                                                        (expand
                                                         empty_seq)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -4 j!1)
                                                    (("2"
                                                      (lemma
                                                       closed_positions)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         A
                                                         "fsp2!1`seq(j!1)"
                                                         t2!1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma Pos_Over_is_sub_seq)
                                      (("2"
                                        (inst -1 fsp2!1 fsp1!1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand*
                                             subseq
                                             member_seq
                                             finseq_appl)
                                            (("2"
                                              (inst
                                               -1
                                               "i!1 - Pos_Over(fsp1!1, fsp2!1)`length")
                                              (("2"
                                                (name-replace
                                                 "A"
                                                 "Pos_Over(fsp2!1, fsp1!1)`seq(i!1 - Pos_Over(fsp1!1, fsp2!1)`length)")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (inst -2 i!2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma Pos_Equal_character)
                                      (("3"
                                        (inst -1 fsp1!1 fsp2!1)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst
                                             -1
                                             "-1 * Pos_Over(fsp1!1, fsp2!1)`length -
                                              Pos_Over(fsp2!1, fsp1!1)`length
                                              + i!1")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (inst -1 j!1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred i!1)
                                              (("2"
                                                (replace -3 -1)
                                                (("2"
                                                  (expand o -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (SPP? const-decl "bool" positions nil)
    (O const-decl "finseq" finite_sequences nil)
    (closed_positions formula-decl nil positions nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (SP type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (subterm_joinability subtype
    "finite_sequences[position[variable, symbol, arity]].finseq_appl(orthogonality.fsp)(orthogonality.i)"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)")))
 (subterm_joinability 0
  (subterm_joinability-1 nil 3574794210
   ("" (skeep)
    (("" (skeep)
      (("" (expand finseq_appl)
        (("" (typepred i)
          (("" (replace -7 -1)
            (("" (expand o -1)
              (("" (case "i<Pos_Over(fsp1, fsp2)`length")
                (("1" (lemma "divergence_in_Pos_Over")
                  (("1" (inst -1 E fsp1 fsp2 "fsp`seq(i)" t t1 t2)
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (skosimp)
                          (("1" (lemma Parallel_Moves_Lemma)
                            (("1"
                              (inst -1 E e!1 sigma!1
                               "subtermOF(t2, fsp`seq(i))")
                              (("1"
                                (assert)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst 1 s!1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand* member_seq finseq_appl)
                          (("2" (inst 1 i)
                            (("2" (replace -8 1)
                              (("2"
                                (expand o 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (case "i<Pos_Over(fsp1, fsp2)`length + Pos_Over(fsp2, fsp1)`length")
                  (("1" (lemma divergence_in_Pos_Over)
                    (("1" (inst -1 E fsp2 fsp1 "fsp`seq(i)" t t2 t1)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (skosimp)
                            (("1" (lemma Parallel_Moves_Lemma)
                              (("1"
                                (inst
                                 -1
                                 E
                                 e!1
                                 sigma!1
                                 "subtermOF(t1, fsp`seq(i))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst 2 s!1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand* member_seq finseq_appl)
                            (("2"
                              (inst 1
                               "i - Pos_Over(fsp1, fsp2)`length")
                              (("2"
                                (replace -8 1)
                                (("2"
                                  (expand o 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma non_ambiguous_implies_same_term)
                    (("2" (lemma Pos_Equal_is_sub_seq)
                      (("2" (lemma Pos_Equal_character)
                        (("2" (inst -1 fsp1 fsp2)
                          (("2" (inst -2 fsp1 fsp2)
                            (("2" (expand SPP?)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand* subseq finseq_appl)
                                    (("2"
                                      (inst
                                       -2
                                       "i - Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length")
                                      (("2"
                                        (expand*
                                         member_seq
                                         finseq_appl)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst
                                             -1
                                             "i - Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (inst
                                                 -3
                                                 E
                                                 empty_seq
                                                 "subtermOF(t, fsp`seq(i))"
                                                 "subtermOF(t1, fsp`seq(i))"
                                                 "subtermOF(t2, fsp`seq(i))")
                                                (("1"
                                                  (expand Orthogonal?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           4
                                                           "subtermOF(t1, fsp`seq(i))")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             4
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 parallel_reduction_reflexive)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   E)
                                                                  (("1"
                                                                    (expand
                                                                     reflexive?)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "subtermOF(t1, fsp`seq(i))")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             positionsOF)
                                                            (("2"
                                                              (expand*
                                                               only_empty_seq
                                                               union
                                                               empty_seq
                                                               member)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     1
                                                                     3)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide
                                                           -1
                                                           -7
                                                           -8
                                                           -10
                                                           5)
                                                          (("3"
                                                            (expand
                                                             reduction_fix?)
                                                            (("3"
                                                              (expand
                                                               parallel_reduction_fix?)
                                                              (("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (inst
                                                                   1
                                                                   "fse!1`seq(i!1)"
                                                                   "fss!1`seq(i!1)")
                                                                  (("1"
                                                                    (expand
                                                                     empty_seq)
                                                                    (("1"
                                                                      (expand
                                                                       subtermOF
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         replaceTerm
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -10
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             o
                                                                             1)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (expand*
                                                                                   subtermsOF
                                                                                   sigma_lhs
                                                                                   empty_seq
                                                                                   finseq_appl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -8)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         i!1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand*
                                                                                         SP?
                                                                                         finseq_appl)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -7
                                                                                           x!1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   replace_par_pos_subterm)
                                                                                  (("2"
                                                                                    (expand
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       fsp1
                                                                                       "sigma_rhs(fss!1, fse!1)"
                                                                                       t)
                                                                                      (("2"
                                                                                        (expand
                                                                                         SPP?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           sigma_rhs
                                                                                           -1
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             empty_seq)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   i!1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     sigma_rhs
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       finseq_appl)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (typepred
                                                                     fse!1)
                                                                    (("3"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("3"
                                                                        (expand
                                                                         "subset?")
                                                                        (("3"
                                                                          (expand
                                                                           "subset?")
                                                                          (("3"
                                                                            (expand
                                                                             "member")
                                                                            (("3"
                                                                              (inst?)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (expand
                                                                                   "seq2set")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "finseq_appl")
                                                                                    (("3"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide
                                                           -2
                                                           -5
                                                           -6
                                                           -9
                                                           5)
                                                          (("4"
                                                            (expand
                                                             empty_seq)
                                                            (("4"
                                                              (expand
                                                               reduction_fix?)
                                                              (("4"
                                                                (expand
                                                                 parallel_reduction_fix?)
                                                                (("4"
                                                                  (skosimp)
                                                                  (("4"
                                                                    (inst
                                                                     1
                                                                     "fse!1`seq(j!1)"
                                                                     "fss!1`seq(j!1)")
                                                                    (("1"
                                                                      (expand
                                                                       subtermOF
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         replaceTerm
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -10
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             o
                                                                             1)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (expand*
                                                                                   subtermsOF
                                                                                   sigma_lhs
                                                                                   empty_seq
                                                                                   finseq_appl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -8)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         j!1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand*
                                                                                         SP?
                                                                                         finseq_appl)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -7
                                                                                           x!1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   replace_par_pos_subterm)
                                                                                  (("2"
                                                                                    (expand
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       fsp2
                                                                                       "sigma_rhs(fss!1, fse!1)"
                                                                                       t)
                                                                                      (("2"
                                                                                        (expand
                                                                                         sigma_rhs
                                                                                         -1
                                                                                         (1
                                                                                          3))
                                                                                        (("2"
                                                                                          (expand*
                                                                                           SPP?
                                                                                           empty_seq
                                                                                           finseq_appl)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 j!1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (typepred
                                                                       fse!1)
                                                                      (("3"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("3"
                                                                          (expand
                                                                           "subset?")
                                                                          (("3"
                                                                            (expand
                                                                             "subset?")
                                                                            (("3"
                                                                              (expand
                                                                               "member")
                                                                              (("3"
                                                                                (inst?)
                                                                                (("3"
                                                                                  (expand
                                                                                   "seq2set")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "finseq_appl")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -11 1)
                                                  (("2"
                                                    (expand o 1)
                                                    (("2"
                                                      (expand SP? -8)
                                                      (("2"
                                                        (expand
                                                         finseq_appl)
                                                        (("2"
                                                          (inst -8 j!1)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("2"
                                                              (lemma
                                                               replace_par_pos_preservs_PP)
                                                              (("2"
                                                                (expand
                                                                 parallel_reduction_fix?
                                                                 -11)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     fsp2
                                                                     "sigma_rhs(fss!1, fse!1)"
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       sigma_rhs
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (expand*
                                                                         SPP?
                                                                         empty_seq
                                                                         finseq_appl)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               j!1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1 -7 -8 -10 4)
                                                  (("3"
                                                    (replace -7 1)
                                                    (("3"
                                                      (expand o 1)
                                                      (("3"
                                                        (replace -1 1)
                                                        (("3"
                                                          (expand
                                                           parallel_reduction_fix?)
                                                          (("3"
                                                            (skosimp)
                                                            (("3"
                                                              (lemma
                                                               replace_par_pos_preservs_PP)
                                                              (("3"
                                                                (expand
                                                                 finseq_appl)
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   fsp1
                                                                   "sigma_rhs(fss!1, fse!1)"
                                                                   t)
                                                                  (("3"
                                                                    (expand
                                                                     sigma_rhs
                                                                     -1
                                                                     1)
                                                                    (("3"
                                                                      (expand*
                                                                       SPP?
                                                                       empty_seq
                                                                       finseq_appl)
                                                                      (("3"
                                                                        (lift-if)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             i!1)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (replace -11 1)
                                                  (("4"
                                                    (expand o 1)
                                                    (("4"
                                                      (replace -1 1)
                                                      (("4"
                                                        (expand SP? -8)
                                                        (("4"
                                                          (expand
                                                           finseq_appl)
                                                          (("4"
                                                            (inst
                                                             -8
                                                             j!1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (term type-decl nil term_adt nil)
    (Parallel_Moves_Lemma formula-decl nil orthogonality_basis nil)
    (member const-decl "bool" sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (divergence_in_Pos_Over formula-decl nil orthogonality nil)
    (non_ambiguous_implies_same_term formula-decl nil
     orthogonality_basis nil)
    (Pos_Equal_character formula-decl nil orthogonality nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (t skolem-const-decl "term" orthogonality nil)
    (fsp skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (i skolem-const-decl "below[fsp`length]" orthogonality nil)
    (t1 skolem-const-decl "term" orthogonality nil)
    (t2 skolem-const-decl "term" orthogonality nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (parallel_reduction_reflexive formula-decl nil orthogonality_basis
     nil)
    (reflexive? const-decl "bool" relations nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (catenate const-decl "positions" positions nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (only_empty_seq const-decl "positions" positions nil)
    (union const-decl "set" sets nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (subset? const-decl "bool" sets nil)
    (replaceTerm def-decl "term" replacement nil)
    (SP? const-decl "bool" positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ext def-decl "term" substitution nil)
    (lhs const-decl "term" rewrite_rules nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subtermsOF const-decl "finseq[term]" orthogonality_basis nil)
    (sigma_lhs const-decl "finseq[term]" orthogonality_basis nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (replace_par_pos_subterm formula-decl nil orthogonality_basis nil)
    (fss!1 skolem-const-decl "finseq[Sub[variable, symbol, arity]]"
     orthogonality nil)
    (fse!1 skolem-const-decl "{fse | subset?(fse, E)}" orthogonality
     nil)
    (E skolem-const-decl "set[rewrite_rule[variable, symbol, arity]]"
     orthogonality nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (i!1 skolem-const-decl "below[fsp1`length]" orthogonality nil)
    (fsp1 skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (fsp2 skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (j!1 skolem-const-decl "below[fsp2`length]" orthogonality nil)
    (fse!1 skolem-const-decl "{fse | subset?(fse, E)}" orthogonality
     nil)
    (fss!1 skolem-const-decl "finseq[Sub[variable, symbol, arity]]"
     orthogonality nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Orthogonal? const-decl "bool" orthogonality_basis nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (SPP? const-decl "bool" positions nil)
    (Pos_Equal_is_sub_seq formula-decl nil orthogonality nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (subterms_joinability_TCC1 0
  (subterms_joinability_TCC1-2 "" 3912758187
   ("" (skosimp) (("" (skosimp) (("" (assert) nil nil)) nil)) nil) nil
   shostak
   (subterms_joinability subtype "orthogonality.i"
    "below[length(fst)]"))
  (subterms_joinability_TCC1-1 nil 3568624547
   ("" (then (skosimp) (skosimp) (assert)) nil) nil nil
   (subterms_joinability subtype "orthogonality.i"
    "below[length(fst)]")))
 (subterms_joinability_TCC2 0
  (subterms_joinability_TCC2-2 "" 3912758187
   ("" (lemma subterm_joinability_TCC2)
    (("" (skosimp)
      (("" (skosimp)
        (("" (skosimp)
          (("" (expand finseq_appl)
            (("" (inst -1 E!1 fsp!1 fsp1!1 fsp2!1 t!1 t1!1 t2!1)
              (("" (assert)
                (("" (inst -1 i!1 "fst!1`seq(i!1)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (subterms_joinability subtype
    "finite_sequences[position[variable, symbol, arity]].finseq_appl(orthogonality.fsp)(orthogonality.i)"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)"))
  (subterms_joinability_TCC2-1 nil 3568624547
   (""
    (then (lemma subterm_joinability_TCC2) (skosimp) (skosimp)
     (skosimp) (expand finseq_appl)
     (inst -1 E!1 fsp!1 fsp1!1 fsp2!1 t!1 t1!1 t2!1) (assert)
     (inst -1 i!1 "fst!1`seq(i!1)") (assert))
    nil)
   ((subterm_joinability_TCC2 subtype-tcc nil orthogonality nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (< const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil))
   nil
   (subterms_joinability subtype
    "finite_sequences[position[variable, symbol, arity]].finseq_appl(orthogonality.fsp)(orthogonality.i)"
    "positions[orthogonality.variable, orthogonality.symbol, orthogonality.arity].positions?(orthogonality.t2)")))
 (subterms_joinability 0
  (subterms_joinability-1 nil 3568624548
   ("" (expand finseq_appl)
    (("" (skeep)
      (("" (lemma subterm_joinability)
        (("" (expand finseq_appl)
          (("" (inst -1 E fsp fsp1 fsp2 t t1 t2)
            (("" (assert)
              (("" (lemma seq_construct1[term])
                ((""
                  (inst -1 "parallel_reduction?(E)"
                   "subtermsOF(t1, fsp)" "subtermsOF(t2, fsp)"
                   "fsp`length")
                  (("1" (expand subtermsOF -1)
                    (("1" (expand finseq_appl)
                      (("1" (prop)
                        (("1" (skosimp)
                          (("1" (inst 1 fseq!1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2 -5 2)
                    (("2" (expand parallel_reduction_fix?)
                      (("2" (skosimp)
                        (("2" (lemma replace_par_pos_preservs_PP)
                          (("2"
                            (inst -1 fsp2 "sigma_rhs(fss!1, fse!1)" t)
                            (("2" (expand sigma_rhs -1 1)
                              (("2"
                                (expand* SPP? empty_seq finseq_appl)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (replace -10 1)
                                        (("2"
                                          (expand o 1)
                                          (("2"
                                            (expand SP? 1)
                                            (("2"
                                              (expand finseq_appl)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     Pos_Over_character)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       fsp1
                                                       fsp2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst -1 i)
                                                          (("1"
                                                            (name-replace
                                                             "A"
                                                             "Pos_Over(fsp1, fsp2)`seq(i)")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace
                                                                 -12
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   replace_par_pos_preservs_pos)
                                                                  (("1"
                                                                    (expand
                                                                     SPP?)
                                                                    (("1"
                                                                      (rewrite
                                                                       add_first_parallel_pos_to_SP_is_SP)
                                                                      (("1"
                                                                        (lemma
                                                                         Pos_Over_is_sub_seq)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           fsp1
                                                                           fsp2)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand*
                                                                               subseq
                                                                               finseq_appl)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 i)
                                                                                (("1"
                                                                                  (expand*
                                                                                   member_seq
                                                                                   finseq_appl)
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (expand
                                                                                       SP?
                                                                                       -7)
                                                                                      (("1"
                                                                                        (expand
                                                                                         finseq_appl)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -7
                                                                                           i!1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             A
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     sigma_rhs
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       empty_seq)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   j!1)
                                                                  (("2"
                                                                    (lemma
                                                                     closed_positions)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       A
                                                                       "fsp2`seq(j!1)"
                                                                       t2)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     Pos_Over_is_sub_seq)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       fsp2
                                                       fsp1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand*
                                                           subseq
                                                           member_seq
                                                           finseq_appl)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "i - Pos_Over(fsp1, fsp2)`length")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   i!1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     Pos_Equal_character)
                                                    (("3"
                                                      (inst
                                                       -1
                                                       fsp1
                                                       fsp2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + i")
                                                          (("3"
                                                            (skosimp)
                                                            (("3"
                                                              (replaces
                                                               -1)
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 j!1)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -1 -2 -6 2)
                    (("3" (expand parallel_reduction_fix?)
                      (("3" (skosimp)
                        (("3" (lemma replace_par_pos_preservs_PP)
                          (("3"
                            (inst -1 fsp1 "sigma_rhs(fss!1, fse!1)" t)
                            (("3" (expand sigma_rhs -1 1)
                              (("3"
                                (expand* SPP? empty_seq finseq_appl)
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (replace -10 1)
                                        (("3"
                                          (expand o 1)
                                          (("3"
                                            (expand SP? 1)
                                            (("3"
                                              (expand finseq_appl)
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     Pos_Over_is_sub_seq)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       fsp1
                                                       fsp2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand*
                                                           subseq
                                                           member_seq
                                                           finseq_appl)
                                                          (("1"
                                                            (inst -1 i)
                                                            (("1"
                                                              (name-replace
                                                               "A"
                                                               "Pos_Over(fsp1, fsp2)`seq(i)")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     i!1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     Pos_Over_character)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       fsp2
                                                       fsp1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "i - Pos_Over(fsp1, fsp2)`length")
                                                          (("2"
                                                            (name-replace
                                                             "A"
                                                             "Pos_Over(fsp2, fsp1)`seq(i - Pos_Over(fsp1, fsp2)`length)")
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (replace
                                                                 -11
                                                                 2)
                                                                (("1"
                                                                  (rewrite
                                                                   replace_par_pos_preservs_pos)
                                                                  (("1"
                                                                    (expand
                                                                     SPP?)
                                                                    (("1"
                                                                      (rewrite
                                                                       add_first_parallel_pos_to_SP_is_SP)
                                                                      (("1"
                                                                        (lemma
                                                                         Pos_Over_is_sub_seq)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           fsp2
                                                                           fsp1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand*
                                                                               subseq
                                                                               member_seq
                                                                               finseq_appl)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "i - Pos_Over(fsp1, fsp2)`length")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (expand
                                                                                     SP?
                                                                                     -8)
                                                                                    (("1"
                                                                                      (expand
                                                                                       finseq_appl)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -8
                                                                                         i!1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           A
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     sigma_rhs
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       empty_seq)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   j!1)
                                                                  (("2"
                                                                    (lemma
                                                                     closed_positions)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       A
                                                                       "fsp1`seq(j!1)"
                                                                       t1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     Pos_Equal_is_sub_seq)
                                                    (("3"
                                                      (inst
                                                       -1
                                                       fsp1
                                                       fsp2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand*
                                                           subseq
                                                           member_seq
                                                           finseq_appl)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "-1 * Pos_Over(fsp1, fsp2)`length - Pos_Over(fsp2, fsp1)`length + i")
                                                            (("3"
                                                              (skosimp)
                                                              (("3"
                                                                (replaces
                                                                 -1)
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   i!1)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (subterm_joinability formula-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (term type-decl nil term_adt nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (seq_construct1 formula-decl nil predicate_fseq2set nil)
    (Pos_Equal_is_sub_seq formula-decl nil orthogonality nil)
    (A skolem-const-decl "position[variable, symbol, arity]"
     orthogonality nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (sigma_rhs const-decl "finseq[term]" orthogonality_basis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (SPP? const-decl "bool" positions nil)
    (Pos_Equal_character formula-decl nil orthogonality nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (Pos_Over_character formula-decl nil orthogonality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (closed_positions formula-decl nil positions nil)
    (Pos_Over_is_sub_seq formula-decl nil orthogonality nil)
    (A skolem-const-decl "position[variable, symbol, arity]"
     orthogonality nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (add_first_parallel_pos_to_SP_is_SP formula-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (replace_par_pos_preservs_pos formula-decl nil orthogonality_basis
     nil)
    (< const-decl "bool" reals nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (replace_par_pos_preservs_PP formula-decl nil orthogonality_basis
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (subtermsOF const-decl "finseq[term]" orthogonality_basis nil)
    (SP type-eq-decl nil positions nil)
    (parallel_reduction? const-decl "bool" orthogonality_basis nil)
    (PRED type-eq-decl nil defined_types nil)
    (t2 skolem-const-decl "term" orthogonality nil)
    (fsp skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (t1 skolem-const-decl "term" orthogonality nil)
    (SP? const-decl "bool" positions nil))
   shostak))
 (parallel_reduction_has_DP 0
  (parallel_reduction_has_DP-2 "" 3790333963
   ("" (auto-rewrite (finseq_appl member))
    (("" (skosimp)
      (("" (expand diamond_property?)
        (("" (skeep)
          (("" (expand parallel_reduction? (-2 -3))
            (("" (skosimp*)
              (("" (assert)
                (("" (lemma Pos_Over_and_Pos_Equal_dominance)
                  (("" (inst-cp -1 fsp!1 fsp!2 x)
                    (("" (inst -1 fsp!2 fsp!1 x)
                      (("" (assert)
                        ((""
                          (name-replace "A"
                           "Pos_Over(fsp!1, fsp!2) o Pos_Over(fsp!2, fsp!1) o Pos_Equal(fsp!1, fsp!2)")
                          (("1" (case "SPP?(x)(A)")
                            (("1" (lemma replace_par_pos_dominance)
                              (("1"
                                (inst -1 E!1 A fsp!1 y x)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lemma replace_par_pos_dominance)
                                      (("1"
                                        (inst -1 E!1 A fsp!2 z x)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide -4 -5)
                                              (("1"
                                                (expand*
                                                 parallel_reduction_fix?
                                                 finseq_appl)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (lemma
                                                     subterms_joinability)
                                                    (("1"
                                                      (expand
                                                       finseq_appl)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         E!1
                                                         A
                                                         fsp!1
                                                         fsp!2
                                                         x
                                                         y
                                                         z)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             A
                                                             -1
                                                             1)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (lemma
                                                                 parallel_reduction_context)
                                                                (("1"
                                                                  (expand
                                                                   finseq_appl)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "replace_par_pos(x, A, fst!1)")
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         E!1
                                                                         A
                                                                         "subtermsOF(y, A)"
                                                                         fst!1
                                                                         x)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             subtermsOF
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skeep
                                                                                 2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   i)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -1
                                                                         E!1
                                                                         A
                                                                         "subtermsOF(z, A)"
                                                                         fst!1
                                                                         x)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             subtermsOF
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               finseq_appl)
                                                                              (("2"
                                                                                (skeep
                                                                                 2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   i)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "dominates?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (expand "seq2set")
                                                  (("2"
                                                    (expand
                                                     "finseq_appl")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (replace
                                                         -1
                                                         1
                                                         rl)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "kk!1")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 o
                                                                 -3)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "A`seq(j!1 + Pos_Over(fsp!1, fsp!2)`length)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (expand
                                                                                 A
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   o
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               A
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 o
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           A
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             o
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         2
                                                                         "A`seq(j!1 - Pos_Over(fsp!2, fsp!1)`length)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (expand
                                                                                 A
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   o
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               A
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 o
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             A
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               o
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide
                                                                         -2
                                                                         -4
                                                                         -5
                                                                         -6
                                                                         -7
                                                                         3)
                                                                        (("3"
                                                                          (lemma
                                                                           Pos_Equal_is_sub_seq)
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             fsp!2
                                                                             fsp!1)
                                                                            (("3"
                                                                              (typepred
                                                                               (fsp!1
                                                                                fsp!2))
                                                                              (("3"
                                                                                (expand*
                                                                                 SPP?)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (lemma
                                                                                       Pos_Equal_character)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         fsp!2
                                                                                         fsp!1)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand*
                                                                                             subseq
                                                                                             finseq_appl)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "-1 * Pos_Over(fsp!1, fsp!2)`length - Pos_Over(fsp!2, fsp!1)`length + j!1")
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -6
                                                                                                 "-1 * Pos_Over(fsp!1, fsp!2)`length - Pos_Over(fsp!2, fsp!1)`length + j!1")
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   same_pos_in_Pos_Equal)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     fsp!1
                                                                                                     fsp!2
                                                                                                     "Pos_Equal(fsp!2, fsp!1)`seq(-1 * Pos_Over(fsp!1, fsp!2)`length - Pos_Over(fsp!2, fsp!1)`length + j!1)")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (hide
                                                                                                         -7)
                                                                                                        (("3"
                                                                                                          (expand*
                                                                                                           member_seq
                                                                                                           finseq_appl)
                                                                                                          (("3"
                                                                                                            (prop)
                                                                                                            (("3"
                                                                                                              (skosimp)
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "A`seq(i!1 + Pos_Over(fsp!1, fsp!2)`length + Pos_Over(fsp!2, fsp!1)`length)")
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "i!1 + Pos_Over(fsp!1, fsp!2)`length + Pos_Over(fsp!2, fsp!1)`length")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       A
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         o
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     A
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       o
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   A
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     o
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "dominates?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (expand "seq2set")
                                          (("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (inst -3 "kk!1")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "A`seq(j!1)")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (expand
                                                               A
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             A
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand A 1)
                                (("2"
                                  (typepred (fsp!1 fsp!2))
                                  (("2"
                                    (expand SPP?)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (rewrite
                                         Pos_Over_and_Pos_Equal_is_PP)
                                        (("2"
                                          (expand o 1)
                                          (("2"
                                            (expand* SP? finseq_appl)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (lemma
                                                   Pos_Over_is_sub_seq)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     fsp!1
                                                     fsp!2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand*
                                                         subseq
                                                         finseq_appl)
                                                        (("1"
                                                          (inst -1 i)
                                                          (("1"
                                                            (expand*
                                                             member_seq
                                                             finseq_appl)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 i!1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   Pos_Over_is_sub_seq)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     fsp!2
                                                     fsp!1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand*
                                                         subseq
                                                         finseq_appl)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "i - Pos_Over(fsp!1, fsp!2)`length")
                                                          (("2"
                                                            (expand*
                                                             member_seq
                                                             finseq_appl)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -6
                                                                 i!1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (lemma
                                                   Pos_Equal_is_sub_seq)
                                                  (("3"
                                                    (inst
                                                     -1
                                                     fsp!1
                                                     fsp!2)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand*
                                                         subseq
                                                         member_seq
                                                         finseq_appl)
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "-1 * Pos_Over(fsp!1, fsp!2)`length - Pos_Over(fsp!2, fsp!1)`length + i")
                                                          (("3"
                                                            (skosimp)
                                                            (("3"
                                                              (inst
                                                               -3
                                                               i!1)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred fsp!2)
                            (("2" (expand SPP?)
                              (("2" (flatten) nil nil)) nil))
                            nil)
                           ("3" (typepred fsp!1)
                            (("3" (expand SPP?)
                              (("3" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diamond_property? const-decl "bool" ars_terminology nil)
    (parallel_reduction? const-decl "bool" orthogonality_basis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil)
    (SPP? const-decl "bool" positions nil)
    (SPP type-eq-decl nil positions nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (subterms_joinability formula-decl nil orthogonality nil)
    (A skolem-const-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (parallel_reduction_context formula-decl nil orthogonality_basis
     nil)
    (fst!1 skolem-const-decl "finseq[term]" orthogonality nil)
    (replace_par_pos def-decl "term" orthogonality_basis nil)
    (subtermsOF const-decl "finseq[term]" orthogonality_basis nil)
    (SP type-eq-decl nil positions nil)
    (SP? const-decl "bool" positions nil)
    (< const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (i!1 skolem-const-decl "below[Pos_Equal(fsp!1, fsp!2)`length]"
     orthogonality nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (same_pos_in_Pos_Equal formula-decl nil orthogonality nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Pos_Equal_character formula-decl nil orthogonality nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Pos_Equal_is_sub_seq formula-decl nil orthogonality nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "term[variable, symbol, arity]" orthogonality
     nil)
    (fsp!1 skolem-const-decl "SPP[variable, symbol, arity](x)"
     orthogonality nil)
    (fsp!2 skolem-const-decl "SPP[variable, symbol, arity](x)"
     orthogonality nil)
    (j!1 skolem-const-decl
     "below[(Pos_Over(fsp!2, fsp!1) o Pos_Over(fsp!1, fsp!2) o
        Pos_Equal(fsp!2, fsp!1))`length]" orthogonality nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (dominates? const-decl "bool" predicate_fseq2set nil)
    (j!1 skolem-const-decl
     "below[(Pos_Over(fsp!1, fsp!2) o Pos_Over(fsp!2, fsp!1) o
        Pos_Equal(fsp!1, fsp!2))`length]" orthogonality nil)
    (replace_par_pos_dominance formula-decl nil orthogonality_basis
     nil)
    (Pos_Over_and_Pos_Equal_is_PP formula-decl nil orthogonality nil)
    (Pos_Over_is_sub_seq formula-decl nil orthogonality nil)
    (Pos_Equal def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (Pos_Over def-decl "finseq[position[variable, symbol, arity]]"
     orthogonality nil)
    (PP type-eq-decl nil positions nil)
    (PP? const-decl "bool" positions nil)
    (O const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Pos_Over_and_Pos_Equal_dominance formula-decl nil orthogonality
     nil))
   shostak)
  (parallel_reduction_has_DP-1 nil 3549740761
   ("" (auto-rewrite (finseq_appl member))
    (("" (skosimp)
      (("" (expand diamond_property?)
        (("" (skeep)
          (("" (expand parallel_reduction? (-2 -3))
            (("" (skosimp*)
              (("" (assert)
                (("" (lemma Pos_Over_and_Pos_Equal_dominance)
                  (("" (inst-cp -1 fsp!1 fsp!2 x)
                    (("" (inst -1 fsp!2 fsp!1 x)
                      (("" (assert)
                        ((""
                          (name-replace "A"
                           "Pos_Over(fsp!1, fsp!2) o Pos_Over(fsp!2, fsp!1) o Pos_Equal(fsp!1, fsp!2)")
                          (("1" (case "SPP?(x)(A)")
                            (("1" (lemma replace_par_pos_dominance)
                              (("1"
                                (inst -1 E!1 A fsp!1 y x)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lemma replace_par_pos_dominance)
                                      (("1"
                                        (inst -1 E!1 A fsp!2 z x)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide -4 -5)
                                              (("1"
                                                (expand*
                                                 parallel_reduction_fix?
                                                 finseq_appl)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (lemma
                                                     subterms_joinability)
                                                    (("1"
                                                      (expand
                                                       finseq_appl)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         E!1
                                                         A
                                                         fsp!1
                                                         fsp!2
                                                         x
                                                         y
                                                         z)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             A
                                                             -1
                                                             1)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (lemma
                                                                 parallel_reduction_context)
                                                                (("1"
                                                                  (expand
                                                                   finseq_appl)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "replace_par_pos(x, A, fst!1)")
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         E!1
                                                                         A
                                                                         "subtermsOF(y, A)"
                                                                         fst!1
                                                                         x)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             subtermsOF
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skeep
                                                                                 2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   i)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -1
                                                                         E!1
                                                                         A
                                                                         "subtermsOF(z, A)"
                                                                         fst!1
                                                                         x)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             subtermsOF
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               finseq_appl)
                                                                              (("2"
                                                                                (skeep
                                                                                 2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   i)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "dominates?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (expand "seq2set")
                                                  (("2"
                                                    (expand
                                                     "finseq_appl")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (replace
                                                         -1
                                                         1
                                                         rl)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "kk!1")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 o
                                                                 -3)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "A`seq(j!1 + Pos_Over(fsp!1, fsp!2)`length)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (expand
                                                                                 A
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   o
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               A
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 o
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           A
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             o
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         2
                                                                         "A`seq(j!1 - Pos_Over(fsp!2, fsp!1)`length)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (expand
                                                                                 A
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   o
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               A
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 o
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             A
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               o
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide
                                                                         -2
                                                                         -4
                                                                         -5
                                                                         -6
                                                                         -7
                                                                         3)
                                                                        (("3"
                                                                          (lemma
                                                                           Pos_Equal_is_sub_seq)
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             fsp!2
                                                                             fsp!1)
                                                                            (("3"
                                                                              (typepred
                                                                               (fsp!1
                                                                                fsp!2))
                                                                              (("3"
                                                                                (expand*
                                                                                 SPP?)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (lemma
                                                                                       Pos_Equal_character)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         fsp!2
                                                                                         fsp!1)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand*
                                                                                             subseq
                                                                                             finseq_appl)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "-1 * Pos_Over(fsp!1, fsp!2)`length - Pos_Over(fsp!2, fsp!1)`length + j!1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -6
                                                                                                 "-1 * Pos_Over(fsp!1, fsp!2)`length - Pos_Over(fsp!2, fsp!1)`length + j!1")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   same_pos_in_Pos_Equal)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     fsp!1
                                                                                                     fsp!2
                                                                                                     "Pos_Equal(fsp!2, fsp!1)`seq(-1 * Pos_Over(fsp!1, fsp!2)`length - Pos_Over(fsp!2, fsp!1)`length + j!1)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -7)
                                                                                                        (("1"
                                                                                                          (expand*
                                                                                                           member_seq
                                                                                                           finseq_appl)
                                                                                                          (("1"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "A`seq(i!1 + Pos_Over(fsp!1, fsp!2)`length + Pos_Over(fsp!2, fsp!1)`length)")
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "i!1 + Pos_Over(fsp!1, fsp!2)`length + Pos_Over(fsp!2, fsp!1)`length")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       A
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         o
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     A
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       o
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   A
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     o
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   j!1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     o
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 j!1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   o
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "dominates?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (expand "seq2set")
                                          (("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (inst -3 "kk!1")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "A`seq(j!1)")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (expand
                                                               A
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             A
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand A 1)
                                (("2"
                                  (typepred (fsp!1 fsp!2))
                                  (("2"
                                    (expand SPP?)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (rewrite
                                         Pos_Over_and_Pos_Equal_is_PP)
                                        (("2"
                                          (expand o 1)
                                          (("2"
                                            (expand* SP? finseq_appl)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (lemma
                                                   Pos_Over_is_sub_seq)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     fsp!1
                                                     fsp!2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand*
                                                         subseq
                                                         finseq_appl)
                                                        (("1"
                                                          (inst -1 i)
                                                          (("1"
                                                            (expand*
                                                             member_seq
                                                             finseq_appl)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 i!1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   Pos_Over_is_sub_seq)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     fsp!2
                                                     fsp!1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand*
                                                         subseq
                                                         finseq_appl)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "i - Pos_Over(fsp!1, fsp!2)`length")
                                                          (("2"
                                                            (expand*
                                                             member_seq
                                                             finseq_appl)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -6
                                                                 i!1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (lemma
                                                   Pos_Equal_is_sub_seq)
                                                  (("3"
                                                    (inst
                                                     -1
                                                     fsp!1
                                                     fsp!2)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand*
                                                         subseq
                                                         member_seq
                                                         finseq_appl)
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "-1 * Pos_Over(fsp!1, fsp!2)`length - Pos_Over(fsp!2, fsp!1)`length + i")
                                                          (("3"
                                                            (skosimp)
                                                            (("3"
                                                              (inst
                                                               -3
                                                               i!1)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred fsp!2)
                            (("2" (expand SPP?)
                              (("2" (flatten) nil nil)) nil))
                            nil)
                           ("3" (typepred fsp!1)
                            (("3" (expand SPP?)
                              (("3" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (PP? const-decl "bool" positions nil)
    (PP type-eq-decl nil positions nil)
    (replace_par_pos_dominance formula-decl nil orthogonality_basis
     nil)
    (dominates? const-decl "bool" predicate_fseq2set nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (subseq const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (SP? const-decl "bool" positions nil)
    (SP type-eq-decl nil positions nil)
    (subtermsOF const-decl "finseq[term]" orthogonality_basis nil)
    (replace_par_pos def-decl "term" orthogonality_basis nil)
    (parallel_reduction_context formula-decl nil orthogonality_basis
     nil)
    (parallel_reduction_fix? const-decl "bool" orthogonality_basis nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil)
    (SPP type-eq-decl nil positions nil)
    (SPP? const-decl "bool" positions nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (parallel_reduction? const-decl "bool" orthogonality_basis nil)
    (diamond_property? const-decl "bool" ars_terminology nil))
   shostak))
 (Orthogonal_implies_confluent 0
  (Orthogonal_implies_confluent-2 "" 3912758191
   ("" (skosimp)
    (("" (assert)
      (("" (expand confluent?)
        (("" (skeep)
          (("" (lemma parallel_reduction_RTC)
            (("" (inst -1 E!1)
              (("" (expand joinable?)
                (("" (lemma parallel_reduction_has_DP)
                  (("" (inst -1 E!1)
                    (("" (lemma DP_implies_StC)
                      (("" (inst -1 "parallel_reduction?(E!1)")
                        (("" (assert)
                          (("" (lemma Strong_Confl_implies_Confl)
                            (("" (inst -1 "parallel_reduction?(E!1)")
                              ((""
                                (assert)
                                ((""
                                  (expand confluent?)
                                  ((""
                                    (inst -1 x y z)
                                    ((""
                                      (assert)
                                      ((""
                                        (expand joinable?)
                                        ((""
                                          (skosimp)
                                          ((""
                                            (inst 1 z!1)
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (Orthogonal_implies_confluent-1 nil 3445676656
   (""
    (then (skosimp) (assert) (expand confluent?) (skeep)
     (lemma parallel_reduction_RTC) (inst -1 E!1) (expand joinable?)
     (lemma parallel_reduction_has_DP) (inst -1 E!1)
     (lemma DP_implies_StC) (inst -1 "parallel_reduction?(E!1)")
     (assert) (lemma Strong_Confl_implies_Confl)
     (inst -1 "parallel_reduction?(E!1)") (assert) (expand confluent?)
     (inst -1 x y z) (assert) (expand joinable?) (skosimp) (inst 1 z!1)
     (assert))
    nil)
   ((confluent? const-decl "bool" ars_terminology nil)
    (arity formal-const-decl "[symbol -> nat]" orthogonality nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil orthogonality nil)
    (variable formal-nonempty-type-decl nil orthogonality nil)
    (parallel_reduction_RTC formula-decl nil orthogonality_basis nil)
    (joinable? const-decl "bool" ars_terminology nil)
    (parallel_reduction? const-decl "bool" orthogonality_basis nil)
    (PRED type-eq-decl nil defined_types nil)
    (Strong_Confl_implies_Confl formula-decl nil results_confluence
     nil)
    (DP_implies_StC formula-decl nil results_confluence nil)
    (parallel_reduction_has_DP formula-decl nil orthogonality nil)
    (Orthogonal type-eq-decl nil orthogonality_basis nil)
    (Orthogonal? const-decl "bool" orthogonality_basis nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (term type-decl nil term_adt nil))
   shostak)))

