(robinsonunification
 (IMP_unification_TCC1 0
  (IMP_unification_TCC1-1 nil 3467989055
   ("" (lemma "var_countable") (("" (propax) nil nil)) nil) nil nil
   (IMP_unification assuming
    "unification[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].unification"
    "var_countable: ASSUMPTION countability[term_adt[unification.variable, unification.symbol, unification.arity].term].is_countably_infinite(variables_term[unification.variable, unification.symbol, unification.arity].V)")))
 (xx_TCC1 0
  (xx_TCC1-1 nil 3468765193
   ("" (lemma "var_nonempty")
    (("" (expand* "nonempty?" "empty?")
      (("" (skosimp*)
        (("" (inst 1 "x!1")
          (("" (assert)
            (("" (expand "member") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (member const-decl "bool" sets nil))
   nil
   (xx existence ""
    "(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)")))
 (ff_TCC1 0
  (ff_TCC1-1 nil 3474208611
   ("" (lemma "symbol_nonempty")
    (("" (expand* "nonempty?" "empty?")
      (("" (skosimp)
        (("" (expand "member") (("" (inst 1 "x!1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil
   (ff existence ""
    "{f: robinsonunification.symbol | robinsonunification.arity(f) = 1}")))
 (fail_TCC1 0
  (fail_TCC1-1 nil 3467989055
   ("" (typepred "ff") (("" (assert) (("" (grind) nil nil)) nil)) nil)
   ((term type-decl nil term_adt nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures))
   nil
   (fail subtype
    "set2seq[term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term].#(robinsonunification.xx)"
    "{args: finite_sequences[term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term].finite_sequence | args`length = robinsonunification.arity(robinsonunification.ff)}")))
 (fail_TCC2 0
  (fail_TCC2-2 "" 3790333822
   ("" (expand "Sub?")
    ((""
      (case-replace "Dom((id[(V)]
                       WITH [xx
                               := app[variable, symbol, arity]
                                      (ff,
                                        #[term[variable, symbol, arity]]
                                       (xx))])) = singleton(xx)")
      (("1" (hide -1) (("1" (rewrite "finite_singleton") nil nil)) nil)
       ("2" (hide 2)
        (("2" (decompose-equality)
          (("2" (iff)
            (("2" (prop)
              (("1" (expand "singleton")
                (("1" (expand "Dom")
                  (("1" (flatten)
                    (("1" (expand "id") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand* "singleton" "Dom")
                (("2" (flatten)
                  (("2" (grind)
                    (("2" (typepred "xx")
                      (("2" (expand "V") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (finite_singleton judgement-tcc nil finite_sets nil)
    (Sub? const-decl "bool" substitution nil))
   shostak
   (fail subtype
    "identity[(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)].id WITH [(robinsonunification.xx) := term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].app(robinsonunification.ff, set2seq[term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term].#(robinsonunification.xx))]"
    "Sub[variable, symbol, arity]"))
  (fail_TCC2-1 nil 3474208611
   ("" (expand "Sub?")
    ((""
      (case-replace "Dom((id[(V)]
                       WITH [xx
                               := app[variable, symbol, arity]
                                      (ff,
                                        #[term[variable, symbol, arity]]
                                       (xx))])) = singleton(xx)")
      (("1" (hide -1) (("1" (rewrite "finite_singleton") nil nil)) nil)
       ("2" (hide 2)
        (("2" (decompose-equality)
          (("2" (iff)
            (("2" (prop)
              (("1" (expand "singleton")
                (("1" (expand "Dom")
                  (("1" (flatten)
                    (("1" (expand "id") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand* "singleton" "Dom")
                (("2" (flatten)
                  (("2" (grind)
                    (("2" (replaces -1)
                      (("2" (typepred "xx")
                        (("2" (expand "V") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (finite_singleton judgement-tcc nil finite_sets nil)
    (Sub? const-decl "bool" substitution nil))
   nil
   (fail subtype
    "identity[(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)].id WITH [(robinsonunification.xx) := term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].app(robinsonunification.ff, set2seq[term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term].#(robinsonunification.xx))]"
    "Sub[variable, symbol, arity]")))
 (first_diff_TCC1 0
  (first_diff_TCC1-2 "" 3756667884
   ("" (skeep :preds? t)
    (("" (skeep :preds? t)
      (("" (skeep :preds? t)
        (("" (lemma "positions_of_arg")
          (("" (inst -1 "s" "kk")
            (("1" (replace -4 1) (("1" (assert) nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   shostak
   (first_diff subtype
    "set2seq[posnat].#((number_fields.+)(robinsonunification.kk, 1))"
    "positions[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].positions?(robinsonunification.s)"))
  (first_diff_TCC1-1 nil 3467989055
   ("" (skosimp*)
    (("" (lemma "positions_of_arg")
      (("" (inst -1 "s!1" "k!1")
        (("1" (typepred "k!1")
          (("1" (typepred "st!1")
            (("1" (typepred "stp!1")
              (("1" (replace -4 1) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   nil
   (first_diff subtype
    "set2seq[posnat].#((number_fields.+)(robinsonunification.kk, 1))"
    "positions[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].positions?(robinsonunification.s)")))
 (first_diff_TCC2 0
  (first_diff_TCC2-3 "" 3803854726
   ("" (skeep :preds? t)
    (("" (skeep :preds? t)
      (("" (skeep :preds? t)
        (("" (lemma "positions_of_arg")
          (("" (inst -1 "t" "kk")
            (("1" (replace -5 1) (("1" (assert) nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (first_diff subtype
    "set2seq[posnat].#((number_fields.+)(robinsonunification.kk, 1))"
    "positions[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].positions?(robinsonunification.t)"))
  (first_diff_TCC2-2 "" 3756667942
   ("" (skeep :preds? t)
    (("" (skeep :preds? t)
      (("" (skeep :preds? t)
        (("" (lemma "positions_of_arg")
          (("" (inst -1 "t" "kk")
            (("1" (replace -6 1) (("1" (assert) nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   shostak
   (first_diff subtype
    "set2seq[posnat].#((number_fields.+)(robinsonunification.kk, 1))"
    "positions[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].positions?(robinsonunification.t)"))
  (first_diff_TCC2-1 nil 3467989055
   ("" (skosimp*)
    (("" (lemma "positions_of_arg")
      (("" (inst -1 "t!1" "k!1")
        (("1" (typepred "st!1")
          (("1" (typepred "stp!1")
            (("1" (replace -5 1) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   nil
   (first_diff subtype
    "set2seq[posnat].#((number_fields.+)(robinsonunification.kk, 1))"
    "positions[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].positions?(robinsonunification.t)")))
 (first_diff_TCC3 0
  (first_diff_TCC3-2 "" 3756668771
   ("" (skeep :preds? t)
    (("" (skeep :preds? t)
      (("" (replace -4 :hide? t)
        (("" (replace -3 :hide? t)
          (("" (replace -3 :hide? t)
            (("" (assert)
              (("" (decompose-equality 1)
                (("" (decompose-equality 1)
                  (("" (decompose-equality 1)
                    (("" (expand "nonempty?")
                      (("" (expand "empty?")
                        (("" (expand "member") (("" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subtermOF def-decl "term" subterm nil)
    (rest const-decl "finseq" seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (first const-decl "T" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (empty? const-decl "bool" sets nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (term type-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil))
   shostak
   (first_diff subtype
    "{kk: nat_types[length(robinsonunification.stp)].below | subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.s, set2seq[posnat].#((number_fields.+)(kk, 1))) /= subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.t, set2seq[posnat].#((number_fields.+)(kk, 1)))}"
    "(sets[below[length(stp)]].nonempty?)"))
  (first_diff_TCC3-1 nil 3467989055
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (first const-decl "T" seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (empty? const-decl "bool" sets nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (term type-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil))
   nil
   (first_diff subtype
    "{kk: nat_types[length(robinsonunification.stp)].below | subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.s, set2seq[posnat].#((number_fields.+)(kk, 1))) /= subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.t, set2seq[posnat].#((number_fields.+)(kk, 1)))}"
    "(sets[below[length(stp)]].nonempty?)")))
 (first_diff_TCC4 0
  (first_diff_TCC4-2 "" 3756668823
   ("" (skeep :preds? t)
    (("" (skeep :preds? t)
      (("" (skeep :preds? t) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (first_diff subtype
    "subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.t, set2seq[posnat].#((number_fields.+)(robinsonunification.k, 1)))"
    "{t: term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term | (booleans.NOT)(subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.s, set2seq[posnat].#((number_fields.+)(1, robinsonunification.k))) = t)}"))
  (first_diff_TCC4-1 nil 3467989055
   ("" (skosimp*)
    (("" (expand "<<")
      (("" (lift-if)
        (("" (prop)
          (("1" (hide-all-but (-1 -2)) (("1" (assert) nil nil)) nil)
           ("2" (inst 2 "k!1")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (replace -1 1) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (first_diff subtype
    "subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.t, set2seq[posnat].#((number_fields.+)(robinsonunification.k, 1)))"
    "{t: term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term | (booleans.NOT)(subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.s, set2seq[posnat].#((number_fields.+)(1, robinsonunification.k))) = t)}")))
 (first_diff_TCC5 0
  (first_diff_TCC5-2 "" 3756669193
   ("" (skeep :preds? t)
    (("" (skeep :preds? t)
      (("" (skeep :preds? t)
        (("" (assert)
          (("" (replace -4 :hide? t)
            (("" (replace -5 :hide? t)
              (("" (replace -4 :hide? t)
                (("" (decompose-equality 1)
                  (("" (decompose-equality 1)
                    (("" (expand "<<")
                      (("" (assert)
                        (("" (decompose-equality 1)
                          (("" (inst 3 "k")
                            (("" (assert) (("" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((|#| const-decl "finite_sequence[T]" set2seq structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (first const-decl "T" seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (term type-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil))
   shostak
   (first_diff termination
    "robinsonunification.first_diff(subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.s, set2seq[posnat].#((number_fields.+)(robinsonunification.k, 1))), subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.t, set2seq[posnat].#((number_fields.+)(robinsonunification.k, 1))))"
    "nil"))
  (first_diff_TCC5-1 nil 3468147562
   ("" (skosimp*)
    (("" (lemma "positions_of_arg")
      (("" (inst -1 "s!1" "kk!1")
        (("1" (replace -1 1) (("1" (assert) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((finite_sequence type-eq-decl nil finite_sequences nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (first const-decl "T" seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (subterm adt-def-decl "boolean" term_adt nil))
   nil
   (first_diff termination
    "robinsonunification.first_diff(subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.s, set2seq[posnat].#((number_fields.+)(robinsonunification.k, 1))), subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.t, set2seq[posnat].#((number_fields.+)(robinsonunification.k, 1))))"
    "nil")))
 (commutative_first_diff_TCC1 0
  (commutative_first_diff_TCC1-1 nil 3468654719
   ("" (skosimp) (("" (typepred "t!1") (("" (assert) nil nil)) nil))
    nil)
   ((term type-decl nil term_adt nil)) nil
   (commutative_first_diff subtype "robinsonunification.s"
    "{t_1: term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term | robinsonunification.t /= t_1}")))
 (commutative_first_diff 0
  (commutative_first_diff-2 "" 3756667485
   ("" (measure-induct+ "length(p)" "p")
    (("" (skosimp)
      (("" (expand "first_diff" -2)
        (("" (lift-if)
          (("" (assert)
            ((""
              (name-replace "k!11"
               "min({kk: below[length(args(t!1))] | NOT
                    subtermOF(s!1,  #(1 + kk)) = subtermOF (t!1,  #(1 + kk))})"
               :hide? nil)
              (("1" (name-replace "k!1" "1 + k!11")
                (("1" (prop)
                  (("1" (hide -3 -4)
                    (("1" (expand "first_diff" 1)
                      (("1" (assert)
                        (("1" (lift-if) (("1" (prop) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -3 -4)
                    (("2" (expand "first_diff")
                      (("2" (assert)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (reveal -1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (hide -4)
                      (("3" (expand "first_diff" 3)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("4"
                    (inst -4 "first_diff(subtermOF(s!1,  #(k!1)),
                                              subtermOF(t!1,  #(k!1)))")
                    (("4"
                      (inst -4 "subtermOF(s!1,  #(k!1))"
                       "subtermOF(t!1,  #(k!1))")
                      (("4" (prop)
                        (("1" (expand "first_diff" 4)
                          (("1" (assert)
                            (("1"
                              (name-replace "k!22"
                               "min({kk: below[length(args(s!1))] | NOT
                                     subtermOF(t!1,  #(1 + kk)) = subtermOF(s!1,  #(1 + kk))})"
                               :hide? nil)
                              (("1"
                                (name-replace "k!2" "1 + k!22")
                                (("1"
                                  (reveal -4 -1)
                                  (("1"
                                    (replace -3 -1 rl)
                                    (("1"
                                      (replace -7 -2 rl)
                                      (("1"
                                        (hide (-3 -7))
                                        (("1"
                                          (case "k!1 = k!2")
                                          (("1"
                                            (replaces -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (case
                                             "length(args(s!1))=length(args(t!1))")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 1 rl)
                                                  (("1"
                                                    (replace -3 1 rl)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (name-replace
                                                         "myset"
                                                         " min({kk: below[length(args(s!1))] |
                                                        NOT subtermOF(t!1,  #(1 + kk)) = subtermOF(s!1,  #(1 + kk))})"
                                                         :hide?
                                                         nil)
                                                        (("1"
                                                          (rewrite
                                                           "min_def")
                                                          (("1"
                                                            (rewrite
                                                             "min_def")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (expand
                                                                 "minimum?")
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x!2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                3
                                                                4
                                                                5))
                                                              (("2"
                                                                (lemma
                                                                 "first_diff_TCC3")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "s!1"
                                                                   "t!1"
                                                                   "f(s!1)"
                                                                   "args(s!1)")
                                                                  (("2"
                                                                    (case
                                                                     "s!1 = app(f(s!1), args(s!1))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "f(t!1)"
                                                                           "args(t!1)")
                                                                          (("1"
                                                                            (case
                                                                             "t!1 = app(f(t!1), args(t!1))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                3))
                                                                              (("2"
                                                                                (decompose-equality)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        5))
                                                                      (("2"
                                                                        (decompose-equality)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               (-6
                                                                1
                                                                3
                                                                4
                                                                5))
                                                              (("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (lemma
                                                                   "positions_of_arg")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "t!1"
                                                                     "kk!1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide
                                                               -
                                                               6)
                                                              (("4"
                                                                (skosimp*)
                                                                (("4"
                                                                  (lemma
                                                                   "positions_of_arg")
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "s!1"
                                                                     "kk!1")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-6
                                                              1
                                                              3
                                                              4
                                                              5))
                                                            (("2"
                                                              (lemma
                                                               "first_diff_TCC3")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "t!1"
                                                                 "s!1"
                                                                 "f(t!1)"
                                                                 "args(t!1)")
                                                                (("2"
                                                                  (case
                                                                   "t!1 = app(f(t!1), args(t!1))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "f(s!1)"
                                                                         "args(s!1)")
                                                                        (("1"
                                                                          (case
                                                                           "s!1 = app(f(s!1), args(s!1))")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              5))
                                                                            (("2"
                                                                              (decompose-equality)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      3))
                                                                    (("2"
                                                                      (decompose-equality)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             (-6
                                                              1
                                                              3
                                                              4
                                                              5))
                                                            (("3"
                                                              (skosimp*)
                                                              (("3"
                                                                (lemma
                                                                 "positions_of_arg")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "s!1"
                                                                   "kk!1")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide - 6)
                                                            (("4"
                                                              (skosimp*)
                                                              (("4"
                                                                (lemma
                                                                 "positions_of_arg")
                                                                (("4"
                                                                  (inst
                                                                   -1
                                                                   "t!1"
                                                                   "kk!1")
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-5
                                                            1
                                                            3
                                                            4
                                                            5))
                                                          (("2"
                                                            (lemma
                                                             "first_diff_TCC3")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "t!1"
                                                               "s!1"
                                                               "f(t!1)"
                                                               "args(t!1)")
                                                              (("2"
                                                                (case
                                                                 "t!1 = app(f(t!1), args(t!1))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "f(s!1)"
                                                                       "args(s!1)")
                                                                      (("1"
                                                                        (case
                                                                         "s!1 = app(f(s!1), args(s!1))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            5))
                                                                          (("2"
                                                                            (decompose-equality)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    3))
                                                                  (("2"
                                                                    (decompose-equality)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide
                                                           -
                                                           (2 6))
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (lemma
                                                               "positions_of_arg")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "s!1"
                                                                 "kk!1")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide
                                                           -
                                                           (2 6))
                                                          (("4"
                                                            (skosimp*)
                                                            (("4"
                                                              (lemma
                                                               "positions_of_arg")
                                                              (("4"
                                                                (inst
                                                                 -1
                                                                 "t!1"
                                                                 "kk!1")
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-4 1))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-2 1 2 3 4))
                                (("2"
                                  (lemma "first_diff_TCC3")
                                  (("2"
                                    (inst
                                     -1
                                     "t!1"
                                     "s!1"
                                     "f(t!1)"
                                     "args(t!1)")
                                    (("2"
                                      (case
                                       "t!1 = app(f(t!1), args(t!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -1
                                             "f(s!1)"
                                             "args(s!1)")
                                            (("1"
                                              (case
                                               "s!1 = app(f(s!1), args(s!1))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but (1 5))
                                                (("2"
                                                  (decompose-equality)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 3))
                                        (("2"
                                          (decompose-equality)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but (-2 1 2 3 4))
                                (("3"
                                  (skosimp*)
                                  (("3"
                                    (lemma "positions_of_arg")
                                    (("3"
                                      (inst -1 "s!1" "kk!1")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide - 5)
                                (("4"
                                  (skosimp*)
                                  (("4"
                                    (lemma "positions_of_arg")
                                    (("4"
                                      (inst -1 "t!1" "kk!1")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-2 1))
                          (("2" (expand* "add_first" "insert?")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide -2 -3)
                    (("5" (expand "first_diff")
                      (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (prop)
                (("1" (hide -3 1)
                  (("1" (expand "first_diff")
                    (("1" (assert)
                      (("1" (lift-if) (("1" (prop) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3 2)
                  (("2" (expand "first_diff")
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (prop) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -3 3)
                  (("3" (expand "first_diff") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (hide - 5)
                  (("4" (lemma "first_diff_TCC3")
                    (("4" (inst -1 "s!1" "t!1" "f(s!1)" "args(s!1)")
                      (("4" (case "s!1 = app(f(s!1), args(s!1))")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (inst -1 "f(t!1)" "args(t!1)")
                              (("1"
                                (case "t!1 = app(f(t!1), args(t!1))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (reveal -4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 2))
                                  (("2" (decompose-equality) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 4))
                          (("2" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide -2 5)
                  (("5" (expand "first_diff") (("5" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (prop)
                (("1" (hide -3 1)
                  (("1" (expand "first_diff")
                    (("1" (assert)
                      (("1" (lift-if) (("1" (prop) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3 2)
                  (("2" (expand "first_diff")
                    (("2" (lift-if)
                      (("2" (prop) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("3" (hide -3 3)
                  (("3" (expand "first_diff") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (hide -2 -3 5)
                  (("4" (skosimp*)
                    (("4" (lemma "positions_of_arg")
                      (("4" (inst -1 "t!1" "kk!1")
                        (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide -)
                  (("5" (skosimp*)
                    (("5" (lemma "positions_of_arg")
                      (("5" (inst -1 "t!1" "kk!1")
                        (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide -1)
                (("4" (prop)
                  (("1" (hide 1)
                    (("1" (expand "first_diff")
                      (("1" (lift-if) (("1" (prop) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "first_diff")
                      (("2" (lift-if)
                        (("2" (prop) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 3)
                    (("3" (expand "first_diff")
                      (("3" (assert) nil nil)) nil))
                    nil)
                   ("4" (hide -2 5)
                    (("4" (skosimp*)
                      (("4" (lemma "positions_of_arg")
                        (("4" (inst -1 "s!1" "kk!1")
                          (("1" (assert) nil nil)
                           ("2" (hide 5)
                            (("2" (typepred "kk!1")
                              (("2"
                                (lemma "equal_symbol_equal_length_arg")
                                (("2"
                                  (inst
                                   -1
                                   "s!1"
                                   "t!1"
                                   "f(s!1)"
                                   "f(t!1)"
                                   "args(s!1)"
                                   "args(t!1)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 5)
                    (("5" (expand "first_diff")
                      (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("5" (prop)
                (("1" (hide -3)
                  (("1" (expand "first_diff") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (hide -3)
                  (("2" (expand "first_diff") (("2" (assert) nil nil))
                    nil))
                  nil)
                 ("3" (hide -3)
                  (("3" (expand "first_diff") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (assert) nil nil) ("5" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (positions_of_arg formula-decl nil positions nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (equal_symbol_equal_length_arg formula-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (commutative_first_diff-1 nil 3468654726
   ("" (measure-induct+ "length(p)" "p")
    (("" (skosimp)
      (("" (expand "first_diff" -2)
        (("" (lift-if)
          (("" (assert)
            ((""
              (name-replace "k!11"
               "min({kk: below[length(args(t!1))] | NOT
                    subtermOF(s!1,  #(1 + kk)) = subtermOF (t!1,  #(1 + kk))})"
               :hide? nil)
              (("1" (name-replace "k!1" "1 + k!11")
                (("1" (prop)
                  (("1" (hide -3 -4)
                    (("1" (expand "first_diff" 1)
                      (("1" (assert)
                        (("1" (lift-if) (("1" (prop) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -3 -4)
                    (("2" (expand "first_diff")
                      (("2" (assert)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (reveal -1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (hide -4)
                      (("3" (expand "first_diff" 3)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("4"
                    (inst -4 "first_diff(subtermOF(s!1,  #(k!1)),
                                              subtermOF(t!1,  #(k!1)))")
                    (("4"
                      (inst -4 "subtermOF(s!1,  #(k!1))"
                       "subtermOF(t!1,  #(k!1))")
                      (("4" (prop)
                        (("1" (expand "first_diff" 4)
                          (("1" (assert)
                            (("1"
                              (name-replace "k!22"
                               "min({kk: below[length(args(s!1))] | NOT
                                     subtermOF(t!1,  #(1 + kk)) = subtermOF(s!1,  #(1 + kk))})"
                               :hide? nil)
                              (("1"
                                (name-replace "k!2" "1 + k!22")
                                (("1"
                                  (reveal -4 -1)
                                  (("1"
                                    (replace -3 -1 rl)
                                    (("1"
                                      (replace -7 -2 rl)
                                      (("1"
                                        (hide (-3 -7))
                                        (("1"
                                          (case "k!1 = k!2")
                                          (("1"
                                            (replaces -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (case
                                             "length(args(s!1))=length(args(t!1))")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 1 rl)
                                                  (("1"
                                                    (replace -3 1 rl)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (name-replace
                                                         "myset"
                                                         " min({kk: below[length(args(s!1))] |
                                                        NOT subtermOF(t!1,  #(1 + kk)) = subtermOF(s!1,  #(1 + kk))})"
                                                         :hide?
                                                         nil)
                                                        (("1"
                                                          (rewrite
                                                           "min_def")
                                                          (("1"
                                                            (rewrite
                                                             "min_def")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (expand
                                                                 "minimum?")
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x!2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                3
                                                                4
                                                                5))
                                                              (("2"
                                                                (lemma
                                                                 "first_diff_TCC7")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "s!1"
                                                                   "t!1"
                                                                   "f(s!1)"
                                                                   "args(s!1)")
                                                                  (("2"
                                                                    (case
                                                                     "s!1 = app(f(s!1), args(s!1))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "f(t!1)"
                                                                           "args(t!1)")
                                                                          (("1"
                                                                            (case
                                                                             "t!1 = app(f(t!1), args(t!1))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                3))
                                                                              (("2"
                                                                                (decompose-equality)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        5))
                                                                      (("2"
                                                                        (decompose-equality)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               (-6
                                                                1
                                                                3
                                                                4
                                                                5))
                                                              (("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (lemma
                                                                   "positions_of_arg")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "t!1"
                                                                     "kk!1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide
                                                               -
                                                               6)
                                                              (("4"
                                                                (skosimp*)
                                                                (("4"
                                                                  (lemma
                                                                   "positions_of_arg")
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "s!1"
                                                                     "kk!1")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-6
                                                              1
                                                              3
                                                              4
                                                              5))
                                                            (("2"
                                                              (lemma
                                                               "first_diff_TCC7")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "t!1"
                                                                 "s!1"
                                                                 "f(t!1)"
                                                                 "args(t!1)")
                                                                (("2"
                                                                  (case
                                                                   "t!1 = app(f(t!1), args(t!1))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "f(s!1)"
                                                                         "args(s!1)")
                                                                        (("1"
                                                                          (case
                                                                           "s!1 = app(f(s!1), args(s!1))")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              5))
                                                                            (("2"
                                                                              (decompose-equality)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      3))
                                                                    (("2"
                                                                      (decompose-equality)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             (-6
                                                              1
                                                              3
                                                              4
                                                              5))
                                                            (("3"
                                                              (skosimp*)
                                                              (("3"
                                                                (lemma
                                                                 "positions_of_arg")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "s!1"
                                                                   "kk!1")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide - 6)
                                                            (("4"
                                                              (skosimp*)
                                                              (("4"
                                                                (lemma
                                                                 "positions_of_arg")
                                                                (("4"
                                                                  (inst
                                                                   -1
                                                                   "t!1"
                                                                   "kk!1")
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-5
                                                            1
                                                            3
                                                            4
                                                            5))
                                                          (("2"
                                                            (lemma
                                                             "first_diff_TCC7")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "t!1"
                                                               "s!1"
                                                               "f(t!1)"
                                                               "args(t!1)")
                                                              (("2"
                                                                (case
                                                                 "t!1 = app(f(t!1), args(t!1))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "f(s!1)"
                                                                       "args(s!1)")
                                                                      (("1"
                                                                        (case
                                                                         "s!1 = app(f(s!1), args(s!1))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            5))
                                                                          (("2"
                                                                            (decompose-equality)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    3))
                                                                  (("2"
                                                                    (decompose-equality)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide
                                                           -
                                                           (2 6))
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (lemma
                                                               "positions_of_arg")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "s!1"
                                                                 "kk!1")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide
                                                           -
                                                           (2 6))
                                                          (("4"
                                                            (skosimp*)
                                                            (("4"
                                                              (lemma
                                                               "positions_of_arg")
                                                              (("4"
                                                                (inst
                                                                 -1
                                                                 "t!1"
                                                                 "kk!1")
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-4 1))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-2 1 2 3 4))
                                (("2"
                                  (lemma "first_diff_TCC7")
                                  (("2"
                                    (inst
                                     -1
                                     "t!1"
                                     "s!1"
                                     "f(t!1)"
                                     "args(t!1)")
                                    (("2"
                                      (case
                                       "t!1 = app(f(t!1), args(t!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -1
                                             "f(s!1)"
                                             "args(s!1)")
                                            (("1"
                                              (case
                                               "s!1 = app(f(s!1), args(s!1))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but (1 5))
                                                (("2"
                                                  (decompose-equality)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 3))
                                        (("2"
                                          (decompose-equality)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but (-2 1 2 3 4))
                                (("3"
                                  (skosimp*)
                                  (("3"
                                    (lemma "positions_of_arg")
                                    (("3"
                                      (inst -1 "s!1" "kk!1")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide - 5)
                                (("4"
                                  (skosimp*)
                                  (("4"
                                    (lemma "positions_of_arg")
                                    (("4"
                                      (inst -1 "t!1" "kk!1")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-2 1))
                          (("2" (expand* "add_first" "insert?")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide -2 -3)
                    (("5" (expand "first_diff")
                      (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (prop)
                (("1" (hide -3 1)
                  (("1" (expand "first_diff")
                    (("1" (assert)
                      (("1" (lift-if) (("1" (prop) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3 2)
                  (("2" (expand "first_diff")
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (prop) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -3 3)
                  (("3" (expand "first_diff") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (hide - 5)
                  (("4" (lemma "first_diff_TCC7")
                    (("4" (inst -1 "s!1" "t!1" "f(s!1)" "args(s!1)")
                      (("4" (case "s!1 = app(f(s!1), args(s!1))")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (inst -1 "f(t!1)" "args(t!1)")
                              (("1"
                                (case "t!1 = app(f(t!1), args(t!1))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (reveal -4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 2))
                                  (("2" (decompose-equality) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 4))
                          (("2" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide -2 5)
                  (("5" (expand "first_diff") (("5" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (prop)
                (("1" (hide -3 1)
                  (("1" (expand "first_diff")
                    (("1" (assert)
                      (("1" (lift-if) (("1" (prop) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3 2)
                  (("2" (expand "first_diff")
                    (("2" (lift-if)
                      (("2" (prop) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("3" (hide -3 3)
                  (("3" (expand "first_diff") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (hide -2 -3 5)
                  (("4" (skosimp*)
                    (("4" (lemma "positions_of_arg")
                      (("4" (inst -1 "t!1" "kk!1")
                        (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide -)
                  (("5" (skosimp*)
                    (("5" (lemma "positions_of_arg")
                      (("5" (inst -1 "t!1" "kk!1")
                        (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide -1)
                (("4" (prop)
                  (("1" (hide 1)
                    (("1" (expand "first_diff")
                      (("1" (lift-if) (("1" (prop) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "first_diff")
                      (("2" (lift-if)
                        (("2" (prop) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 3)
                    (("3" (expand "first_diff")
                      (("3" (assert) nil nil)) nil))
                    nil)
                   ("4" (hide -2 5)
                    (("4" (skosimp*)
                      (("4" (lemma "positions_of_arg")
                        (("4" (inst -1 "s!1" "kk!1")
                          (("1" (assert) nil nil)
                           ("2" (hide 5)
                            (("2" (typepred "kk!1")
                              (("2"
                                (lemma "equal_symbol_equal_length_arg")
                                (("2"
                                  (inst
                                   -1
                                   "s!1"
                                   "t!1"
                                   "f(s!1)"
                                   "f(t!1)"
                                   "args(s!1)"
                                   "args(t!1)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 5)
                    (("5" (expand "first_diff")
                      (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("5" (prop)
                (("1" (hide -3)
                  (("1" (expand "first_diff") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (hide -3)
                  (("2" (expand "first_diff") (("2" (assert) nil nil))
                    nil))
                  nil)
                 ("3" (hide -3)
                  (("3" (expand "first_diff") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (assert) nil nil) ("5" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (equal_symbol_equal_length_arg formula-decl nil positions nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (positions_of_arg formula-decl nil positions nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (position_s_first_diff 0
  (position_s_first_diff-2 "" 3756667591
   ("" (measure-induct+ "length(p)" "p")
    (("" (skosimp)
      (("" (expand "first_diff" -2)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -3)
              (("1" (replaces -2)
                (("1" (expand "positionsOF")
                  (("1" (assert)
                    (("1" (expand "only_empty_seq")
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -3)
              (("2" (replaces -2)
                (("2" (expand "positionsOF")
                  (("2" (assert)
                    (("2" (expand "only_empty_seq")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -3)
              (("3" (replaces -2)
                (("3" (expand "positionsOF")
                  (("3" (assert)
                    (("3"
                      (expand* "union" "only_empty_seq" "IUnion"
                       "member")
                      nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (assert)
              (("4"
                (name-replace "k!11"
                 "min({kk: below[length(args(t!1))] | NOT
                            subtermOF(s!1,  #(1 + kk)) = subtermOF (t!1,  #(1 + kk))})")
                (("1" (name-replace "k!1" "1 + k!11")
                  (("1"
                    (inst -3
                     "first_diff(subtermOF(s!1, #(k!1)), subtermOF(t!1, #(k!1)))"
                     "subtermOF(s!1, #(k!1))" "subtermOF(t!1, #(k!1))")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (replace -1 -2)
                          (("1" (expand "add_first" -2)
                            (("1" (expand "insert?" -2)
                              (("1"
                                (rewrite "add_first_is_o")
                                (("1"
                                  (lemma "pos_o_term")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide (-1 -2 5))
                                        (("1"
                                          (reveal -7)
                                          (("1"
                                            (replace -1 1 rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "positions_of_arg")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "s!1"
                                                   "k!11")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred "k!11")
                                                    (("2"
                                                      (hide (-2 1 3))
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide - 5)
                  (("2" (lemma "first_diff_TCC3")
                    (("2" (inst -1 "s!1" "t!1" "f(s!1)" "args(s!1)")
                      (("2" (case "s!1 = app(f(s!1), args(s!1))")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (inst -1 "f(t!1)" "args(t!1)")
                              (("1"
                                (case "t!1 = app(f(t!1), args(t!1))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2" (decompose-equality) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 5))
                          (("2" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide - 5)
                  (("3" (skosimp*)
                    (("3" (lemma "positions_of_arg")
                      (("3" (inst -1 "t!1" "kk!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide - 5)
                  (("4" (skosimp*)
                    (("4" (lemma "positions_of_arg")
                      (("4" (inst -1 "s!1" "kk!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "kk!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (replaces -1)
              (("5" (hide -1 1 2)
                (("5" (expand "positionsOF")
                  (("5" (assert)
                    (("5"
                      (expand* "union" "IUnion" "member"
                       "only_empty_seq")
                      nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_app_extensionality formula-decl nil term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (insert? const-decl "finseq" seq_extras structures)
    (pos_o_term formula-decl nil subterm nil)
    (positions_of_arg formula-decl nil positions nil)
    (add_first_is_o formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (add_first const-decl "finseq" seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (position_s_first_diff-1 nil 3468178714
   ("" (measure-induct+ "length(p)" "p")
    (("" (skosimp)
      (("" (expand "first_diff" -2)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -3)
              (("1" (replaces -2)
                (("1" (expand "positionsOF")
                  (("1" (assert)
                    (("1" (expand "only_empty_seq")
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -3)
              (("2" (replaces -2)
                (("2" (expand "positionsOF")
                  (("2" (assert)
                    (("2" (expand "only_empty_seq")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -3)
              (("3" (replaces -2)
                (("3" (expand "positionsOF")
                  (("3" (assert)
                    (("3"
                      (expand* "union" "only_empty_seq" "IUnion"
                       "member")
                      nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (assert)
              (("4"
                (name-replace "k!11"
                 "min({kk: below[length(args(t!1))] | NOT
                        subtermOF(s!1,  #(1 + kk)) = subtermOF (t!1,  #(1 + kk))})")
                (("1" (name-replace "k!1" "1 + k!11")
                  (("1"
                    (inst -3
                     "first_diff(subtermOF(s!1, #(k!1)), subtermOF(t!1, #(k!1)))"
                     "subtermOF(s!1, #(k!1))" "subtermOF(t!1, #(k!1))")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (replace -1 -2)
                          (("1" (expand "add_first" -2)
                            (("1" (expand "insert?" -2)
                              (("1"
                                (rewrite "add_first_is_o")
                                (("1"
                                  (lemma "pos_o_term")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide (-1 -2 5))
                                        (("1"
                                          (reveal -7)
                                          (("1"
                                            (replace -1 1 rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "positions_of_arg")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "s!1"
                                                   "k!11")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred "k!11")
                                                    (("2"
                                                      (hide (-2 1 3))
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide - 5)
                  (("2" (lemma "first_diff_TCC7")
                    (("2" (inst -1 "s!1" "t!1" "f(s!1)" "args(s!1)")
                      (("2" (case "s!1 = app(f(s!1), args(s!1))")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (inst -1 "f(t!1)" "args(t!1)")
                              (("1"
                                (case "t!1 = app(f(t!1), args(t!1))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2" (decompose-equality) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 5))
                          (("2" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide - 5)
                  (("3" (skosimp*)
                    (("3" (lemma "positions_of_arg")
                      (("3" (inst -1 "t!1" "kk!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide - 5)
                  (("4" (skosimp*)
                    (("4" (lemma "positions_of_arg")
                      (("4" (inst -1 "s!1" "kk!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "kk!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (replaces -1)
              (("5" (hide -1 1 2)
                (("5" (expand "positionsOF")
                  (("5" (assert)
                    (("5"
                      (expand* "union" "IUnion" "member"
                       "only_empty_seq")
                      nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_app_extensionality formula-decl nil term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (insert? const-decl "finseq" seq_extras structures)
    (pos_o_term formula-decl nil subterm nil)
    (positions_of_arg formula-decl nil positions nil)
    (add_first_is_o formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (add_first const-decl "finseq" seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (position_t_first_diff 0
  (position_t_first_diff-1 nil 3468768340
   ("" (lemma "commutative_first_diff")
    (("" (lemma "position_s_first_diff")
      (("" (skosimp*)
        (("" (inst -1 "t!1" "s!1" "p!1")
          (("" (inst -2 "s!1" "t!1" "p!1") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   shostak))
 (first_diff_has_diff_argument_TCC1 0
  (first_diff_has_diff_argument_TCC1-1 nil 3469282256
   ("" (skosimp)
    (("" (lemma "position_s_first_diff")
      (("" (inst -1 "s!1" "t!1" "p!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (first_diff_has_diff_argument subtype "robinsonunification.p"
    "positions[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].positions?(robinsonunification.s)")))
 (first_diff_has_diff_argument_TCC2 0
  (first_diff_has_diff_argument_TCC2-1 nil 3469282256
   ("" (skosimp) (("" (rewrite "position_t_first_diff") nil nil)) nil)
   ((term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   nil
   (first_diff_has_diff_argument subtype "robinsonunification.p"
    "positions[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].positions?(robinsonunification.t)")))
 (first_diff_has_diff_argument 0
  (first_diff_has_diff_argument-3 "" 3803855574
   ("" (measure-induct+ "length(p)" "p")
    (("1" (skosimp)
      (("1" (expand "first_diff" -2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (replaces -2)
              (("1" (hide -1 -2)
                (("1" (expand "subtermOF")
                  (("1" (rewrite "empty_0")
                    (("1" (typepred "t!1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replaces -2)
              (("2" (hide -1 -2 1)
                (("2" (expand "subtermOF")
                  (("2" (rewrite "empty_0")
                    (("2" (typepred "t!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (replaces -2)
              (("3" (hide -1 -2 1 2)
                (("3" (expand "subtermOF")
                  (("3" (rewrite "empty_0")
                    (("3" (typepred "t!1") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (assert)
              (("4"
                (name-replace "k!11"
                 "min({kk: below[length(args(t!1))] |
                                 NOT subtermOF(s!1,  #(1 + kk)) = subtermOF(t!1,  #(1 + kk))})")
                (("1" (name-replace "k!1" "1+k!11")
                  (("1"
                    (inst -3 "first_diff(subtermOF(s!1,  #(k!1)),
                                                    subtermOF(t!1,  #(k!1)))")
                    (("1"
                      (inst -3 "subtermOF(s!1,  #(k!1))"
                       "subtermOF(t!1,  #(k!1))")
                      (("1" (replace -2 -3)
                        (("1" (expand "add_first" -3)
                          (("1" (expand "insert?" -3)
                            (("1" (flatten)
                              (("1"
                                (name-replace
                                 "p!1"
                                 "first_diff(subtermOF(s!1,  #(k!1)),
                                                    subtermOF(t!1,  #(k!1)))"
                                 :hide?
                                 nil)
                                (("1"
                                  (lemma
                                   "subt_of_subt_is_subt_of_term")
                                  (("1"
                                    (inst -1 "s!1" "k!1" "p!1" "x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "subt_of_subt_is_subt_of_term")
                                        (("1"
                                          (inst
                                           -1
                                           "t!1"
                                           "k!1"
                                           "p!1"
                                           "x!1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -1 -2 -3 -5 -6 5)
                                            (("2"
                                              (reveal -8)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "first_diff_TCC2")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "s!1"
                                                       "t!1"
                                                       "f(s!1)"
                                                       "args(s!1)")
                                                      (("2"
                                                        (case
                                                         "s!1 = app(f(s!1), args(s!1))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "f(t!1)"
                                                               "args(t!1)")
                                                              (("1"
                                                                (case
                                                                 "t!1 = app(f(t!1), args(t!1))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "k!11")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (reveal
                                                                   -14)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        3))
                                                                      (("2"
                                                                        (decompose-equality)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 5))
                                                          (("2"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide - 5)
                                      (("2"
                                        (reveal -8)
                                        (("2"
                                          (reveal -9)
                                          (("2"
                                            (lemma "first_diff_TCC1")
                                            (("2"
                                              (inst
                                               -1
                                               "s!1"
                                               "t!1"
                                               "f(s!1)"
                                               "args(s!1)")
                                              (("2"
                                                (case
                                                 "s!1 = app(f(s!1), args(s!1))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f(t!1)"
                                                       "args(t!1)")
                                                      (("1"
                                                        (case
                                                         "t!1 = app(f(t!1), args(t!1))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "k!11")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("2"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 5))
                                                  (("2"
                                                    (decompose-equality)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -)
                  (("2" (lemma "first_diff_TCC3")
                    (("2" (inst -1 "s!1" "t!1" "f(s!1)" "args(s!1)")
                      (("2" (case "s!1 = app(f(s!1), args(s!1))")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (inst -1 "f(t!1)" "args(t!1)")
                              (("1"
                                (case "t!1 = app(f(t!1), args(t!1))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2" (decompose-equality) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 5))
                          (("2" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -)
                  (("3" (skosimp*)
                    (("3" (lemma "positions_of_arg")
                      (("3" (inst -1 "t!1" "kk!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide -)
                  (("4" (skosimp*)
                    (("4" (lemma "positions_of_arg")
                      (("4" (inst -1 "s!1" "kk!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "kk!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide -2 +)
              (("5" (replaces -1)
                (("5" (expand "subtermOF")
                  (("5" (rewrite "empty_0")
                    (("5" (typepred "t!1") (("5" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but (-2 1))
      (("2" (rewrite "position_t_first_diff") nil nil)) nil)
     ("3" (hide-all-but (-2 1))
      (("3" (lemma "position_s_first_diff")
        (("3" (inst -1 "s!1" "t!1" "y!1") (("3" (assert) nil nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (rewrite "position_t_first_diff") nil nil))
      nil)
     ("5" (hide 2)
      (("5" (lemma "position_s_first_diff")
        (("5" (inst -1 "s!1" "t!1" "p!1") (("5" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (first_diff_has_diff_argument-2 "" 3756667644
   ("" (measure-induct+ "length(p)" "p")
    (("1" (skosimp)
      (("1" (expand "first_diff" -2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (replaces -2)
              (("1" (hide -1 -2)
                (("1" (expand "subtermOF")
                  (("1" (rewrite "empty_0")
                    (("1" (typepred "t!1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replaces -2)
              (("2" (hide -1 -2 1)
                (("2" (expand "subtermOF")
                  (("2" (rewrite "empty_0")
                    (("2" (typepred "t!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (replaces -2)
              (("3" (hide -1 -2 1 2)
                (("3" (expand "subtermOF")
                  (("3" (rewrite "empty_0")
                    (("3" (typepred "t!1") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (assert)
              (("4"
                (name-replace "k!11"
                 "min({kk: below[length(args(t!1))] |
                                 NOT subtermOF(s!1,  #(1 + kk)) = subtermOF(t!1,  #(1 + kk))})")
                (("1" (name-replace "k!1" "1+k!11")
                  (("1"
                    (inst -3 "first_diff(subtermOF(s!1,  #(k!1)),
                                                    subtermOF(t!1,  #(k!1)))")
                    (("1"
                      (inst -3 "subtermOF(s!1,  #(k!1))"
                       "subtermOF(t!1,  #(k!1))")
                      (("1" (replace -2 -3)
                        (("1" (expand "add_first" -3)
                          (("1" (expand "insert?" -3)
                            (("1" (flatten)
                              (("1"
                                (name-replace
                                 "p!1"
                                 "first_diff(subtermOF(s!1,  #(k!1)),
                                                    subtermOF(t!1,  #(k!1)))"
                                 :hide?
                                 nil)
                                (("1"
                                  (lemma
                                   "subt_of_subt_is_subt_of_term")
                                  (("1"
                                    (inst -1 "s!1" "k!1" "p!1" "x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "subt_of_subt_is_subt_of_term")
                                        (("1"
                                          (inst
                                           -1
                                           "t!1"
                                           "k!1"
                                           "p!1"
                                           "x!1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -1 -2 -3 -5 -6 5)
                                            (("2"
                                              (reveal -8)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "first_diff_TCC2")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "s!1"
                                                       "t!1"
                                                       "f(s!1)"
                                                       "args(s!1)")
                                                      (("2"
                                                        (case
                                                         "s!1 = app(f(s!1), args(s!1))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "f(t!1)"
                                                               "args(t!1)")
                                                              (("1"
                                                                (case
                                                                 "t!1 = app(f(t!1), args(t!1))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "k!11")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (reveal
                                                                   -14)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        3))
                                                                      (("2"
                                                                        (decompose-equality)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 5))
                                                          (("2"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide - 5)
                                      (("2"
                                        (reveal -8)
                                        (("2"
                                          (reveal -9)
                                          (("2"
                                            (lemma "first_diff_TCC1")
                                            (("2"
                                              (inst
                                               -1
                                               "s!1"
                                               "t!1"
                                               "f(s!1)"
                                               "args(s!1)")
                                              (("2"
                                                (case
                                                 "s!1 = app(f(s!1), args(s!1))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f(t!1)"
                                                       "args(t!1)")
                                                      (("1"
                                                        (case
                                                         "t!1 = app(f(t!1), args(t!1))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "k!11")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("2"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 5))
                                                  (("2"
                                                    (decompose-equality)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -)
                  (("2" (lemma "first_diff_TCC3")
                    (("2" (inst -1 "s!1" "t!1" "f(s!1)" "args(s!1)")
                      (("2" (case "s!1 = app(f(s!1), args(s!1))")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (inst -1 "f(t!1)" "args(t!1)")
                              (("1"
                                (case "t!1 = app(f(t!1), args(t!1))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2" (decompose-equality) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 5))
                          (("2" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -)
                  (("3" (skosimp*)
                    (("3" (lemma "positions_of_arg")
                      (("3" (inst -1 "t!1" "kk!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide -)
                  (("4" (skosimp*)
                    (("4" (lemma "positions_of_arg")
                      (("4" (inst -1 "s!1" "kk!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "kk!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide -2 +)
              (("5" (replaces -1)
                (("5" (expand "subtermOF")
                  (("5" (rewrite "empty_0")
                    (("5" (typepred "t!1") (("5" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but (-1 1))
      (("2" (rewrite "position_t_first_diff") nil nil)) nil)
     ("3" (hide-all-but (-1 1))
      (("3" (lemma "position_s_first_diff")
        (("3" (inst -1 "s!1" "t!1" "y!1") (("3" (assert) nil nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (rewrite "position_t_first_diff") nil nil))
      nil)
     ("5" (hide 2)
      (("5" (lemma "position_s_first_diff")
        (("5" (inst -1 "s!1" "t!1" "p!1") (("5" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (subt_of_subt_is_subt_of_term formula-decl nil subterm nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (position type-eq-decl nil positions nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (first_diff_has_diff_argument-1 nil 3469282257
   ("" (measure-induct+ "length(p)" "p")
    (("1" (skosimp)
      (("1" (expand "first_diff" -2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (replaces -2)
              (("1" (hide -1 -2)
                (("1" (expand "subtermOF")
                  (("1" (rewrite "empty_0")
                    (("1" (typepred "t!1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replaces -2)
              (("2" (hide -1 -2 1)
                (("2" (expand "subtermOF")
                  (("2" (rewrite "empty_0")
                    (("2" (typepred "t!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (replaces -2)
              (("3" (hide -1 -2 1 2)
                (("3" (expand "subtermOF")
                  (("3" (rewrite "empty_0")
                    (("3" (typepred "t!1") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (assert)
              (("4"
                (name-replace "k!11"
                 "min({kk: below[length(args(t!1))] |
                           NOT subtermOF(s!1,  #(1 + kk)) = subtermOF(t!1,  #(1 + kk))})")
                (("1" (name-replace "k!1" "1+k!11")
                  (("1"
                    (inst -3 "first_diff(subtermOF(s!1,  #(k!1)),
                                            subtermOF(t!1,  #(k!1)))")
                    (("1"
                      (inst -3 "subtermOF(s!1,  #(k!1))"
                       "subtermOF(t!1,  #(k!1))")
                      (("1" (replace -2 -3)
                        (("1" (expand "add_first" -3)
                          (("1" (expand "insert?" -3)
                            (("1" (flatten)
                              (("1"
                                (name-replace
                                 "p!1"
                                 "first_diff(subtermOF(s!1,  #(k!1)),
                                            subtermOF(t!1,  #(k!1)))"
                                 :hide?
                                 nil)
                                (("1"
                                  (lemma
                                   "subt_of_subt_is_subt_of_term")
                                  (("1"
                                    (inst -1 "s!1" "k!1" "p!1" "x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "subt_of_subt_is_subt_of_term")
                                        (("1"
                                          (inst
                                           -1
                                           "t!1"
                                           "k!1"
                                           "p!1"
                                           "x!1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -1 -2 -3 -5 -6 5)
                                            (("2"
                                              (reveal -8)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "first_diff_TCC2")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "s!1"
                                                       "t!1"
                                                       "f(s!1)"
                                                       "args(s!1)")
                                                      (("2"
                                                        (case
                                                         "s!1 = app(f(s!1), args(s!1))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "f(t!1)"
                                                               "args(t!1)")
                                                              (("1"
                                                                (case
                                                                 "t!1 = app(f(t!1), args(t!1))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "k!11")
                                                                      (("1"
                                                                        (reveal
                                                                         -14)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    3))
                                                                  (("2"
                                                                    (decompose-equality)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 5))
                                                          (("2"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide - 5)
                                      (("2"
                                        (reveal -8)
                                        (("2"
                                          (reveal -9)
                                          (("2"
                                            (lemma "first_diff_TCC1")
                                            (("2"
                                              (inst
                                               -1
                                               "s!1"
                                               "t!1"
                                               "f(s!1)"
                                               "args(s!1)")
                                              (("2"
                                                (case
                                                 "s!1 = app(f(s!1), args(s!1))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f(t!1)"
                                                       "args(t!1)")
                                                      (("1"
                                                        (case
                                                         "t!1 = app(f(t!1), args(t!1))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "k!11")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("2"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 5))
                                                  (("2"
                                                    (decompose-equality)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -)
                  (("2" (lemma "first_diff_TCC7")
                    (("2" (inst -1 "s!1" "t!1" "f(s!1)" "args(s!1)")
                      (("2" (case "s!1 = app(f(s!1), args(s!1))")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (inst -1 "f(t!1)" "args(t!1)")
                              (("1"
                                (case "t!1 = app(f(t!1), args(t!1))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2" (decompose-equality) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 5))
                          (("2" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -)
                  (("3" (skosimp*)
                    (("3" (lemma "positions_of_arg")
                      (("3" (inst -1 "t!1" "kk!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide -)
                  (("4" (skosimp*)
                    (("4" (lemma "positions_of_arg")
                      (("4" (inst -1 "s!1" "kk!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "kk!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide -2 +)
              (("5" (replaces -1)
                (("5" (expand "subtermOF")
                  (("5" (rewrite "empty_0")
                    (("5" (typepred "t!1") (("5" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but (-1 1))
      (("2" (rewrite "position_t_first_diff") nil nil)) nil)
     ("3" (hide-all-but (-1 1))
      (("3" (lemma "position_s_first_diff")
        (("3" (inst -1 "s!1" "t!1" "y!1") (("3" (assert) nil nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (rewrite "position_t_first_diff") nil nil))
      nil)
     ("5" (hide 2)
      (("5" (lemma "position_s_first_diff")
        (("5" (inst -1 "s!1" "t!1" "p!1") (("5" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (add_first const-decl "finseq" seq_extras structures)
    (subt_of_subt_is_subt_of_term formula-decl nil subterm nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (insert? const-decl "finseq" seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (position type-eq-decl nil positions nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (first_diff_unifiable_vars 0
  (first_diff_unifiable_vars-3 "" 3803855883
   ("" (measure-induct+ "length(p)" "p")
    (("1" (skosimp)
      (("1" (expand "first_diff" -2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (hide -3 -4 2)
              (("1" (replaces -2)
                (("1" (expand "subtermOF")
                  (("1" (rewrite "empty_0") nil nil)) nil))
                nil))
              nil)
             ("2" (hide -3)
              (("2" (expand "unifiable")
                (("2" (skeep -3)
                  (("2" (expand "unifier")
                    (("2" (expand "ext" -3 1)
                      (("2" (assert)
                        (("2" (replaces -2)
                          (("2" (expand "subtermOF")
                            (("2" (rewrite "empty_0")
                              (("2"
                                (hide 1)
                                (("2"
                                  (typepred "t!1")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "ext" -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -3 -4 1 2 3)
              (("3" (replaces -2)
                (("3" (expand "subtermOF")
                  (("3" (rewrite "empty_0") nil nil)) nil))
                nil))
              nil)
             ("4" (assert)
              (("4"
                (name-replace "k!11"
                 "min({kk: below[length(args(t!1))] |
                                             NOT subtermOF(s!1,  #(1 + kk)) = subtermOF(t!1,  #(1 + kk))})")
                (("1" (name-replace "k!1" "1+k!11")
                  (("1"
                    (inst -3 " first_diff(subtermOF(s!1,  #(k!1)),
                                                            subtermOF(t!1,  #(k!1)))")
                    (("1"
                      (inst -3 "subtermOF(s!1,  #(k!1))"
                       "subtermOF(t!1,  #(k!1))")
                      (("1" (replace -2 -3)
                        (("1" (expand "add_first" -3)
                          (("1" (expand "insert?" -3)
                            (("1" (prop)
                              (("1"
                                (lemma "subt_of_subt_is_subt_of_term")
                                (("1"
                                  (inst
                                   -1
                                   "s!1"
                                   "k!1"
                                   "first_diff(subtermOF(s!1,  #(k!1)),
                                                                    subtermOF(t!1,  #(k!1)))"
                                   "x!1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -1 -3 -4 5 6)
                                    (("2"
                                      (reveal -8)
                                      (("2"
                                        (reveal -7)
                                        (("2"
                                          (lemma "first_diff_TCC1")
                                          (("2"
                                            (inst
                                             -1
                                             "s!1"
                                             "t!1"
                                             "f(s!1)"
                                             "args(s!1)")
                                            (("2"
                                              (case
                                               "s!1 = app(f(s!1), args(s!1))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f(t!1)"
                                                     "args(t!1)")
                                                    (("1"
                                                      (case
                                                       "t!1 = app(f(t!1), args(t!1))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "k!11")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 3))
                                                        (("2"
                                                          (decompose-equality
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 5))
                                                (("2"
                                                  (decompose-equality
                                                   1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "subt_of_subt_is_subt_of_term")
                                (("2"
                                  (inst
                                   -1
                                   "t!1"
                                   "k!1"
                                   "first_diff(subtermOF(s!1,  #(k!1)),
                                                                    subtermOF(t!1,  #(k!1)))"
                                   "x!1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -1 -3 -4 5 6)
                                    (("2"
                                      (reveal -8)
                                      (("2"
                                        (reveal -7)
                                        (("2"
                                          (lemma "first_diff_TCC2")
                                          (("2"
                                            (inst
                                             -1
                                             "s!1"
                                             "t!1"
                                             "f(s!1)"
                                             "args(s!1)")
                                            (("2"
                                              (case
                                               "s!1 = app(f(s!1), args(s!1))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f(t!1)"
                                                     "args(t!1)")
                                                    (("1"
                                                      (case
                                                       "t!1 = app(f(t!1), args(t!1))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "k!11")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 3))
                                                        (("2"
                                                          (decompose-equality
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 5))
                                                (("2"
                                                  (decompose-equality
                                                   1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -2 5 6)
                                (("3"
                                  (lemma
                                   "unifiable_terms_unifiable_args")
                                  (("3"
                                    (expand "unifiable")
                                    (("3"
                                      (skosimp)
                                      (("3"
                                        (inst 1 "sigma!1")
                                        (("3"
                                          (inst
                                           -1
                                           "sigma!1"
                                           "s!1"
                                           "t!1"
                                           "#(k!1)")
                                          (("1"
                                            (expand* "member" "U")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (reveal -5)
                                            (("2"
                                              (reveal -6)
                                              (("2"
                                                (lemma
                                                 "first_diff_TCC1")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "s!1"
                                                   "t!1"
                                                   "f(s!1)"
                                                   "args(s!1)")
                                                  (("2"
                                                    (case
                                                     "s!1 = app(f(s!1), args(s!1))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "f(t!1)"
                                                           "args(t!1)")
                                                          (("1"
                                                            (case
                                                             "t!1 = app(f(t!1), args(t!1))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "k!11")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "first_diff_TCC2")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "s!1"
                                                                         "t!1"
                                                                         "f(s!1)"
                                                                         "args(s!1)")
                                                                        (("1"
                                                                          (case
                                                                           "s!1 = app(f(s!1), args(s!1))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "f(t!1)"
                                                                                 "args(t!1)")
                                                                                (("1"
                                                                                  (case
                                                                                   "t!1 = app(f(t!1), args(t!1))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "k!11")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      4))
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              6))
                                                                            (("2"
                                                                              (decompose-equality
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (decompose-equality
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 6))
                                                      (("2"
                                                        (decompose-equality
                                                         1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 -3 -4 5 6)
                  (("2" (lemma "first_diff_TCC3")
                    (("2" (inst -1 "s!1" "t!1" "f(s!1)" "args(s!1)")
                      (("2" (case "s!1 = app(f(s!1), args(s!1))")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (inst -1 "f(t!1)" "args(t!1)")
                              (("1"
                                (case "t!1 = app(f(t!1), args(t!1))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2"
                                    (decompose-equality 1)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 5))
                          (("2" (decompose-equality 1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide - (5 6))
                  (("3" (skosimp*)
                    (("3" (lemma "positions_of_arg")
                      (("3" (inst -1 "t!1" "kk!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide - (5 6))
                  (("4" (skosimp*)
                    (("4" (lemma "positions_of_arg")
                      (("4" (inst -1 "s!1" "kk!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "kk!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide -1 -2 5 6)
              (("5" (expand "unifiable")
                (("5" (skeep -1)
                  (("5" (expand "unifier")
                    (("5" (expand "ext")
                      (("5" (assert)
                        (("5" (lift-if)
                          (("5" (prop)
                            (("1" (decompose-equality -2) nil nil)
                             ("2" (decompose-equality -1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but (-2 2))
      (("2" (rewrite "position_t_first_diff") nil nil)) nil)
     ("3" (hide-all-but (-2 1))
      (("3" (lemma "position_s_first_diff")
        (("3" (inst -1 "s!1" "t!1" "y!1") (("3" (assert) nil nil))
          nil))
        nil))
      nil)
     ("4" (hide-all-but (-1 2))
      (("4" (rewrite "position_t_first_diff") nil nil)) nil)
     ("5" (hide-all-but (-1 1))
      (("5" (lemma "position_s_first_diff")
        (("5" (inst -1 "s!1" "t!1" "p!1") (("5" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (first_diff_unifiable_vars-2 "" 3756659648
   ("" (measure-induct+ "length(p)" "p")
    (("1" (skosimp)
      (("1" (expand "first_diff" -2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (hide -3 -4 2)
              (("1" (replaces -2)
                (("1" (expand "subtermOF")
                  (("1" (rewrite "empty_0") nil nil)) nil))
                nil))
              nil)
             ("2" (hide -3)
              (("2" (expand "unifiable")
                (("2" (skeep -3)
                  (("2" (expand "unifier")
                    (("2" (expand "ext" -3 1)
                      (("2" (assert)
                        (("2" (replaces -2)
                          (("2" (expand "subtermOF")
                            (("2" (rewrite "empty_0")
                              (("2"
                                (hide 1)
                                (("2"
                                  (typepred "t!1")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "ext" -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -3 -4 1 2 3)
              (("3" (replaces -2)
                (("3" (expand "subtermOF")
                  (("3" (rewrite "empty_0") nil nil)) nil))
                nil))
              nil)
             ("4" (assert)
              (("4"
                (name-replace "k!11"
                 "min({kk: below[length(args(t!1))] |
                                             NOT subtermOF(s!1,  #(1 + kk)) = subtermOF(t!1,  #(1 + kk))})")
                (("1" (name-replace "k!1" "1+k!11")
                  (("1"
                    (inst -3 " first_diff(subtermOF(s!1,  #(k!1)),
                                                            subtermOF(t!1,  #(k!1)))")
                    (("1"
                      (inst -3 "subtermOF(s!1,  #(k!1))"
                       "subtermOF(t!1,  #(k!1))")
                      (("1" (replace -2 -3)
                        (("1" (expand "add_first" -3)
                          (("1" (expand "insert?" -3)
                            (("1" (prop)
                              (("1"
                                (lemma "subt_of_subt_is_subt_of_term")
                                (("1"
                                  (inst
                                   -1
                                   "s!1"
                                   "k!1"
                                   "first_diff(subtermOF(s!1,  #(k!1)),
                                                                    subtermOF(t!1,  #(k!1)))"
                                   "x!1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -1 -3 -4 5 6)
                                    (("2"
                                      (reveal -8)
                                      (("2"
                                        (reveal -7)
                                        (("2"
                                          (lemma "first_diff_TCC1")
                                          (("2"
                                            (inst
                                             -1
                                             "s!1"
                                             "t!1"
                                             "f(s!1)"
                                             "args(s!1)")
                                            (("2"
                                              (case
                                               "s!1 = app(f(s!1), args(s!1))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f(t!1)"
                                                     "args(t!1)")
                                                    (("1"
                                                      (case
                                                       "t!1 = app(f(t!1), args(t!1))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "k!11")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 3))
                                                        (("2"
                                                          (decompose-equality
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 5))
                                                (("2"
                                                  (decompose-equality
                                                   1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "subt_of_subt_is_subt_of_term")
                                (("2"
                                  (inst
                                   -1
                                   "t!1"
                                   "k!1"
                                   "first_diff(subtermOF(s!1,  #(k!1)),
                                                                    subtermOF(t!1,  #(k!1)))"
                                   "x!1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -1 -3 -4 5 6)
                                    (("2"
                                      (reveal -8)
                                      (("2"
                                        (reveal -7)
                                        (("2"
                                          (lemma "first_diff_TCC2")
                                          (("2"
                                            (inst
                                             -1
                                             "s!1"
                                             "t!1"
                                             "f(s!1)"
                                             "args(s!1)")
                                            (("2"
                                              (case
                                               "s!1 = app(f(s!1), args(s!1))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f(t!1)"
                                                     "args(t!1)")
                                                    (("1"
                                                      (case
                                                       "t!1 = app(f(t!1), args(t!1))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "k!11")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 3))
                                                        (("2"
                                                          (decompose-equality
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 5))
                                                (("2"
                                                  (decompose-equality
                                                   1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -2 5 6)
                                (("3"
                                  (lemma
                                   "unifiable_terms_unifiable_args")
                                  (("3"
                                    (expand "unifiable")
                                    (("3"
                                      (skosimp)
                                      (("3"
                                        (inst 1 "sigma!1")
                                        (("3"
                                          (inst
                                           -1
                                           "sigma!1"
                                           "s!1"
                                           "t!1"
                                           "#(k!1)")
                                          (("1"
                                            (expand* "member" "U")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (reveal -5)
                                            (("2"
                                              (reveal -6)
                                              (("2"
                                                (lemma
                                                 "first_diff_TCC1")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "s!1"
                                                   "t!1"
                                                   "f(s!1)"
                                                   "args(s!1)")
                                                  (("2"
                                                    (case
                                                     "s!1 = app(f(s!1), args(s!1))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "f(t!1)"
                                                           "args(t!1)")
                                                          (("1"
                                                            (case
                                                             "t!1 = app(f(t!1), args(t!1))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "k!11")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "first_diff_TCC2")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "s!1"
                                                                         "t!1"
                                                                         "f(s!1)"
                                                                         "args(s!1)")
                                                                        (("1"
                                                                          (case
                                                                           "s!1 = app(f(s!1), args(s!1))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "f(t!1)"
                                                                                 "args(t!1)")
                                                                                (("1"
                                                                                  (case
                                                                                   "t!1 = app(f(t!1), args(t!1))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "k!11")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      4))
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              6))
                                                                            (("2"
                                                                              (decompose-equality
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (decompose-equality
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 6))
                                                      (("2"
                                                        (decompose-equality
                                                         1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 -3 -4 5 6)
                  (("2" (lemma "first_diff_TCC3")
                    (("2" (inst -1 "s!1" "t!1" "f(s!1)" "args(s!1)")
                      (("2" (case "s!1 = app(f(s!1), args(s!1))")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (inst -1 "f(t!1)" "args(t!1)")
                              (("1"
                                (case "t!1 = app(f(t!1), args(t!1))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2"
                                    (decompose-equality 1)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 5))
                          (("2" (decompose-equality 1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide - (5 6))
                  (("3" (skosimp*)
                    (("3" (lemma "positions_of_arg")
                      (("3" (inst -1 "t!1" "kk!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide - (5 6))
                  (("4" (skosimp*)
                    (("4" (lemma "positions_of_arg")
                      (("4" (inst -1 "s!1" "kk!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "kk!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide -1 -2 5 6)
              (("5" (expand "unifiable")
                (("5" (skeep -1)
                  (("5" (expand "unifier")
                    (("5" (expand "ext")
                      (("5" (assert)
                        (("5" (lift-if)
                          (("5" (prop)
                            (("1" (decompose-equality -2) nil nil)
                             ("2" (decompose-equality -1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but (-1 2))
      (("2" (rewrite "position_t_first_diff") nil nil)) nil)
     ("3" (hide-all-but (-1 1))
      (("3" (lemma "position_s_first_diff")
        (("3" (inst -1 "s!1" "t!1" "y!1") (("3" (assert) nil nil))
          nil))
        nil))
      nil)
     ("4" (hide-all-but (-1 2))
      (("4" (rewrite "position_t_first_diff") nil nil)) nil)
     ("5" (hide-all-but (-1 1))
      (("5" (lemma "position_s_first_diff")
        (("5" (inst -1 "s!1" "t!1" "p!1") (("5" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (member const-decl "bool" sets nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (subt_of_subt_is_subt_of_term formula-decl nil subterm nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (ext def-decl "term" substitution nil)
    (unifier const-decl "bool" unification nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (term type-decl nil term_adt nil)
    (unifiable const-decl "bool" unification nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (position type-eq-decl nil positions nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (first_diff_unifiable_vars-1 nil 3469352101
   ("" (measure-induct+ "length(p)" "p")
    (("1" (skosimp)
      (("1" (expand "first_diff" -2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (hide -3 -4 2)
              (("1" (replaces -2)
                (("1" (expand "subtermOF")
                  (("1" (rewrite "empty_0") nil nil)) nil))
                nil))
              nil)
             ("2" (hide -3)
              (("2" (expand "unifiable")
                (("2" (skeep -3)
                  (("2" (expand "unifier")
                    (("2" (expand "ext" -3 1)
                      (("2" (assert)
                        (("2" (replaces -2)
                          (("2" (expand "subtermOF")
                            (("2" (rewrite "empty_0")
                              (("2"
                                (hide 1)
                                (("2"
                                  (typepred "t!1")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "ext" -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("2"
                                              (hide 2 3 4)
                                              (("2"
                                                (decompose-equality)
                                                (("2"
                                                  (decompose-equality)
                                                  (("2"
                                                    (hide -2 -3)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -3 -4 1 2 3)
              (("3" (replaces -2)
                (("3" (expand "subtermOF")
                  (("3" (rewrite "empty_0") nil nil)) nil))
                nil))
              nil)
             ("4" (assert)
              (("4"
                (name-replace "k!11"
                 "min({kk: below[length(args(t!1))] |
                                 NOT subtermOF(s!1,  #(1 + kk)) = subtermOF(t!1,  #(1 + kk))})")
                (("1" (name-replace "k!1" "1+k!11")
                  (("1"
                    (inst -3 " first_diff(subtermOF(s!1,  #(k!1)),
                                            subtermOF(t!1,  #(k!1)))")
                    (("1"
                      (inst -3 "subtermOF(s!1,  #(k!1))"
                       "subtermOF(t!1,  #(k!1))")
                      (("1" (replace -2 -3)
                        (("1" (expand "add_first" -3)
                          (("1" (expand "insert?" -3)
                            (("1" (prop)
                              (("1"
                                (lemma "subt_of_subt_is_subt_of_term")
                                (("1"
                                  (inst
                                   -1
                                   "s!1"
                                   "k!1"
                                   "first_diff(subtermOF(s!1,  #(k!1)),
                                                subtermOF(t!1,  #(k!1)))"
                                   "x!1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -1 -3 -4 5 6)
                                    (("2"
                                      (reveal -8)
                                      (("2"
                                        (reveal -7)
                                        (("2"
                                          (lemma "first_diff_TCC1")
                                          (("2"
                                            (inst
                                             -1
                                             "s!1"
                                             "t!1"
                                             "f(s!1)"
                                             "args(s!1)")
                                            (("2"
                                              (case
                                               "s!1 = app(f(s!1), args(s!1))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f(t!1)"
                                                     "args(t!1)")
                                                    (("1"
                                                      (case
                                                       "t!1 = app(f(t!1), args(t!1))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "k!11")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 3))
                                                        (("2"
                                                          (decompose-equality)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 5))
                                                (("2"
                                                  (decompose-equality)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "subt_of_subt_is_subt_of_term")
                                (("2"
                                  (inst
                                   -1
                                   "t!1"
                                   "k!1"
                                   "first_diff(subtermOF(s!1,  #(k!1)),
                                                subtermOF(t!1,  #(k!1)))"
                                   "x!1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -1 -3 -4 5 6)
                                    (("2"
                                      (reveal -8)
                                      (("2"
                                        (reveal -7)
                                        (("2"
                                          (lemma "first_diff_TCC2")
                                          (("2"
                                            (inst
                                             -1
                                             "s!1"
                                             "t!1"
                                             "f(s!1)"
                                             "args(s!1)")
                                            (("2"
                                              (case
                                               "s!1 = app(f(s!1), args(s!1))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f(t!1)"
                                                     "args(t!1)")
                                                    (("1"
                                                      (case
                                                       "t!1 = app(f(t!1), args(t!1))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "k!11")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 3))
                                                        (("2"
                                                          (decompose-equality)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 5))
                                                (("2"
                                                  (decompose-equality)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -2 5 6)
                                (("3"
                                  (lemma
                                   "unifiable_terms_unifiable_args")
                                  (("3"
                                    (expand "unifiable")
                                    (("3"
                                      (skosimp)
                                      (("3"
                                        (inst 1 "sigma!1")
                                        (("3"
                                          (inst
                                           -1
                                           "sigma!1"
                                           "s!1"
                                           "t!1"
                                           "#(k!1)")
                                          (("1"
                                            (expand* "member" "U")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (reveal -5)
                                            (("2"
                                              (reveal -6)
                                              (("2"
                                                (lemma
                                                 "first_diff_TCC1")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "s!1"
                                                   "t!1"
                                                   "f(s!1)"
                                                   "args(s!1)")
                                                  (("2"
                                                    (case
                                                     "s!1 = app(f(s!1), args(s!1))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "f(t!1)"
                                                           "args(t!1)")
                                                          (("1"
                                                            (case
                                                             "t!1 = app(f(t!1), args(t!1))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "k!11")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "first_diff_TCC2")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "s!1"
                                                                         "t!1"
                                                                         "f(s!1)"
                                                                         "args(s!1)")
                                                                        (("1"
                                                                          (case
                                                                           "s!1 = app(f(s!1), args(s!1))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "f(t!1)"
                                                                                 "args(t!1)")
                                                                                (("1"
                                                                                  (case
                                                                                   "t!1 = app(f(t!1), args(t!1))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "k!11")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      4))
                                                                                    (("2"
                                                                                      (decompose-equality)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              6))
                                                                            (("2"
                                                                              (decompose-equality)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (decompose-equality)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 6))
                                                      (("2"
                                                        (decompose-equality)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 -3 -4 5 6)
                  (("2" (lemma "first_diff_TCC7")
                    (("2" (inst -1 "s!1" "t!1" "f(s!1)" "args(s!1)")
                      (("2" (case "s!1 = app(f(s!1), args(s!1))")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (inst -1 "f(t!1)" "args(t!1)")
                              (("1"
                                (case "t!1 = app(f(t!1), args(t!1))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2" (decompose-equality) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 5))
                          (("2" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide - (5 6))
                  (("3" (skosimp*)
                    (("3" (lemma "positions_of_arg")
                      (("3" (inst -1 "t!1" "kk!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide - (5 6))
                  (("4" (skosimp*)
                    (("4" (lemma "positions_of_arg")
                      (("4" (inst -1 "s!1" "kk!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "kk!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide -1 -2 5 6)
              (("5" (expand "unifiable")
                (("5" (skeep -1)
                  (("5" (expand "unifier")
                    (("5" (expand "ext")
                      (("5" (assert)
                        (("5" (lift-if)
                          (("5" (prop)
                            (("1" (decompose-equality -2) nil nil)
                             ("2" (decompose-equality -1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but (-1 2))
      (("2" (rewrite "position_t_first_diff") nil nil)) nil)
     ("3" (hide-all-but (-1 1))
      (("3" (lemma "position_s_first_diff")
        (("3" (inst -1 "s!1" "t!1" "y!1") (("3" (assert) nil nil))
          nil))
        nil))
      nil)
     ("4" (hide-all-but (-1 2))
      (("4" (rewrite "position_t_first_diff") nil nil)) nil)
     ("5" (hide-all-but (-1 1))
      (("5" (lemma "position_s_first_diff")
        (("5" (inst -1 "s!1" "t!1" "p!1") (("5" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (add_first const-decl "finseq" seq_extras structures)
    (term_app_extensionality formula-decl nil term_adt nil)
    (subt_of_subt_is_subt_of_term formula-decl nil subterm nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (member const-decl "bool" sets nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (insert? const-decl "finseq" seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (nonempty? const-decl "bool" sets nil)
    (ext def-decl "term" substitution nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (unifier const-decl "bool" unification nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (term type-decl nil term_adt nil)
    (unifiable const-decl "bool" unification nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (position type-eq-decl nil positions nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (fd_equal_symbol_TCC1 0
  (fd_equal_symbol_TCC1-1 nil 3512858302
   ("" (skosimp*)
    (("" (lemma "position_s_first_diff")
      (("" (inst -1 "s!1" "t!1" "fd!1")
        (("" (assert)
          (("" (typepred "p!1")
            (("" (hide -2)
              (("" (hide -3)
                (("" (lemma "app_term")
                  (("" (inst -1 "fd!1" "p!1" "s!1")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((app_term formula-decl nil subterm nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (fd_equal_symbol subtype
    "subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.s, robinsonunification.p)"
    "(term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].app?)")))
 (fd_equal_symbol_TCC2 0
  (fd_equal_symbol_TCC2-1 nil 3512858302
   ("" (skosimp*)
    (("" (lemma "position_t_first_diff")
      (("" (inst -1 "s!1" "t!1" "fd!1")
        (("" (assert)
          (("" (typepred "p!1")
            (("" (hide -1 -4)
              (("" (lemma "app_term")
                (("" (inst -1 "fd!1" "p!1" "t!1")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((app_term formula-decl nil subterm nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (fd_equal_symbol subtype
    "subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].subtermOF(robinsonunification.t, robinsonunification.p)"
    "(term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].app?)")))
 (fd_equal_symbol 0
  (fd_equal_symbol-3 "" 3803860471
   ("" (measure-induct+ "length(first_diff(s, t))" ("s" "t"))
    (("1" (skosimp)
      (("1" (name-replace "fd" "first_diff(x!1, x!2)" :hide? nil)
        (("1" (expand "first_diff" -1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide-all-but (-2 -4))
                (("1" (replace -1 -2 rl)
                  (("1" (hide -1)
                    (("1" (expand "child")
                      (("1" (skosimp)
                        (("1" (lemma "seq_empty[posnat]")
                          (("1" (inst -1 "p!1" "p1!1")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -4))
                (("2" (replace -1 -2 rl)
                  (("2" (hide -1)
                    (("2" (expand "child")
                      (("2" (skosimp)
                        (("2" (lemma "seq_empty[posnat]")
                          (("2" (inst -1 "p!1" "p1!1")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but (-2 -4))
                (("3" (replace -1 -2 rl)
                  (("3" (hide -1)
                    (("3" (expand "child")
                      (("3" (skosimp)
                        (("3" (lemma "seq_empty[posnat]")
                          (("3" (inst -1 "p!1" "p1!1")
                            (("3" (assert)
                              (("3"
                                (flatten)
                                (("3" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (case "p!1 = empty_seq")
                (("1" (hide-all-but (-1 -2 4))
                  (("1" (replaces -1)
                    (("1" (rewrite "subterm_empty_seq")
                      (("1" (rewrite "subterm_empty_seq") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (name-replace "kk"
                   "min({kk: below[length(args(x!2))] |
                                                          subtermOF(x!1,  #(kk + 1)) /=
                                                           subtermOF(x!2,  #(kk + 1))})"
                   :hide? nil)
                  (("1" (assert)
                    (("1"
                      (inst -4 "subtermOF(x!1,  #(1 + kk))"
                       "subtermOF(x!2,  #(1 + kk))")
                      (("1" (replace -3 -4 rl)
                        (("1" (expand "add_first" -4)
                          (("1" (expand "insert?" -4)
                            (("1" (inst -4 "rest(p!1)")
                              (("1"
                                (split)
                                (("1"
                                  (lemma "pos_subterm")
                                  (("1"
                                    (inst-cp
                                     -1
                                     "#(1 + kk)"
                                     "rest(p!1)"
                                     "x!1")
                                    (("1"
                                      (inst
                                       -1
                                       "#(1 + kk)"
                                       "rest(p!1)"
                                       "x!2")
                                      (("1"
                                        (split)
                                        (("1"
                                          (split)
                                          (("1"
                                            (replace -1 -3 rl)
                                            (("1"
                                              (replace -2 -3 rl)
                                              (("1"
                                                (case
                                                 "#(1 + kk) o rest(p!1) = p!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide
                                                   -1
                                                   -2
                                                   -3
                                                   -5
                                                   3
                                                   4
                                                   5
                                                   6)
                                                  (("2"
                                                    (expand "child")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (case
                                                         "first(p!1) = first(fd)")
                                                        (("1"
                                                          (case
                                                           "first(fd) = 1 + kk")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1
                                                              -2
                                                              1
                                                              2))
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "seq_first_rest_1[posnat]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (rewrite
                                                                           "empty_0")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1))
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1
                                                               rl)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "first_add")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-3 1 3))
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (rewrite
                                                               "first_compo")
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (rewrite
                                                                     "empty_0")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (rewrite
                                                               "empty_0")
                                                              (("3"
                                                                (replaces
                                                                 -1)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("4"
                                                            (flatten)
                                                            (("4"
                                                              (rewrite
                                                               "empty_0")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "p!1")
                                            (("2"
                                              (hide-all-but
                                               (-1 -7 -8 1 2))
                                              (("2"
                                                (expand "child")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (case
                                                     "first(p!1) = 1 + kk")
                                                    (("1"
                                                      (lemma
                                                       "seq_first_rest_1[posnat]")
                                                      (("1"
                                                        (inst -1 "p!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide-all-but
                                                             (1 3))
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (rewrite
                                                                 "empty_0")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-2 -3 1 3))
                                                      (("2"
                                                        (lemma
                                                         "first_compo[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "p!1"
                                                           "p1!1")
                                                          (("2"
                                                            (lemma
                                                             "empty_0[posnat]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   2
                                                                   rl)
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     2
                                                                     rl)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       2
                                                                       rl)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         2)
                                                                        (("2"
                                                                          (rewrite
                                                                           "first_add")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1 3))
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (rewrite
                                                           "empty_0")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "p!1")
                                          (("2"
                                            (hide-all-but
                                             (-1 -7 -8 1 2))
                                            (("2"
                                              (expand "child")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (case
                                                   "first(p!1) = 1 + kk")
                                                  (("1"
                                                    (lemma
                                                     "seq_first_rest_1[posnat]")
                                                    (("1"
                                                      (inst -1 "p!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (rewrite
                                                               "empty_0")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 -3 1 3))
                                                    (("2"
                                                      (lemma
                                                       "first_compo[posnat]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "p!1"
                                                         "p1!1")
                                                        (("2"
                                                          (lemma
                                                           "empty_0[posnat]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "p!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 2
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   2
                                                                   rl)
                                                                  (("2"
                                                                    (replace
                                                                     -2
                                                                     2
                                                                     rl)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "first_add")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but
                                                     (1 3))
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (rewrite
                                                         "empty_0")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 -4 1 2))
                                  (("2"
                                    (expand "child")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst 1 "p1!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "rest_compo[posnat]")
                                            (("2"
                                              (inst -1 "p!1" "p1!1")
                                              (("2"
                                                (lemma
                                                 "empty_0[posnat]")
                                                (("2"
                                                  (inst -1 "p!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1 2 rl)
                                                      (("2"
                                                        (lemma
                                                         "rest_add_first[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "first_diff(subtermOF(x!1,  #(1 + kk)), subtermOF(x!2,  #(1 + kk)))"
                                                           "1 + kk")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "p!1 = #(1 + kk) o rest(p!1)")
                                (("1"
                                  (typepred "p!1")
                                  (("1"
                                    (hide-all-but (-1 -2 -3 1 2))
                                    (("1"
                                      (rewrite "pos_subterm_ax")
                                      (("1"
                                        (rewrite "pos_subterm_ax")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 -4 1 3))
                                  (("2"
                                    (lemma "seq_first_rest_1[posnat]")
                                    (("2"
                                      (inst -1 "p!1")
                                      (("2"
                                        (lemma "empty_0[posnat]")
                                        (("2"
                                          (inst -1 "p!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "child")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (replace -2 -3 rl)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (lemma
                                                       "first_add[posnat]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "first_diff(subtermOF(x!1,  #(1 + kk)),
                                                       subtermOF(x!2,  #(1 + kk)))"
                                                         "1 + kk")
                                                        (("2"
                                                          (replace
                                                           -3
                                                           -1)
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (rewrite
                                                               "first_compo")
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1 3 4 5))
                    (("2" (lemma "first_diff_TCC3")
                      (("2" (inst -1 "x!1" "x!2" "f(x!1)" "args(x!1)")
                        (("2" (assert)
                          (("2" (case "x!1 = app(f(x!1), args(x!1))")
                            (("1" (assert)
                              (("1"
                                (inst -2 "f(x!2)" "args(x!2)")
                                (("1"
                                  (case "x!2 = app(f(x!2), args(x!2))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but (1 3))
                                    (("2"
                                      (decompose-equality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 5))
                              (("2" (decompose-equality) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp)
                    (("3" (rewrite "positions_of_arg") nil nil)) nil)
                   ("4" (hide -2 -3 -4 2 6)
                    (("4" (skosimp)
                      (("4" (rewrite "positions_of_arg")
                        (("4" (typepred "kk!1")
                          (("4" (typepred "args(x!2)")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide-all-but (-1 -3))
                (("5" (replace -1 -2 rl)
                  (("5" (hide -1)
                    (("5" (expand "child")
                      (("5" (skosimp)
                        (("5" (lemma "seq_empty[posnat]")
                          (("5" (inst -1 "p!1" "p1!1")
                            (("5" (assert)
                              (("5"
                                (flatten)
                                (("5" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but (-2 1))
      (("2" (lemma "position_t_first_diff")
        (("2" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
          (("2" (name-replace "fd" "first_diff(y!1, y!2)")
            (("2" (expand "child")
              (("2" (skosimp)
                (("2" (lemma "pos_subterm_ax")
                  (("2" (inst -1 "p!1" "p1!1" "y!2")
                    (("2" (assert)
                      (("2" (lemma "not_var")
                        (("2" (lemma "seq_first_rest[posnat]")
                          (("2" (inst -1 "p1!1")
                            (("2" (lemma "empty_0[posnat]")
                              (("2"
                                (inst -1 "p1!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -2
                                     "first(p1!1)"
                                     "p1!1"
                                     "rest(p1!1)"
                                     "subtermOF(y!2, p!1)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but (-2 1))
      (("3" (lemma "position_s_first_diff")
        (("3" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
          (("3" (name-replace "fd" "first_diff(y!1, y!2)")
            (("3" (expand "child")
              (("3" (skosimp)
                (("3" (lemma "pos_subterm_ax")
                  (("3" (inst -1 "p!1" "p1!1" "y!1")
                    (("3" (assert)
                      (("3" (lemma "not_var")
                        (("3" (lemma "seq_first_rest[posnat]")
                          (("3" (inst -1 "p1!1")
                            (("3" (lemma "empty_0[posnat]")
                              (("3"
                                (inst -1 "p1!1")
                                (("3"
                                  (assert)
                                  (("3"
                                    (inst
                                     -2
                                     "first(p1!1)"
                                     "p1!1"
                                     "rest(p1!1)"
                                     "subtermOF(y!1, p!1)")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (skosimp)
        (("4" (lemma "position_t_first_diff")
          (("4" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
            (("4" (name-replace "fd" "first_diff(y!1, y!2)")
              (("4" (expand "child")
                (("4" (skosimp)
                  (("4" (lemma "pos_subterm_ax")
                    (("4" (inst -1 "p!1" "p1!1" "y!2")
                      (("4" (assert)
                        (("4" (lemma "not_var")
                          (("4" (lemma "seq_first_rest[posnat]")
                            (("4" (inst -1 "p1!1")
                              (("4"
                                (lemma "empty_0[posnat]")
                                (("4"
                                  (inst -1 "p1!1")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (inst
                                       -2
                                       "first(p1!1)"
                                       "p1!1"
                                       "rest(p1!1)"
                                       "subtermOF(y!2, p!1)")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (skosimp)
        (("5" (lemma "position_s_first_diff")
          (("5" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
            (("5" (name-replace "fd" "first_diff(y!1, y!2)")
              (("5" (expand "child")
                (("5" (skosimp)
                  (("5" (lemma "pos_subterm_ax")
                    (("5" (inst -1 "p!1" "p1!1" "y!1")
                      (("5" (assert)
                        (("5" (lemma "not_var")
                          (("5" (lemma "seq_first_rest[posnat]")
                            (("5" (inst -1 "p1!1")
                              (("5"
                                (lemma "empty_0[posnat]")
                                (("5"
                                  (inst -1 "p1!1")
                                  (("5"
                                    (assert)
                                    (("5"
                                      (inst
                                       -2
                                       "first(p1!1)"
                                       "p1!1"
                                       "rest(p1!1)"
                                       "subtermOF(y!1, p!1)")
                                      (("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide-all-but 1)
      (("6" (skosimp)
        (("6" (lemma "position_t_first_diff")
          (("6" (inst?)
            (("6" (inst?)
              (("6" (name-replace "fd" "first_diff(x!1`1, x!1`2)")
                (("6" (expand "child")
                  (("6" (skosimp)
                    (("6" (lemma "pos_subterm_ax")
                      (("6" (inst?)
                        (("6" (inst?)
                          (("6" (lemma "seq_first_rest[posnat]")
                            (("6" (inst -1 "p1!1")
                              (("6"
                                (lemma "empty_0[posnat]")
                                (("6"
                                  (inst -1 "p1!1")
                                  (("6"
                                    (assert)
                                    (("6"
                                      (lemma "not_var")
                                      (("6"
                                        (inst?)
                                        (("6"
                                          (inst?)
                                          (("6" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide-all-but (-2 1))
      (("7" (lemma "position_t_first_diff")
        (("7" (inst?)
          (("7" (inst?)
            (("7" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("7" (expand "child")
                (("7" (skosimp)
                  (("7" (lemma "pos_subterm_ax")
                    (("7" (inst?)
                      (("7" (inst?)
                        (("7" (lemma "seq_first_rest[posnat]")
                          (("7" (inst -1 "p1!1")
                            (("7" (lemma "empty_0[posnat]")
                              (("7"
                                (inst -1 "p1!1")
                                (("7"
                                  (assert)
                                  (("7"
                                    (lemma "not_var")
                                    (("7"
                                      (inst?)
                                      (("7"
                                        (inst?)
                                        (("7" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (hide-all-but (-2 1))
      (("8" (lemma "position_s_first_diff")
        (("8" (inst?)
          (("8" (inst?)
            (("8" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("8" (expand "child")
                (("8" (skosimp)
                  (("8" (lemma "pos_subterm_ax")
                    (("8" (inst?)
                      (("8" (inst?)
                        (("8" (lemma "seq_first_rest[posnat]")
                          (("8" (inst -1 "p1!1")
                            (("8" (lemma "empty_0[posnat]")
                              (("8"
                                (inst -1 "p1!1")
                                (("8"
                                  (assert)
                                  (("8"
                                    (lemma "not_var")
                                    (("8"
                                      (inst?)
                                      (("8"
                                        (inst?)
                                        (("8" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide-all-but 1)
      (("9" (skosimp)
        (("9" (lemma "position_s_first_diff")
          (("9" (inst?)
            (("9" (inst?)
              (("9" (name-replace "fd" "first_diff(x!1`1, x!1`2)")
                (("9" (expand "child")
                  (("9" (skosimp)
                    (("9" (lemma "pos_subterm_ax")
                      (("9" (inst?)
                        (("9" (inst?)
                          (("9" (lemma "seq_first_rest[posnat]")
                            (("9" (inst -1 "p1!1")
                              (("9"
                                (lemma "empty_0[posnat]")
                                (("9"
                                  (inst -1 "p1!1")
                                  (("9"
                                    (assert)
                                    (("9"
                                      (lemma "not_var")
                                      (("9"
                                        (inst?)
                                        (("9"
                                          (inst?)
                                          (("9" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide-all-but (-2 1))
      (("10" (lemma "position_t_first_diff")
        (("10" (inst?)
          (("10" (inst?)
            (("10" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("10" (expand "child")
                (("10" (skosimp)
                  (("10" (lemma "pos_subterm_ax")
                    (("10" (inst?)
                      (("10" (inst?)
                        (("10" (lemma "seq_first_rest[posnat]")
                          (("10" (inst -1 "p1!1")
                            (("10" (lemma "empty_0[posnat]")
                              (("10"
                                (inst -1 "p1!1")
                                (("10"
                                  (assert)
                                  (("10"
                                    (lemma "not_var")
                                    (("10"
                                      (inst?)
                                      (("10"
                                        (inst?)
                                        (("10" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide-all-but (-2 1))
      (("11" (lemma "position_s_first_diff")
        (("11" (inst?)
          (("11" (inst?)
            (("11" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("11" (expand "child")
                (("11" (skosimp)
                  (("11" (lemma "pos_subterm_ax")
                    (("11" (inst?)
                      (("11" (inst?)
                        (("11" (lemma "seq_first_rest[posnat]")
                          (("11" (inst -1 "p1!1")
                            (("11" (lemma "empty_0[posnat]")
                              (("11"
                                (inst -1 "p1!1")
                                (("11"
                                  (assert)
                                  (("11"
                                    (lemma "not_var")
                                    (("11"
                                      (inst?)
                                      (("11"
                                        (inst?)
                                        (("11" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide-all-but 1)
      (("12" (skosimp)
        (("12" (lemma "position_t_first_diff")
          (("12" (inst?)
            (("12" (inst?)
              (("12" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
                (("12" (expand "child")
                  (("12" (skosimp)
                    (("12" (lemma "pos_subterm_ax")
                      (("12" (inst?)
                        (("12" (inst?)
                          (("12" (lemma "seq_first_rest[posnat]")
                            (("12" (inst -1 "p1!1")
                              (("12"
                                (lemma "empty_0[posnat]")
                                (("12"
                                  (inst -1 "p1!1")
                                  (("12"
                                    (assert)
                                    (("12"
                                      (lemma "not_var")
                                      (("12"
                                        (inst?)
                                        (("12"
                                          (inst?)
                                          (("12" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide-all-but 1)
      (("13" (skosimp)
        (("13" (lemma "position_s_first_diff")
          (("13" (inst?)
            (("13" (inst?)
              (("13" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
                (("13" (expand "child")
                  (("13" (skosimp)
                    (("13" (lemma "pos_subterm_ax")
                      (("13" (inst?)
                        (("13" (inst?)
                          (("13" (lemma "seq_first_rest[posnat]")
                            (("13" (inst -1 "p1!1")
                              (("13"
                                (lemma "empty_0[posnat]")
                                (("13"
                                  (inst -1 "p1!1")
                                  (("13"
                                    (assert)
                                    (("13"
                                      (lemma "not_var")
                                      (("13"
                                        (inst?)
                                        (("13"
                                          (inst?)
                                          (("13" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (skosimp)
      (("14" (lemma "position_t_first_diff")
        (("14" (inst?)
          (("14" (assert)
            (("14" (hide -2)
              (("14" (expand "child")
                (("14" (skosimp)
                  (("14" (lemma "pos_subterm_ax")
                    (("14" (inst?)
                      (("14" (inst?)
                        (("14" (lemma "seq_first_rest[posnat]")
                          (("14" (inst -1 "p1!1")
                            (("14" (lemma "empty_0[posnat]")
                              (("14"
                                (inst -1 "p1!1")
                                (("14"
                                  (assert)
                                  (("14"
                                    (lemma "not_var")
                                    (("14"
                                      (inst?)
                                      (("14"
                                        (inst?)
                                        (("14" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (skosimp)
      (("15" (lemma "position_s_first_diff")
        (("15" (inst?)
          (("15" (assert)
            (("15" (hide -2)
              (("15" (expand "child")
                (("15" (skosimp)
                  (("15" (lemma "pos_subterm_ax")
                    (("15" (inst?)
                      (("15" (inst?)
                        (("15" (lemma "seq_first_rest[posnat]")
                          (("15" (inst -1 "p1!1")
                            (("15" (lemma "empty_0[posnat]")
                              (("15"
                                (inst -1 "p1!1")
                                (("15"
                                  (assert)
                                  (("15"
                                    (lemma "not_var")
                                    (("15"
                                      (inst?)
                                      (("15"
                                        (inst?)
                                        (("15" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (fd_equal_symbol-2 "" 3756667710
   ("" (measure-induct+ "length(first_diff(s, t))" ("s" "t"))
    (("1" (skosimp)
      (("1" (name-replace "fd" "first_diff(x!1, x!2)" :hide? nil)
        (("1" (expand "first_diff" -1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide-all-but (-2 -4))
                (("1" (replace -1 -2 rl)
                  (("1" (hide -1)
                    (("1" (expand "child")
                      (("1" (skosimp)
                        (("1" (lemma "seq_empty[posnat]")
                          (("1" (inst -1 "p!1" "p1!1")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -4))
                (("2" (replace -1 -2 rl)
                  (("2" (hide -1)
                    (("2" (expand "child")
                      (("2" (skosimp)
                        (("2" (lemma "seq_empty[posnat]")
                          (("2" (inst -1 "p!1" "p1!1")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but (-2 -4))
                (("3" (replace -1 -2 rl)
                  (("3" (hide -1)
                    (("3" (expand "child")
                      (("3" (skosimp)
                        (("3" (lemma "seq_empty[posnat]")
                          (("3" (inst -1 "p!1" "p1!1")
                            (("3" (assert)
                              (("3"
                                (flatten)
                                (("3" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (case "p!1 = empty_seq")
                (("1" (hide-all-but (-1 -2 4))
                  (("1" (replaces -1)
                    (("1" (rewrite "subterm_empty_seq")
                      (("1" (rewrite "subterm_empty_seq") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (name-replace "kk"
                   "min({kk: below[length(args(x!2))] |
                                                          subtermOF(x!1,  #(kk + 1)) /=
                                                           subtermOF(x!2,  #(kk + 1))})"
                   :hide? nil)
                  (("1" (assert)
                    (("1"
                      (inst -4 "subtermOF(x!1,  #(1 + kk))"
                       "subtermOF(x!2,  #(1 + kk))")
                      (("1" (replace -3 -4 rl)
                        (("1" (expand "add_first" -4)
                          (("1" (expand "insert?" -4)
                            (("1" (inst -4 "rest(p!1)")
                              (("1"
                                (split)
                                (("1"
                                  (lemma "pos_subterm")
                                  (("1"
                                    (inst-cp
                                     -1
                                     "#(1 + kk)"
                                     "rest(p!1)"
                                     "x!1")
                                    (("1"
                                      (inst
                                       -1
                                       "#(1 + kk)"
                                       "rest(p!1)"
                                       "x!2")
                                      (("1"
                                        (split)
                                        (("1"
                                          (split)
                                          (("1"
                                            (replace -1 -3 rl)
                                            (("1"
                                              (replace -2 -3 rl)
                                              (("1"
                                                (case
                                                 "#(1 + kk) o rest(p!1) = p!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide
                                                   -1
                                                   -2
                                                   -3
                                                   -5
                                                   3
                                                   4
                                                   5
                                                   6)
                                                  (("2"
                                                    (expand "child")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (case
                                                         "first(p!1) = first(fd)")
                                                        (("1"
                                                          (case
                                                           "first(fd) = 1 + kk")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1
                                                              -2
                                                              1
                                                              2))
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "seq_first_rest_1[posnat]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (rewrite
                                                                           "empty_0")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1))
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1
                                                               rl)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "first_add")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-3 1 3))
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (rewrite
                                                               "first_compo")
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (rewrite
                                                                     "empty_0")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (rewrite
                                                               "empty_0")
                                                              (("3"
                                                                (replaces
                                                                 -1)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("4"
                                                            (flatten)
                                                            (("4"
                                                              (rewrite
                                                               "empty_0")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "p!1")
                                            (("2"
                                              (hide-all-but
                                               (-1 -7 -8 1 2))
                                              (("2"
                                                (expand "child")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (case
                                                     "first(p!1) = 1 + kk")
                                                    (("1"
                                                      (lemma
                                                       "seq_first_rest_1[posnat]")
                                                      (("1"
                                                        (inst -1 "p!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide-all-but
                                                             (1 3))
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (rewrite
                                                                 "empty_0")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-2 -3 1 3))
                                                      (("2"
                                                        (lemma
                                                         "first_compo[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "p!1"
                                                           "p1!1")
                                                          (("2"
                                                            (lemma
                                                             "empty_0[posnat]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   2
                                                                   rl)
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     2
                                                                     rl)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       2
                                                                       rl)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         2)
                                                                        (("2"
                                                                          (rewrite
                                                                           "first_add")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1 3))
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (rewrite
                                                           "empty_0")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "p!1")
                                          (("2"
                                            (hide-all-but
                                             (-1 -7 -8 1 2))
                                            (("2"
                                              (expand "child")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (case
                                                   "first(p!1) = 1 + kk")
                                                  (("1"
                                                    (lemma
                                                     "seq_first_rest_1[posnat]")
                                                    (("1"
                                                      (inst -1 "p!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (rewrite
                                                               "empty_0")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 -3 1 3))
                                                    (("2"
                                                      (lemma
                                                       "first_compo[posnat]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "p!1"
                                                         "p1!1")
                                                        (("2"
                                                          (lemma
                                                           "empty_0[posnat]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "p!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 2
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   2
                                                                   rl)
                                                                  (("2"
                                                                    (replace
                                                                     -2
                                                                     2
                                                                     rl)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "first_add")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but
                                                     (1 3))
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (rewrite
                                                         "empty_0")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 -4 1 2))
                                  (("2"
                                    (expand "child")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst 1 "p1!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "rest_compo[posnat]")
                                            (("2"
                                              (inst -1 "p!1" "p1!1")
                                              (("2"
                                                (lemma
                                                 "empty_0[posnat]")
                                                (("2"
                                                  (inst -1 "p!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1 2 rl)
                                                      (("2"
                                                        (lemma
                                                         "rest_add_first[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "first_diff(subtermOF(x!1,  #(1 + kk)), subtermOF(x!2,  #(1 + kk)))"
                                                           "1 + kk")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "p!1 = #(1 + kk) o rest(p!1)")
                                (("1"
                                  (typepred "p!1")
                                  (("1"
                                    (hide-all-but (-1 -2 -3 1 2))
                                    (("1"
                                      (rewrite "pos_subterm_ax")
                                      (("1"
                                        (rewrite "pos_subterm_ax")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 -4 1 3))
                                  (("2"
                                    (lemma "seq_first_rest_1[posnat]")
                                    (("2"
                                      (inst -1 "p!1")
                                      (("2"
                                        (lemma "empty_0[posnat]")
                                        (("2"
                                          (inst -1 "p!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "child")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (replace -2 -3 rl)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (lemma
                                                       "first_add[posnat]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "first_diff(subtermOF(x!1,  #(1 + kk)),
                                                       subtermOF(x!2,  #(1 + kk)))"
                                                         "1 + kk")
                                                        (("2"
                                                          (replace
                                                           -3
                                                           -1)
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (rewrite
                                                               "first_compo")
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1 3 4 5))
                    (("2" (lemma "first_diff_TCC3")
                      (("2" (inst -1 "x!1" "x!2" "f(x!1)" "args(x!1)")
                        (("2" (assert)
                          (("2" (case "x!1 = app(f(x!1), args(x!1))")
                            (("1" (assert)
                              (("1"
                                (inst -2 "f(x!2)" "args(x!2)")
                                (("1"
                                  (case "x!2 = app(f(x!2), args(x!2))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but (1 3))
                                    (("2"
                                      (decompose-equality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 5))
                              (("2" (decompose-equality) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp)
                    (("3" (rewrite "positions_of_arg") nil nil)) nil)
                   ("4" (hide -2 -3 -4 2 6)
                    (("4" (skosimp)
                      (("4" (rewrite "positions_of_arg")
                        (("4" (typepred "kk!1")
                          (("4" (typepred "args(x!2)")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide-all-but (-1 -3))
                (("5" (replace -1 -2 rl)
                  (("5" (hide -1)
                    (("5" (expand "child")
                      (("5" (skosimp)
                        (("5" (lemma "seq_empty[posnat]")
                          (("5" (inst -1 "p!1" "p1!1")
                            (("5" (assert)
                              (("5"
                                (flatten)
                                (("5" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but (-1 1))
      (("2" (lemma "position_t_first_diff")
        (("2" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
          (("2" (name-replace "fd" "first_diff(y!1, y!2)")
            (("2" (expand "child")
              (("2" (skosimp)
                (("2" (lemma "pos_subterm_ax")
                  (("2" (inst -1 "p!1" "p1!1" "y!2")
                    (("2" (assert)
                      (("2" (lemma "not_var")
                        (("2" (lemma "seq_first_rest[posnat]")
                          (("2" (inst -1 "p1!1")
                            (("2" (lemma "empty_0[posnat]")
                              (("2"
                                (inst -1 "p1!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -2
                                     "first(p1!1)"
                                     "p1!1"
                                     "rest(p1!1)"
                                     "subtermOF(y!2, p!1)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but (-1 1))
      (("3" (lemma "position_s_first_diff")
        (("3" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
          (("3" (name-replace "fd" "first_diff(y!1, y!2)")
            (("3" (expand "child")
              (("3" (skosimp)
                (("3" (lemma "pos_subterm_ax")
                  (("3" (inst -1 "p!1" "p1!1" "y!1")
                    (("3" (assert)
                      (("3" (lemma "not_var")
                        (("3" (lemma "seq_first_rest[posnat]")
                          (("3" (inst -1 "p1!1")
                            (("3" (lemma "empty_0[posnat]")
                              (("3"
                                (inst -1 "p1!1")
                                (("3"
                                  (assert)
                                  (("3"
                                    (inst
                                     -2
                                     "first(p1!1)"
                                     "p1!1"
                                     "rest(p1!1)"
                                     "subtermOF(y!1, p!1)")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (skosimp)
        (("4" (lemma "position_t_first_diff")
          (("4" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
            (("4" (name-replace "fd" "first_diff(y!1, y!2)")
              (("4" (expand "child")
                (("4" (skosimp)
                  (("4" (lemma "pos_subterm_ax")
                    (("4" (inst -1 "p!1" "p1!1" "y!2")
                      (("4" (assert)
                        (("4" (lemma "not_var")
                          (("4" (lemma "seq_first_rest[posnat]")
                            (("4" (inst -1 "p1!1")
                              (("4"
                                (lemma "empty_0[posnat]")
                                (("4"
                                  (inst -1 "p1!1")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (inst
                                       -2
                                       "first(p1!1)"
                                       "p1!1"
                                       "rest(p1!1)"
                                       "subtermOF(y!2, p!1)")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (skosimp)
        (("5" (lemma "position_s_first_diff")
          (("5" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
            (("5" (name-replace "fd" "first_diff(y!1, y!2)")
              (("5" (expand "child")
                (("5" (skosimp)
                  (("5" (lemma "pos_subterm_ax")
                    (("5" (inst -1 "p!1" "p1!1" "y!1")
                      (("5" (assert)
                        (("5" (lemma "not_var")
                          (("5" (lemma "seq_first_rest[posnat]")
                            (("5" (inst -1 "p1!1")
                              (("5"
                                (lemma "empty_0[posnat]")
                                (("5"
                                  (inst -1 "p1!1")
                                  (("5"
                                    (assert)
                                    (("5"
                                      (inst
                                       -2
                                       "first(p1!1)"
                                       "p1!1"
                                       "rest(p1!1)"
                                       "subtermOF(y!1, p!1)")
                                      (("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide-all-but 1)
      (("6" (skosimp)
        (("6" (lemma "position_t_first_diff")
          (("6" (inst?)
            (("6" (inst?)
              (("6" (name-replace "fd" "first_diff(x!1`1, x!1`2)")
                (("6" (expand "child")
                  (("6" (skosimp)
                    (("6" (lemma "pos_subterm_ax")
                      (("6" (inst?)
                        (("6" (inst?)
                          (("6" (lemma "seq_first_rest[posnat]")
                            (("6" (inst -1 "p1!2")
                              (("6"
                                (lemma "empty_0[posnat]")
                                (("6"
                                  (inst -1 "p1!2")
                                  (("6"
                                    (assert)
                                    (("6"
                                      (lemma "not_var")
                                      (("6"
                                        (inst?)
                                        (("6"
                                          (inst?)
                                          (("6" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide-all-but (-1 1))
      (("7" (lemma "position_t_first_diff")
        (("7" (inst?)
          (("7" (inst?)
            (("7" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("7" (expand "child")
                (("7" (skosimp)
                  (("7" (lemma "pos_subterm_ax")
                    (("7" (inst?)
                      (("7" (inst?)
                        (("7" (lemma "seq_first_rest[posnat]")
                          (("7" (inst -1 "p1!1")
                            (("7" (lemma "empty_0[posnat]")
                              (("7"
                                (inst -1 "p1!1")
                                (("7"
                                  (assert)
                                  (("7"
                                    (lemma "not_var")
                                    (("7"
                                      (inst?)
                                      (("7"
                                        (inst?)
                                        (("7" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (hide-all-but (-1 1))
      (("8" (lemma "position_s_first_diff")
        (("8" (inst?)
          (("8" (inst?)
            (("8" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("8" (expand "child")
                (("8" (skosimp)
                  (("8" (lemma "pos_subterm_ax")
                    (("8" (inst?)
                      (("8" (inst?)
                        (("8" (lemma "seq_first_rest[posnat]")
                          (("8" (inst -1 "p1!1")
                            (("8" (lemma "empty_0[posnat]")
                              (("8"
                                (inst -1 "p1!1")
                                (("8"
                                  (assert)
                                  (("8"
                                    (lemma "not_var")
                                    (("8"
                                      (inst?)
                                      (("8"
                                        (inst?)
                                        (("8" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide-all-but 1)
      (("9" (skosimp)
        (("9" (lemma "position_s_first_diff")
          (("9" (inst?)
            (("9" (inst?)
              (("9" (name-replace "fd" "first_diff(x!1`1, x!1`2)")
                (("9" (expand "child")
                  (("9" (skosimp)
                    (("9" (lemma "pos_subterm_ax")
                      (("9" (inst?)
                        (("9" (inst?)
                          (("9" (lemma "seq_first_rest[posnat]")
                            (("9" (inst -1 "p1!2")
                              (("9"
                                (lemma "empty_0[posnat]")
                                (("9"
                                  (inst -1 "p1!2")
                                  (("9"
                                    (assert)
                                    (("9"
                                      (lemma "not_var")
                                      (("9"
                                        (inst?)
                                        (("9"
                                          (inst?)
                                          (("9" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide-all-but (-1 1))
      (("10" (lemma "position_t_first_diff")
        (("10" (inst?)
          (("10" (inst?)
            (("10" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("10" (expand "child")
                (("10" (skosimp)
                  (("10" (lemma "pos_subterm_ax")
                    (("10" (inst?)
                      (("10" (inst?)
                        (("10" (lemma "seq_first_rest[posnat]")
                          (("10" (inst -1 "p1!1")
                            (("10" (lemma "empty_0[posnat]")
                              (("10"
                                (inst -1 "p1!1")
                                (("10"
                                  (assert)
                                  (("10"
                                    (lemma "not_var")
                                    (("10"
                                      (inst?)
                                      (("10"
                                        (inst?)
                                        (("10" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide-all-but (-1 1))
      (("11" (lemma "position_s_first_diff")
        (("11" (inst?)
          (("11" (inst?)
            (("11" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("11" (expand "child")
                (("11" (skosimp)
                  (("11" (lemma "pos_subterm_ax")
                    (("11" (inst?)
                      (("11" (inst?)
                        (("11" (lemma "seq_first_rest[posnat]")
                          (("11" (inst -1 "p1!1")
                            (("11" (lemma "empty_0[posnat]")
                              (("11"
                                (inst -1 "p1!1")
                                (("11"
                                  (assert)
                                  (("11"
                                    (lemma "not_var")
                                    (("11"
                                      (inst?)
                                      (("11"
                                        (inst?)
                                        (("11" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide-all-but 1)
      (("12" (skosimp)
        (("12" (lemma "position_t_first_diff")
          (("12" (inst?)
            (("12" (inst?)
              (("12" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
                (("12" (expand "child")
                  (("12" (skosimp)
                    (("12" (lemma "pos_subterm_ax")
                      (("12" (inst?)
                        (("12" (inst?)
                          (("12" (lemma "seq_first_rest[posnat]")
                            (("12" (inst -1 "p1!1")
                              (("12"
                                (lemma "empty_0[posnat]")
                                (("12"
                                  (inst -1 "p1!1")
                                  (("12"
                                    (assert)
                                    (("12"
                                      (lemma "not_var")
                                      (("12"
                                        (inst?)
                                        (("12"
                                          (inst?)
                                          (("12" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide-all-but 1)
      (("13" (skosimp)
        (("13" (lemma "position_s_first_diff")
          (("13" (inst?)
            (("13" (inst?)
              (("13" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
                (("13" (expand "child")
                  (("13" (skosimp)
                    (("13" (lemma "pos_subterm_ax")
                      (("13" (inst?)
                        (("13" (inst?)
                          (("13" (lemma "seq_first_rest[posnat]")
                            (("13" (inst -1 "p1!1")
                              (("13"
                                (lemma "empty_0[posnat]")
                                (("13"
                                  (inst -1 "p1!1")
                                  (("13"
                                    (assert)
                                    (("13"
                                      (lemma "not_var")
                                      (("13"
                                        (inst?)
                                        (("13"
                                          (inst?)
                                          (("13" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (skosimp)
        (("14" (lemma "position_t_first_diff")
          (("14" (inst?)
            (("14" (assert)
              (("14" (hide -2)
                (("14" (expand "child")
                  (("14" (skosimp)
                    (("14" (lemma "pos_subterm_ax")
                      (("14" (inst?)
                        (("14" (inst?)
                          (("14" (lemma "seq_first_rest[posnat]")
                            (("14" (inst -1 "p1!1")
                              (("14"
                                (lemma "empty_0[posnat]")
                                (("14"
                                  (inst -1 "p1!1")
                                  (("14"
                                    (assert)
                                    (("14"
                                      (lemma "not_var")
                                      (("14"
                                        (inst?)
                                        (("14"
                                          (inst?)
                                          (("14" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (skosimp)
        (("15" (lemma "position_s_first_diff")
          (("15" (inst?)
            (("15" (assert)
              (("15" (hide -2)
                (("15" (expand "child")
                  (("15" (skosimp)
                    (("15" (lemma "pos_subterm_ax")
                      (("15" (inst?)
                        (("15" (inst?)
                          (("15" (lemma "seq_first_rest[posnat]")
                            (("15" (inst -1 "p1!1")
                              (("15"
                                (lemma "empty_0[posnat]")
                                (("15"
                                  (inst -1 "p1!1")
                                  (("15"
                                    (assert)
                                    (("15"
                                      (lemma "not_var")
                                      (("15"
                                        (inst?)
                                        (("15"
                                          (inst?)
                                          (("15" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq_first_rest formula-decl nil seq_extras structures)
    (not_var formula-decl nil positions nil)
    (positions_of_arg formula-decl nil positions nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (rest_add_first formula-decl nil seq_extras structures)
    (rest_compo formula-decl nil seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (first_compo formula-decl nil seq_extras structures)
    (first_add formula-decl nil seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (pos_subterm formula-decl nil subterm nil)
    (rest const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (seq_empty formula-decl nil seq_extras structures)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (child const-decl "bool" positions nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (fd_equal_symbol-1 nil 3512858302
   ("" (measure-induct+ "length(first_diff(s, t))" ("s" "t"))
    (("1" (skosimp)
      (("1" (name-replace "fd" "first_diff(x!1, x!2)" :hide? nil)
        (("1" (expand "first_diff" -1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide-all-but (-2 -4))
                (("1" (replace -1 -2 rl)
                  (("1" (hide -1)
                    (("1" (expand "child")
                      (("1" (skosimp)
                        (("1" (lemma "seq_empty[posnat]")
                          (("1" (inst -1 "p!1" "p1!1")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -4))
                (("2" (replace -1 -2 rl)
                  (("2" (hide -1)
                    (("2" (expand "child")
                      (("2" (skosimp)
                        (("2" (lemma "seq_empty[posnat]")
                          (("2" (inst -1 "p!1" "p1!1")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but (-2 -4))
                (("3" (replace -1 -2 rl)
                  (("3" (hide -1)
                    (("3" (expand "child")
                      (("3" (skosimp)
                        (("3" (lemma "seq_empty[posnat]")
                          (("3" (inst -1 "p!1" "p1!1")
                            (("3" (assert)
                              (("3"
                                (flatten)
                                (("3" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (case "p!1 = empty_seq")
                (("1" (hide-all-but (-1 -2 4))
                  (("1" (replaces -1)
                    (("1" (rewrite "subterm_empty_seq")
                      (("1" (rewrite "subterm_empty_seq") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (name-replace "kk"
                   "min({kk: below[length(args(x!2))] |
                                                  subtermOF(x!1,  #(kk + 1)) /=
                                                   subtermOF(x!2,  #(kk + 1))})"
                   :hide? nil)
                  (("1" (assert)
                    (("1"
                      (inst -4 "subtermOF(x!1,  #(1 + kk))"
                       "subtermOF(x!2,  #(1 + kk))")
                      (("1" (replace -3 -4 rl)
                        (("1" (expand "add_first" -4)
                          (("1" (expand "insert?" -4)
                            (("1" (inst -4 "rest(p!1)")
                              (("1"
                                (split)
                                (("1"
                                  (lemma "pos_subterm")
                                  (("1"
                                    (inst-cp
                                     -1
                                     "#(1 + kk)"
                                     "rest(p!1)"
                                     "x!1")
                                    (("1"
                                      (inst
                                       -1
                                       "#(1 + kk)"
                                       "rest(p!1)"
                                       "x!2")
                                      (("1"
                                        (split)
                                        (("1"
                                          (split)
                                          (("1"
                                            (replace -1 -3 rl)
                                            (("1"
                                              (replace -2 -3 rl)
                                              (("1"
                                                (case
                                                 "#(1 + kk) o rest(p!1) = p!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide
                                                   -1
                                                   -2
                                                   -3
                                                   -5
                                                   3
                                                   4
                                                   5
                                                   6)
                                                  (("2"
                                                    (expand "child")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (case
                                                         "first(p!1) = first(fd)")
                                                        (("1"
                                                          (case
                                                           "first(fd) = 1 + kk")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1
                                                              -2
                                                              1
                                                              2))
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "seq_first_rest_1[posnat]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (rewrite
                                                                           "empty_0")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1))
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1
                                                               rl)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "first_add")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-3 1 3))
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (rewrite
                                                               "first_compo")
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (rewrite
                                                                     "empty_0")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (rewrite
                                                               "empty_0")
                                                              (("3"
                                                                (replaces
                                                                 -1)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("4"
                                                            (flatten)
                                                            (("4"
                                                              (rewrite
                                                               "empty_0")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "p!1")
                                            (("2"
                                              (hide-all-but
                                               (-1 -7 -8 1 2))
                                              (("2"
                                                (expand "child")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (case
                                                     "first(p!1) = 1 + kk")
                                                    (("1"
                                                      (lemma
                                                       "seq_first_rest_1[posnat]")
                                                      (("1"
                                                        (inst -1 "p!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide-all-but
                                                             (1 3))
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (rewrite
                                                                 "empty_0")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-2 -3 1 3))
                                                      (("2"
                                                        (lemma
                                                         "first_compo[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "p!1"
                                                           "p1!1")
                                                          (("2"
                                                            (lemma
                                                             "empty_0[posnat]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   2
                                                                   rl)
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     2
                                                                     rl)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       2
                                                                       rl)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         2)
                                                                        (("2"
                                                                          (rewrite
                                                                           "first_add")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1 3))
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (rewrite
                                                           "empty_0")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "p!1")
                                          (("2"
                                            (hide-all-but
                                             (-1 -7 -8 1 2))
                                            (("2"
                                              (expand "child")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (case
                                                   "first(p!1) = 1 + kk")
                                                  (("1"
                                                    (lemma
                                                     "seq_first_rest_1[posnat]")
                                                    (("1"
                                                      (inst -1 "p!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (rewrite
                                                               "empty_0")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 -3 1 3))
                                                    (("2"
                                                      (lemma
                                                       "first_compo[posnat]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "p!1"
                                                         "p1!1")
                                                        (("2"
                                                          (lemma
                                                           "empty_0[posnat]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "p!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 2
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   2
                                                                   rl)
                                                                  (("2"
                                                                    (replace
                                                                     -2
                                                                     2
                                                                     rl)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "first_add")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but
                                                     (1 3))
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (rewrite
                                                         "empty_0")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 -4 1 2))
                                  (("2"
                                    (expand "child")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst 1 "p1!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "rest_compo[posnat]")
                                            (("2"
                                              (inst -1 "p!1" "p1!1")
                                              (("2"
                                                (lemma
                                                 "empty_0[posnat]")
                                                (("2"
                                                  (inst -1 "p!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1 2 rl)
                                                      (("2"
                                                        (lemma
                                                         "rest_add_first[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "first_diff(subtermOF(x!1,  #(1 + kk)), subtermOF(x!2,  #(1 + kk)))"
                                                           "1 + kk")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "p!1 = #(1 + kk) o rest(p!1)")
                                (("1"
                                  (typepred "p!1")
                                  (("1"
                                    (hide-all-but (-1 -2 -3 1 2))
                                    (("1"
                                      (rewrite "pos_subterm_ax")
                                      (("1"
                                        (rewrite "pos_subterm_ax")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 -4 1 3))
                                  (("2"
                                    (lemma "seq_first_rest_1[posnat]")
                                    (("2"
                                      (inst -1 "p!1")
                                      (("2"
                                        (lemma "empty_0[posnat]")
                                        (("2"
                                          (inst -1 "p!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "child")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (replace -2 -3 rl)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (lemma
                                                       "first_add[posnat]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "first_diff(subtermOF(x!1,  #(1 + kk)),
                                         subtermOF(x!2,  #(1 + kk)))"
                                                         "1 + kk")
                                                        (("2"
                                                          (replace
                                                           -3
                                                           -1)
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (rewrite
                                                               "first_compo")
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1 3 4 5))
                    (("2" (lemma "first_diff_TCC7")
                      (("2" (inst -1 "x!1" "x!2" "f(x!1)" "args(x!1)")
                        (("2" (assert)
                          (("2" (case "x!1 = app(f(x!1), args(x!1))")
                            (("1" (assert)
                              (("1"
                                (inst -2 "f(x!2)" "args(x!2)")
                                (("1"
                                  (case "x!2 = app(f(x!2), args(x!2))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but (1 3))
                                    (("2"
                                      (decompose-equality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 5))
                              (("2" (decompose-equality) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp)
                    (("3" (rewrite "positions_of_arg") nil nil)) nil)
                   ("4" (hide -2 -3 -4 2 6)
                    (("4" (skosimp)
                      (("4" (rewrite "positions_of_arg")
                        (("4" (typepred "kk!1")
                          (("4" (typepred "args(x!2)")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide-all-but (-1 -3))
                (("5" (replace -1 -2 rl)
                  (("5" (hide -1)
                    (("5" (expand "child")
                      (("5" (skosimp)
                        (("5" (lemma "seq_empty[posnat]")
                          (("5" (inst -1 "p!1" "p1!1")
                            (("5" (assert)
                              (("5"
                                (flatten)
                                (("5" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but (-1 1))
      (("2" (lemma "position_t_first_diff")
        (("2" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
          (("2" (name-replace "fd" "first_diff(y!1, y!2)")
            (("2" (expand "child")
              (("2" (skosimp)
                (("2" (lemma "pos_subterm_ax")
                  (("2" (inst -1 "p!1" "p1!1" "y!2")
                    (("2" (assert)
                      (("2" (lemma "not_var")
                        (("2" (lemma "seq_first_rest[posnat]")
                          (("2" (inst -1 "p1!1")
                            (("2" (lemma "empty_0[posnat]")
                              (("2"
                                (inst -1 "p1!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -2
                                     "first(p1!1)"
                                     "p1!1"
                                     "rest(p1!1)"
                                     "subtermOF(y!2, p!1)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but (-1 1))
      (("3" (lemma "position_s_first_diff")
        (("3" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
          (("3" (name-replace "fd" "first_diff(y!1, y!2)")
            (("3" (expand "child")
              (("3" (skosimp)
                (("3" (lemma "pos_subterm_ax")
                  (("3" (inst -1 "p!1" "p1!1" "y!1")
                    (("3" (assert)
                      (("3" (lemma "not_var")
                        (("3" (lemma "seq_first_rest[posnat]")
                          (("3" (inst -1 "p1!1")
                            (("3" (lemma "empty_0[posnat]")
                              (("3"
                                (inst -1 "p1!1")
                                (("3"
                                  (assert)
                                  (("3"
                                    (inst
                                     -2
                                     "first(p1!1)"
                                     "p1!1"
                                     "rest(p1!1)"
                                     "subtermOF(y!1, p!1)")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (skosimp)
        (("4" (lemma "position_t_first_diff")
          (("4" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
            (("4" (name-replace "fd" "first_diff(y!1, y!2)")
              (("4" (expand "child")
                (("4" (skosimp)
                  (("4" (lemma "pos_subterm_ax")
                    (("4" (inst -1 "p!1" "p1!1" "y!2")
                      (("4" (assert)
                        (("4" (lemma "not_var")
                          (("4" (lemma "seq_first_rest[posnat]")
                            (("4" (inst -1 "p1!1")
                              (("4"
                                (lemma "empty_0[posnat]")
                                (("4"
                                  (inst -1 "p1!1")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (inst
                                       -2
                                       "first(p1!1)"
                                       "p1!1"
                                       "rest(p1!1)"
                                       "subtermOF(y!2, p!1)")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (skosimp)
        (("5" (lemma "position_s_first_diff")
          (("5" (inst -1 "y!1" "y!2" "first_diff(y!1, y!2)")
            (("5" (name-replace "fd" "first_diff(y!1, y!2)")
              (("5" (expand "child")
                (("5" (skosimp)
                  (("5" (lemma "pos_subterm_ax")
                    (("5" (inst -1 "p!1" "p1!1" "y!1")
                      (("5" (assert)
                        (("5" (lemma "not_var")
                          (("5" (lemma "seq_first_rest[posnat]")
                            (("5" (inst -1 "p1!1")
                              (("5"
                                (lemma "empty_0[posnat]")
                                (("5"
                                  (inst -1 "p1!1")
                                  (("5"
                                    (assert)
                                    (("5"
                                      (inst
                                       -2
                                       "first(p1!1)"
                                       "p1!1"
                                       "rest(p1!1)"
                                       "subtermOF(y!1, p!1)")
                                      (("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide-all-but 1)
      (("6" (skosimp)
        (("6" (lemma "position_t_first_diff")
          (("6" (inst?)
            (("6" (inst?)
              (("6" (name-replace "fd" "first_diff(x!1`1, x!1`2)")
                (("6" (expand "child")
                  (("6" (skosimp)
                    (("6" (lemma "pos_subterm_ax")
                      (("6" (inst?)
                        (("6" (inst?)
                          (("6" (lemma "seq_first_rest[posnat]")
                            (("6" (inst -1 "p1!2")
                              (("6"
                                (lemma "empty_0[posnat]")
                                (("6"
                                  (inst -1 "p1!2")
                                  (("6"
                                    (assert)
                                    (("6"
                                      (lemma "not_var")
                                      (("6"
                                        (inst?)
                                        (("6"
                                          (inst?)
                                          (("6" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide-all-but (-1 1))
      (("7" (lemma "position_t_first_diff")
        (("7" (inst?)
          (("7" (inst?)
            (("7" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("7" (expand "child")
                (("7" (skosimp)
                  (("7" (lemma "pos_subterm_ax")
                    (("7" (inst?)
                      (("7" (inst?)
                        (("7" (lemma "seq_first_rest[posnat]")
                          (("7" (inst -1 "p1!1")
                            (("7" (lemma "empty_0[posnat]")
                              (("7"
                                (inst -1 "p1!1")
                                (("7"
                                  (assert)
                                  (("7"
                                    (lemma "not_var")
                                    (("7"
                                      (inst?)
                                      (("7"
                                        (inst?)
                                        (("7" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (hide-all-but (-1 1))
      (("8" (lemma "position_s_first_diff")
        (("8" (inst?)
          (("8" (inst?)
            (("8" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("8" (expand "child")
                (("8" (skosimp)
                  (("8" (lemma "pos_subterm_ax")
                    (("8" (inst?)
                      (("8" (inst?)
                        (("8" (lemma "seq_first_rest[posnat]")
                          (("8" (inst -1 "p1!1")
                            (("8" (lemma "empty_0[posnat]")
                              (("8"
                                (inst -1 "p1!1")
                                (("8"
                                  (assert)
                                  (("8"
                                    (lemma "not_var")
                                    (("8"
                                      (inst?)
                                      (("8"
                                        (inst?)
                                        (("8" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide-all-but 1)
      (("9" (skosimp)
        (("9" (lemma "position_s_first_diff")
          (("9" (inst?)
            (("9" (inst?)
              (("9" (name-replace "fd" "first_diff(x!1`1, x!1`2)")
                (("9" (expand "child")
                  (("9" (skosimp)
                    (("9" (lemma "pos_subterm_ax")
                      (("9" (inst?)
                        (("9" (inst?)
                          (("9" (lemma "seq_first_rest[posnat]")
                            (("9" (inst -1 "p1!2")
                              (("9"
                                (lemma "empty_0[posnat]")
                                (("9"
                                  (inst -1 "p1!2")
                                  (("9"
                                    (assert)
                                    (("9"
                                      (lemma "not_var")
                                      (("9"
                                        (inst?)
                                        (("9"
                                          (inst?)
                                          (("9" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide-all-but (-1 1))
      (("10" (lemma "position_t_first_diff")
        (("10" (inst?)
          (("10" (inst?)
            (("10" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("10" (expand "child")
                (("10" (skosimp)
                  (("10" (lemma "pos_subterm_ax")
                    (("10" (inst?)
                      (("10" (inst?)
                        (("10" (lemma "seq_first_rest[posnat]")
                          (("10" (inst -1 "p1!1")
                            (("10" (lemma "empty_0[posnat]")
                              (("10"
                                (inst -1 "p1!1")
                                (("10"
                                  (assert)
                                  (("10"
                                    (lemma "not_var")
                                    (("10"
                                      (inst?)
                                      (("10"
                                        (inst?)
                                        (("10" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide-all-but (-1 1))
      (("11" (lemma "position_s_first_diff")
        (("11" (inst?)
          (("11" (inst?)
            (("11" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
              (("11" (expand "child")
                (("11" (skosimp)
                  (("11" (lemma "pos_subterm_ax")
                    (("11" (inst?)
                      (("11" (inst?)
                        (("11" (lemma "seq_first_rest[posnat]")
                          (("11" (inst -1 "p1!1")
                            (("11" (lemma "empty_0[posnat]")
                              (("11"
                                (inst -1 "p1!1")
                                (("11"
                                  (assert)
                                  (("11"
                                    (lemma "not_var")
                                    (("11"
                                      (inst?)
                                      (("11"
                                        (inst?)
                                        (("11" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide-all-but 1)
      (("12" (skosimp)
        (("12" (lemma "position_t_first_diff")
          (("12" (inst?)
            (("12" (inst?)
              (("12" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
                (("12" (expand "child")
                  (("12" (skosimp)
                    (("12" (lemma "pos_subterm_ax")
                      (("12" (inst?)
                        (("12" (inst?)
                          (("12" (lemma "seq_first_rest[posnat]")
                            (("12" (inst -1 "p1!1")
                              (("12"
                                (lemma "empty_0[posnat]")
                                (("12"
                                  (inst -1 "p1!1")
                                  (("12"
                                    (assert)
                                    (("12"
                                      (lemma "not_var")
                                      (("12"
                                        (inst?)
                                        (("12"
                                          (inst?)
                                          (("12" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide-all-but 1)
      (("13" (skosimp)
        (("13" (lemma "position_s_first_diff")
          (("13" (inst?)
            (("13" (inst?)
              (("13" (name-replace "fd" "first_diff(y!1`1, y!1`2)")
                (("13" (expand "child")
                  (("13" (skosimp)
                    (("13" (lemma "pos_subterm_ax")
                      (("13" (inst?)
                        (("13" (inst?)
                          (("13" (lemma "seq_first_rest[posnat]")
                            (("13" (inst -1 "p1!1")
                              (("13"
                                (lemma "empty_0[posnat]")
                                (("13"
                                  (inst -1 "p1!1")
                                  (("13"
                                    (assert)
                                    (("13"
                                      (lemma "not_var")
                                      (("13"
                                        (inst?)
                                        (("13"
                                          (inst?)
                                          (("13" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (skosimp)
        (("14" (lemma "position_t_first_diff")
          (("14" (inst?)
            (("14" (assert)
              (("14" (hide -2)
                (("14" (expand "child")
                  (("14" (skosimp)
                    (("14" (lemma "pos_subterm_ax")
                      (("14" (inst?)
                        (("14" (inst?)
                          (("14" (lemma "seq_first_rest[posnat]")
                            (("14" (inst -1 "p1!1")
                              (("14"
                                (lemma "empty_0[posnat]")
                                (("14"
                                  (inst -1 "p1!1")
                                  (("14"
                                    (assert)
                                    (("14"
                                      (lemma "not_var")
                                      (("14"
                                        (inst?)
                                        (("14"
                                          (inst?)
                                          (("14" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (skosimp)
        (("15" (lemma "position_s_first_diff")
          (("15" (inst?)
            (("15" (assert)
              (("15" (hide -2)
                (("15" (expand "child")
                  (("15" (skosimp)
                    (("15" (lemma "pos_subterm_ax")
                      (("15" (inst?)
                        (("15" (inst?)
                          (("15" (lemma "seq_first_rest[posnat]")
                            (("15" (inst -1 "p1!1")
                              (("15"
                                (lemma "empty_0[posnat]")
                                (("15"
                                  (inst -1 "p1!1")
                                  (("15"
                                    (assert)
                                    (("15"
                                      (lemma "not_var")
                                      (("15"
                                        (inst?)
                                        (("15"
                                          (inst?)
                                          (("15" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq_first_rest formula-decl nil seq_extras structures)
    (not_var formula-decl nil positions nil)
    (seq_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (add_first const-decl "finseq" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (rest_add_first formula-decl nil seq_extras structures)
    (rest_compo formula-decl nil seq_extras structures)
    (pos_subterm formula-decl nil subterm nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (^ const-decl "finseq" finite_sequences nil)
    (first_compo formula-decl nil seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (first_add formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (insert? const-decl "finseq" seq_extras structures)
    (term_app_extensionality formula-decl nil term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (positions_of_arg formula-decl nil positions nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (child const-decl "bool" positions nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (link_of_frst_diff_TCC1 0
  (link_of_frst_diff_TCC1-2 "" 3803860560
   ("" (skosimp*) (("" (expand "V") (("" (propax) nil nil)) nil)) nil)
   nil shostak
   (link_of_frst_diff subtype "robinsonunification.sp"
    "(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)"))
  (link_of_frst_diff_TCC1-1 nil 3467989055
   ("" (skosimp*)
    (("" (hide -1 -2 -4)
      (("" (expand "V") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((V const-decl "set[term]" variables_term nil)) nil
   (link_of_frst_diff subtype "robinsonunification.sp"
    "(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)")))
 (link_of_frst_diff_TCC2 0
  (link_of_frst_diff_TCC2-1 nil 3467989055
   ("" (skosimp*)
    (("" (lemma "Vars_is_var")
      (("" (lemma "vars_of_term_finite")
        (("" (inst -1 "sp!1")
          (("" (inst -2 "sp!1")
            (("" (assert)
              (("" (expand* "Sub?" "Dom")
                (("" (replaces -2)
                  (("" (expand "is_finite")
                    (("" (skosimp)
                      (("" (inst 2 "N!1" "f!1")
                        (("1" (hide-all-but (-1 2))
                          (("1" (expand "injective?")
                            (("1" (skeep)
                              (("1"
                                (inst -1 "x1" "x2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (prop)
                            (("1" (assert)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (hide -2 -5 1)
                                  (("1"
                                    (lemma
                                     "first_diff_has_diff_argument")
                                    (("1"
                                      (inst -1 "s!1" "t!1" "k!1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vars_is_var formula-decl nil subterm nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Sub? const-decl "bool" substitution nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (link_of_frst_diff subtype
    "(LAMBDA (x: (variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)): IF x = robinsonunification.sp THEN robinsonunification.tp ELSE x ENDIF)"
    "Sub[variable, symbol, arity]")))
 (link_of_frst_diff_TCC3 0
  (link_of_frst_diff_TCC3-1 nil 3467989055 ("" (subtype-tcc) nil nil)
   ((term type-decl nil term_adt nil)
    (V const-decl "set[term]" variables_term nil))
   nil
   (link_of_frst_diff subtype "robinsonunification.tp"
    "(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)")))
 (link_of_frst_diff_TCC4 0
  (link_of_frst_diff_TCC4-1 nil 3467989055
   ("" (skosimp*)
    (("" (lemma "Vars_is_var")
      (("" (lemma "vars_of_term_finite")
        (("" (inst -1 "tp!1")
          (("" (inst -2 "tp!1")
            (("" (assert)
              (("" (expand* "Sub?" "Dom")
                (("" (replaces -2)
                  (("" (expand "is_finite")
                    (("" (skosimp)
                      (("" (inst 3 "N!1" "f!1")
                        (("1" (hide-all-but (-1 3))
                          (("1" (expand "injective?")
                            (("1" (skeep)
                              (("1"
                                (inst -1 "x1" "x2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vars_is_var formula-decl nil subterm nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Sub? const-decl "bool" substitution nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (link_of_frst_diff subtype
    "(LAMBDA (x: (variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)): IF x = robinsonunification.tp THEN robinsonunification.sp ELSE x ENDIF)"
    "Sub[variable, symbol, arity]")))
 (dom_link_of_frst_diff_is 0
  (dom_link_of_frst_diff_is-1 nil 3468666181
   ("" (skosimp)
    (("" (assert)
      ((""
        (name-replace "sig!1" "link_of_frst_diff(s!1, t!1)" :hide? nil)
        (("" (prop)
          (("1" (expand* "restrict" "singleton")
            (("1" (decompose-equality 1)
              (("1" (iff)
                (("1" (prop)
                  (("1" (copy -3)
                    (("1" (decompose-equality -1)
                      (("1" (inst -1 "x!1")
                        (("1" (expand "Dom")
                          (("1" (expand "link_of_frst_diff" -1)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "link_of_frst_diff" -4)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -3 1 rl)
                    (("2" (expand "link_of_frst_diff" 1)
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (expand "Dom")
                            (("1" (replace -5 1 rl)
                              (("1"
                                (replace -2 1 rl)
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (expand* "member" "subtermOF")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "Vars")
                                          (("1"
                                            (inst 1 "empty_seq")
                                            (("1"
                                              (expand "subtermOF")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (rewrite
                                                       "empty_0")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (expand "positionsOF")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "only_empty_seq")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "only_empty_seq")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand*
                                                       "union"
                                                       "IUnion"
                                                       "member"
                                                       "only_empty_seq")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (reveal -4)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (reveal -4)
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (expand "Vars")
                                          (("4"
                                            (expand "finseq_appl")
                                            (("4"
                                              (inst 3 "empty_seq")
                                              (("1"
                                                (reveal -4)
                                                (("1"
                                                  (replace -1 -2 rl)
                                                  (("1"
                                                    (expand
                                                     "subtermOF"
                                                     3
                                                     1)
                                                    (("1"
                                                      (rewrite
                                                       "empty_0"
                                                       3)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (expand
                                                     "positionsOF")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "only_empty_seq")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "only_empty_seq")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 1 3)
                                                          (("3"
                                                            (expand*
                                                             "union"
                                                             "IUnion"
                                                             "member"
                                                             "only_empty_seq")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "link_of_frst_diff" -4)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand* "restrict" "singleton")
            (("2" (decompose-equality 2)
              (("1" (iff)
                (("1" (prop)
                  (("1" (copy -2)
                    (("1" (decompose-equality -1)
                      (("1" (inst -1 "x!1")
                        (("1" (expand "Dom")
                          (("1" (replace -1 -2 rl)
                            (("1" (expand "link_of_frst_diff" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "vars?(subtermOF(t!1, first_diff(s!1, t!1)))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand
                                           "link_of_frst_diff"
                                           -4)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (replace -3 1 rl)
                                      (("2"
                                        (expand "link_of_frst_diff" -2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (lemma "position_s_first_diff")
                                      (("3"
                                        (lemma "commutative_first_diff")
                                        (("3"
                                          (inst
                                           -2
                                           "t!1"
                                           "s!1"
                                           "first_diff(s!1,t!1)")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst
                                               -1
                                               "s!1"
                                               "t!1"
                                               "p!1")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (copy -2)
                    (("2" (decompose-equality -1)
                      (("2" (inst -1 "x!1")
                        (("2" (expand "link_of_frst_diff" -1)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (expand "Dom")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "link_of_frst_diff" -5)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (expand "link_of_frst_diff" -3)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2 3)
                (("2" (skosimp)
                  (("2" (lemma "position_s_first_diff")
                    (("2" (inst -1 "t!1" "s!1" "p!1")
                      (("2" (lemma "commutative_first_diff")
                        (("2" (assert)
                          (("2" (inst -1 "s!1" "t!1" "p!1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Dom const-decl "set[(V)]" substitution nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil))
   shostak))
 (dom_ran_link_disjoint 0
  (dom_ran_link_disjoint-1 nil 3468741400
   ("" (assert)
    (("" (skosimp*)
      ((""
        (name-replace "sig!1" "link_of_frst_diff(s!1, t!1)" :hide? nil)
        (("" (typepred "x!1")
          (("" (typepred "r!1")
            (("" (hide -2)
              (("" (expand "member")
                (("" (replace -3 -1)
                  (("" (replace -3 -2)
                    (("" (expand "Dom")
                      (("" (expand "Ran")
                        (("" (skosimp)
                          (("" (expand* "member" "Dom")
                            (("" (lemma "dom_link_of_frst_diff_is")
                              ((""
                                (inst
                                 -1
                                 "first_diff(s!1, t!1)"
                                 "s!1"
                                 "t!1")
                                ((""
                                  (assert)
                                  ((""
                                    (replace -4 -1)
                                    ((""
                                      (assert)
                                      ((""
                                        (name-replace
                                         "p!1"
                                         "first_diff(s!1, t!1)"
                                         :hide?
                                         nil)
                                        ((""
                                          (expand*
                                           "restrict"
                                           "singleton")
                                          ((""
                                            (prop)
                                            (("1"
                                              (copy -2)
                                              (("1"
                                                (decompose-equality -1)
                                                (("1"
                                                  (inst -1 "x!1")
                                                  (("1"
                                                    (iff)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "x!1")
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -6
                                                                 -5
                                                                 rl)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -3)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x!2")
                                                                    (("1"
                                                                      (expand
                                                                       "Dom")
                                                                      (("1"
                                                                        (expand
                                                                         "link_of_frst_diff"
                                                                         -5)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -5
                                                                                 1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1
                                                                                       rl)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-7
                                                                                          1))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -6
                                                                                 -1)
                                                                                (("2"
                                                                                  (hide
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -8
                                                                                   1
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "link_of_frst_diff")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "vars?(subtermOF(t!1, p!1))")
                                              (("1"
                                                (copy -2)
                                                (("1"
                                                  (decompose-equality
                                                   -1)
                                                  (("1"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (expand "Dom" -1)
                                                      (("1"
                                                        (decompose-equality
                                                         -3)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x!2")
                                                          (("1"
                                                            (expand
                                                             "Dom"
                                                             -1)
                                                            (("1"
                                                              (replace
                                                               -6
                                                               -5
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "link_of_frst_diff"
                                                                 -5)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (replace
                                                                         -5
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             1
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               rl)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-7
                                                                                  1))
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -6
                                                                         -1)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -6
                                                                            -7
                                                                            4))
                                                                          (("2"
                                                                            (expand
                                                                             "link_of_frst_diff")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-2 -4 1 2 5))
                                                (("2"
                                                  (expand
                                                   "link_of_frst_diff")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (-2 1))
                                                (("3"
                                                  (lemma
                                                   "position_s_first_diff")
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "t!1"
                                                     "s!1"
                                                     "p!1")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (hide 2)
                                                        (("3"
                                                          (lemma
                                                           "commutative_first_diff")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "s!1"
                                                             "t!1"
                                                             "p!1")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Dom const-decl "set[(V)]" substitution nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (position type-eq-decl nil positions nil)
    (Ran const-decl "set[term[variable, symbol, arity]]" substitution
     nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil))
   shostak))
 (link_remove_x 0
  (link_remove_x-1 nil 3468745076
   ("" (skosimp)
    (("" (assert)
      (("" (flatten)
        ((""
          (name-replace "sig!1" "link_of_frst_diff(s!1, t!1)" :hide?
           nil)
          (("" (prop)
            (("1" (lemma "vars_subst_not_in")
              (("1" (inst -1 "s!1" "sig!1" "x!1")
                (("1" (assert)
                  (("1" (skosimp)
                    (("1" (lemma "dom_ran_link_disjoint")
                      (("1" (inst -1 "s!1" "t!1")
                        (("1" (assert)
                          (("1" (inst -1 "x!1" "r!1")
                            (("1" (replaces -4)
                              (("1"
                                (hide -2 -3 -4 2)
                                (("1"
                                  (expand "member")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replaces -4)
                              (("2"
                                (hide -1 -2 -3 2)
                                (("2"
                                  (expand "member")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "vars_subst_not_in")
              (("2" (inst -1 "t!1" "sig!1" "x!1")
                (("2" (assert)
                  (("2" (skosimp)
                    (("2" (lemma "dom_ran_link_disjoint")
                      (("2" (inst -1 "s!1" "t!1")
                        (("2" (assert)
                          (("2" (inst -1 "x!1" "r!1")
                            (("1" (replaces -4)
                              (("1"
                                (hide -2 -3 -4 2)
                                (("1"
                                  (expand "member")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replaces -4)
                              (("2"
                                (hide -1 -2 -3 2)
                                (("2"
                                  (expand "member")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (vars_subst_not_in formula-decl nil substitution nil)
    (Ran const-decl "set[term[variable, symbol, arity]]" substitution
     nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (member const-decl "bool" sets nil))
   shostak))
 (link_of_frst_diff_s_is_subset_union 0
  (link_of_frst_diff_s_is_subset_union-1 nil 3469270552
   ("" (skosimp)
    (("" (assert)
      (("" (flatten)
        ((""
          (name-replace "sig!1" "link_of_frst_diff(s!1,t!1)" :hide?
           nil)
          (("" (expand* "subset?")
            (("" (skosimp)
              (("" (expand* "union" "member")
                (("" (flatten)
                  (("" (case "member(x!1, VRan(sig!1))")
                    (("1" (expand* "member" "VRan")
                      (("1" (expand "IUnion")
                        (("1" (skosimp)
                          (("1" (lemma "dom_link_of_frst_diff_is")
                            (("1"
                              (inst -1 "first_diff(s!1, t!1)" "s!1"
                               "t!1")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -3 -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand* "restrict" "singleton")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (decompose-equality -2)
                                          (("1"
                                            (typepred "i!1")
                                            (("1"
                                              (inst -3 "i!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replaces -3)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (replace
                                                       -4
                                                       -3
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "link_of_frst_diff"
                                                         -3)
                                                        (("1"
                                                          (name-replace
                                                           "p!1"
                                                           "first_diff(s!1, t!1)"
                                                           :hide?
                                                           nil)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 4))
                                                              (("1"
                                                                (expand
                                                                 "Vars")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (typepred
                                                                     "p!2")
                                                                    (("1"
                                                                      (lemma
                                                                       "pos_o_term")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p!1"
                                                                         "p!2"
                                                                         "t!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "p!1 o p!2")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "pos_subterm")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (reveal
                                                                                 -4)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "position_s_first_diff")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "t!1"
                                                                                     "s!1"
                                                                                     "p!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "commutative_first_diff")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1
                                                                -3
                                                                -5
                                                                -6
                                                                1))
                                                              (("2"
                                                                (expand
                                                                 "link_of_frst_diff")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (decompose-equality -1)
                                          (("1"
                                            (typepred "i!1")
                                            (("1"
                                              (inst -3 "i!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replaces -3)
                                                  (("1"
                                                    (expand "V")
                                                    (("1"
                                                      (replace
                                                       -4
                                                       -3
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "link_of_frst_diff"
                                                         -3)
                                                        (("1"
                                                          (name-replace
                                                           "p!1"
                                                           "first_diff(s!1, t!1)"
                                                           :hide?
                                                           nil)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 4))
                                                              (("1"
                                                                (expand
                                                                 "Vars")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (typepred
                                                                     "p!2")
                                                                    (("1"
                                                                      (lemma
                                                                       "pos_o_term")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p!1"
                                                                         "p!2"
                                                                         "s!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "p!1 o p!2")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "pos_subterm")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (reveal
                                                                                 -4)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "position_s_first_diff")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "s!1"
                                                                                     "t!1"
                                                                                     "p!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1
                                                                -3
                                                                -4
                                                                -7
                                                                1
                                                                2))
                                                              (("2"
                                                                (expand
                                                                 "link_of_frst_diff")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (rewrite
                                               "position_t_first_diff")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member")
                      (("2" (name "p!1" "first_diff(s!1,t!1)")
                        (("2" (case "vars?(subtermOF(s!1,p!1))")
                          (("1"
                            (case "VRan(sig!1) = Vars(subtermOF(t!1,p!1))")
                            (("1" (replaces -1)
                              (("1"
                                (lemma "link_remove_x")
                                (("1"
                                  (inst -1 "x!1" "s!1" "t!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -4 -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (lemma "positions_of_ext")
                                            (("1"
                                              (inst -1 "sig!1" "s!1")
                                              (("1"
                                                (decompose-equality -1)
                                                (("1"
                                                  (expand "Vars" -5)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst -1 "p!2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "union")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (rewrite
                                                                   "subterm_ext_commute")
                                                                  (("1"
                                                                    (decompose-equality
                                                                     -5)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("1"
                                                                          (expand
                                                                           "ext")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         -2)
                                                                        (("2"
                                                                          (typepred
                                                                           "x!1")
                                                                          (("2"
                                                                            (expand
                                                                             "V")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -8)
                                                                  (("2"
                                                                    (rewrite
                                                                     "pos_subterm")
                                                                    (("2"
                                                                      (rewrite
                                                                       "subterm_ext_commute")
                                                                      (("2"
                                                                        (expand
                                                                         "ext"
                                                                         -8)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "subtermOF(s!1, p1!1) = subtermOF(s!1, p!1)")
                                                                            (("1"
                                                                              (replace
                                                                               -8
                                                                               -9
                                                                               rl)
                                                                              (("1"
                                                                                (expand
                                                                                 "link_of_frst_diff"
                                                                                 -9)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -8
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            3))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "Vars")
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "p2!1")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "link_of_frst_diff"
                                                                                         -10)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -7
                                                                               -8
                                                                               rl)
                                                                              (("2"
                                                                                (expand
                                                                                 "link_of_frst_diff"
                                                                                 -8)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -8
                                                                                         -5
                                                                                         rl)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "ext"
                                                                                           -5)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "link_of_frst_diff"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "pos_o_term")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p1!1"
                                                                                                   "p2!1"
                                                                                                   "s!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "pos_subterm")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "p1!1"
                                                                                                         "p2!1"
                                                                                                         "s!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             -3
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (-3
                                                                                                                6))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "Vars")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "p1!1 o p2!1")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "link_of_frst_diff"
                                                                                         -9)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (decompose-equality 1)
                              (("2"
                                (iff)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "VRan" -1)
                                    (("1"
                                      (expand "IUnion")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (lemma
                                           "dom_link_of_frst_diff_is")
                                          (("1"
                                            (inst -1 "p!1" "s!1" "t!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand*
                                                 "restrict"
                                                 "singleton")
                                                (("1"
                                                  (replace -5 -1)
                                                  (("1"
                                                    (decompose-equality
                                                     -1)
                                                    (("1"
                                                      (inst -1 "i!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (replace
                                                             -4
                                                             -1
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "link_of_frst_diff"
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -3
                                                                    2))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "link_of_frst_diff"
                                                                   -5)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "VRan" 1)
                                    (("2"
                                      (expand "IUnion")
                                      (("2"
                                        (inst 1 "subtermOF(s!1, p!1)")
                                        (("1"
                                          (replace -4 1 rl)
                                          (("1"
                                            (expand
                                             "link_of_frst_diff"
                                             1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (hide-all-but
                                                 (-1 -3 2))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "link_of_frst_diff"
                                                 -5)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "V")
                                          (("2"
                                            (expand "Dom")
                                            (("2"
                                              (decompose-equality -4)
                                              (("2"
                                                (inst
                                                 -1
                                                 "subtermOF(s!1, p!1)")
                                                (("2"
                                                  (expand
                                                   "link_of_frst_diff"
                                                   -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -1)
                                                            (("1"
                                                              (replace
                                                               -5
                                                               -1)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -5))
                                                                (("1"
                                                                  (lemma
                                                                   "first_diff_has_diff_argument")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "s!1"
                                                                     "t!1"
                                                                     "p!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "sig!1 = link_of_frst_diff(s!1,t!1)")
                                                          (("1"
                                                            (expand
                                                             "link_of_frst_diff"
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but (-2 1))
                              (("3"
                                (rewrite "position_t_first_diff")
                                nil
                                nil))
                              nil))
                            nil)
                           ("2" (case "vars?(subtermOF(t!1,p!1))")
                            (("1"
                              (case "VRan(sig!1) = Vars(subtermOF(s!1,p!1))")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (lemma "link_remove_x")
                                  (("1"
                                    (inst -1 "x!1" "s!1" "t!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -4 -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (lemma
                                               "positions_of_ext")
                                              (("1"
                                                (inst -1 "sig!1" "s!1")
                                                (("1"
                                                  (decompose-equality
                                                   -1)
                                                  (("1"
                                                    (expand "Vars" -5)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst -1 "p!2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "union")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (rewrite
                                                                     "subterm_ext_commute")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -5)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("1"
                                                                            (expand
                                                                             "ext")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           -2)
                                                                          (("2"
                                                                            (typepred
                                                                             "x!1")
                                                                            (("2"
                                                                              (expand
                                                                               "V")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     -8)
                                                                    (("2"
                                                                      (rewrite
                                                                       "pos_subterm")
                                                                      (("2"
                                                                        (rewrite
                                                                         "subterm_ext_commute")
                                                                        (("2"
                                                                          (expand
                                                                           "ext"
                                                                           -8)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "subtermOF(s!1, p1!1) = subtermOF(t!1, p!1)")
                                                                              (("1"
                                                                                (replace
                                                                                 -8
                                                                                 -9
                                                                                 rl)
                                                                                (("1"
                                                                                  (expand
                                                                                   "link_of_frst_diff"
                                                                                   -9)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -8
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              4))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "Vars")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "p2!1")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "link_of_frst_diff"
                                                                                           -10)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -7
                                                                                 -8
                                                                                 rl)
                                                                                (("2"
                                                                                  (expand
                                                                                   "link_of_frst_diff"
                                                                                   -8)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -8
                                                                                           -5
                                                                                           rl)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "ext"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "link_of_frst_diff"
                                                                                               -5)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "pos_o_term")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "p1!1"
                                                                                                     "p2!1"
                                                                                                     "s!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "pos_subterm")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "p1!1"
                                                                                                           "p2!1"
                                                                                                           "s!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               -3
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-3
                                                                                                                  7))
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "Vars")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "p1!1 o p2!1")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "link_of_frst_diff"
                                                                                           -9)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (decompose-equality 1)
                                (("2"
                                  (iff)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "VRan" -1)
                                      (("1"
                                        (expand "IUnion")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (lemma
                                             "dom_link_of_frst_diff_is")
                                            (("1"
                                              (inst
                                               -1
                                               "p!1"
                                               "s!1"
                                               "t!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand*
                                                   "restrict"
                                                   "singleton")
                                                  (("1"
                                                    (replace -5 -1)
                                                    (("1"
                                                      (decompose-equality
                                                       -1)
                                                      (("1"
                                                        (inst -1 "i!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (replace
                                                               -4
                                                               -1
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "link_of_frst_diff"
                                                                 -1)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "link_of_frst_diff"
                                                                     -5)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "VRan" 1)
                                      (("2"
                                        (expand "IUnion")
                                        (("2"
                                          (inst
                                           1
                                           "subtermOF(t!1, p!1)")
                                          (("1"
                                            (replace -4 1 rl)
                                            (("1"
                                              (expand
                                               "link_of_frst_diff"
                                               1)
                                              (("1"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand
                                                   "link_of_frst_diff"
                                                   -5)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "V")
                                            (("2"
                                              (expand "Dom")
                                              (("2"
                                                (decompose-equality -4)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "subtermOF(t!1, p!1)")
                                                  (("2"
                                                    (expand
                                                     "link_of_frst_diff"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "sig!1 = link_of_frst_diff(s!1,t!1)")
                                                            (("1"
                                                              (expand
                                                               "link_of_frst_diff"
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "link_of_frst_diff")
                              (("2" (assert) nil nil)) nil)
                             ("3" (hide-all-but (-1 1))
                              (("3"
                                (rewrite "position_t_first_diff")
                                nil
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but (-1 1))
                            (("3" (lemma "position_s_first_diff")
                              (("3"
                                (inst -1 "s!1" "t!1" "p!1")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (v adt-accessor-decl "[(vars?) -> variable]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (ext def-decl "term" substitution nil)
    (positions_of_ext formula-decl nil substitution nil)
    (position type-eq-decl nil positions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (pos_subterm formula-decl nil subterm nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (commutative_link_fd 0
  (commutative_link_fd-1 nil 3469378012
   ("" (skosimp*)
    (("" (lemma "commutative_first_diff")
      (("" (inst?)
        (("" (assert)
          (("" (prop)
            (("" (inst -1 "first_diff(t!1, s!1)")
              (("" (expand "link_of_frst_diff")
                (("" (lift-if)
                  (("" (assert)
                    ((""
                      (name-replace "position" "first_diff(s!1, t!1)")
                      (("" (replace -1)
                        (("" (case " vars?(subtermOF(t!1, position))")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil)
                           ("3" (hide 2 3)
                            (("3" (replace -1 1 rl)
                              (("3"
                                (hide -)
                                (("3"
                                  (lemma "position_s_first_diff")
                                  (("3"
                                    (inst
                                     -1
                                     "t!1"
                                     "s!1"
                                     "first_diff(t!1, s!1)")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   shostak))
 (link_of_frst_diff_t_is_subset_union 0
  (link_of_frst_diff_t_is_subset_union-1 nil 3469369542
   ("" (lemma "commutative_link_fd")
    (("" (lemma "link_of_frst_diff_s_is_subset_union")
      (("" (skosimp*)
        (("" (assert)
          (("" (case "NOT vars?(subtermOF(s!1, first_diff(s!1, t!1)))")
            (("1" (inst -1 "t!1" "s!1")
              (("1" (inst -2 "s!1" "t!1")
                (("1" (assert)
                  (("1" (prop)
                    (("1" (replace -2)
                      (("1" (hide -2 1 2)
                        (("1" (expand "subset?")
                          (("1" (skosimp*)
                            (("1" (inst -1 "x!1")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (expand* "member" "union")
                                    (("1" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -3 -2)
              (("2" (prop)
                (("2"
                  (name-replace "sig!1" "link_of_frst_diff(s!1,t!1)"
                   :hide? nil)
                  (("2"
                    (name-replace "p!1" "first_diff(s!1, t!1)" :hide?
                     nil)
                    (("2" (expand* "subset?")
                      (("2" (skosimp)
                        (("2" (expand* "union" "member")
                          (("2" (flatten)
                            (("2" (case "member(x!1, VRan(sig!1))")
                              (("1"
                                (expand* "member" "VRan")
                                (("1"
                                  (expand "IUnion")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (lemma
                                       "dom_link_of_frst_diff_is")
                                      (("1"
                                        (inst
                                         -1
                                         "first_diff(s!1, t!1)"
                                         "s!1"
                                         "t!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3 -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand*
                                                 "restrict"
                                                 "singleton")
                                                (("1"
                                                  (replace -4 -1)
                                                  (("1"
                                                    (decompose-equality
                                                     -1)
                                                    (("1"
                                                      (typepred "i!1")
                                                      (("1"
                                                        (inst -3 "i!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces
                                                             -3)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (replace
                                                                 -4
                                                                 -2
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "link_of_frst_diff"
                                                                   -2)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -3
                                                                        4))
                                                                      (("1"
                                                                        (expand
                                                                         "Vars")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (typepred
                                                                             "p!2")
                                                                            (("1"
                                                                              (lemma
                                                                               "pos_o_term")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "p!1"
                                                                                 "p!2"
                                                                                 "t!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "p!1 o p!2")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "pos_subterm")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-3
                                                                                        1))
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "position_t_first_diff")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -4
                                                                        -5
                                                                        -6
                                                                        1))
                                                                      (("2"
                                                                        (expand
                                                                         "link_of_frst_diff")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "member")
                                (("2"
                                  (case
                                   "VRan(sig!1) = Vars(subtermOF(t!1,p!1))")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (lemma "link_remove_x")
                                      (("1"
                                        (inst -1 "x!1" "s!1" "t!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3 -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (lemma
                                                   "positions_of_ext")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "sig!1"
                                                     "t!1")
                                                    (("1"
                                                      (decompose-equality
                                                       -1)
                                                      (("1"
                                                        (expand
                                                         "Vars"
                                                         -5)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p!2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "union")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (rewrite
                                                                         "subterm_ext_commute")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -5)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (expand
                                                                                 "ext")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               -2)
                                                                              (("2"
                                                                                (typepred
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "V")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         -8)
                                                                        (("2"
                                                                          (rewrite
                                                                           "pos_subterm")
                                                                          (("2"
                                                                            (rewrite
                                                                             "subterm_ext_commute")
                                                                            (("2"
                                                                              (expand
                                                                               "ext"
                                                                               -8)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "subtermOF(t!1, p1!1) = subtermOF(t!1, p!1)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -7
                                                                                     -9
                                                                                     rl)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "link_of_frst_diff"
                                                                                       -9)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -8
                                                                                               -2)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-2
                                                                                                  3))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Vars")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "p2!1")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -2
                                                                                               -1)
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  4))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "Vars")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "p2!1")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand
                                                                                               "link_of_frst_diff"
                                                                                               -9)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -6
                                                                                     -8
                                                                                     rl)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "link_of_frst_diff"
                                                                                       -8)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -8
                                                                                               -6
                                                                                               rl)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ext"
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "link_of_frst_diff"
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "pos_o_term")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "p!1"
                                                                                                         "p2!1"
                                                                                                         "t!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "pos_subterm")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "p!1"
                                                                                                               "p2!1"
                                                                                                               "t!1")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "positionsOF(t!1)(p!1)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -10
                                                                                                                       -5)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         -5
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           (-5
                                                                                                                            7))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "Vars")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "p!1 o p2!1")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-9
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "position_t_first_diff")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "ext"
                                                                                               -5)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -7
                                                                                                 -5
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "link_of_frst_diff"
                                                                                                   -5)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "pos_o_term")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "p1!1"
                                                                                                         "p2!1"
                                                                                                         "t!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "pos_subterm")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "p1!1"
                                                                                                               "p2!1"
                                                                                                               "t!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   -3
                                                                                                                   rl)
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-3
                                                                                                                      8))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "Vars")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "p1!1 o p2!1")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand
                                                                                               "link_of_frst_diff"
                                                                                               -8)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (decompose-equality 1)
                                    (("2"
                                      (iff)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (expand "VRan" -1)
                                          (("1"
                                            (expand "IUnion")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (lemma
                                                 "dom_link_of_frst_diff_is")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "p!1"
                                                   "s!1"
                                                   "t!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand*
                                                       "restrict"
                                                       "singleton")
                                                      (("1"
                                                        (replace -4 -1)
                                                        (("1"
                                                          (decompose-equality
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "i!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -1
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "link_of_frst_diff"
                                                                     -1)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "link_of_frst_diff"
                                                                         -4)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "VRan" 1)
                                          (("2"
                                            (expand "IUnion")
                                            (("2"
                                              (inst
                                               1
                                               "subtermOF(s!1, p!1)")
                                              (("1"
                                                (replace -3 1 rl)
                                                (("1"
                                                  (expand
                                                   "link_of_frst_diff"
                                                   1)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "link_of_frst_diff"
                                                       -4)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "V")
                                                (("2"
                                                  (expand "Dom")
                                                  (("2"
                                                    (lemma
                                                     "dom_link_of_frst_diff_is")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "p!1"
                                                       "s!1"
                                                       "t!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -4
                                                           -1)
                                                          (("2"
                                                            (expand*
                                                             "restrict"
                                                             "singleton")
                                                            (("2"
                                                              (decompose-equality
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "subtermOF(s!1, p!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "Dom")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but (-1 1))
                                    (("3"
                                      (rewrite "position_t_first_diff")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1)
              (("3" (lemma "position_s_first_diff")
                (("3" (inst?) (("3" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (pos_subterm formula-decl nil subterm nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (positions_of_ext formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (v adt-accessor-decl "[(vars?) -> variable]" term_adt nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) (term type-decl nil term_adt nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil))
   shostak))
 (union_vars_ext_link 0
  (union_vars_ext_link-1 nil 3468747509
   ("" (skosimp*)
    (("" (assert)
      (("" (flatten)
        ((""
          (name-replace "sig!1" "link_of_frst_diff(s!1, t!1)" :hide?
           nil)
          (("" (decompose-equality 2)
            (("" (iff)
              (("" (prop)
                (("1" (expand "difference")
                  (("1" (expand "union")
                    (("1" (expand "member")
                      (("1" (prop)
                        (("1"
                          (lemma "link_of_frst_diff_s_is_subset_union")
                          (("1" (inst -1 "s!1" "t!1")
                            (("1" (assert)
                              (("1"
                                (expand "subset?")
                                (("1"
                                  (inst -1 "x!1")
                                  (("1"
                                    (expand* "union" "member")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "link_remove_x")
                          (("2" (inst -1 "x!1" "s!1" "t!1")
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("2"
                                    (expand "member")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3"
                          (lemma "link_of_frst_diff_t_is_subset_union")
                          (("3" (inst -1 "s!1" "t!1")
                            (("3" (assert)
                              (("3"
                                (expand "subset?")
                                (("3"
                                  (inst -1 "x!1")
                                  (("3"
                                    (expand* "union" "member")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (lemma "link_remove_x")
                          (("4" (inst -1 "x!1" "s!1" "t!1")
                            (("4" (assert)
                              (("4"
                                (assert)
                                (("4"
                                  (prop)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (expand "member")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand* "difference" "union" "member")
                  (("2" (prop)
                    (("1" (hide 3)
                      (("1" (expand "Vars")
                        (("1" (skosimp)
                          (("1" (inst 2 "p!1")
                            (("1" (rewrite "subterm_ext_commute")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (typepred "x!1")
                                  (("1"
                                    (expand* "V" "Dom" "ext")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2"
                                (rewrite "ext_preserv_pos")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "Vars")
                        (("2" (skosimp)
                          (("2" (inst 2 "p!1")
                            (("1" (rewrite "subterm_ext_commute")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (typepred "x!1")
                                  (("1"
                                    (expand* "V" "Dom" "ext")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2"
                                (rewrite "ext_preserv_pos")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (difference const-decl "set" sets nil)
    (ext def-decl "term" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil))
   shostak))
 (termination_lemma_TCC1 0
  (termination_lemma_TCC1-1 nil 3468654228
   ("" (skosimp)
    (("" (rewrite "finite_union")
      (("1" (hide -1 2) (("1" (rewrite "vars_of_term_finite") nil nil))
        nil)
       ("2" (hide -1 2) (("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil))
    nil)
   ((finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (termination_lemma subtype
    "sets[(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)].union(subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].Vars(substitution[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].ext(robinsonunification.sig)(robinsonunification.s)), subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].Vars(substitution[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].ext(robinsonunification.sig)(robinsonunification.t)))"
    "finite_set[(V[variable, symbol, arity])]")))
 (termination_lemma_TCC2 0
  (termination_lemma_TCC2-1 nil 3468654228
   ("" (skosimp)
    (("" (hide -)
      (("" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_union judgement-tcc nil finite_sets nil))
   nil
   (termination_lemma subtype
    "sets[(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)].union(subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].Vars(robinsonunification.s), subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].Vars(robinsonunification.t))"
    "finite_set[(V[variable, symbol, arity])]")))
 (termination_lemma 0
  (termination_lemma-1 nil 3468683546
   ("" (skosimp*)
    (("" (assert)
      (("" (prop)
        ((""
          (name-replace "sig1" "link_of_frst_diff(s!1, t!1)" :hide?
           nil)
          (("" (lemma "card_diff_subset[(V)]")
            (("" (lemma "union_vars_ext_link")
              (("" (inst -1 "s!1" "t!1")
                (("" (assert)
                  (("" (replace -3 -1)
                    (("" (assert)
                      (("" (replaces -1)
                        ((""
                          (inst -1 "Dom(sig1)"
                           "union(Vars(s!1), Vars(t!1))")
                          (("1" (prop)
                            (("1" (case-replace "card(Dom(sig1)) = 1")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (rewrite "card_one")
                                  (("2"
                                    (lemma "dom_link_of_frst_diff_is")
                                    (("2"
                                      (inst
                                       -1
                                       "first_diff(s!1, t!1)"
                                       "s!1"
                                       "t!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "restrict")
                                            (("1"
                                              (decompose-equality -2)
                                              (("1"
                                                (inst
                                                 1
                                                 "subtermOF(s!1, first_diff(s!1, t!1))")
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (reveal -5)
                                                      (("1"
                                                        (replace -1 -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -3)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "V")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "restrict")
                                            (("2"
                                              (case
                                               "vars?(subtermOF(t!1, first_diff(s!1, t!1)))")
                                              (("1"
                                                (inst
                                                 2
                                                 "subtermOF(t!1, first_diff(s!1, t!1))")
                                                (("1"
                                                  (decompose-equality
                                                   -2)
                                                  (("1"
                                                    (decompose-equality
                                                     2)
                                                    (("1"
                                                      (inst -1 "x!1")
                                                      (("1"
                                                        (reveal -5)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -3
                                                               2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "V")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal 1)
                                                (("2"
                                                  (reveal -3)
                                                  (("2"
                                                    (hide -2 4)
                                                    (("2"
                                                      (expand
                                                       "link_of_frst_diff")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (lemma
                                                   "position_s_first_diff")
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "t!1"
                                                     "s!1"
                                                     "first_diff(s!1,t!1)")
                                                    (("3"
                                                      (prop)
                                                      (("3"
                                                        (hide 2)
                                                        (("3"
                                                          (lemma
                                                           "commutative_first_diff")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "s!1"
                                                             "t!1"
                                                             "first_diff(s!1, t!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "dom_link_of_frst_diff_is")
                              (("2"
                                (inst
                                 -1
                                 "first_diff(s!1,t!1)"
                                 "s!1"
                                 "t!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -2 -1)
                                    (("2"
                                      (name-replace
                                       "p!1"
                                       "first_diff(s!1, t!1)"
                                       :hide?
                                       nil)
                                      (("2"
                                        (expand "restrict")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (decompose-equality -2)
                                            (("1"
                                              (hide 2 3)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (iff)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "singleton")
                                                            (("1"
                                                              (expand
                                                               "union")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("1"
                                                                    (expand*
                                                                     "member"
                                                                     "Vars")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "p!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "vars?(subtermOF(t!1, p!1))")
                                            (("1"
                                              (hide 1 3 4 -3 -4)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (decompose-equality
                                                     -2)
                                                    (("1"
                                                      (inst -1 "x!1")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (iff)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3)
                                                              (("1"
                                                                (expand*
                                                                 "union"
                                                                 "member")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "Vars")
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "p!1")
                                                                        (("1"
                                                                          (expand
                                                                           "singleton")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-2 -3 1 2 4))
                                              (("2"
                                                (expand
                                                 "link_of_frst_diff")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but (-2 1))
                                              (("3"
                                                (lemma
                                                 "position_s_first_diff")
                                                (("3"
                                                  (inst
                                                   -1
                                                   "t!1"
                                                   "s!1"
                                                   "p!1")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (hide 2)
                                                      (("3"
                                                        (lemma
                                                         "commutative_first_diff")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "s!1"
                                                           "t!1"
                                                           "p!1")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "sig1")
                            (("2" (hide -2 2 3)
                              (("2"
                                (expand "Sub?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card_one formula-decl nil finite_sets nil)
    (position type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (card_diff_subset formula-decl nil finite_sets nil))
   shostak))
 (unifiable_implies_not_fail 0
  (unifiable_implies_not_fail-1 nil 3469312693
   ("" (skosimp)
    (("" (assert)
      (("" (name "sig!1" "link_of_frst_diff(s!1, t!1)")
        (("" (prop)
          (("" (expand "link_of_frst_diff" -3)
            (("" (lift-if)
              (("" (prop)
                (("1" (name "p!1" "first_diff(s!1, t!1)")
                  (("1" (replace -1)
                    (("1" (decompose-equality -2)
                      (("1" (case "xx = subtermOF(s!1, p!1)")
                        (("1" (inst -2 "xx")
                          (("1" (assert)
                            (("1" (expand "fail" -2)
                              (("1"
                                (replace -1 1 rl)
                                (("1"
                                  (replace -2 1)
                                  (("1"
                                    (hide-all-but 1)
                                    (("1"
                                      (expand* "member" "Vars")
                                      (("1"
                                        (inst 1 "#(1)")
                                        (("1"
                                          (expand "subtermOF" 1)
                                          (("1"
                                            (rewrite "empty_0")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (case
                                                     "#(xx)`seq(first( #(1)) - 1) = xx")
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1"
                                                        (case
                                                         "rest( #(1)) = empty_seq")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2)
                                                          (("1"
                                                            (hide-all-but
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "subtermOF")
                                                              (("1"
                                                                (rewrite
                                                                 "empty_0")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "length_rest_0[posnat]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "#(1)")
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    2))
                                                                  (("1"
                                                                    (rewrite
                                                                     "empty_0")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "#"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (expand
                                                                   "#"
                                                                   1)
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "#")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "positionsOF")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand*
                                               "union"
                                               "IUnion"
                                               "member")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (expand "#")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1 2)
                                                  (("2"
                                                    (inst 1 "1")
                                                    (("1"
                                                      (expand
                                                       "catenate")
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (inst
                                                           1
                                                           "empty_seq")
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (expand
                                                                 "positionsOF")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "only_empty_seq")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "only_empty_seq")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand*
                                                                       "union"
                                                                       "IUnion"
                                                                       "member"
                                                                       "only_empty_seq")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -1 "subtermOF(s!1, p!1)")
                          (("2" (expand "fail")
                            (("2" (assert)
                              (("2"
                                (expand "id")
                                (("2"
                                  (hide 1 2)
                                  (("2"
                                    (lemma
                                     "first_diff_has_diff_argument")
                                    (("2"
                                      (inst -1 "s!1" "t!1" "p!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "var_term_unifiable_not_var_in_term")
                  (("2"
                    (inst -1 "subtermOF(s!1, first_diff(s!1, t!1))"
                     "subtermOF(t!1, first_diff(s!1, t!1))")
                    (("2" (assert)
                      (("2" (hide -1 -2)
                        (("2" (split)
                          (("1"
                            (lemma "unifiable_terms_unifiable_args")
                            (("1" (expand "unifiable")
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst 1 "sigma!1")
                                  (("1"
                                    (inst
                                     -1
                                     "sigma!1"
                                     "s!1"
                                     "t!1"
                                     "first_diff(s!1, t!1)")
                                    (("1"
                                      (expand* "member" "U")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (rewrite
                                         "position_t_first_diff")
                                        (("2"
                                          (lemma
                                           "position_s_first_diff")
                                          (("2"
                                            (inst?)
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "first_diff_has_diff_argument")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (decompose-equality -1)
                  (("3" (name "p!1" "first_diff(s!1, t!1)")
                    (("3" (replace -1)
                      (("3" (case "xx = subtermOF(t!1, p!1)")
                        (("1" (inst -3 "subtermOF(t!1, p!1)")
                          (("1" (expand "fail")
                            (("1" (assert)
                              (("1"
                                (replace -1 1 rl)
                                (("1"
                                  (replace -3 1)
                                  (("1"
                                    (hide-all-but 1)
                                    (("1"
                                      (expand* "member" "Vars")
                                      (("1"
                                        (inst 1 "#(1)")
                                        (("1"
                                          (expand "subtermOF" 1)
                                          (("1"
                                            (rewrite "empty_0")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (case
                                                     "#(xx)`seq(first( #(1)) - 1) = xx")
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1"
                                                        (case
                                                         "rest( #(1)) = empty_seq")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2)
                                                          (("1"
                                                            (hide-all-but
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "subtermOF")
                                                              (("1"
                                                                (rewrite
                                                                 "empty_0")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "length_rest_0[posnat]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "#(1)")
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    2))
                                                                  (("1"
                                                                    (rewrite
                                                                     "empty_0")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "#"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (expand
                                                                   "#"
                                                                   1)
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "#")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "positionsOF")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand*
                                               "union"
                                               "IUnion"
                                               "member")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1 2)
                                                  (("2"
                                                    (inst 1 "1")
                                                    (("1"
                                                      (expand
                                                       "catenate")
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (inst
                                                           1
                                                           "empty_seq")
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (expand
                                                                 "positionsOF")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "only_empty_seq")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "only_empty_seq")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand*
                                                                       "union"
                                                                       "IUnion"
                                                                       "member"
                                                                       "only_empty_seq")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "subtermOF(t!1, p!1)")
                          (("2" (expand "fail")
                            (("2" (assert)
                              (("2"
                                (expand "id")
                                (("2"
                                  (hide 1 2 3 -3 -4)
                                  (("2"
                                    (lemma
                                     "first_diff_has_diff_argument")
                                    (("2"
                                      (inst -1 "s!1" "t!1" "p!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (lemma "var_term_unifiable_not_var_in_term")
                  (("4"
                    (inst -1 "subtermOF(t!1, first_diff(s!1, t!1))"
                     "subtermOF(s!1, first_diff(s!1, t!1))")
                    (("4" (assert)
                      (("4" (hide -1 -2 -3 2)
                        (("4" (lemma "unifiable_terms_unifiable_args")
                          (("4" (expand "unifiable")
                            (("4" (skosimp)
                              (("4"
                                (inst 1 "sigma!1")
                                (("4"
                                  (inst
                                   -1
                                   "sigma!1"
                                   "s!1"
                                   "t!1"
                                   "first_diff(s!1, t!1)")
                                  (("1"
                                    (expand* "member" "U")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (expand "unifier")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (rewrite "position_t_first_diff")
                                      (("2"
                                        (lemma "position_s_first_diff")
                                        (("2"
                                          (inst
                                           -1
                                           "s!1"
                                           "t!1"
                                           "first_diff(s!1, t!1)")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (lemma "first_diff_unifiable_vars")
                  (("5" (inst -1 "s!1" "t!1" "first_diff(s!1, t!1)")
                    (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifier const-decl "bool" unification nil)
    (var_term_unifiable_not_var_in_term formula-decl nil unification
     nil)
    (unifiable const-decl "bool" unification nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (catenate const-decl "positions" positions nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (only_empty_seq const-decl "positions" positions nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length_rest_0 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil))
   shostak))
 (preserving_generality 0
  (preserving_generality-1 nil 3469363975
   ("" (skosimp)
    (("" (assert)
      (("" (inst 1 "rho!1")
        ((""
          (name-replace "sig!1" "link_of_frst_diff(s!1, t!1)" :hide?
           nil)
          (("" (decompose-equality 1)
            (("" (copy -1)
              (("" (expand "link_of_frst_diff" -1)
                (("" (lift-if)
                  (("" (prop)
                    (("1"
                      (name-replace "p!1" "first_diff(s!1, t!1)" :hide?
                       nil)
                      (("1" (decompose-equality -2)
                        (("1" (inst -1 "x!1")
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "comp" 2)
                                (("1"
                                  (replace -2 2 rl)
                                  (("1"
                                    (replace -1 2)
                                    (("1"
                                      (lemma
                                       "unifiable_terms_unifiable_args")
                                      (("1"
                                        (inst
                                         -1
                                         "rho!1"
                                         "s!1"
                                         "t!1"
                                         "p!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-1 -5 2))
                                            (("1"
                                              (expand*
                                               "member"
                                               "U"
                                               "unifier")
                                              (("1"
                                                (expand "ext" -1 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-3 1))
                                          (("2"
                                            (rewrite
                                             "position_t_first_diff")
                                            (("2"
                                              (lemma
                                               "position_s_first_diff")
                                              (("2"
                                                (inst
                                                 -1
                                                 "s!1"
                                                 "t!1"
                                                 "p!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "comp" 3)
                                (("2"
                                  (replace -1 3 rl)
                                  (("2"
                                    (hide-all-but 3)
                                    (("2"
                                      (expand "ext")
                                      (("2"
                                        (typepred "x!1")
                                        (("2"
                                          (expand "V")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 -3 1)
                      (("2" (lemma "unifiable_implies_not_fail")
                        (("2" (inst -1 "s!1" "t!1")
                          (("2" (assert)
                            (("2" (replaces -3)
                              (("2"
                                (expand "unifiable")
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (inst 1 "rho!1")
                                    (("2"
                                      (expand* "member" "U")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (name-replace "p!1" "first_diff(s!1, t!1)" :hide?
                       nil)
                      (("3" (decompose-equality -2)
                        (("3" (inst -1 "x!1")
                          (("3" (lift-if)
                            (("3" (prop)
                              (("1"
                                (expand "comp" 3)
                                (("1"
                                  (replace -2 3 rl)
                                  (("1"
                                    (replace -1 3)
                                    (("1"
                                      (lemma
                                       "unifiable_terms_unifiable_args")
                                      (("1"
                                        (inst
                                         -1
                                         "rho!1"
                                         "s!1"
                                         "t!1"
                                         "p!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-1 -5 3))
                                            (("1"
                                              (expand*
                                               "member"
                                               "U"
                                               "unifier")
                                              (("1"
                                                (expand "ext" -1 2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-3 1))
                                          (("2"
                                            (rewrite
                                             "position_t_first_diff")
                                            (("2"
                                              (lemma
                                               "position_s_first_diff")
                                              (("2"
                                                (inst
                                                 -1
                                                 "s!1"
                                                 "t!1"
                                                 "p!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "comp" 4)
                                (("2"
                                  (replace -1 4 rl)
                                  (("2"
                                    (hide-all-but 4)
                                    (("2"
                                      (typepred "x!1")
                                      (("2"
                                        (expand "V")
                                        (("2"
                                          (expand "ext")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide -1 -3 1 2)
                      (("4" (lemma "unifiable_implies_not_fail")
                        (("4" (inst -1 "s!1" "t!1")
                          (("4" (assert)
                            (("4" (replaces -3)
                              (("4"
                                (expand "unifiable")
                                (("4"
                                  (hide -1)
                                  (("4"
                                    (inst 1 "rho!1")
                                    (("4"
                                      (expand* "member" "U")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide-all-but (-3 1 2))
                      (("5" (lemma "first_diff_unifiable_vars")
                        (("5"
                          (inst -1 "s!1" "t!1" "first_diff(s!1, t!1)")
                          (("5" (prop)
                            (("5" (hide 2 3)
                              (("5"
                                (expand* "member" "U" "unifiable")
                                (("5" (inst 1 "rho!1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifiable const-decl "bool" unification nil)
    (position type-eq-decl nil positions nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (unifier const-decl "bool" unification nil)
    (member const-decl "bool" sets nil)
    (ext def-decl "term" substitution nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (comp const-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil))
   shostak))
 (unifiable_preserves_unifiability 0
  (unifiable_preserves_unifiability-1 nil 3469363687
   ("" (skosimp)
    (("" (assert)
      (("" (prop)
        (("" (lemma "preserving_generality")
          (("" (expand "unifiable" -2)
            (("" (skosimp)
              (("" (inst -1 "sigma!1" "s!1" "t!1")
                (("" (expand* "member" "U")
                  (("" (assert)
                    (("" (skosimp)
                      (("" (expand "unifiable")
                        (("" (inst 1 "theta!1")
                          (("" (expand "unifier")
                            (("" (replaces -1)
                              ((""
                                (rewrite "ext_o")
                                ((""
                                  (expand "o")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (member const-decl "bool" sets nil)
    (ext_o formula-decl nil substitution nil)
    (unifier const-decl "bool" unification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (unifiable const-decl "bool" unification nil))
   shostak))
 (robinson_unification_algorithm_TCC1 0
  (robinson_unification_algorithm_TCC1-1 nil 3467989055
   ("" (skosimp)
    (("" (rewrite "finite_union")
      (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
        nil)
       ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil))
    nil)
   ((finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (robinson_unification_algorithm subtype
    "sets[(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)].union(subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].Vars(robinsonunification.s), subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].Vars(robinsonunification.t))"
    "finite_set[(V[variable, symbol, arity])]")))
 (robinson_unification_algorithm_TCC2 0
  (robinson_unification_algorithm_TCC2-1 nil 3467989055
   ("" (skosimp)
    (("" (rewrite "finite_union")
      (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
        nil)
       ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil))
    nil)
   ((finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (robinson_unification_algorithm subtype
    "sets[(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)].union(subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].Vars(robinsonunification.z`1), subterm[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].Vars(robinsonunification.z`2))"
    "finite_set[(V[variable, symbol, arity])]")))
 (robinson_unification_algorithm_TCC3 0
  (robinson_unification_algorithm_TCC3-1 nil 3467989055
   ("" (skosimp) (("" (rewrite "iden_subs") nil nil)) nil)
   ((iden_subs formula-decl nil substitution nil)) nil
   (robinson_unification_algorithm subtype
    "identity[(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)].identity"
    "Sub[variable, symbol, arity]")))
 (robinson_unification_algorithm_TCC4 0
  (robinson_unification_algorithm_TCC4-1 nil 3467989055
   ("" (skosimp*)
    (("" (lemma "termination_lemma")
      (("" (inst -1 "s!1" "t!1")
        (("" (assert) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) nil
   (robinson_unification_algorithm termination
    "robinsonunification.robinson_unification_algorithm(substitution[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].ext(robinsonunification.sig)(robinsonunification.s), substitution[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].ext(robinsonunification.sig)(robinsonunification.t))"
    "nil")))
 (robinson_unification_algorithm_TCC5 0
  (robinson_unification_algorithm_TCC5-1 nil 3467989055
   ("" (skosimp*) (("" (rewrite "subs_o") nil nil)) nil)
   ((subs_o formula-decl nil substitution nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil))
   nil
   (robinson_unification_algorithm subtype
    "substitution[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].comp(robinsonunification.sigma, robinsonunification.sig)"
    "Sub[variable, symbol, arity]")))
 (robinson_unification_algorithm_TCC6 0
  (robinson_unification_algorithm_TCC6-2 "" 3790333857
   ("" (skosimp*) nil nil) nil shostak
   (robinson_unification_algorithm subtype "robinsonunification.t"
    "{t: term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term | robinsonunification.s /= t}"))
  (robinson_unification_algorithm_TCC6-1 nil 3467989055
   ("" (skosimp*) (("" (rewrite "subs_o") nil nil)) nil) nil nil
   (robinson_unification_algorithm subtype "robinsonunification.t"
    "{t: term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term | robinsonunification.s /= t}")))
 (var_ext_term_exists_var_term 0
  (var_ext_term_exists_var_term-1 nil 3471813028
   ("" (induct "r")
    (("1" (skosimp*)
      (("1" (name-replace "y!1" "vars(vars1_var!1)" :hide? nil)
        (("1" (inst 1 "y!1")
          (("1" (expand "member")
            (("1" (split)
              (("1" (hide -)
                (("1" (expand "Vars" 1)
                  (("1" (inst 1 "empty_seq")
                    (("1" (expand "subtermOF")
                      (("1" (rewrite "empty_0") nil nil)) nil)
                     ("2" (reveal -1)
                      (("2" (expand "positionsOF")
                        (("2" (assert)
                          (("2" (expand "only_empty_seq")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "ext") (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (expand "V") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2"
        (name-replace "r!1" "app(app1_var!1, app2_var!1)" :hide? nil)
        (("2" (expand "member")
          (("2" (case "length(app2_var!1) = 0")
            (("1" (hide -3)
              (("1" (expand "ext")
                (("1" (assert)
                  (("1" (decompose-equality -2)
                    (("1" (assert)
                      (("1" (expand "Vars" -4)
                        (("1" (skosimp)
                          (("1" (case "p!1 = empty_seq")
                            (("1" (replace -1)
                              (("1"
                                (expand "subtermOF")
                                (("1"
                                  (rewrite "empty_0" -5)
                                  (("1"
                                    (typepred "x!1")
                                    (("1"
                                      (expand "V")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "p!1")
                              (("2"
                                (case
                                 "positionsOF(r!1) = only_empty_seq")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "only_empty_seq")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "positionsOF" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (case "EXISTS (i :  below[length(app2_var!1)]):
                         Vars(ext(sigma!1)(app2_var!1`seq(i)))(x!1)")
              (("1" (skosimp)
                (("1" (inst -3 "i!1")
                  (("1" (inst -3 "sigma!1" "x!1")
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (inst 2 "y!1")
                          (("1" (assert)
                            (("1" (hide -1 -4 -5)
                              (("1"
                                (expand "Vars")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst 2 "add_first(i!1+1, p!1)")
                                    (("1"
                                      (expand "subtermOF" 2)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand*
                                             "add_first"
                                             "insert?")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (rewrite
                                               "rest_add_first")
                                              (("2"
                                                (rewrite "first_add")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (decompose-equality
                                                     -1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i!1")
                                      (("2"
                                        (typepred "p!1")
                                        (("2"
                                          (expand "positionsOF" 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (decompose-equality -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand*
                                                   "union"
                                                   "IUnion"
                                                   "member")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (inst
                                                         2
                                                         "i!1 + 1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "catenate")
                                                            (("2"
                                                              (inst
                                                               2
                                                               "p!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2 3)
                (("2" (expand "ext" -2)
                  (("2" (assert)
                    (("2" (decompose-equality -1)
                      (("2" (assert)
                        (("2" (expand "finseq_appl")
                          (("2" (expand "Vars" -3)
                            (("2" (skosimp)
                              (("2"
                                (expand "subtermOF")
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (expand "V")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (inst 2 "first(p!1) - 1")
                                        (("1"
                                          (expand "Vars" 2)
                                          (("1"
                                            (inst 2 "rest(p!1)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "p!1")
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "(# length := 0,
                                   seq := (LAMBDA (x: below[0]): epsilon! (t: posnat): TRUE) #) = empty_seq")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "positionsOF")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "only_empty_seq")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand*
                                                                 "union"
                                                                 "IUnion"
                                                                 "member"
                                                                 "only_empty_seq")
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (expand*
                                                                 "union"
                                                                 "IUnion"
                                                                 "member"
                                                                 "only_empty_seq")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (lemma
                                                         "empty_0[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "(# length := 0,
                                seq := (LAMBDA (x: below[0]): epsilon! (t: posnat): TRUE) #)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "(# length := 0,
                                   seq := (LAMBDA (x: below[0]): epsilon! (t: posnat): TRUE) #) = empty_seq")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "positionsOF")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "only_empty_seq")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "only_empty_seq")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand*
                                                                 "union"
                                                                 "IUnion"
                                                                 "member"
                                                                 "only_empty_seq")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (lemma
                                                         "empty_0[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "(# length := 0,
                                seq := (LAMBDA (x: below[0]): epsilon! (t: posnat): TRUE) #)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (case
                                                     "x!2 = (# length := x!2`length,
                                   seq := LAMBDA (x: below[p!1`length - 1]): x!2`seq(x) #)")
                                                    (("1"
                                                      (replace -1 3 rl)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (decompose-equality)
                                                      (("1"
                                                        (decompose-equality)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (typepred "p!1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (catenate const-decl "positions" positions nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (insert? const-decl "finseq" seq_extras structures)
    (rest_add_first formula-decl nil seq_extras structures)
    (first_add formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_first const-decl "finseq" seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (only_empty_seq const-decl "positions" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (positions? type-eq-decl nil positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (vars adt-constructor-decl "[variable -> (vars?)]" term_adt nil)
    (term_induction formula-decl nil term_adt nil)
    (ext def-decl "term" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (member const-decl "bool" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil))
   shostak))
 (rob_uni_alg_dom_subset_union_vars 0
  (rob_uni_alg_dom_subset_union_vars-1 nil 3471781382
   ("" (measure-induct+ "Card(union(Vars(s), Vars(t)))" ("s" "t"))
    (("1" (case "x!1 = x!2")
      (("1" (hide -2)
        (("1" (expand "robinson_unification_algorithm")
          (("1" (assert)
            (("1" (expand* "subset?" "union" "member")
              (("1" (skosimp)
                (("1" (hide-all-but -3)
                  (("1" (expand "Dom")
                    (("1" (flatten)
                      (("1" (expand "identity")
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (name "p!1" "first_diff(x!1, x!2)")
        (("1" (name "sig!1" "link_of_frst_diff(x!1, x!2)")
          (("1"
            (name "sig!2"
                  "robinson_unification_algorithm(ext(sig!1)(x!1), ext(sig!1)(x!2))")
            (("1" (inst -4 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)")
              (("1" (lemma "termination_lemma")
                (("1" (inst -1 "x!1" "x!2")
                  (("1" (replace -3)
                    (("1" (assert)
                      (("1" (lemma "unifiable_implies_not_fail")
                        (("1" (inst -1 "x!1" "x!2")
                          (("1" (replace -4)
                            (("1" (assert)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma
                                   "unifiable_preserves_unifiability")
                                  (("1"
                                    (inst -1 "x!1" "x!2")
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (expand
                                             "robinson_unification_algorithm"
                                             3)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (case
                                                       "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))),
                             union(Vars(x!1), Vars(x!2)))")
                                                      (("1"
                                                        (replaces -2)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 -6 1))
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "x!3")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "x!3")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "link_of_frst_diff_s_is_subset_union")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "x!2")
                                                          (("2"
                                                            (replace
                                                             -5)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "link_of_frst_diff_t_is_subset_union")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!1"
                                                                   "x!2")
                                                                  (("2"
                                                                    (replace
                                                                     -6)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -2
                                                                          1))
                                                                        (("2"
                                                                          (expand
                                                                           "subset?")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "x!3")
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "x!3")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     3)
                                                                                    (("2"
                                                                                      (expand*
                                                                                       "union"
                                                                                       "member")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))),
                             union(Vars(x!1), Vars(x!2)))")
                                                      (("1"
                                                        (expand
                                                         "subset?"
                                                         2)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (lemma
                                                             "dom_o")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "sig!2"
                                                               "sig!1")
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!3")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "member"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "union"
                                                                         -1)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -2
                                                                              -8
                                                                              2))
                                                                            (("1"
                                                                              (expand
                                                                               "subset?")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "x!3")
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "x!3")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -5
                                                                             -8
                                                                             1
                                                                             4)
                                                                            (("2"
                                                                              (lemma
                                                                               "dom_link_of_frst_diff_is")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "p!1"
                                                                                 "x!1"
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand*
                                                                                         "restrict"
                                                                                         "singleton")
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             -2)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!3")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (iff)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand*
                                                                                                       "union"
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "Vars"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "p!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (decompose-equality
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!3")
                                                                                              (("1"
                                                                                                (iff)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand*
                                                                                                       "union"
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "Vars"
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             3
                                                                                                             "p!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-6
                                                                                                1))
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "position_t_first_diff")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!1"
                                                                                                   "x!2"
                                                                                                   "p!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "link_of_frst_diff_s_is_subset_union")
                                                        (("2"
                                                          (lemma
                                                           "link_of_frst_diff_t_is_subset_union")
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "x!1"
                                                             "x!2")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x!1"
                                                               "x!2")
                                                              (("2"
                                                                (replace
                                                                 -5)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -2
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "subset?")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "x!3")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x!3")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 3)
                                                                                (("2"
                                                                                  (expand*
                                                                                   "union"
                                                                                   "member")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom_o formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (position type-eq-decl nil positions nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (subset? const-decl "bool" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (rob_uni_alg_vran_subset_union 0
  (rob_uni_alg_vran_subset_union-1 nil 3471785783
   ("" (skosimp)
    ((""
      (name-replace "sig!1" "link_of_frst_diff(s!1, t!1)" :hide? nil)
      ((""
        (name-replace "sig!2"
         "robinson_unification_algorithm(ext(sig!1)(s!1), ext(sig!1)(t!1))"
         :hide? nil)
        (("" (assert)
          (("" (replace -1)
            (("" (prop)
              (("" (expand* "subset?" "union" "difference" "member")
                (("" (skosimp)
                  (("" (split)
                    (("1" (expand* "VRan" "IUnion")
                      (("1" (skosimp)
                        (("1" (expand "comp")
                          (("1" (lemma "dom_o")
                            (("1" (inst -1 "sig!2" "sig!1")
                              (("1"
                                (expand* "subset?" "union" "member")
                                (("1"
                                  (inst -1 "i!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split)
                                      (("1"
                                        (case "Dom(sig!1)(i!1)")
                                        (("1"
                                          (lemma
                                           "rob_uni_alg_dom_subset_union_vars")
                                          (("1"
                                            (inst
                                             -1
                                             "ext(sig!1)(s!1)"
                                             "ext(sig!1)(t!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (lemma
                                                   "unifiable_preserves_unifiability")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "s!1"
                                                     "t!1")
                                                    (("1"
                                                      (replace -6)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "subset?")
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "i!1")
                                                            (("1"
                                                              (expand*
                                                               "union"
                                                               "member")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (lemma
                                                                   "link_remove_x")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "i!1"
                                                                     "s!1"
                                                                     "t!1")
                                                                    (("1"
                                                                      (replace
                                                                       -7)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "unifiable_implies_not_fail")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "s!1"
                                                                             "t!1")
                                                                            (("1"
                                                                              (replace
                                                                               -8)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "link_remove_x")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "i!1"
                                                                     "s!1"
                                                                     "t!1")
                                                                    (("2"
                                                                      (replace
                                                                       -7)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "unifiable_implies_not_fail")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "s!1"
                                                                             "t!1")
                                                                            (("2"
                                                                              (replace
                                                                               -8)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "Dom" 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (typepred "i!1")
                                                (("2"
                                                  (expand "V")
                                                  (("2"
                                                    (expand "ext" -8)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide-all-but
                                                         (-4 -8 2))
                                                        (("2"
                                                          (inst
                                                           1
                                                           "i!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "NOT member(x!1, Vars(sig!1(i!1)))")
                                        (("1"
                                          (lemma
                                           "var_ext_term_exists_var_term")
                                          (("1"
                                            (inst
                                             -1
                                             "sig!1(i!1)"
                                             "sig!2"
                                             "x!1")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (typepred "y!1")
                                                  (("1"
                                                    (case
                                                     "Dom(sig!2)(y!1)")
                                                    (("1"
                                                      (inst 3 "y!1")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "Dom" 1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (expand
                                                             "Vars"
                                                             -4)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (case
                                                                 "p!1 = empty_seq")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "subtermOF")
                                                                    (("1"
                                                                      (rewrite
                                                                       "empty_0"
                                                                       -5)
                                                                      (("1"
                                                                        (replace
                                                                         -5
                                                                         -4)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "p!1")
                                                                  (("2"
                                                                    (case
                                                                     "positionsOF(y!1) = only_empty_seq")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         "only_empty_seq")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-3
                                                                        1))
                                                                      (("2"
                                                                        (expand*
                                                                         "V"
                                                                         "positionsOF")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst 1 "i!1")
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand* "VRan" "IUnion")
                      (("2" (skosimp)
                        (("2" (lemma "dom_o")
                          (("2" (inst -1 "sig!2" "sig!1")
                            (("2" (expand* "subset?" "union" "member")
                              (("2"
                                (inst -1 "i!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split)
                                    (("1"
                                      (case "NOT Dom(sig!1)(i!1)")
                                      (("1"
                                        (expand "Dom" 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "comp")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide-all-but
                                                 (-2 -7 1))
                                                (("1"
                                                  (typepred "i!1")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (expand*
                                                       "V"
                                                       "ext")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "i!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "rob_uni_alg_dom_subset_union_vars")
                                        (("2"
                                          (inst
                                           -1
                                           "ext(sig!1)(s!1)"
                                           "ext(sig!1)(t!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -5)
                                              (("2"
                                                (lemma
                                                 "unifiable_preserves_unifiability")
                                                (("2"
                                                  (inst -1 "s!1" "t!1")
                                                  (("2"
                                                    (replace -7)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand*
                                                         "subset?"
                                                         "union"
                                                         "member")
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "i!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "link_remove_x")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "i!1"
                                                                 "s!1"
                                                                 "t!1")
                                                                (("2"
                                                                  (replace
                                                                   -8)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "unifiable_implies_not_fail")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "s!1"
                                                                         "t!1")
                                                                        (("2"
                                                                          (replace
                                                                           -9)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (prop)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "var_ext_term_exists_var_term")
                                      (("2"
                                        (expand "comp" -7)
                                        (("2"
                                          (inst
                                           -1
                                           "sig!1(i!1)"
                                           "sig!2"
                                           "x!1")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (case
                                                   "Dom(sig!2)(y!1)")
                                                  (("1"
                                                    (inst 1 "y!1")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "Dom" 1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (replace -1 -3)
                                                        (("2"
                                                          (expand
                                                           "Vars"
                                                           -3)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (case
                                                               "p!1 = empty_seq")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "subtermOF")
                                                                  (("1"
                                                                    (rewrite
                                                                     "empty_0"
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       "Dom"
                                                                       -6)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "p!1")
                                                                (("2"
                                                                  (case
                                                                   "positionsOF(y!1) = only_empty_seq")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "only_empty_seq")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "y!1")
                                                                      (("2"
                                                                        (expand*
                                                                         "V"
                                                                         "positionsOF")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (comp const-decl "term" substitution nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (only_empty_seq const-decl "positions" positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (dom_o formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (ext def-decl "term" substitution nil))
   shostak))
 (rob_uni_alg_dom_ran_disjoint 0
  (rob_uni_alg_dom_ran_disjoint-1 nil 3469797806
   ("" (measure-induct+ "Card(union(Vars(s), Vars(t)))" ("s" "t"))
    (("1" (case "x!1 = x!2")
      (("1" (hide -2)
        (("1" (expand "subset?")
          (("1" (skosimp)
            (("1" (expand "robinson_unification_algorithm")
              (("1" (assert)
                (("1" (hide-all-but -3)
                  (("1" (expand* "member" "VRan" "IUnion")
                    (("1" (skosimp)
                      (("1" (typepred "i!1")
                        (("1" (hide -1 -3)
                          (("1" (expand* "Dom" "identity") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (name "sig!1" "link_of_frst_diff(x!1, x!2)")
        (("1" (name "p!1" "first_diff(x!1, x!2)")
          (("1" (inst -3 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)")
            (("1" (lemma "termination_lemma")
              (("1" (inst -1 "x!1" "x!2")
                (("1" (replace -3)
                  (("1" (assert)
                    (("1" (lemma "unifiable_implies_not_fail")
                      (("1" (inst -1 "x!1" "x!2")
                        (("1" (replace -4)
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1"
                                (lemma
                                 "unifiable_preserves_unifiability")
                                (("1"
                                  (inst -1 "x!1" "x!2")
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (name-replace
                                         "sig!2"
                                         "robinson_unification_algorithm(ext(sig!1)(x!1), ext(sig!1)(x!2))"
                                         :hide?
                                         nil)
                                        (("1"
                                          (expand
                                           "robinson_unification_algorithm"
                                           3)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand*
                                                     "subset?"
                                                     "difference"
                                                     "union"
                                                     "member")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst -7 "x!3")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (lemma
                                                               "link_of_frst_diff_s_is_subset_union")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "x!1"
                                                                 "x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (expand*
                                                                       "subset?"
                                                                       "union"
                                                                       "member")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x!3")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "link_of_frst_diff_t_is_subset_union")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x!1"
                                                                 "x!2")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (expand*
                                                                       "subset?"
                                                                       "union"
                                                                       "member")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x!3")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand*
                                                     "subset?"
                                                     "difference"
                                                     "union"
                                                     "member")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (lemma
                                                         "rob_uni_alg_vran_subset_union")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "x!2")
                                                          (("2"
                                                            (replace
                                                             -6)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -3)
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "x!3")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (expand*
                                                                         "difference"
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "x!3")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -7
                                                                                    1
                                                                                    4))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "link_of_frst_diff_s_is_subset_union")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1"
                                                                                       "x!2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "subset?")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!3")
                                                                                              (("1"
                                                                                                (expand*
                                                                                                 "union"
                                                                                                 "member")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -7
                                                                                    2
                                                                                    4))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "link_of_frst_diff_t_is_subset_union")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1"
                                                                                       "x!2")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "subset?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!3")
                                                                                              (("2"
                                                                                                (expand*
                                                                                                 "union"
                                                                                                 "member")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -8
                                                                             "x!3")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "dom_o")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "sig!2"
                                                                                     "sig!1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "subset?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!3")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "union")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -2
                                                                                                    -9
                                                                                                    2
                                                                                                    3))
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "link_remove_x")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x!3"
                                                                                                       "x!1"
                                                                                                       "x!2")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "member")
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "dom_o")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "sig!2"
                                                                                     "sig!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "subset?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!3")
                                                                                        (("2"
                                                                                          (expand*
                                                                                           "union"
                                                                                           "member")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "link_remove_x")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "x!1"
                                                                                                 "x!2")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -10)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (lemma
                                                                             "dom_link_of_frst_diff_is")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "p!1"
                                                                               "x!1"
                                                                               "x!2")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("3"
                                                                                    (expand*
                                                                                     "restrict"
                                                                                     "singleton")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "VRan"
                                                                                       -2)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "IUnion")
                                                                                        (("3"
                                                                                          (skosimp)
                                                                                          (("3"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               -2)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "i!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -8
                                                                                                     -3
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "link_of_frst_diff"
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -7)
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "Vars"
                                                                                                             (-1
                                                                                                              3))
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "p!2")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "pos_o_term")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "p!1"
                                                                                                                     "p!2"
                                                                                                                     "x!2")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "position_t_first_diff")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "x!1"
                                                                                                                           "x!2"
                                                                                                                           "p!1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "pos_subterm")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "p!1"
                                                                                                                                 "p!2"
                                                                                                                                 "x!2")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     -5
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-5
                                                                                                                                        3))
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "p!1 o p!2")
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "link_of_frst_diff"
                                                                                                             -9)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (decompose-equality
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "i!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -7
                                                                                                     -2
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "link_of_frst_diff"
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -6)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "vars?(subtermOF(x!2, p!1))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "Vars"
                                                                                                                 (-1
                                                                                                                  3))
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "p!2")
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "pos_o_term")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "p!1"
                                                                                                                         "p!2"
                                                                                                                         "x!1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "position_s_first_diff")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "x!1"
                                                                                                                               "x!2"
                                                                                                                               "p!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "pos_subterm")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "p!1"
                                                                                                                                     "p!2"
                                                                                                                                     "x!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         -5
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (hide-all-but
                                                                                                                                           (-5
                                                                                                                                            3))
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             1
                                                                                                                                             "p!1 o p!2")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "link_of_frst_diff"
                                                                                                                 -9)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-6
                                                                                                              -9
                                                                                                              1
                                                                                                              2))
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "first_diff_unifiable_vars")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "x!1"
                                                                                                                 "x!2"
                                                                                                                 "p!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-8
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "position_t_first_diff")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x!1"
                                                                                                     "x!2"
                                                                                                     "p!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (lemma
                                                                             "dom_o")
                                                                            (("4"
                                                                              (inst
                                                                               -1
                                                                               "sig!2"
                                                                               "sig!1")
                                                                              (("4"
                                                                                (expand
                                                                                 "subset?")
                                                                                (("4"
                                                                                  (inst
                                                                                   -1
                                                                                   "x!3")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (expand*
                                                                                         "union"
                                                                                         "member")
                                                                                        (("4"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -3
                                                                                            -8
                                                                                            3
                                                                                            4))
                                                                                          (("4"
                                                                                            (lemma
                                                                                             "dom_ran_link_disjoint")
                                                                                            (("4"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!1"
                                                                                               "x!2")
                                                                                              (("4"
                                                                                                (replace
                                                                                                 -4)
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  (("4"
                                                                                                    (expand*
                                                                                                     "VRan"
                                                                                                     "IUnion")
                                                                                                    (("4"
                                                                                                      (skosimp)
                                                                                                      (("4"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "x!3"
                                                                                                         "sig!1(i!1)")
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-2
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "member")
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "Ran")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "i!1")
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "i!1")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (member const-decl "bool" sets nil)
    (position type-eq-decl nil positions nil)
    (dom_o formula-decl nil substitution nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (pos_o_term formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (singleton const-decl "(singleton?)" sets nil)
    (Ran const-decl "set[term[variable, symbol, arity]]" substitution
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ext def-decl "term" substitution nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (difference const-decl "set" sets nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (subset? const-decl "bool" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (robinson_unification_algorithm_fails_iff_non_unifiable 0
  (robinson_unification_algorithm_fails_iff_non_unifiable-1 nil
   3475672712
   ("" (measure-induct+ "Card(union(Vars(s), Vars(t)))" ("s" "t"))
    (("1" (prop)
      (("1" (expand "robinson_unification_algorithm" 2)
        (("1"
          (name-replace "sig!1" "link_of_frst_diff(x!1, x!2)" :hide?
           nil)
          (("1"
            (name-replace "sig!2"
             "robinson_unification_algorithm(ext(sig!1)(x!1),ext(sig!1)(x!2))"
             :hide? nil)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (hide-all-but (-1 2))
                  (("1" (expand "unifiable")
                    (("1" (inst 1 "identity")
                      (("1" (expand "unifier") (("1" (grind) nil nil))
                        nil)
                       ("2" (expand "Sub?")
                        (("2" (case-replace "Dom(identity) = emptyset")
                          (("1" (hide -) (("1" (grind) nil nil)) nil)
                           ("2" (hide -1 2)
                            (("2" (expand* "Dom" "emptyset")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -3 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)")
                  (("2" (lemma "termination_lemma")
                    (("2" (inst -1 "x!1" "x!2")
                      (("2" (replace -3)
                        (("2" (assert)
                          (("2" (assert)
                            (("2" (hide-all-but (-4 5))
                              (("2"
                                (expand* "unifiable" "unifier")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (inst 1 "comp(sigma!1, sig!1)")
                                    (("1"
                                      (rewrite "ext_o")
                                      (("1"
                                        (expand "o")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (rewrite "subs_o") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 3)
            (("2" (flatten)
              (("2" (expand "unifiable")
                (("2" (inst 1 "identity")
                  (("1" (expand "unifier") (("1" (grind) nil nil)) nil)
                   ("2" (hide -1)
                    (("2" (expand "Sub?")
                      (("2" (case-replace "Dom(identity) = emptyset")
                        (("1" (hide -1) (("1" (grind) nil nil)) nil)
                         ("2" (hide 2)
                          (("2" (expand* "Dom" "emptyset")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -3)
        (("2" (lemma "rob_uni_alg_dom_ran_disjoint")
          (("2" (inst -1 "x!1" "x!2")
            (("2" (assert)
              (("2"
                (name-replace "sig!1"
                 "robinson_unification_algorithm(x!1, x!2)")
                (("2" (decompose-equality -2)
                  (("2"
                    (expand* "subset?" "difference" "union" "member")
                    (("2" (inst -2 "xx")
                      (("2" (inst -1 "xx")
                        (("2" (prop)
                          (("1" (expand "fail")
                            (("1" (expand "Dom")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -1 -4)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (typepred "xx")
                                      (("1"
                                        (expand "V")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "fail")
                            (("2" (expand "Dom")
                              (("2"
                                (flatten)
                                (("2"
                                  (hide -1 -4)
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (typepred "xx")
                                      (("2"
                                        (expand "V")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "VRan")
                            (("3" (expand "IUnion")
                              (("3"
                                (inst 1 "xx")
                                (("1"
                                  (expand "fail")
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "Vars")
                                      (("1"
                                        (inst 1 "#(1)")
                                        (("1"
                                          (expand "subtermOF")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (hide -2 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (hide 1)
                                                    (("2"
                                                      (case
                                                       "args(app(ff,  #(xx)))`seq(first( #(1)) - 1) = xx")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (case
                                                           "rest( #(1)) = empty_seq")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "subtermOF")
                                                              (("1"
                                                                (rewrite
                                                                 "empty_0")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (expand
                                                           "first")
                                                          (("3"
                                                            (expand
                                                             "finseq_appl")
                                                            (("3"
                                                              (prop)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "#")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "positionsOF")
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (decompose-equality -2)
                                                (("2"
                                                  (hide -1 -2 -5 +)
                                                  (("2"
                                                    (expand "#")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide -1 1)
                                                (("3"
                                                  (expand*
                                                   "union"
                                                   "IUnion"
                                                   "member"
                                                   "only_empty_seq")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide 1)
                                                      (("3"
                                                        (inst 1 "1")
                                                        (("1"
                                                          (expand
                                                           "catenate")
                                                          (("1"
                                                            (inst
                                                             1
                                                             "empty_seq")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (expand
                                                                     "positionsOF")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (expand*
                                                                         "union"
                                                                         "IUnion"
                                                                         "member"
                                                                         "only_empty_seq")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (reveal -1)
                                                          (("2"
                                                            (decompose-equality
                                                             -1)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (expand
                                                                 "#")
                                                                (("2"
                                                                  (decompose-equality
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -2)
                                  (("2"
                                    (expand "Dom")
                                    (("2"
                                      (expand "fail")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (typepred "xx")
                                            (("2"
                                              (expand "V")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (subs_o formula-decl nil substitution nil)
    (ext_o formula-decl nil substitution nil)
    (comp const-decl "term" substitution nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (unifier const-decl "bool" unification nil)
    (emptyset const-decl "set" sets nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (ext def-decl "term" substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (only_empty_seq const-decl "positions" positions nil)
    (catenate const-decl "positions" positions nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (subtermOF def-decl "term" subterm nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (positions? type-eq-decl nil positions nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (robinson_unification_algorithm_gives_unifier 0
  (robinson_unification_algorithm_gives_unifier-1 nil 3468663996
   ("" (measure-induct+ "Card(union(Vars(s), Vars(t)))" ("s" "t"))
    (("1" (case "x!1 = x!2")
      (("1" (hide -2)
        (("1" (expand "robinson_unification_algorithm")
          (("1" (assert)
            (("1" (prop)
              (("1" (expand* "member" "U" "unifier")
                (("1" (assert) nil nil)) nil)
               ("2" (hide -1)
                (("2" (expand "unifiable")
                  (("2" (inst 1 "identity")
                    (("1" (expand "unifier") (("1" (assert) nil nil))
                      nil)
                     ("2" (rewrite "iden_subs") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (prop)
        (("1"
          (inst -2 "ext(link_of_frst_diff(x!1, x!2))(x!1)"
           "ext(link_of_frst_diff(x!1, x!2))(x!2)")
          (("1" (lemma "termination_lemma")
            (("1" (inst -1 "x!1" "x!2")
              (("1" (assert)
                (("1" (lemma "unifiable_implies_not_fail")
                  (("1" (inst -1 "x!1" "x!2")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1"
                          (lemma "unifiable_preserves_unifiability")
                          (("1" (inst -1 "x!1" "x!2")
                            (("1" (assert)
                              (("1"
                                (hide -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "unifier_o")
                                    (("1"
                                      (inst
                                       -1
                                       "x!1"
                                       "robinson_unification_algorithm(ext(link_of_frst_diff(x!1, x!2))(x!1),
                                                                                              ext(link_of_frst_diff(x!1, x!2))(x!2))"
                                       "x!2"
                                       "link_of_frst_diff(x!1, x!2)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (expand
                                             "robinson_unification_algorithm"
                                             2)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1"
                                                    (reveal -5)
                                                    (("1"
                                                      (lemma
                                                       "robinson_unification_algorithm_fails_iff_non_unifiable")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (hide -2 2)
          (("2" (expand* "member" "U" "unifiable")
            (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("3" (rewrite "finite_union")
      (("1" (rewrite "vars_of_term_finite") nil nil)
       ("2" (rewrite "vars_of_term_finite") nil nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (unifier const-decl "bool" unification nil)
    (iden_subs formula-decl nil substitution nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (ext def-decl "term" substitution nil)
    (unifier_o formula-decl nil unification nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (member const-decl "bool" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (robinson_unification_algorithm_gives_mg_subs 0
  (robinson_unification_algorithm_gives_mg_subs-1 nil 3468758236
   ("" (measure-induct+ "Card(union(Vars(s), Vars(t)))" ("s" "t"))
    (("1" (case "x!1 = x!2")
      (("1" (hide -2)
        (("1" (skosimp)
          (("1" (expand "robinson_unification_algorithm")
            (("1" (assert)
              (("1" (expand "<=")
                (("1" (inst?)
                  (("1" (rewrite "subs_o_identity") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2"
          (inst -1 "ext(link_of_frst_diff(x!1, x!2))(x!1)"
           "ext(link_of_frst_diff(x!1, x!2))(x!2)")
          (("1" (lemma "preserving_generality")
            (("1" (inst -1 "rho!1" "x!1" "x!2")
              (("1" (assert)
                (("1" (skosimp)
                  (("1"
                    (name-replace "sig!1" "link_of_frst_diff(x!1, x!2)"
                     :hide? nil)
                    (("1" (inst -3 "theta!1")
                      (("1" (lemma "termination_lemma")
                        (("1" (inst -1 "x!1" "x!2")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "<=")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst 2 "tau!1")
                                          (("1"
                                            (expand
                                             "robinson_unification_algorithm"
                                             2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     "unifiable_implies_not_fail")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide-all-but
                                                             (-5 1))
                                                            (("1"
                                                              (expand*
                                                               "member"
                                                               "U")
                                                              (("1"
                                                                (expand
                                                                 "unifiable")
                                                                (("1"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "robinson_unification_algorithm_fails_iff_non_unifiable")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (replace
                                                           -4
                                                           1)
                                                          (("2"
                                                            (hide-all-but
                                                             (-5 -6 1))
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (expand*
                                                                 "member"
                                                                 "U")
                                                                (("2"
                                                                  (expand
                                                                   "unifiable")
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "theta!1")
                                                                    (("2"
                                                                      (expand
                                                                       "unifier")
                                                                      (("2"
                                                                        (rewrite
                                                                         "ext_o")
                                                                        (("2"
                                                                          (expand
                                                                           "o")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (replace -2 2)
                                                    (("3"
                                                      (hide-all-but
                                                       (-1 -3 2))
                                                      (("3"
                                                        (replaces -1)
                                                        (("3"
                                                          (rewrite
                                                           "o_ass")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 2 3)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (expand* "member" "U")
                                          (("2"
                                            (expand "unifier")
                                            (("2"
                                              (rewrite "ext_o")
                                              (("2"
                                                (expand "o")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "unifiable_implies_not_fail")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide-all-but (-5 1))
                                        (("2"
                                          (expand*
                                           "member"
                                           "U"
                                           "unifiable")
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide -1 2)
      (("2" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (subs_o_identity formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (unifier const-decl "bool" unification nil)
    (ext_o formula-decl nil substitution nil)
    (o_ass formula-decl nil substitution nil)
    (<= const-decl "bool" unification nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (member const-decl "bool" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (completeness_robinson_unification_algorithm 0
  (completeness_robinson_unification_algorithm-1 nil 3475672917
   ("" (skeep)
    (("" (ground)
      (("1" (expand "mgu")
        (("1" (rewrite "robinson_unification_algorithm_gives_unifier")
          (("1" (assert)
            (("1" (skeep)
              (("1"
                (rewrite
                 "robinson_unification_algorithm_gives_mg_subs")
                nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (lemma
         "robinson_unification_algorithm_fails_iff_non_unifiable")
        (("2" (inst -1 "s" "t") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (mgu const-decl "bool" unification nil))
   shostak)))