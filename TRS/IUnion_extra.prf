(IUnion_extra
 (upto?_TCC1 0
  (upto?_TCC1-1 nil 3415314220 ("" (subtype-tcc) nil nil) nil nil
   (upto? subtype "IUnion_extra.n"
          "IUnion_extra.upto?(IUnion_extra.n)")))
 (disjoint_subset 0
  (disjoint_subset-1 nil 3415314271
   ("" (skosimp*)
    (("" (expand* "disjoint?" "empty?" "intersection")
      (("" (skeep)
        (("" (inst?)
          (("" (expand* "subset?" "member")
            (("" (inst?) (("" (inst?) (("" (prop) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (disjoint_commute 0
  (disjoint_commute-1 nil 3415314299
   ("" (skeep)
    (("" (expand* "disjoint?" "empty?" "intersection")
      (("" (skosimp*)
        (("" (inst?) (("" (expand "member") (("" (prop) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (IUnion_of_finite_is_finite 0
  (IUnion_of_finite_is_finite-1 nil 3415314322
   ("" (induct "n")
    (("1" (typepred "n!1") (("1" (propax) nil nil)) nil)
     ("2" (assert) nil nil)
     ("3" (skosimp*)
      (("3" (case "j!1 = 0")
        (("1" (hide -2)
          (("1" (expand "IUnion")
            (("1" (inst -3 "1")
              (("1"
                (case-replace
                 "{x: T | EXISTS (i_1: upto?(1 + j!1)): f!1(i_1)(x)} = f!1(1)"
                 :hide? T)
                (("1" (hide 2)
                  (("1" (decompose-equality 1)
                    (("1" (iff)
                      (("1" (prop)
                        (("1" (skosimp*)
                          (("1" (typepred "i!1")
                            (("1" (replaces -4)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst 1 "1") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2"
            (inst -1
             "restrict[upto?(1 + j!1), upto?(j!1), set[T]](f!1)")
            (("2" (prop)
              (("1" (expand "restrict")
                (("1"
                  (case-replace
                   "IUnion(LAMBDA (i: upto?(1 + j!1)): f!1(i)) = union(f!1(j!1 + 1),IUnion(LAMBDA (i: upto?(j!1)): f!1(i)))"
                   :hide? T)
                  (("1" (inst -3 "j!1 + 1")
                    (("1" (rewrite "finite_union" 2) nil nil)) nil)
                   ("2" (hide (-1 -3 3))
                    (("2" (decompose-equality 1)
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (expand "IUnion" -1)
                            (("1" (skosimp*)
                              (("1"
                                (expand* "union" "member")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case-replace "i!1 = 1 + j!1")
                                    (("1"
                                      (expand "IUnion")
                                      (("1"
                                        (inst 3 "i!1")
                                        (("1"
                                          (typepred "i!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand* "union" "member")
                            (("2" (prop)
                              (("1"
                                (expand "IUnion")
                                (("1" (inst 1 "1 + j!1") nil nil))
                                nil)
                               ("2"
                                (expand "IUnion")
                                (("2"
                                  (skosimp*)
                                  (("2" (inst 1 "i!1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (expand "restrict")
                  (("2" (inst -2 "i!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (IUnion_of_finite_is_finite1 0
  (IUnion_of_finite_is_finite1-1 nil 3415319375
   ("" (induct "n")
    (("1" (typepred "n!1") (("1" (propax) nil nil)) nil)
     ("2" (assert) nil nil)
     ("3" (skosimp*)
      (("3" (case "j!1 = 0")
        (("1" (hide -2)
          (("1" (expand "IUnion")
            (("1" (inst -3 "0")
              (("1"
                (case-replace
                 "{x: T | EXISTS (i_1: below[1 + j!1]): f!1(i_1)(x)} = f!1(0)"
                 :hide? T)
                (("1" (hide 2)
                  (("1" (decompose-equality 1)
                    (("1" (iff)
                      (("1" (prop)
                        (("1" (skosimp*)
                          (("1" (typepred "i!1")
                            (("1" (replaces -3)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst 1 "0") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2"
            (inst -1
             "restrict[below[1 + j!1], below[j!1], set[T]](f!1)")
            (("2" (prop)
              (("1" (expand "restrict")
                (("1"
                  (case-replace
                   "IUnion(LAMBDA (i: below[1 + j!1]): f!1(i)) = union(f!1(j!1),IUnion(LAMBDA (i: below[j!1]): f!1(i)))"
                   :hide? T)
                  (("1" (inst -3 "j!1")
                    (("1" (rewrite "finite_union" 2) nil nil)) nil)
                   ("2" (hide (-1 -3 3))
                    (("2" (decompose-equality 1)
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (expand "IUnion" -1)
                            (("1" (skosimp*)
                              (("1"
                                (expand* "union" "member")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case-replace "i!1 = j!1")
                                    (("1"
                                      (expand "IUnion")
                                      (("1"
                                        (inst 3 "i!1")
                                        (("1"
                                          (typepred "i!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand* "union" "member")
                            (("2" (prop)
                              (("1"
                                (expand "IUnion")
                                (("1" (inst 1 "j!1") nil nil))
                                nil)
                               ("2"
                                (expand "IUnion")
                                (("2"
                                  (skosimp*)
                                  (("2" (inst 1 "i!1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (expand "restrict")
                  (("2" (inst -2 "i!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))