(dependency_pairs
 (IMP_innermost_reduction_TCC1 0
  (IMP_innermost_reduction_TCC1-1 nil 3781542044
   ("" (rewrite "var_countable") nil nil)
   ((var_countable formula-decl nil dependency_pairs nil)) nil
   (IMP_innermost_reduction assuming
    "innermost_reduction[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].innermost_reduction"
    "var_countable: ASSUMPTION countability[term_adt[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].term].is_countably_infinite(variables_term[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].V)")))
 (rule_and_pos_from_dp_TCC1 0
  (rule_and_pos_from_dp_TCC1-2 nil 3761499821
   ("" (skeep*)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (typepred "dp")
          (("" (expand "dep_pair?")
            (("" (flatten)
              (("" (skeep*)
                (("" (inst -6 "(e,p)")
                  (("" (expand "member") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (dep_pair type-eq-decl nil dependency_pairs nil)
    (dep_pair? const-decl "bool" dependency_pairs nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" dependency_pairs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil dependency_pairs nil)
    (variable formal-nonempty-type-decl nil dependency_pairs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (rhs const-decl "term" rewrite_rules nil)
    (positions? type-eq-decl nil positions nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (rule_and_pos_from_dp subtype
    "{(e: rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].rewrite_rule, p: positions[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].position) | booleans.AND(sets[rewrite_rule[variable, symbol, arity]].member(e, dependency_pairs.E), booleans.AND(rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].lhs(e) = dependency_pairs.dp`1, booleans.AND(positions[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].positionsOF(rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].rhs(e))(p), subterm[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].subtermOF(rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].rhs(e), p) = dependency_pairs.dp`2)))}"
    "(sets[[rewrite_rule[variable, symbol, arity], position[variable, symbol, arity]]].nonempty?)"))
  (rule_and_pos_from_dp_TCC1-1 nil 3761499258
   ("" (subtype-tcc) nil nil) nil nil
   (rule_and_pos_from_dp subtype
    "{(e: rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].rewrite_rule, p: positions[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].position) | booleans.AND(sets[rewrite_rule[variable, symbol, arity]].member(e, dependency_pairs.E), booleans.AND(rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].lhs(e) = dependency_pairs.dp`1, booleans.AND(positions[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].positionsOF(rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].rhs(e))(p), subterm[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].subtermOF(rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].rhs(e), p) = dependency_pairs.dp`2)))}"
    "(sets[[rewrite_rule[variable, symbol, arity], position[variable, symbol, arity]]].nonempty?)")))
 (term_pos_dps_alt_TCC1 0
  (term_pos_dps_alt_TCC1-2 nil 3761499967
   ("" (skeep*)
    (("" (typepred "dps(0)")
      (("" (expand "dep_pair_alt?")
        (("" (flatten)
          (("" (lemma "ext_preserv_pos")
            ((""
              (inst -1 "dps(0)`2"
               "rhs[variable, symbol, arity](dps(0)`1)" "sigmas(i)")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (dep_pair_alt type-eq-decl nil dependency_pairs nil)
    (dep_pair_alt? const-decl "bool" dependency_pairs nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" dependency_pairs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil dependency_pairs nil)
    (variable formal-nonempty-type-decl nil dependency_pairs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rhs const-decl "term" rewrite_rules nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (term_pos_dps_alt subtype
    "(dependency_pairs.delta(rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].rhs(dependency_pairs.dps(0)`1)), dependency_pairs.dps(0)`2)"
    "{(t, p) | positions[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].positionsOF(dependency_pairs.t)(dependency_pairs.p)}"))
  (term_pos_dps_alt_TCC1-1 nil 3761499258 ("" (subtype-tcc) nil nil)
   nil nil
   (term_pos_dps_alt subtype
    "(dependency_pairs.delta(rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].rhs(dependency_pairs.dps(0)`1)), dependency_pairs.dps(0)`2)"
    "{(t, p) | positions[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].positionsOF(dependency_pairs.t)(dependency_pairs.p)}")))
 (term_pos_dps_alt_TCC2 0
  (term_pos_dps_alt_TCC2-1 nil 3761499258 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (term_pos_dps_alt subtype "(number_fields.-)(dependency_pairs.i, 1)"
    "nat")))
 (term_pos_dps_alt_TCC3 0
  (term_pos_dps_alt_TCC3-1 nil 3761499258
   ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (term_pos_dps_alt termination
    "dependency_pairs.term_pos_dps_alt(dependency_pairs.E)(dependency_pairs.dps, dependency_pairs.sigmas, (number_fields.-)(dependency_pairs.i, 1))"
    "nil")))
 (term_pos_dps_alt_TCC4 0
  (term_pos_dps_alt_TCC4-1 nil 3761499258 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (term_pos_dps_alt subtype "dependency_pairs.prevPos"
    "positions[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].positions?(dependency_pairs.prevCont)")))
 (term_pos_dps_alt_TCC5 0
  (term_pos_dps_alt_TCC5-2 nil 3761500019
   ("" (skeep*)
    (("" (replaces -1)
      (("" (replaces -1)
        (("" (replaces -1)
          (("" (typepred "dps(i)")
            (("" (expand "dep_pair_alt?")
              (("" (flatten)
                (("" (typepred "v(E)(dps, sigmas, i - 1)")
                  (("1" (rewrite "replace_compose_pos")
                    (("1" (hide -1 3)
                      (("1" (expand "defined?")
                        (("1" (skeep*)
                          (("1" (rewrite "ext_preserv_pos") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (defined? const-decl "bool" rewrite_rules nil)
    (replace_compose_pos formula-decl nil replacement nil)
    (ext def-decl "term" substitution nil)
    (rhs const-decl "term" rewrite_rules nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (variable formal-nonempty-type-decl nil dependency_pairs nil)
    (symbol formal-nonempty-type-decl nil dependency_pairs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" dependency_pairs nil)
    (term type-decl nil term_adt nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (dep_pair_alt? const-decl "bool" dependency_pairs nil)
    (dep_pair_alt type-eq-decl nil dependency_pairs nil)
    (sequence type-eq-decl nil sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (term_pos_dps_alt subtype
    "(replacement[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].replaceTerm(dependency_pairs.prevCont, dependency_pairs.delta(rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].rhs(dependency_pairs.dps(dependency_pairs.i)`1)), dependency_pairs.prevPos), finite_sequences[posnat].o(dependency_pairs.prevPos, dependency_pairs.dps(dependency_pairs.i)`2))"
    "{(t, p) | positions[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].positionsOF(dependency_pairs.t)(dependency_pairs.p)}"))
  (term_pos_dps_alt_TCC5-1 nil 3761499258 ("" (subtype-tcc) nil nil)
   nil nil
   (term_pos_dps_alt subtype
    "(replacement[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].replaceTerm(dependency_pairs.prevCont, dependency_pairs.delta(rewrite_rules[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].rhs(dependency_pairs.dps(dependency_pairs.i)`1)), dependency_pairs.prevPos), finite_sequences[posnat].o(dependency_pairs.prevPos, dependency_pairs.dps(dependency_pairs.i)`2))"
    "{(t, p) | positions[dependency_pairs.variable, dependency_pairs.symbol, dependency_pairs.arity].positionsOF(dependency_pairs.t)(dependency_pairs.p)}")))
 (args_of_pos_seq_TCC1 0
  (args_of_pos_seq_TCC1-2 nil 3761500130
   ("" (skeep :preds? t)
    (("" (inst?) (("" (rewrite "empty_0") nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" dependency_pairs nil)
    (symbol formal-nonempty-type-decl nil dependency_pairs nil)
    (variable formal-nonempty-type-decl nil dependency_pairs nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (args_of_pos_seq subtype "dependency_pairs.seqp(dependency_pairs.n)"
    "not_empty_seq[posnat]"))
  (args_of_pos_seq_TCC1-1 nil 3761499258 ("" (subtype-tcc) nil nil) nil
   nil
   (args_of_pos_seq subtype "dependency_pairs.seqp(dependency_pairs.n)"
    "not_empty_seq[posnat]"))))