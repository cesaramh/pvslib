(robinsonunificationEF
 (IMP_robinsonunification_TCC1 0
  (IMP_robinsonunification_TCC1-1 nil 3522686037
   ("" (then (lemma "var_countable") (propax)) nil) nil nil
   (IMP_robinsonunification assuming
    "robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].robinsonunification"
    "var_countable: ASSUMPTION countability[term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term].is_countably_infinite(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)")))
 (IMP_robinsonunification_TCC2 0
  (IMP_robinsonunification_TCC2-1 nil 3522686037
   ("" (then (lemma "var_nonempty") (propax)) nil) nil nil
   (IMP_robinsonunification assuming
    "robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].robinsonunification"
    "var_nonempty: ASSUMPTION sets[term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term].nonempty?(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)")))
 (IMP_robinsonunification_TCC3 0
  (IMP_robinsonunification_TCC3-1 nil 3522686037
   ("" (then (lemma "symbol_nonempty") (propax)) nil) nil nil
   (IMP_robinsonunification assuming
    "robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].robinsonunification"
    "symbol_nonempty: ASSUMPTION sets[robinsonunification.symbol].nonempty?({f: robinsonunification.symbol | robinsonunification.arity(f) = 1})")))
 (right_pos_TCC1 0
  (right_pos_TCC1-1 nil 3506350454
   (""
    (then (skosimp) (skosimp) (assert) (lemma "empty_0[posnat]")
     (inst -1 "p!1") (assert))
    nil)
   ((empty_0 formula-decl nil seq_extras structures)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (right_pos subtype "robinsonunificationEF.p"
    "not_empty_seq[posnat]")))
 (right_pos_TCC2 0
  (right_pos_TCC2-1 nil 3506350454
   (""
    (then (skosimp*) (lemma "delete_is_position") (inst -1 "p!1" "s!1")
     (assert) (flatten) (rewrite "empty_0"))
    nil)
   ((delete_is_position formula-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   nil
   (right_pos subtype "robinsonunificationEF.p1"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.s)")))
 (right_pos_TCC3 0
  (right_pos_TCC3-1 nil 3506350454
   (""
    (then (skosimp*) (lemma "subterm_is_app") (inst -1 "p!1" "s!1")
     (assert) (flatten) (rewrite "empty_0"))
    nil)
   ((subterm_is_app formula-decl nil subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   nil
   (right_pos subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (right_pos_TCC4 0
  (right_pos_TCC4-1 nil 3506350454
   (""
    (then (skosimp*) (hide -1 -3 -4) (replaces -1) (expand "delete" 2)
     (lemma "empty_0[posnat]") (inst -1 "p!1") (assert))
    nil)
   ((delete const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (right_pos termination
    "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p1)"
    "nil")))
 (right_pos_TCC5 0
  (right_pos_TCC5-1 nil 3506350454
   (""
    (then (skosimp*) (lemma "positions_of_arg")
     (spread (inst -1 "subtermOF(s!1, p1!1)" "j!1 + i!1")
      ((then (lemma "pos_o_term")
        (inst -1 "p1!1" "#(j!1 + i!1 + 1)" "s!1")
        (lemma "delete_is_position") (inst -1 "p!1" "s!1")
        (lemma "empty_0[posnat]") (inst -1 "p!1") (assert)
        (hide-all-but (-2 3))
        (spread
         (case "p1!1 o  #(1 + i!1 + j!1) = add_last(p1!1, 1 + i!1 + j!1)")
         ((assert) (then (hide-all-but 1) (grind)))))
       (then (typepred "j!1") (typepred "args(subtermOF(s!1, p1!1))")
        (replace -1 1) (replace -6 1 rl) (hide-all-but (-2 1))
        (assert)))))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (pos_o_term formula-decl nil subterm nil)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (add_last const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (term type-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil))
   nil
   (right_pos subtype
    "seq_extras[posnat].add_last(robinsonunificationEF.p1, (number_fields.+)((number_fields.+)(robinsonunificationEF.i, robinsonunificationEF.j), 1))"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.s)")))
 (right_pos_TCC6 0
  (right_pos_TCC6-2 "" 3790333618
   (""
    (then (skosimp*) (lemma "positions_of_arg") (lemma "pos_o_term")
     (lemma "delete_is_position") (inst -1 "p!1" "s!1")
     (lemma "empty_0[posnat]") (inst -1 "p!1") (assert))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (pos_o_term formula-decl nil subterm nil))
   shostak
   (right_pos subtype
    "(number_fields.-)(length(robinsonunificationEF.p), 1)"
    "below[length(p)]"))
  (right_pos_TCC6-1 nil 3506350454
   ("" (skosimp*)
    (("" (lemma "positions_of_arg")
      (("" (inst -1 "subtermOF(s!1, p1!1)" "j!1 + i!1")
        (("1" (lemma "pos_o_term")
          (("1" (inst -1 "p1!1" "#(j!1 + i!1 + 1)" "s!1")
            (("1" (lemma "delete_is_position")
              (("1" (inst -1 "p!1" "s!1")
                (("1" (lemma "empty_0[posnat]")
                  (("1" (inst -1 "p!1")
                    (("1" (assert)
                      (("1" (hide-all-but (-2 3))
                        (("1"
                          (case "p1!1 o  #(1 + i!1 + j!1) = add_last(p1!1, 1 + i!1 + j!1)")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "j!1")
          (("2" (typepred "args(subtermOF(s!1, p1!1))")
            (("2" (replace -1 1)
              (("2" (replace -6 1 rl)
                (("2" (hide-all-but (-2 1)) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positions_of_arg formula-decl nil positions nil)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (pos_o_term formula-decl nil subterm nil))
   nil
   (right_pos subtype
    "(number_fields.-)(length(robinsonunificationEF.p), 1)"
    "below[length(p)]")))
 (next_position_TCC1 0
  (next_position_TCC1-1 nil 3488040223
   (""
    (then (skosimp) (lemma "empty_0[posnat]") (inst -1 "p!1") (assert))
    nil)
   ((empty_0 formula-decl nil seq_extras structures)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (next_position subtype
    "(number_fields.-)(length(robinsonunificationEF.p), 1)"
    "below[length(p)]")))
 (next_position_TCC2 0
  (next_position_TCC2-1 nil 3488040223
   (""
    (then (skosimp) (rewrite "delete_is_position") (hide 3) (flatten)
     (rewrite "empty_0"))
    nil)
   ((delete_is_position formula-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_position subtype
    "seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1))"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.s)")))
 (next_position_TCC3 0
  (next_position_TCC3-1 nil 3488040223
   (""
    (then (skosimp*) (lemma "subterm_is_app") (inst -1 "p!1" "s!1")
     (assert) (hide 3) (flatten) (rewrite "empty_0"))
    nil)
   ((subterm_is_app formula-decl nil subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   nil
   (next_position subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1)))"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_position_TCC4 0
  (next_position_TCC4-1 nil 3488040223
   ("" (then (skosimp*) (rewrite "empty_0")) nil)
   ((empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil))
   nil
   (next_position subtype "robinsonunificationEF.p"
    "not_empty_seq[posnat]")))
 (next_position_TCC5 0
  (next_position_TCC5-1 nil 3496419653
   (""
    (then (skosimp)
     (spread
      (name-replace "q!1" "delete(p!1, length(p!1) - 1)" :hide? nil)
      ((then (lemma "empty_0[posnat]") (inst -1 "p!1") (assert)
        (typepred "args(subtermOF(s!1, q!1))") (replace -1 3 rl)
        (hide -1) (lemma "add_last_delete[posnat]") (inst -1 "p!1")
        (assert) (replace -2 -1) (lemma "add_last_delete_is_o[posnat]")
        (inst -1 "p!1") (assert) (expand "finseq_appl") (replace -3 -1)
        (replace -2 -1 rl) (lemma "pos_subterm_ax")
        (inst -1 "q!1" "#(p!1`seq(p!1`length - 1))" "s!1") (assert)
        (expand "positionsOF" -1) (lift-if)
        (spread (ground)
         ((then (hide-all-but -2) (grind))
          (then (hide-all-but -2) (grind))
          (then (expand* "union" "IUnion" "member")
           (spread (split)
            ((then (hide-all-but -1) (grind))
             (then (skosimp) (expand "finseq_appl") (expand "catenate")
              (skosimp) (expand "member") (typepred "i!1")
              (expand "add_first") (expand "insert?")
              (decompose-equality -4) (expand "finseq_appl")
              (expand "#" -1) (expand "#" -2) (decompose-equality -2)
              (inst?)
              (spread (case "p!1`seq(p!1`length - 1) = last(p!1)")
               ((assert) (then (hide-all-but 1) (grind)))))))))))
       (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "p!1")
        (assert)))))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (delete const-decl "finseq" seq_extras structures)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (only_empty_seq const-decl "positions" positions nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (insert? const-decl "finseq" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (catenate const-decl "positions" positions nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (add_last_delete_is_o formula-decl nil seq_extras structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_position subtype
    "(number_fields.-)(robinsonunificationEF.arity(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].f(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1))))), seq_extras[posnat].last(robinsonunificationEF.p))"
    "nat")))
 (next_position_TCC6 0
  (next_position_TCC6-1 nil 3496419653
   (""
    (then (skosimp*) (typepred "length(z!1`3)")
     (spread (case "length(z!1`3)=0") ((rewrite "empty_0") (assert))))
    nil)
   ((positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (next_position subtype
    "(number_fields.-)(length(robinsonunificationEF.z`3), 1)"
    "below[length(z`3)]")))
 (next_position_TCC7 0
  (next_position_TCC7-1 nil 3496419653
   (""
    (then (skosimp) (rewrite "delete_is_position") (hide 3) (flatten)
     (rewrite "empty_0"))
    nil)
   ((delete_is_position formula-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_position subtype
    "seq_extras[posnat].delete(robinsonunificationEF.z`3, (number_fields.-)(length(robinsonunificationEF.z`3), 1))"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.z`1)")))
 (next_position_TCC8 0
  (next_position_TCC8-1 nil 3496419653
   (""
    (then (skosimp*) (lemma "subterm_is_app") (inst?) (assert) (prop)
     (rewrite "empty_0"))
    nil)
   ((subterm_is_app formula-decl nil subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   nil
   (next_position subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.z`1, seq_extras[posnat].delete(robinsonunificationEF.z`3, (number_fields.-)(length(robinsonunificationEF.z`3), 1)))"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_position_TCC9 0
  (next_position_TCC9-2 "" 3790333621
   (""
    (then (skosimp)
     (spread
      (name-replace "q!1" "delete(z!1`3, length(z!1`3) - 1)" :hide?
       nil)
      ((then (lemma "empty_0[posnat]") (inst -1 "z!1`3") (assert))
       (then (lemma "empty_0[posnat]") (inst -1 "z!1`3") (assert)))))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (delete const-decl "finseq" seq_extras structures)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (empty_0 formula-decl nil seq_extras structures))
   shostak
   (next_position subtype "robinsonunificationEF.z`3"
    "not_empty_seq[posnat]"))
  (next_position_TCC9-1 nil 3496419653
   ("" (skosimp)
    ((""
      (name-replace "q!1" "delete(z!1`3, length(z!1`3) - 1)" :hide?
       nil)
      (("1" (lemma "empty_0[posnat]")
        (("1" (inst -1 "z!1`3")
          (("1" (assert)
            (("1" (typepred "args(subtermOF(z!1`1, q!1))")
              (("1" (replace -1 3 rl)
                (("1" (hide -1)
                  (("1" (lemma "add_last_delete[posnat]")
                    (("1" (inst -1 "z!1`3")
                      (("1" (assert)
                        (("1" (replace -2 -1)
                          (("1" (lemma "add_last_delete_is_o[posnat]")
                            (("1" (inst -1 "z!1`3")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (replace -3 -1)
                                    (("1"
                                      (replace -2 -1 rl)
                                      (("1"
                                        (lemma "pos_subterm_ax")
                                        (("1"
                                          (inst
                                           -1
                                           "q!1"
                                           "#(z!1`3`seq(z!1`3`length - 1))"
                                           "z!1`1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "positionsOF" -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (hide-all-but -2)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but -2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand*
                                                     "union"
                                                     "IUnion"
                                                     "member")
                                                    (("3"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but
                                                         -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (expand
                                                             "catenate")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (typepred
                                                                   "i!1")
                                                                  (("2"
                                                                    (expand
                                                                     "add_first")
                                                                    (("2"
                                                                      (expand
                                                                       "insert?")
                                                                      (("2"
                                                                        (decompose-equality
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("2"
                                                                            (expand
                                                                             "#"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "#"
                                                                               -2)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (case
                                                                                     "z!1`3`seq(z!1`3`length - 1) = last(z!1`3)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 3)
        (("2" (lemma "empty_0[posnat]")
          (("2" (inst -1 "z!1`3") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (delete const-decl "finseq" seq_extras structures)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_position subtype "robinsonunificationEF.z`3"
    "not_empty_seq[posnat]")))
 (next_position_TCC10 0
  (next_position_TCC10-1 nil 3496419653
   (""
    (then (skosimp)
     (spread
      (name-replace "q!1" "delete(z!1`3, length(z!1`3) - 1)" :hide?
       nil)
      ((then (lemma "empty_0[posnat]") (inst -1 "z!1`3") (assert)
        (typepred "args(subtermOF(z!1`1, q!1))") (replace -1 3 rl)
        (hide -1) (lemma "add_last_delete[posnat]") (inst -1 "z!1`3")
        (assert) (replace -2 -1) (lemma "add_last_delete_is_o[posnat]")
        (inst -1 "z!1`3") (assert) (expand "finseq_appl")
        (replace -3 -1) (replace -2 -1 rl) (lemma "pos_subterm_ax")
        (inst -1 "q!1" "#(z!1`3`seq(z!1`3`length - 1))" "z!1`1")
        (assert) (expand "positionsOF" -1) (lift-if)
        (spread (ground)
         ((then (hide-all-but -2) (grind))
          (then (hide-all-but -2) (grind))
          (then (expand* "union" "IUnion" "member")
           (spread (split)
            ((then (hide-all-but -1) (grind))
             (then (skosimp) (expand "finseq_appl") (expand "catenate")
              (skosimp) (expand "member") (typepred "i!1")
              (expand "add_first") (expand "insert?")
              (decompose-equality -4) (expand "finseq_appl")
              (expand "#" -1) (expand "#" -2) (decompose-equality -2)
              (inst?)
              (spread
               (case "z!1`3`seq(z!1`3`length - 1) = last(z!1`3)")
               ((assert) (then (hide-all-but 1) (grind)))))))))))
       (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "z!1`3")
        (assert)))))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (delete const-decl "finseq" seq_extras structures)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (only_empty_seq const-decl "positions" positions nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (insert? const-decl "finseq" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (catenate const-decl "positions" positions nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (add_last_delete_is_o formula-decl nil seq_extras structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_position subtype
    "(number_fields.-)(robinsonunificationEF.arity(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].f(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.z`1, seq_extras[posnat].delete(robinsonunificationEF.z`3, (number_fields.-)(length(robinsonunificationEF.z`3), 1))))), seq_extras[posnat].last(robinsonunificationEF.z`3))"
    "nat")))
 (next_position_TCC11 0
  (next_position_TCC11-1 nil 3496419653
   (""
    (then (skosimp*) (replaces -1) (rewrite "delete_is_position")
     (prop) (rewrite "empty_0"))
    nil)
   ((empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (delete_is_position formula-decl nil positions nil))
   nil
   (next_position subtype "robinsonunificationEF.pi0"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.s)")))
 (next_position_TCC12 0
  (next_position_TCC12-1 nil 3496419653
   (""
    (then (skosimp*) (lemma "subterm_is_app") (inst?) (inst -1 "s!1")
     (assert) (prop) (rewrite "empty_0"))
    nil)
   ((subterm_is_app formula-decl nil subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   nil
   (next_position subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.pi0)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_position_TCC13 0
  (next_position_TCC13-1 nil 3496419653
   (""
    (then (skosimp*) (replaces -1) (rewrite "delete_is_position")
     (hide 3) (flatten) (rewrite "empty_0"))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (delete_is_position formula-decl nil positions nil))
   nil
   (next_position subtype "robinsonunificationEF.pi0"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.t)")))
 (next_position_TCC14 0
  (next_position_TCC14-1 nil 3496419653
   (""
    (then (skosimp*) (lemma "subterm_is_app") (inst?) (assert)
     (inst -1 "t!1") (assert) (prop) (rewrite "empty_0"))
    nil)
   ((subterm_is_app formula-decl nil subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   nil
   (next_position subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.pi0)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_position_TCC15 0
  (next_position_TCC15-2 "" 3803828749
   (""
    (then (skosimp*) (replace -1 -3 rl)
     (spread (case "pi!1 = pi0!1 o #(last(p!1) + 1)")
      ((then (lemma "pos_o_term")
        (inst -1 "pi0!1" "#(last(p!1) + 1)" "t!1") (assert) (hide 3)
        (spread (split)
         ((then (lemma "delete_is_position") (inst -1 "p!1" "t!1")
           (assert) (hide-all-but (1 3)) (lemma "empty_0[posnat]")
           (inst -1 "p!1") (assert))
          (then (lemma "pos_subterm_ax")
           (inst -1 "pi0!1" "#(last(p!1) + 1)" "s!1") (assert)
           (expand "positionsOF" 1) (lift-if)
           (spread (ground)
            ((then (lemma "subterm_is_app") (inst -1 "p!1" "t!1")
              (assert) (hide-all-but (1 3)) (lemma "empty_0[posnat]")
              (inst -1 "p!1") (assert))
             (then
              (typepred "args(subtermOF(t!1, pi0!1))"
               "args(subtermOF(s!1, pi0!1))")
              (replace -7 -2) (replace -1 -2 rl) (hide -1)
              (replace -1 -2 rl) (hide -1)
              (spread
               (case "positionsOF(subtermOF(s!1, pi0!1)) = only_empty_seq")
               ((then (lemma "pos_subterm_ax")
                 (inst -1 "pi0!1" "#(1 + last(p!1))" "s!1") (assert))
                (then (hide-all-but (-1 1)) (expand "positionsOF")
                 (assert) (lift-if) (assert)))))
             (then (expand "union") (expand "member") (flatten)
              (expand "IUnion") (expand "finseq_appl")
              (spread (inst 3 "last(p!1) + 1")
               ((then (expand "catenate") (inst 3 "empty_seq")
                 (spread (split)
                  ((then (hide-all-but 1) (expand "positionsOF")
                    (lift-if)
                    (spread (ground)
                     ((expand* "member" "only_empty_seq")
                      (expand* "member" "only_empty_seq")
                      (expand* "union" "member" "only_empty_seq"))))
                   (then (hide-all-but 1) (grind)))))
                (then (lemma "next_position_TCC5")
                 (inst -1 "s!1" "s!1" "pi!1")
                 (spread (split)
                  ((spread
                    (case "delete(pi!1, length(pi!1) - 1) = pi0!1")
                    ((then (replace -1 -2)
                      (typepred "args(subtermOF(t!1, pi0!1))"
                       "args(subtermOF(s!1, pi0!1))")
                      (replace -8 -1 rl) (replace -1 -2 rl)
                      (replace -2 1 rl) (replace -2 -1 rl)
                      (replace -1 -4 rl)
                      (spread (case "1 + last(p!1) = last(pi!1)")
                       ((assert)
                        (then (hide-all-but (-6 -9 1)) (grind)))))
                     (then (hide-all-but (-6 1))
                      (expand* "add_last" "insert?" "delete")
                      (spread (decompose-equality -1)
                       ((then (decompose-equality 1)
                         (expand "finseq_appl")
                         (spread (decompose-equality 1)
                          ((then (decompose-equality -2) (hide -2)
                            (typepred "x!1") (inst -2 "x!1") (lift-if)
                            (ground))
                           (then (skosimp) (hide -2) (replaces -1)
                            (assert)))))
                        (then (expand "finseq_appl")
                         (spread (decompose-equality 2)
                          ((decompose-equality 1)
                           (then (skosimp) (decompose-equality -3)
                            (typepred "x!1") (grind)))))
                        (then (expand "finseq_appl")
                         (spread (decompose-equality 2)
                          ((decompose-equality 1)
                           (then (skosimp) (grind))))))))
                     (then (hide-all-but (-3 -6 1)) (grind))))
                   (then (hide-all-but (-1 -3 -4 -6 5))
                    (grind))))))))))))))
       (then (hide-all-but (-3 1)) (expand* "add_last" "o" "insert?")
        (spread
         (case "1 + pi0!1`length = #(1 + last(p!1))`length + pi0!1`length")
         ((then (replace -1 1 rl)
           (spread (decompose-equality 1)
            ((spread (decompose-equality 1)
              ((then (expand "finseq_appl") (decompose-equality -2)
                (grind))
               (grind) (grind)))
             (grind) (grind))))
          (then (hide -1 2) (grind))))))))
    nil)
   ((pos_o_term formula-decl nil subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (delete_is_position formula-decl nil positions nil)
    (subterm_is_app formula-decl nil subterm nil)
    (only_empty_seq const-decl "positions" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (member const-decl "bool" sets nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (catenate const-decl "positions" positions nil)
    (delete const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (union const-decl "set" sets nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil))
   shostak
   (next_position subtype "robinsonunificationEF.pi"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.t)"))
  (next_position_TCC15-1 nil 3496419653
   ("" (skosimp*)
    (("" (replace -2 -4 rl)
      (("" (case "pi!1 = pi0!1 o #(last(p!1) + 1)")
        (("1" (lemma "pos_o_term")
          (("1" (inst -1 "pi0!1" "#(last(p!1) + 1)" "t!1")
            (("1" (assert)
              (("1" (hide 3)
                (("1" (split)
                  (("1" (lemma "delete_is_position")
                    (("1" (inst -1 "p!1" "t!1")
                      (("1" (assert)
                        (("1" (hide-all-but (1 3))
                          (("1" (lemma "empty_0[posnat]")
                            (("1" (inst -1 "p!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "pos_subterm_ax")
                    (("2" (inst -1 "pi0!1" "#(last(p!1) + 1)" "s!1")
                      (("2" (assert)
                        (("2" (expand "positionsOF" 1)
                          (("2" (lift-if)
                            (("2" (ground)
                              (("1"
                                (lemma "subterm_is_app")
                                (("1"
                                  (inst -1 "p!1" "t!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide-all-but (1 3))
                                      (("1"
                                        (lemma "empty_0[posnat]")
                                        (("1"
                                          (inst -1 "p!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred
                                 "args(subtermOF(t!1, pi0!1))"
                                 "args(subtermOF(s!1, pi0!1))")
                                (("2"
                                  (replace -6 -2)
                                  (("2"
                                    (replace -1 -2 rl)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (replace -1 -2 rl)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (case
                                             "positionsOF(subtermOF(s!1, pi0!1)) = only_empty_seq")
                                            (("1"
                                              (lemma "pos_subterm_ax")
                                              (("1"
                                                (inst
                                                 -1
                                                 "pi0!1"
                                                 "#(1 + last(p!1))"
                                                 "s!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 1))
                                              (("2"
                                                (expand "positionsOF")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "union")
                                (("3"
                                  (expand "member")
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (expand "IUnion")
                                      (("3"
                                        (expand "finseq_appl")
                                        (("3"
                                          (inst 3 "last(p!1) + 1")
                                          (("1"
                                            (expand "catenate")
                                            (("1"
                                              (inst 3 "empty_seq")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (expand
                                                     "positionsOF")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand*
                                                           "member"
                                                           "only_empty_seq")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           "member"
                                                           "only_empty_seq")
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           "union"
                                                           "member"
                                                           "only_empty_seq")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "next_position_TCC5")
                                            (("2"
                                              (inst
                                               -1
                                               "s!1"
                                               "s!1"
                                               "pi!1")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (case
                                                   "delete(pi!1, length(pi!1) - 1) = pi0!1")
                                                  (("1"
                                                    (replace -1 -2)
                                                    (("1"
                                                      (typepred
                                                       "args(subtermOF(t!1, pi0!1))"
                                                       "args(subtermOF(s!1, pi0!1))")
                                                      (("1"
                                                        (replace
                                                         -7
                                                         -1
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -2
                                                           rl)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             1
                                                             rl)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               -1
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -4
                                                                 rl)
                                                                (("1"
                                                                  (case
                                                                   "1 + last(p!1) = last(pi!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-6
                                                                      -10
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-7 1))
                                                    (("2"
                                                      (expand*
                                                       "add_last"
                                                       "insert?"
                                                       "delete")
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (decompose-equality
                                                                 -2)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (typepred
                                                                     "x!1")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "x!1")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (decompose-equality
                                                             2)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (decompose-equality
                                                                 -3)
                                                                (("2"
                                                                  (typepred
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "finseq_appl")
                                                          (("3"
                                                            (decompose-equality
                                                             2)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but
                                                     (-3 -7 1))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 -3 -5 -7 5))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but (-4 1))
          (("2" (expand* "add_last" "o" "insert?")
            (("2"
              (case "1 + pi0!1`length = #(1 + last(p!1))`length + pi0!1`length")
              (("1" (replace -1 1 rl)
                (("1" (decompose-equality 1)
                  (("1" (decompose-equality 1)
                    (("1" (expand "finseq_appl")
                      (("1" (decompose-equality -2)
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil))
                  nil))
                nil)
               ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pos_o_term formula-decl nil subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (delete_is_position formula-decl nil positions nil)
    (subterm_is_app formula-decl nil subterm nil)
    (only_empty_seq const-decl "positions" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (member const-decl "bool" sets nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (catenate const-decl "positions" positions nil)
    (delete const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (union const-decl "set" sets nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil))
   nil
   (next_position subtype "robinsonunificationEF.pi"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.t)")))
 (next_position_TCC16 0
  (next_position_TCC16-1 nil 3497078571
   (""
    (then (skosimp*) (lemma "next_position_TCC15")
     (inst -1 "s!1" "t!1" "p!1") (assert) (inst -1 "pi0!1") (assert)
     (inst -1 "pi!1") (assert))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (next_position subtype "robinsonunificationEF.pi"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")))
 (next_position_TCC17 0
  (next_position_TCC17-2 "" 3803830755
   (""
    (then (skosimp*) (lift-if) (lift-if)
     (spread (prop)
      ((then (hide-all-but (-1 -4 3)) (grind))
       (then (lift-if) (prop)
        (spread (rewrite "lex2_lt")
         ((then (flatten)
           (spread (split)
            ((then (hide-all-but (-3 1))
              (expand* "add_last" "delete" "insert?")
              (expand "finseq_appl")
              (spread (decompose-equality -1)
               ((then (hide -2) (lift-if)
                 (spread (prop)
                  ((then (reveal 3) (lemma "empty_0[posnat]")
                    (inst -1 "p!1") (assert))
                   (assert))))
                (then (reveal 3) (hide-all-but (-3 1))
                 (lemma "empty_0[posnat]") (inst -1 "p!1") (assert))
                (then (reveal 3) (hide-all-but (-3 1))
                 (lemma "empty_0[posnat]") (inst -1 "p!1") (assert)))))
             (spread
              (case "delete(pi!1, length(pi!1) - 1) = delete(p!1, length(p!1) - 1)")
              ((then (replace -1 1) (replace -2 1 rl)
                (rewrite "both_sides_minus_lt2")
                (spread (case "last(pi!1) = last(p!1) + 1")
                 ((assert) (then (hide-all-but (-4 1)) (grind)))))
               (then (replace -1 1 rl) (replace -1 -3 rl)
                (hide-all-but (-1 -3 1 5 6)) (expand "delete" 1)
                (expand "finseq_appl")
                (spread (decompose-equality 1)
                 ((then (lift-if)
                   (spread (prop)
                    ((then (hide-all-but (-1 2))
                      (lemma "empty_0[posnat]") (inst -1 "pi!1")
                      (assert))
                     (then (expand* "add_last" "insert?")
                      (decompose-equality -2) (hide-all-but (-1 2))
                      (replaces -1) (assert)))))
                  (then (lift-if)
                   (spread (prop)
                    ((then (hide-all-but (-1 2))
                      (lemma "empty_0[posnat]") (inst -1 "pi!1")
                      (assert))
                     (spread (decompose-equality 2)
                      ((then (expand* "add_last" "insert?")
                        (expand "finseq_appl") (decompose-equality -2)
                        (decompose-equality -2) (inst -1 "x!1")
                        (lift-if) (prop) (typepred "x!1") (assert))
                       (then (skosimp)
                        (expand* "add_last" "insert?" "finseq_appl")
                        (decompose-equality -2) (hide-all-but (-1 1))
                        (replaces -1) (assert)))))))
                  (then (lemma "empty_0[posnat]") (inst -1 "pi!1")
                   (assert)))))
               (then (hide-all-but (1 6)) (lemma "empty_0[posnat]")
                (inst -1 "p!1") (assert))
               (then (hide-all-but (1 5)) (lemma "empty_0[posnat]")
                (inst -1 "pi!1") (assert)))))))
          (rewrite "next_position_TCC5")
          (then (hide-all-but (1 5)) (lemma "empty_0[posnat]")
           (inst -1 "p!1") (assert))
          (then (lemma "next_position_TCC5")
           (inst -1 "s!1" "s!1" "pi!1") (assert))
          (then (hide-all-but (1 4)) (lemma "empty_0[posnat]")
           (inst -1 "pi!1") (assert))))))))
    nil)
   ((add_last const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak
   (next_position termination
    "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi)"
    "nil"))
  (next_position_TCC17-1 nil 3497078571
   ("" (skosimp*)
    (("" (lift-if)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide-all-but (-1 -6 3)) (("1" (grind) nil nil)) nil)
           ("2" (lift-if)
            (("2" (prop)
              (("2" (rewrite "lex2_lt")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (hide-all-but (-5 1))
                      (("1" (expand* "add_last" "delete" "insert?")
                        (("1" (expand "finseq_appl")
                          (("1" (decompose-equality -1)
                            (("1" (hide -2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (reveal 3)
                                    (("1"
                                      (lemma "empty_0[posnat]")
                                      (("1"
                                        (inst -1 "p!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal 3)
                              (("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (lemma "empty_0[posnat]")
                                  (("2"
                                    (inst -1 "p!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (reveal 3)
                              (("3"
                                (hide-all-but (-3 1))
                                (("3"
                                  (lemma "empty_0[posnat]")
                                  (("3"
                                    (inst -1 "p!1")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "delete(pi!1, length(pi!1) - 1) = delete(p!1, length(p!1) - 1)")
                      (("1" (replace -1 1)
                        (("1" (replace -3 1 rl)
                          (("1" (rewrite "both_sides_minus_lt2")
                            (("1" (case "last(pi!1) = last(p!1) + 1")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but (-6 1))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -2 1 rl)
                        (("2" (replace -2 -5 rl)
                          (("2" (hide-all-but (-2 -5 1 5 6))
                            (("2" (expand "delete" 1)
                              (("2"
                                (expand "finseq_appl")
                                (("2"
                                  (decompose-equality 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 2))
                                        (("1"
                                          (lemma "empty_0[posnat]")
                                          (("1"
                                            (inst -1 "pi!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand* "add_last" "insert?")
                                        (("2"
                                          (decompose-equality -2)
                                          (("2"
                                            (hide-all-but (-1 2))
                                            (("2"
                                              (replaces -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 2))
                                        (("1"
                                          (lemma "empty_0[posnat]")
                                          (("1"
                                            (inst -1 "pi!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 2)
                                        (("1"
                                          (expand*
                                           "add_last"
                                           "insert?")
                                          (("1"
                                            (expand "finseq_appl")
                                            (("1"
                                              (decompose-equality -2)
                                              (("1"
                                                (decompose-equality -2)
                                                (("1"
                                                  (inst -1 "x!1")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (typepred
                                                         "x!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (expand*
                                             "add_last"
                                             "insert?"
                                             "finseq_appl")
                                            (("2"
                                              (decompose-equality -2)
                                              (("2"
                                                (hide-all-but (-1 1))
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma "empty_0[posnat]")
                                    (("3"
                                      (inst -1 "pi!1")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but (1 6))
                        (("3" (lemma "empty_0[posnat]")
                          (("3" (inst -1 "p!1")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (hide-all-but (1 5))
                        (("4" (lemma "empty_0[posnat]")
                          (("4" (inst -1 "pi!1")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "next_position_TCC5") nil nil)
                 ("3" (hide-all-but (1 5))
                  (("3" (lemma "empty_0[posnat]")
                    (("3" (inst -1 "p!1") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (lemma "next_position_TCC5")
                  (("4" (inst -1 "s!1" "s!1" "pi!1")
                    (("4" (assert) nil nil)) nil))
                  nil)
                 ("5" (hide-all-but (1 4))
                  (("5" (lemma "empty_0[posnat]")
                    (("5" (inst -1 "pi!1") (("5" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add_last const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (next_position termination
    "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi)"
    "nil")))
 (next_position_TCC18 0
  (next_position_TCC18-1 nil 3497078571
   (""
    (then (skosimp*) (typepred "p!1") (lemma "delete_is_position")
     (inst-cp -1 "p!1" "s!1") (inst -1 "p!1" "t!1")
     (lemma "empty_0[posnat]") (inst -1 "p!1") (assert))
    nil)
   ((positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (delete_is_position formula-decl nil positions nil))
   nil
   (next_position subtype "robinsonunificationEF.pi0"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")))
 (next_position_TCC19 0
  (next_position_TCC19-2 "" 3803831565
   (""
    (then (skosimp*) (assert)
     (spread (rewrite "lex2_lt")
      ((then (flatten) (hide-all-but (-1 1 4))
        (expand* "delete" "finseq_appl") (decompose-equality -1)
        (hide -2) (lemma "empty_0[posnat]") (inst -1 "p!1") (assert))
       (then (hide -2 -3 3 5) (lemma "next_position_TCC5")
        (inst -1 "s!1" "t!1" "p!1") (assert))
       (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
        (inst -1 "p!1") (assert))
       (then (hide -2 -3 3 5) (lemma "next_position_TCC5")
        (spread (inst -1 "s!1" "t!1" "pi0!1")
         ((assert)
          (then (hide 2) (lemma "delete_is_position")
           (inst-cp -1 "p!1" "s!1") (inst -1 "p!1" "t!1")
           (lemma "empty_0[posnat]") (inst -1 "p!1") (assert)))))
       (then (hide-all-but (1 4)) (lemma "empty_0[posnat]")
        (inst -1 "pi0!1") (assert)))))
    nil)
   ((delete_is_position formula-decl nil positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_0 formula-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak
   (next_position termination
    "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi0)"
    "nil"))
  (next_position_TCC19-1 nil 3506626310
   ("" (skosimp*)
    (("" (assert)
      (("" (rewrite "lex2_lt")
        (("1" (flatten)
          (("1" (hide-all-but (-2 1 4))
            (("1" (expand* "delete" "finseq_appl")
              (("1" (decompose-equality -1)
                (("1" (hide -2)
                  (("1" (lemma "empty_0[posnat]")
                    (("1" (inst -1 "p!1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 -3 4 5)
          (("2" (lemma "next_position_TCC5")
            (("2" (inst -1 "s!1" "t!1" "p!1") (("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but (1 2))
          (("3" (lemma "empty_0[posnat]")
            (("3" (inst -1 "p!1") (("3" (assert) nil nil)) nil)) nil))
          nil)
         ("4" (hide -1 -3 4 5)
          (("4" (lemma "next_position_TCC5")
            (("4" (inst -1 "s!1" "t!1" "pi0!1")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (lemma "delete_is_position")
                  (("2" (inst-cp -1 "p!1" "s!1")
                    (("2" (inst -1 "p!1" "t!1")
                      (("2" (lemma "empty_0[posnat]")
                        (("2" (inst -1 "p!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (hide-all-but (1 3))
          (("5" (lemma "empty_0[posnat]")
            (("5" (inst -1 "pi0!1") (("5" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((delete_is_position formula-decl nil positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_0 formula-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (next_position termination
    "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi0)"
    "nil")))
 (right_pos_subset 0
  (right_pos_subset-4 "" 3804364481
   (""
    (then (measure-induct+ "length(p)" ("s" "p"))
     (expand* "subset?" "member") (skosimp) (expand "right_pos" -2)
     (expand* "union" "IUnion" "member")
     (spread (prop)
      ((then (hide -1 -3) (expand "only_empty_seq") (replaces -1)
        (expand "positionsOF") (lift-if) (expand "only_empty_seq")
        (prop) (expand "union") (flatten) (hide 3) (expand "member")
        (propax))
       (then (hide -2) (expand "singleton") (assert))
       (spread (inst -2 "x!1" "delete(x!2, length(x!2) - 1)")
        ((then (expand "delete" -2 1) (lemma "empty_0[posnat]")
          (inst -1 "x!2") (assert) (inst -2 "x!3") (assert))
         (then (rewrite "delete_is_position") (flatten)
          (rewrite "empty_0"))
         (then (lemma "empty_0[posnat]") (inst -1 "x!2") (assert))))
       (then (skosimp*) (hide -3)
        (spread
         (name-replace "pi"
          "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))"
          :hide? nil)
         ((spread
           (case "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))")
           ((then (replace -1 -4 rl) (hide -2) (lemma "pos_o_term")
             (inst -1 "pi" "q1!1" "x!1") (assert)
             (lemma "right_pos_TCC5") (inst -1 "x!1" "x!2") (assert)
             (spread
              (inst -1 "delete(x!2, length(x!2) - 1)" "last(x!2)"
               "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))")
              ((then (inst -1 "i!1") (reveal -5) (assert))
               (then (lemma "right_pos_TCC3") (inst -1 "x!1" "x!2")
                (assert)
                (inst -1 "delete(x!2, length(x!2) - 1)" "last(x!2)")
                (hide-all-but (1 4)) (lemma "empty_0[posnat]")
                (inst -1 "x!2") (assert))
               (then (rewrite "delete_is_position")
                (hide-all-but (1 4)) (flatten) (rewrite "empty_0"))
               (then (hide-all-but (1 3)) (lemma "empty_0[posnat]")
                (inst -1 "x!2") (assert)))))
            (then (replace -1 1 rl) (hide - 2 3) (grind)
             (spread (decompose-equality)
              ((then (reveal 1) (lemma "empty_0[posnat]")
                (inst -1 "x!2") (assert) (lift-if) (prop) (grind)
                (typepred "x!4") (assert))
               (then (skosimp) (grind))
               (then (skosimp) (reveal 1) (hide 2)
                (lemma "empty_0[posnat]") (inst -1 "x!2") (assert))
               (then (skosimp) (reveal 1) (lemma "empty_0[posnat]")
                (inst -1 "x!2") (assert))
               (then (reveal 1) (lemma "empty_0[posnat]")
                (inst -1 "x!2") (assert))
               (then (skosimp) (typepred "i!2")
                (lemma "empty_0[posnat]") (reveal 1) (inst -1 "x!2")
                (assert))
               (then (skosimp) (reveal 1) (lemma "empty_0[posnat]")
                (inst -1 "x!2") (assert))
               (then (skosimp) (reveal 1) (lemma "empty_0[posnat]")
                (inst -1 "x!2") (assert))
               (then (reveal 1) (lemma "empty_0[posnat]")
                (inst -1 "x!2") (assert)))))
            (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
             (inst -1 "x!2") (assert))))
          (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
           (inst -1 "x!2") (assert))))))))
    nil)
   nil shostak)
  (right_pos_subset-3 "" 3803835823
   ("" (measure-induct+ "length(p)" ("s" "p"))
    (("" (expand* "subset?" "member")
      (("" (skosimp)
        (("" (expand "right_pos" -2)
          (("" (expand* "union" "IUnion" "member")
            (("" (prop)
              (("1" (hide -1 -3)
                (("1" (expand "only_empty_seq")
                  (("1" (replaces -1)
                    (("1" (expand "positionsOF")
                      (("1" (lift-if)
                        (("1" (expand "only_empty_seq")
                          (("1" (prop)
                            (("1" (expand "union")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 3)
                                  (("1"
                                    (expand "member")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2)
                (("2" (expand "singleton") (("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (inst -2 "x!1" "delete(x!2, length(x!2) - 1)")
                (("1" (expand "delete" -2 1)
                  (("1" (lemma "empty_0[posnat]")
                    (("1" (inst -1 "x!2")
                      (("1" (assert)
                        (("1" (inst -2 "x!3") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "delete_is_position")
                  (("2" (flatten) (("2" (rewrite "empty_0") nil nil))
                    nil))
                  nil)
                 ("3" (lemma "empty_0[posnat]")
                  (("3" (inst -1 "x!2") (("3" (assert) nil nil)) nil))
                  nil))
                nil)
               ("4" (skosimp*)
                (("4" (hide -3)
                  (("4"
                    (name-replace "pi"
                     "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))"
                     :hide? nil)
                    (("1"
                      (case "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))")
                      (("1" (replace -1 -4 rl)
                        (("1" (hide -2)
                          (("1" (lemma "pos_o_term")
                            (("1" (inst -1 "pi" "q1!1" "x!1")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "right_pos_TCC5")
                                  (("1"
                                    (inst -1 "x!1" "x!2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -1
                                         "delete(x!2, length(x!2) - 1)"
                                         "last(x!2)"
                                         "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))"
                                         "i!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal -4)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "right_pos_TCC3")
                                          (("2"
                                            (inst -1 "x!1" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -1
                                                 "delete(x!2, length(x!2) - 1)"
                                                 "last(x!2)")
                                                (("2"
                                                  (hide-all-but (1 4))
                                                  (("2"
                                                    (lemma
                                                     "empty_0[posnat]")
                                                    (("2"
                                                      (inst -1 "x!2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (rewrite
                                           "delete_is_position")
                                          (("3"
                                            (hide-all-but (1 4))
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (rewrite "empty_0")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide-all-but (1 3))
                                          (("4"
                                            (lemma "empty_0[posnat]")
                                            (("4"
                                              (inst -1 "x!2")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 1 rl)
                        (("2" (hide - 2 3)
                          (("2" (grind)
                            (("2" (decompose-equality)
                              (("1"
                                (reveal 1)
                                (("1"
                                  (lemma "empty_0[posnat]")
                                  (("1"
                                    (inst -1 "x!2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (typepred "x!4")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (reveal 1)
                                  (("3"
                                    (hide 2)
                                    (("3"
                                      (lemma "empty_0[posnat]")
                                      (("3"
                                        (inst -1 "x!2")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (skosimp)
                                (("4"
                                  (reveal 1)
                                  (("4"
                                    (lemma "empty_0[posnat]")
                                    (("4"
                                      (inst -1 "x!2")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (reveal 1)
                                (("5"
                                  (lemma "empty_0[posnat]")
                                  (("5"
                                    (inst -1 "x!2")
                                    (("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (skosimp)
                                (("6"
                                  (typepred "i!2")
                                  (("6"
                                    (lemma "empty_0[posnat]")
                                    (("6"
                                      (reveal 1)
                                      (("6"
                                        (inst -1 "x!2")
                                        (("6" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (skosimp)
                                (("7"
                                  (reveal 1)
                                  (("7"
                                    (lemma "empty_0[posnat]")
                                    (("7"
                                      (inst -1 "x!2")
                                      (("7" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("8"
                                (skosimp)
                                (("8"
                                  (reveal 1)
                                  (("8"
                                    (lemma "empty_0[posnat]")
                                    (("8"
                                      (inst -1 "x!2")
                                      (("8" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (reveal 1)
                                (("9"
                                  (lemma "empty_0[posnat]")
                                  (("9"
                                    (inst -1 "x!2")
                                    (("9" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but (1 2))
                        (("3" (lemma "empty_0[posnat]")
                          (("3" (inst -1 "x!2")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 2))
                      (("2" (lemma "empty_0[posnat]")
                        (("2" (inst -1 "x!2") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (insert? const-decl "finseq" seq_extras structures)
    (pos_o_term formula-decl nil subterm nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (add_last const-decl "finseq" seq_extras structures)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (singleton const-decl "(singleton?)" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (right_pos_subset-2 "" 3790333635
   ("" (measure-induct+ "length(p)" ("s" "p"))
    (("" (expand* "subset?" "member")
      (("" (skosimp)
        (("" (expand "right_pos" -2)
          (("" (expand* "union" "IUnion" "member")
            (("" (prop)
              (("1" (hide -1 -3)
                (("1" (expand "only_empty_seq")
                  (("1" (replaces -1)
                    (("1" (expand "positionsOF")
                      (("1" (lift-if)
                        (("1" (expand "only_empty_seq")
                          (("1" (prop)
                            (("1" (expand "union")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 3)
                                  (("1"
                                    (expand "member")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2)
                (("2" (expand "singleton") (("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (inst -2 "x!1" "delete(x!2, length(x!2) - 1)")
                (("1" (expand "delete" -2 1)
                  (("1" (lemma "empty_0[posnat]")
                    (("1" (inst -1 "x!2")
                      (("1" (assert)
                        (("1" (inst -2 "x!3") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "delete_is_position")
                  (("2" (flatten) (("2" (rewrite "empty_0") nil nil))
                    nil))
                  nil)
                 ("3" (lemma "empty_0[posnat]")
                  (("3" (inst -1 "x!2") (("3" (assert) nil nil)) nil))
                  nil))
                nil)
               ("4" (skosimp*)
                (("4" (hide -3)
                  (("4"
                    (name-replace "pi"
                     "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))"
                     :hide? nil)
                    (("1"
                      (case "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))")
                      (("1" (replace -1 -4 rl)
                        (("1" (hide -2)
                          (("1" (lemma "pos_o_term")
                            (("1" (inst -1 "pi" "q1!1" "x!1")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "right_pos_TCC5")
                                  (("1"
                                    (inst -1 "x!1" "x!2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -1
                                         "delete(x!2, length(x!2) - 1)")
                                        (("1"
                                          (inst -1 "last(x!2)")
                                          (("1"
                                            (inst
                                             -1
                                             "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))")
                                            (("1"
                                              (inst -1 "i!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (reveal -7)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "right_pos_TCC3")
                                              (("2"
                                                (inst -1 "x!1" "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "delete(x!2, length(x!2) - 1)")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "last(x!2)")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 4))
                                                      (("2"
                                                        (lemma
                                                         "empty_0[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite
                                               "delete_is_position")
                                              (("3"
                                                (hide-all-but (1 4))
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (rewrite "empty_0")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide-all-but (1 3))
                                              (("4"
                                                (lemma
                                                 "empty_0[posnat]")
                                                (("4"
                                                  (inst -1 "x!2")
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 3))
                                          (("2"
                                            (lemma "empty_0[posnat]")
                                            (("2"
                                              (inst -1 "x!2")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 1 rl)
                        (("2" (hide - 2 3)
                          (("2" (grind)
                            (("2" (decompose-equality)
                              (("1"
                                (reveal 1)
                                (("1"
                                  (lemma "empty_0[posnat]")
                                  (("1"
                                    (inst -1 "x!2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (typepred "x!4")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (reveal 1)
                                  (("3"
                                    (hide 2)
                                    (("3"
                                      (lemma "empty_0[posnat]")
                                      (("3"
                                        (inst -1 "x!2")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (skosimp)
                                (("4"
                                  (reveal 1)
                                  (("4"
                                    (lemma "empty_0[posnat]")
                                    (("4"
                                      (inst -1 "x!2")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (reveal 1)
                                (("5"
                                  (lemma "empty_0[posnat]")
                                  (("5"
                                    (inst -1 "x!2")
                                    (("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (skosimp)
                                (("6"
                                  (typepred "i!2")
                                  (("6"
                                    (lemma "empty_0[posnat]")
                                    (("6"
                                      (reveal 1)
                                      (("6"
                                        (inst -1 "x!2")
                                        (("6" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (skosimp)
                                (("7"
                                  (reveal 1)
                                  (("7"
                                    (lemma "empty_0[posnat]")
                                    (("7"
                                      (inst -1 "x!2")
                                      (("7" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("8"
                                (skosimp)
                                (("8"
                                  (reveal 1)
                                  (("8"
                                    (lemma "empty_0[posnat]")
                                    (("8"
                                      (inst -1 "x!2")
                                      (("8" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (reveal 1)
                                (("9"
                                  (lemma "empty_0[posnat]")
                                  (("9"
                                    (inst -1 "x!2")
                                    (("9" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but (1 2))
                        (("3" (lemma "empty_0[posnat]")
                          (("3" (inst -1 "x!2")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 2))
                      (("2" (lemma "empty_0[posnat]")
                        (("2" (inst -1 "x!2") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (pos_o_term formula-decl nil subterm nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (right_pos_subset-1 nil 3506439585
   ("" (measure-induct+ "length(p)" ("s" "p"))
    (("" (expand* "subset?" "member")
      (("" (skosimp)
        (("" (expand "right_pos" -2)
          (("" (expand* "union" "IUnion" "member")
            (("" (prop)
              (("1" (hide -1 -3)
                (("1" (expand "only_empty_seq")
                  (("1" (replaces -1)
                    (("1" (expand "positionsOF")
                      (("1" (lift-if)
                        (("1" (expand "only_empty_seq")
                          (("1" (prop)
                            (("1" (expand "union")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 3)
                                  (("1"
                                    (expand "member")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2)
                (("2" (expand "singleton") (("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (inst -2 "x!1" "delete(x!2, length(x!2) - 1)")
                (("1" (expand "delete" -2 1)
                  (("1" (lemma "empty_0[posnat]")
                    (("1" (inst -1 "x!2")
                      (("1" (assert)
                        (("1" (inst -2 "x!3") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "delete_is_position")
                  (("2" (flatten) (("2" (rewrite "empty_0") nil nil))
                    nil))
                  nil)
                 ("3" (lemma "empty_0[posnat]")
                  (("3" (inst -1 "x!2") (("3" (assert) nil nil)) nil))
                  nil))
                nil)
               ("4" (skosimp*)
                (("4" (hide -3)
                  (("4"
                    (name-replace "pi"
                     "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))"
                     :hide? nil)
                    (("1"
                      (case "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))")
                      (("1" (replace -1 -4 rl)
                        (("1" (hide -2)
                          (("1" (lemma "pos_o_term")
                            (("1" (inst -1 "pi" "q1!1" "x!1")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "right_pos_TCC5")
                                  (("1"
                                    (inst -1 "x!1" "x!2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -1
                                         "delete(x!2, length(x!2) - 1)")
                                        (("1"
                                          (inst -1 "last(x!2)")
                                          (("1"
                                            (inst
                                             -1
                                             "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))")
                                            (("1"
                                              (inst -1 "i!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (reveal -7)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "right_pos_TCC3")
                                              (("2"
                                                (inst -1 "x!1" "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "delete(x!2, length(x!2) - 1)")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "last(x!2)")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 4))
                                                      (("2"
                                                        (lemma
                                                         "empty_0[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite
                                               "delete_is_position")
                                              (("3"
                                                (hide-all-but (1 4))
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (rewrite "empty_0")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide-all-but (1 3))
                                              (("4"
                                                (lemma
                                                 "empty_0[posnat]")
                                                (("4"
                                                  (inst -1 "x!2")
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 3))
                                          (("2"
                                            (lemma "empty_0[posnat]")
                                            (("2"
                                              (inst -1 "x!2")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 1 rl)
                        (("2" (hide - 2 3)
                          (("2" (grind)
                            (("2" (decompose-equality)
                              (("1"
                                (reveal 1)
                                (("1"
                                  (lemma "empty_0[posnat]")
                                  (("1"
                                    (inst -1 "x!2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (grind)
                                              (("1"
                                                (typepred "x!4")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (reveal 1)
                                  (("3"
                                    (hide 2)
                                    (("3"
                                      (lemma "empty_0[posnat]")
                                      (("3"
                                        (inst -1 "x!2")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (skosimp)
                                (("4"
                                  (reveal 1)
                                  (("4"
                                    (lemma "empty_0[posnat]")
                                    (("4"
                                      (inst -1 "x!2")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (reveal 1)
                                (("5"
                                  (lemma "empty_0[posnat]")
                                  (("5"
                                    (inst -1 "x!2")
                                    (("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (skosimp)
                                (("6"
                                  (typepred "i!2")
                                  (("6"
                                    (lemma "empty_0[posnat]")
                                    (("6"
                                      (reveal 1)
                                      (("6"
                                        (inst -1 "x!2")
                                        (("6" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (skosimp)
                                (("7"
                                  (reveal 1)
                                  (("7"
                                    (lemma "empty_0[posnat]")
                                    (("7"
                                      (inst -1 "x!2")
                                      (("7" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("8"
                                (skosimp)
                                (("8"
                                  (reveal 1)
                                  (("8"
                                    (lemma "empty_0[posnat]")
                                    (("8"
                                      (inst -1 "x!2")
                                      (("8" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (reveal 1)
                                (("9"
                                  (lemma "empty_0[posnat]")
                                  (("9"
                                    (inst -1 "x!2")
                                    (("9" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but (1 2))
                        (("3" (lemma "empty_0[posnat]")
                          (("3" (inst -1 "x!2")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 2))
                      (("2" (lemma "empty_0[posnat]")
                        (("2" (inst -1 "x!2") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (pos_o_term formula-decl nil subterm nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (next_position_commute 0
  (next_position_commute-1 nil 3503335634
   (""
    (spread
     (measure-induct+
      "IF p = empty_seq THEN lex2(0,0) ELSE  lex2(length(p), arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p)) ENDIF"
      ("s" "t" "p"))
     ((spread (case "x!3 = empty_seq")
       ((then (hide -2) (expand "next_position") (assert))
        (then (expand "next_position" 2 1) (assert) (lift-if)
         (spread (prop)
          ((then (expand "next_position" 2) (assert))
           (then (hide -3) (expand "next_position" 2) (assert)
            (spread
             (case "positionsOF(x!2) (add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)))")
             ((assert)
              (then (hide 3) (lemma "next_position_TCC15")
               (inst -1 "x!1" "x!2" "x!3") (assert)
               (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                ((then (assert)
                  (spread
                   (inst -1
                    "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                   ((assert)
                    (then (hide-all-but (1 4))
                     (lemma "empty_0[posnat]") (inst -1 "x!3")
                     (assert)))))
                 (then (hide-all-but (1 4)) (lemma "empty_0[posnat]")
                  (inst -1 "x!3") (assert)))))
              (then (hide-all-but (1 4)) (lemma "empty_0[posnat]")
               (inst -1 "x!3") (assert)))))
           (spread
            (inst -4 "x!1" "x!2"
             " add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
            ((then (assert)
              (spread
               (case "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = empty_seq")
               ((then (hide-all-but -1) (grind))
                (then (assert) (lemma "next_position_TCC17")
                 (inst -1 "x!1" "x!2" "x!3") (assert)
                 (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                  ((then (assert)
                    (spread
                     (inst -1
                      "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                     ((then (assert) (expand "next_position" 2 2)
                       (spread
                        (case "positionsOF(x!2) (add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)))")
                        ((assert)
                         (then (hide -1 -2 -5 2 3)
                          (lemma "next_position_TCC15")
                          (inst -1 "x!1" "x!2" "x!3") (assert)
                          (spread
                           (inst -1 "delete(x!3, length(x!3) - 1)")
                           ((then (assert)
                             (spread
                              (inst -1
                               "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                              ((assert)
                               (then
                                (hide-all-but (1 3))
                                (lemma "empty_0[posnat]")
                                (inst -1 "x!3")
                                (assert)))))
                            (then (hide-all-but (1 3))
                             (lemma "empty_0[posnat]") (inst -1 "x!3")
                             (assert))))))))
                      (then (hide-all-but (1 4))
                       (lemma "empty_0[posnat]") (inst -1 "x!3")
                       (assert)))))
                   (then (hide-all-but (1 4)) (lemma "empty_0[posnat]")
                    (inst -1 "x!3") (assert)))))
                (then (hide-all-but (1 3)) (lemma "empty_0[posnat]")
                 (inst -1 "x!3") (assert)))))
             (then (hide-all-but (1 3)) (lemma "empty_0[posnat]")
              (inst -1 "x!3") (assert))))
           (spread (inst -2 "x!1" "x!2" "delete(x!3, length(x!3) - 1)")
            ((then (assert)
              (spread (split)
               ((then (expand "next_position" 2 2) (assert)
                 (spread
                  (case "positionsOF(x!2) (add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)))")
                  ((then (hide -2 1 2) (lemma "next_position_TCC15")
                    (inst -1 "x!2" "x!1" "x!3") (assert)
                    (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                     ((then (assert)
                       (spread
                        (inst -1
                         "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                        ((assert)
                         (then (hide-all-but (1 3))
                          (lemma "empty_0[posnat]") (inst -1 "x!3")
                          (assert)))))
                      (then (hide-all-but (1 3))
                       (lemma "empty_0[posnat]") (inst -1 "x!3")
                       (assert)))))
                   (assert)
                   (then (hide-all-but (1 5)) (lemma "empty_0[posnat]")
                    (inst -1 "x!3") (assert)))))
                (spread (rewrite "lex2_lt")
                 ((then (flatten) (hide-all-but (1 6))
                   (expand "delete") (rewrite "empty_0") (assert))
                  (then (hide -1 2 4 5) (lemma "next_position_TCC5")
                   (inst -1 "x!1" "x!2" "x!3") (assert))
                  (then (hide -1 2 4 5) (lemma "next_position_TCC5")
                   (spread
                    (inst -1 "x!1" "x!2"
                     "delete(x!3, length(x!3) - 1)")
                    ((assert)
                     (then (hide 2)
                      (spread (rewrite "delete_is_position")
                       ((then (rewrite "delete_is_position") (flatten)
                         (rewrite "empty_0"))
                        (then (flatten) (rewrite "empty_0")))))
                     (then (hide 2 3) (lemma "empty_0[posnat]")
                      (inst -1 "x!3") (assert)))))
                  (then (hide -1 2 4 5) (lemma "empty_0[posnat]")
                   (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                    ((assert)
                     (then (hide 2 3) (lemma "empty_0[posnat]")
                      (inst -1 "x!3") (assert)))))
                  (then (hide-all-but (1 6)) (lemma "empty_0[posnat]")
                   (inst -1 "x!3") (assert)))))))
             (then (hide-all-but (1 5)) (lemma "empty_0[posnat]")
              (inst -1 "x!3") (assert))))
           (then (expand "next_position" 1) (assert)
            (spread
             (case "positionsOF(x!2) (add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)))")
             ((then (hide -2 -4 1) (lemma "next_position_TCC15")
               (inst -1 "x!2" "x!1" "x!3") (assert)
               (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                ((then (assert)
                  (spread
                   (inst -1
                    "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                   ((assert)
                    (then (hide-all-but (1 3))
                     (lemma "empty_0[posnat]") (inst -1 "x!3")
                     (assert)))))
                 (then (hide-all-but (1 3)) (lemma "empty_0[posnat]")
                  (inst -1 "x!3") (assert)))))
              (assert)
              (then (hide-all-but (1 4)) (lemma "empty_0[posnat]")
               (inst -1 "x!3") (assert))))))))))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "x!3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "y!1" "y!2" "y!3") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "y!1" "y!2" "y!3") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "y!3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "x!1`1" "x!1`2" "x!1`3") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "x!1`1" "x!1`2" "x!1`3") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "x!1`3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "y!1`1" "y!1`2" "y!1`3") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "y!1`1" "y!1`2" "y!1`3") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "y!1`3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "s!1" "t!1" "p!1") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "s!1" "t!1" "p!1") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "p!1")
       (assert))))
    nil)
   ((add_last const-decl "finseq" seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (delete_is_position formula-decl nil positions nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (next_position_is_position 0
  (next_position_is_position-1 nil 3503157274
   (""
    (spread
     (measure-induct+
      "IF p = empty_seq THEN lex2(0,0) ELSE  lex2(length(p), arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p)) ENDIF"
      ("s" "t" "p"))
     ((spread (case "x!3 = empty_seq")
       ((then (hide -2 -4) (expand "next_position") (assert))
        (then (expand "next_position" 2) (assert)
         (spread (prop)
          ((then (hide -1) (rewrite "delete_is_position") (flatten)
            (rewrite "empty_0"))
           (spread
            (inst -4 "x!1" "x!2"
             " add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
            ((then (assert) (lift-if)
              (spread (prop)
               ((then (hide -2 -3 -4 -5 -6 1 2 3) (grind))
                (then (lemma "next_position_TCC17")
                 (inst -1 "x!1" "x!2" "x!3") (assert)
                 (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                  ((then (assert)
                    (spread
                     (inst -1
                      "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                     ((assert)
                      (then (hide-all-but (1 5))
                       (lemma "empty_0[posnat]") (inst -1 "x!3")
                       (assert)))))
                   (then (hide-all-but (1 5)) (lemma "empty_0[posnat]")
                    (inst -1 "x!3") (assert))))))))
             (then (hide-all-but (1 3)) (lemma "empty_0[posnat]")
              (inst -1 "x!3") (assert))))
           (then (hide 3)
            (spread
             (inst -2 "x!1" "x!2" "delete(x!3, length(x!3) - 1)")
             ((then (assert) (hide -1 2)
               (spread (rewrite "lex2_lt")
                ((then (flatten) (hide 1 4) (expand "delete")
                  (lemma "empty_0[posnat]") (inst -1 "x!3") (assert))
                 (then (hide 4) (lemma "next_position_TCC5")
                  (inst -1 "x!1" "x!2" "x!3") (assert))
                 (then (hide 4) (lemma "next_position_TCC5")
                  (spread
                   (inst -1 "x!1" "x!2" "delete(x!3, length(x!3) - 1)")
                   ((assert)
                    (then (hide 2)
                     (spread (rewrite "delete_is_position")
                      ((then (rewrite "delete_is_position") (flatten)
                        (rewrite "empty_0"))
                       (then (flatten) (rewrite "empty_0")))))
                    (then (hide 2 3) (lemma "empty_0[posnat]")
                     (inst -1 "x!3") (assert)))))
                 (then (hide 4) (lemma "empty_0[posnat]")
                  (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                   ((assert)
                    (then (hide 2 3) (lemma "empty_0[posnat]")
                     (inst -1 "x!3") (assert)))))
                 (then (hide 2 4) (lemma "empty_0[posnat]")
                  (inst -1 "x!3") (assert)))))
              (then (hide-all-but (1 4)) (lemma "empty_0[posnat]")
               (inst -1 "x!3") (assert)))))
           (then (hide-all-but 1) (expand "positionsOF") (lift-if)
            (expand* "union" "IUnion" "member" "only_empty_seq")))))))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "x!3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "y!1" "y!2" "y!3") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "y!1" "y!2" "y!3") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "y!3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "x!1`1" "x!1`2" "x!1`3") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "x!1`1" "x!1`2" "x!1`3") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "x!1`3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "y!1`1" "y!1`2" "y!1`3") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "y!1`1" "y!1`2" "y!1`3") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "y!1`3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "s!1" "t!1" "p!1") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "s!1" "t!1" "p!1") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "p!1")
       (assert))))
    nil)
   ((only_empty_seq const-decl "positions" positions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (add_last const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_0 formula-decl nil seq_extras structures)
    (delete_is_position formula-decl nil positions nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (next_pos_length_and_last_TCC1 0
  (next_pos_length_and_last_TCC1-1 nil 3506181251
   (""
    (then (skosimp) (hide 1) (lemma "empty_0[posnat]") (inst -1 "p!1")
     (assert))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_pos_length_and_last subtype "robinsonunificationEF.p"
    "not_empty_seq[posnat]")))
 (next_pos_length_and_last_TCC2 0
  (next_pos_length_and_last_TCC2-1 nil 3506259641
   (""
    (then (skosimp) (typepred "p!1") (hide -1 -2)
     (lemma "empty_0[posnat]") (inst -1 "p!1") (assert))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_pos_length_and_last subtype
    "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.p)"
    "not_empty_seq[posnat]")))
 (next_pos_length_and_last 0
  (next_pos_length_and_last-2 "" 3803838273
   (""
    (then (lemma "empty_0[posnat]")
     (spread
      (measure-induct+
       "lex2(length(p),  arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))"
       ("s" "t" "p"))
      ((then
        (name-replace "p!1" "next_position(x!1, x!2, x!3)" :hide? nil)
        (inst -3 "x!3") (assert)
        (spread (ground)
         ((then (expand "next_position" -1) (lift-if)
           (spread (ground)
            ((then (hide -2 1 2) (replace -1 1 rl) (hide -1)
              (expand "delete") (assert))
             (then (hide -2 -3 -4 1 3) (replace -1 1 rl) (hide -1)
              (expand* "add_last" "delete" "insert?" "finseq_appl"))
             (spread
              (inst -5 "x!1" "x!2"
               "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
              ((then (replace -2 -5)
                (spread (split -5)
                 ((spread
                   (case "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)")
                   ((assert)
                    (then (hide - 2 3)
                     (expand* "add_last" "delete" "insert?"
                      "finseq_appl"))))
                  (then (flatten)
                   (spread
                    (case "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)")
                    ((assert)
                     (then (hide - 2 3)
                      (expand* "add_last" "delete" "insert?"
                       "finseq_appl")))))
                  (then (hide -2 2 3) (lemma "next_position_TCC17")
                   (inst -1 "x!1" "x!2" "x!3") (assert)
                   (inst -1 "delete(x!3, length(x!3) - 1)") (assert)
                   (inst -1
                    "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                   (assert) (lift-if) (prop) (hide-all-but (-1 2))
                   (expand* "add_last" "insert?" "finseq_appl")
                   (decompose-equality) (hide -2)
                   (lemma "empty_0[posnat]") (inst -1 "empty_seq")
                   (assert)))))
               (then (lemma "next_position_TCC15")
                (inst -1 "x!1" "x!2" "x!3") (assert)
                (inst -1 "delete(x!3, length(x!3) - 1)") (assert)
                (inst -1
                 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                (assert) (hide - 2 3)
                (expand* "add_last" "delete" "insert?" "finseq_appl")
                (decompose-equality) (hide -2)
                (lemma "empty_0[posnat]") (inst -1 "empty_seq")
                (assert))))
             (spread
              (inst -3 "x!1" "x!2" "delete(x!3, length(x!3) - 1)")
              ((then (replace -1 -3)
                (spread (split -3)
                 ((then (expand "delete" -1) (assert))
                  (then (flatten) (expand "delete" -1) (assert))
                  (then (assert) (hide -1 4 5)
                   (lemma "next_position_TCC19")
                   (inst -1 "x!1" "x!2" "x!3") (assert)
                   (inst -1 "delete(x!3, length(x!3) - 1)") (assert)
                   (inst -1
                    "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")))))
               (then (rewrite "delete_is_position")
                (rewrite "delete_is_position"))))
             (then (hide -1 -3 -4 1) (lemma "empty_0[posnat]")
              (inst -1 "p!1") (assert)))))
          (then (expand "next_position" -1) (lift-if)
           (spread (ground)
            ((then (hide -2 1 2) (replace -1 1 rl) (hide -1)
              (expand "delete") (assert))
             (then (hide -2 -3 -4 1 3) (replace -1 1 rl) (hide -1)
              (expand* "add_last" "delete" "insert?" "finseq_appl")
              (grind))
             (spread
              (inst -5 "x!1" "x!2"
               "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
              ((then (replace -2 -5)
                (spread (split -5)
                 ((then (hide-all-but (-1 2 3))
                   (expand* "add_last" "delete" "insert?"
                    "finseq_appl"))
                  (then (flatten) (hide -1 -3 -4 -5 -6 2)
                   (spread
                    (case "last(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = 1 + last(x!3)")
                    ((then (replaces -1) (assert))
                     (then (hide-all-but 1)
                      (expand* "add_last" "delete" "insert?"
                       "finseq_appl")
                      (assert) (grind)))))
                  (then (lemma "next_position_TCC17")
                   (inst -1 "x!1" "x!2" "x!3") (assert)
                   (inst -1 "delete(x!3, length(x!3) - 1)") (assert)
                   (inst -1
                    "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                   (assert) (lift-if) (prop)
                   (hide -2 -3 -4 -5 -6 1 2 4)
                   (expand* "add_last" "delete" "insert?"
                    "finseq_appl")
                   (decompose-equality) (hide -2)
                   (lemma "empty_0[posnat]") (inst -1 "empty_seq")
                   (assert)))))
               (then (lemma "next_position_TCC15")
                (inst -1 "x!1" "x!2" "x!3") (assert)
                (inst -1 "delete(x!3, length(x!3) - 1)") (assert)
                (inst -1
                 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                (assert) (hide - 2 3)
                (expand* "add_last" "delete" "insert?" "finseq_appl")
                (decompose-equality) (hide -2)
                (lemma "empty_0[posnat]") (inst -1 "empty_seq")
                (assert))))
             (spread
              (inst -3 "x!1" "x!2" "delete(x!3, length(x!3) - 1)")
              ((then (lemma "next_position_TCC19")
                (inst -1 "x!1" "x!2" "x!3") (assert)
                (inst -1 "delete(x!3, length(x!3) - 1)") (assert)
                (inst -1
                 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                (assert) (hide -1) (replace -1 -3)
                (spread (prop)
                 ((spread
                   (case "length(delete(x!3, length(x!3) - 1)) < length(x!3)")
                   ((assert)
                    (then (hide-all-but (1 6)) (expand "delete")
                     (assert))))
                  (spread
                   (case "length(delete(x!3, length(x!3) - 1)) < length(x!3)")
                   ((assert)
                    (then (hide-all-but (1 6)) (expand "delete")
                     (assert)))))))
               (then (rewrite "delete_is_position")
                (rewrite "delete_is_position"))))
             (then (hide-all-but (-2 3 4)) (lemma "empty_0[posnat]")
              (inst -1 "p!1") (assert))))))))
       (then (hide -1 1 2) (inst -3 "y!3") (assert))
       (then (hide-all-but (-3 -4)) (inst -2 "y!3") (assert))
       (then (hide -1 2) (lemma "next_position_TCC5")
        (inst -1 "x!1" "x!2" "x!3") (assert))
       (then (hide 1) (inst -2 "x!3") (assert))
       (then (hide 2) (lemma "next_position_TCC12")
        (inst -1 "x!1" "x!2" "x!3") (assert)
        (inst -1 "delete(x!3, length(x!3) - 1)") (inst -1 "x!3")
        (assert))
       (then (hide 2) (rewrite "delete_is_position") (inst -1 "x!3")
        (assert))
       (then (hide 2) (inst -1 "x!3") (assert))
       (then (hide 2) (lemma "next_position_TCC5")
        (inst -1 "y!1" "y!2" "y!3") (assert))
       (then (hide 1) (inst -2 "y!3") (assert))
       (then (hide 2) (lemma "next_position_TCC12")
        (inst -1 "y!1" "y!2" "y!3") (assert)
        (inst -1 "delete(y!3, length(y!3) - 1)") (inst -1 "y!3")
        (assert))
       (then (hide 2) (rewrite "delete_is_position") (inst -1 "y!3")
        (assert))
       (then (hide 2) (inst -1 "y!3") (assert))
       (then (hide -2 2) (inst -3 "x!1`3") (assert))
       (then (hide-all-but (-3 -4)) (inst -2 "x!1`3") (assert))
       (then (hide-all-but (-2 -3 -4)) (inst -3 "y!1`3") (assert))
       (then (hide-all-but (-3 -4)) (inst -2 "y!1`3") (assert))
       (then (hide 2) (lemma "next_position_TCC5")
        (inst -1 "x!1`1" "x!1`2" "x!1`3") (assert))
       (then (hide 1) (inst -2 "x!1`3") (assert))
       (then (hide 2) (lemma "next_position_TCC12")
        (inst -1 "x!1`1" "x!1`2" "x!1`3") (assert)
        (inst -1 "delete(x!1`3, length(x!1`3) - 1)") (inst -1 "x!1`3")
        (assert))
       (then (hide 2) (rewrite "delete_is_position") (inst -1 "x!1`3")
        (assert))
       (then (hide 2) (inst -1 "x!1`3") (assert))
       (then (hide 2) (lemma "next_position_TCC5")
        (inst -1 "y!1`1" "y!1`2" "y!1`3") (assert))
       (then (hide 1) (inst -2 "y!1`3") (assert))
       (then (hide 2) (lemma "next_position_TCC12")
        (inst -1 "y!1`1" "y!1`2" "y!1`3") (assert)
        (inst -1 "delete(y!1`3, length(y!1`3) - 1)") (inst -1 "y!1`3")
        (assert))
       (then (hide 2) (rewrite "delete_is_position") (inst -1 "y!1`3")
        (assert))
       (then (hide 2) (inst -1 "y!1`3") (assert))
       (then (hide +) (inst -3 "p!1") (assert))
       (then (hide -1 +) (inst -2 "p!1") (assert))
       (then (hide 2) (lemma "next_position_TCC5")
        (inst -1 "s!1" "t!1" "p!1") (assert))
       (then (hide 1) (inst -2 "p!1") (assert))
       (then (hide 2) (lemma "next_position_TCC12")
        (inst -1 "s!1" "t!1" "p!1") (assert)
        (inst -1 "delete(p!1, length(p!1) - 1)") (inst -1 "p!1")
        (assert))
       (then (hide 2) (rewrite "delete_is_position") (inst -1 "p!1")
        (assert))
       (then (inst -1 "p!1") (assert)))))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (delete const-decl "finseq" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (delete_is_position formula-decl nil positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures))
   shostak)
  (next_pos_length_and_last-1 nil 3506181434
   ("" (lemma "empty_0[posnat]")
    ((""
      (measure-induct+
       "lex2(length(p),  arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))"
       ("s" "t" "p"))
      (("1"
        (name-replace "p!1" "next_position(x!1, x!2, x!3)" :hide? nil)
        (("1" (inst -3 "x!3")
          (("1" (assert)
            (("1" (ground)
              (("1" (expand "next_position" -1)
                (("1" (lift-if)
                  (("1" (ground)
                    (("1" (hide -2 1 2)
                      (("1" (replace -1 1 rl)
                        (("1" (hide -1)
                          (("1" (expand "delete")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 -3 -4 1 3)
                      (("2" (replace -1 1 rl)
                        (("2" (hide -1)
                          (("2"
                            (expand* "add_last" "delete" "insert?"
                             "finseq_appl")
                            nil nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (inst -5 "x!1" "x!2"
                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                      (("1" (replace -2 -5)
                        (("1" (split -5)
                          (("1"
                            (case "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)")
                            (("1" (assert) nil nil)
                             ("2" (hide - 2 3)
                              (("2"
                                (expand*
                                 "add_last"
                                 "delete"
                                 "insert?"
                                 "finseq_appl")
                                nil
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (case "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide - 2 3)
                                (("2"
                                  (expand*
                                   "add_last"
                                   "delete"
                                   "insert?"
                                   "finseq_appl")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -2 2 3)
                            (("3" (lemma "next_position_TCC17")
                              (("3"
                                (inst -1 "x!1" "x!2" "x!3")
                                (("3"
                                  (assert)
                                  (("3"
                                    (inst
                                     -1
                                     "delete(x!3, length(x!3) - 1)")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (inst
                                         -1
                                         "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (lift-if)
                                            (("3"
                                              (prop)
                                              (("3"
                                                (hide-all-but (-1 2))
                                                (("3"
                                                  (expand*
                                                   "add_last"
                                                   "insert?"
                                                   "finseq_appl")
                                                  (("3"
                                                    (decompose-equality)
                                                    (("3"
                                                      (hide -2)
                                                      (("3"
                                                        (lemma
                                                         "empty_0[posnat]")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "empty_seq")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "next_position_TCC15")
                        (("2" (inst -1 "x!1" "x!2" "x!3")
                          (("2" (assert)
                            (("2"
                              (inst -1 "delete(x!3, length(x!3) - 1)")
                              (("2"
                                (assert)
                                (("2"
                                  (inst
                                   -1
                                   "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide - 2 3)
                                      (("2"
                                        (expand*
                                         "add_last"
                                         "delete"
                                         "insert?"
                                         "finseq_appl")
                                        (("2"
                                          (decompose-equality)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (lemma "empty_0[posnat]")
                                              (("2"
                                                (inst -1 "empty_seq")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4"
                      (inst -3 "x!1" "x!2"
                       "delete(x!3, length(x!3) - 1)")
                      (("1" (replace -1 -3)
                        (("1" (split -3)
                          (("1" (expand "delete" -1)
                            (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (expand "delete" -1)
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (assert)
                            (("3" (hide -1 4 5)
                              (("3"
                                (lemma "next_position_TCC19")
                                (("3"
                                  (inst -1 "x!1" "x!2" "x!3")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (inst
                                       -1
                                       "delete(x!3, length(x!3) - 1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst
                                           -1
                                           "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "delete_is_position")
                        (("2" (rewrite "delete_is_position") nil nil))
                        nil))
                      nil)
                     ("5" (hide -1 -3 -4 1)
                      (("5" (lemma "empty_0[posnat]")
                        (("5" (inst -1 "p!1") (("5" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "next_position" -1)
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (hide -2 1 2)
                      (("1" (replace -1 1 rl)
                        (("1" (hide -1)
                          (("1" (expand "delete")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 -3 -4 1 3)
                      (("2" (replace -1 1 rl)
                        (("2" (hide -1)
                          (("2"
                            (expand* "add_last" "delete" "insert?"
                             "finseq_appl")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (inst -5 "x!1" "x!2"
                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                      (("1" (replace -2 -5)
                        (("1" (split -5)
                          (("1" (hide-all-but (-1 2 3))
                            (("1"
                              (expand* "add_last" "delete" "insert?"
                               "finseq_appl")
                              nil nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide -1 -3 -4 -5 -6 2)
                              (("2"
                                (case
                                 "last(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = 1 + last(x!3)")
                                (("1"
                                  (replaces -1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand*
                                     "add_last"
                                     "delete"
                                     "insert?"
                                     "finseq_appl")
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "next_position_TCC17")
                            (("3" (inst -1 "x!1" "x!2" "x!3")
                              (("3"
                                (assert)
                                (("3"
                                  (inst
                                   -1
                                   "delete(x!3, length(x!3) - 1)")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (inst
                                       -1
                                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (prop)
                                            (("3"
                                              (hide
                                               -2
                                               -3
                                               -4
                                               -5
                                               -6
                                               1
                                               2
                                               4)
                                              (("3"
                                                (expand*
                                                 "add_last"
                                                 "delete"
                                                 "insert?"
                                                 "finseq_appl")
                                                (("3"
                                                  (decompose-equality)
                                                  (("3"
                                                    (hide -2)
                                                    (("3"
                                                      (lemma
                                                       "empty_0[posnat]")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "empty_seq")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "next_position_TCC15")
                        (("2" (inst -1 "x!1" "x!2" "x!3")
                          (("2" (assert)
                            (("2"
                              (inst -1 "delete(x!3, length(x!3) - 1)")
                              (("2"
                                (assert)
                                (("2"
                                  (inst
                                   -1
                                   "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide - 2 3)
                                      (("2"
                                        (expand*
                                         "add_last"
                                         "delete"
                                         "insert?"
                                         "finseq_appl")
                                        (("2"
                                          (decompose-equality)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (lemma "empty_0[posnat]")
                                              (("2"
                                                (inst -1 "empty_seq")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4"
                      (inst -3 "x!1" "x!2"
                       "delete(x!3, length(x!3) - 1)")
                      (("1" (lemma "next_position_TCC19")
                        (("1" (inst -1 "x!1" "x!2" "x!3")
                          (("1" (assert)
                            (("1"
                              (inst -1 "delete(x!3, length(x!3) - 1)")
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -1
                                   "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (replace -1 -3)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (case
                                             "length(delete(x!3, length(x!3) - 1)) < length(x!3)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but (1 6))
                                              (("2"
                                                (expand "delete")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "length(delete(x!3, length(x!3) - 1)) < length(x!3)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but (1 6))
                                              (("2"
                                                (expand "delete")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "delete_is_position")
                        (("2" (rewrite "delete_is_position") nil nil))
                        nil))
                      nil)
                     ("5" (hide-all-but (-2 3 4))
                      (("5" (lemma "empty_0[posnat]")
                        (("5" (inst -1 "p!1") (("5" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -2 1 2)
        (("2" (inst -3 "y!3") (("2" (assert) nil nil)) nil)) nil)
       ("3" (hide-all-but (-3 -4))
        (("3" (inst -2 "y!3") (("3" (assert) nil nil)) nil)) nil)
       ("4" (hide -1 2)
        (("4" (lemma "next_position_TCC5")
          (("4" (inst -1 "x!1" "x!2" "x!3") (("4" (assert) nil nil))
            nil))
          nil))
        nil)
       ("5" (hide 1)
        (("5" (inst -2 "x!3") (("5" (assert) nil nil)) nil)) nil)
       ("6" (hide 2)
        (("6" (lemma "next_position_TCC12")
          (("6" (inst -1 "x!1" "x!2" "x!3")
            (("6" (assert)
              (("6" (inst -1 "delete(x!3, length(x!3) - 1)")
                (("6" (inst -1 "x!3") (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (hide 2)
        (("7" (rewrite "delete_is_position")
          (("7" (inst -1 "x!3") (("7" (assert) nil nil)) nil)) nil))
        nil)
       ("8" (hide 2)
        (("8" (inst -1 "x!3") (("8" (assert) nil nil)) nil)) nil)
       ("9" (hide 2)
        (("9" (lemma "next_position_TCC5")
          (("9" (inst -1 "y!1" "y!2" "y!3") (("9" (assert) nil nil))
            nil))
          nil))
        nil)
       ("10" (hide 1)
        (("10" (inst -2 "y!3") (("10" (assert) nil nil)) nil)) nil)
       ("11" (hide 2)
        (("11" (lemma "next_position_TCC12")
          (("11" (inst -1 "y!1" "y!2" "y!3")
            (("11" (assert)
              (("11" (inst -1 "delete(y!3, length(y!3) - 1)")
                (("11" (inst -1 "y!3") (("11" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("12" (hide 2)
        (("12" (rewrite "delete_is_position")
          (("12" (inst -1 "y!3") (("12" (assert) nil nil)) nil)) nil))
        nil)
       ("13" (hide 2)
        (("13" (inst -1 "y!3") (("13" (assert) nil nil)) nil)) nil)
       ("14" (hide -2 2)
        (("14" (inst -3 "x!1`3") (("14" (assert) nil nil)) nil)) nil)
       ("15" (hide-all-but (-3 -4))
        (("15" (inst -2 "x!1`3") (("15" (assert) nil nil)) nil)) nil)
       ("16" (hide-all-but (-1 -3 -4))
        (("16" (inst -3 "y!1`3") (("16" (assert) nil nil)) nil)) nil)
       ("17" (hide-all-but (-3 -4))
        (("17" (inst -2 "y!1`3") (("17" (assert) nil nil)) nil)) nil)
       ("18" (hide 2)
        (("18" (lemma "next_position_TCC5")
          (("18" (inst -1 "x!1`1" "x!1`2" "x!1`3")
            (("18" (assert) nil nil)) nil))
          nil))
        nil)
       ("19" (hide 1)
        (("19" (inst -2 "x!1`3") (("19" (assert) nil nil)) nil)) nil)
       ("20" (hide 2)
        (("20" (lemma "next_position_TCC12")
          (("20" (inst -1 "x!1`1" "x!1`2" "x!1`3")
            (("20" (assert)
              (("20" (inst -1 "delete(x!1`3, length(x!1`3) - 1)")
                (("20" (inst -1 "x!1`3") (("20" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("21" (hide 2)
        (("21" (rewrite "delete_is_position")
          (("21" (inst -1 "x!1`3") (("21" (assert) nil nil)) nil))
          nil))
        nil)
       ("22" (hide 2)
        (("22" (inst -1 "x!1`3") (("22" (assert) nil nil)) nil)) nil)
       ("23" (hide 2)
        (("23" (lemma "next_position_TCC5")
          (("23" (inst -1 "y!1`1" "y!1`2" "y!1`3")
            (("23" (assert) nil nil)) nil))
          nil))
        nil)
       ("24" (hide 1)
        (("24" (inst -2 "y!1`3") (("24" (assert) nil nil)) nil)) nil)
       ("25" (hide 2)
        (("25" (lemma "next_position_TCC12")
          (("25" (inst -1 "y!1`1" "y!1`2" "y!1`3")
            (("25" (assert)
              (("25" (inst -1 "delete(y!1`3, length(y!1`3) - 1)")
                (("25" (inst -1 "y!1`3") (("25" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("26" (hide 2)
        (("26" (rewrite "delete_is_position")
          (("26" (inst -1 "y!1`3") (("26" (assert) nil nil)) nil))
          nil))
        nil)
       ("27" (hide 2)
        (("27" (inst -1 "y!1`3") (("27" (assert) nil nil)) nil)) nil)
       ("28" (hide +)
        (("28" (inst -3 "p!1") (("28" (assert) nil nil)) nil)) nil)
       ("29" (hide -1 +)
        (("29" (inst -2 "p!1") (("29" (assert) nil nil)) nil)) nil)
       ("30" (hide 2)
        (("30" (lemma "next_position_TCC5")
          (("30" (inst -1 "s!1" "t!1" "p!1") (("30" (assert) nil nil))
            nil))
          nil))
        nil)
       ("31" (hide 1)
        (("31" (inst -2 "p!1") (("31" (assert) nil nil)) nil)) nil)
       ("32" (hide 2)
        (("32" (lemma "next_position_TCC12")
          (("32" (inst -1 "s!1" "t!1" "p!1")
            (("32" (assert)
              (("32" (inst -1 "delete(p!1, length(p!1) - 1)")
                (("32" (inst -1 "p!1") (("32" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("33" (hide 2)
        (("33" (rewrite "delete_is_position")
          (("33" (inst -1 "p!1") (("33" (assert) nil nil)) nil)) nil))
        nil)
       ("34" (inst -1 "p!1") (("34" (assert) nil nil)) nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (delete const-decl "finseq" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (delete_is_position formula-decl nil positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures))
   shostak))
 (next_pos_is_a_diff_pos 0
  (next_pos_is_a_diff_pos-1 nil 3504615157
   (""
    (then (skosimp) (lemma "next_pos_length_and_last")
     (spread (inst -1 "s!1" "t!1" "p!1") ((assert) (assert))))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (member_right_pos 0
  (member_right_pos-2 "" 3790333668
   (""
    (then (measure-induct+ "length(p)" ("s" "p")) (skosimp)
     (expand "member")
     (spread (prop)
      ((then (expand "right_pos" -1)
        (spread (prop)
         ((then (hide 2 -3) (expand "only_empty_seq") (assert))
          (then (expand "union")
           (spread (prop)
            ((then (expand "member")
              (spread (prop)
               ((then (hide -2 1 3) (expand "singleton") (assert))
                (spread (inst -2 "x!1" "delete(x!2, length(x!2) - 1)")
                 ((then (inst -2 "q!1") (expand "delete" -2 1)
                   (rewrite "empty_0") (assert)
                   (spread (prop)
                    ((then (hide -2) (expand "left_pos") (skosimp)
                      (spread (prop)
                       ((spread
                         (inst 5 "r!1" "p1!1 o #(last(x!2))" "q1!1")
                         ((then (flatten) (hide 6) (assert)
                           (spread (prop)
                            ((then (hide-all-but -1) (grind))
                             (then (rewrite "o_assoc")
                              (replace -2 1 rl) (hide - 2 3 5)
                              (expand "delete") (rewrite "empty_0")
                              (expand "finseq_appl")
                              (spread (decompose-equality)
                               ((grind)
                                (spread
                                 (decompose-equality)
                                 ((grind)
                                  (then
                                   (lemma "empty_0[posnat]")
                                   (inst -1 "x!2")
                                   (assert))))
                                (then
                                 (lemma "empty_0[posnat]")
                                 (inst -1 "x!2")
                                 (assert))))))))
                          (then (hide-all-but (1 4)) (flatten)
                           (rewrite "empty_0"))))
                        (spread
                         (inst 6 "r!1" "p1!1 o #(last(x!2))" "q1!1")
                         ((then (flatten) (hide 6) (assert)
                           (spread (prop)
                            ((then (rewrite "o_assoc")
                              (replace -2 1 rl) (hide - 2 3 4 6)
                              (expand "delete") (rewrite "empty_0")
                              (expand "finseq_appl")
                              (spread (decompose-equality)
                               ((grind)
                                (spread
                                 (decompose-equality)
                                 ((grind)
                                  (then
                                   (lemma "empty_0[posnat]")
                                   (inst -1 "x!2")
                                   (assert))))
                                (then
                                 (lemma "empty_0[posnat]")
                                 (inst -1 "x!2")
                                 (assert)))))
                             (then (hide-all-but -1) (grind))
                             (then (rewrite "first_compo")
                              (hide-all-but (1 4)) (flatten)
                              (rewrite "empty_0")))))
                          (then (hide-all-but (1 5)) (flatten)
                           (rewrite "empty_0")))))))
                     (then (hide -2 1) (expand "left_pos")
                      (spread
                       (inst 3 "delete(x!2, length(x!2) - 1)"
                        "#(last(x!2))" "empty_seq")
                       ((then (assert)
                         (spread (prop)
                          ((then (hide-all-but -1) (grind))
                           (then (hide -1 3) (expand "delete")
                            (rewrite "empty_0")
                            (spread (decompose-equality)
                             ((grind)
                              (spread (decompose-equality)
                               ((grind)
                                (then
                                 (lemma "empty_0[posnat]")
                                 (inst -1 "x!2")
                                 (assert))))
                              (then (lemma "empty_0[posnat]")
                               (inst -1 "x!2") (assert))))))))
                        (then (hide -1 3) (flatten)
                         (rewrite "empty_0"))
                        (then (hide -1 3) (lemma "empty_0[posnat]")
                         (inst -1 "x!2") (assert))))))))
                  (then (rewrite "delete_is_position")
                   (hide-all-but (1 3)) (flatten) (rewrite "empty_0"))
                  (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
                   (inst -1 "x!2") (assert)))))))
             (then (hide -2) (expand* "member" "IUnion") (skosimp*)
              (expand "left_pos")
              (spread
               (inst 3 "delete(x!2, length(x!2) - 1)" "#(last(x!2))"
                "#(1 + i!1 + last(x!2)) o q1!1")
               ((then (flatten) (hide 3)
                 (spread (prop)
                  ((then (hide -1 3) (replaces -1) (expand "delete")
                    (rewrite "empty_0") (assert)
                    (spread (decompose-equality)
                     ((grind)
                      (spread (decompose-equality)
                       ((grind)
                        (then (lemma "empty_0[posnat]") (inst -1 "x!2")
                         (assert))))
                      (then (lemma "empty_0[posnat]") (inst -1 "x!2")
                       (assert)))))
                   (then (hide - 3) (expand "delete")
                    (rewrite "empty_0") (assert)
                    (spread (decompose-equality)
                     ((grind)
                      (spread (decompose-equality)
                       ((grind)
                        (then (lemma "empty_0[posnat]") (inst -1 "x!2")
                         (assert))))
                      (then (lemma "empty_0[posnat]") (inst -1 "x!2")
                       (assert)))))
                   (then (hide-all-but -1) (grind))
                   (then (hide-all-but -1) (grind))
                   (spread (rewrite "first_compo")
                    ((then (hide-all-but 1) (grind))
                     (then (hide-all-but -1) (grind)))))))
                (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
                 (inst -1 "x!2") (assert)))))))))))
       (spread (case "x!2 = empty_seq")
        ((then (hide -3)
          (expand* "left_pos" "right_pos" "only_empty_seq") (assert)
          (skosimp)
          (spread (prop)
           ((then (replaces -3) (lemma "seq_empty[posnat]")
             (inst -1 "r!1" "p1!1") (assert) (lemma "empty_0[posnat]")
             (inst -1 "r!1") (assert))
            (then (replaces -4) (hide -1 -3)
             (lemma "seq_empty[posnat]") (inst -1 "r!1" "p1!1")
             (assert) (lemma "empty_0[posnat]") (inst -1 "p1!1")
             (assert)))))
         (spread (case "q!1 = delete(x!2, length(x!2) - 1)")
          ((then (hide -2 -3) (expand "right_pos") (assert)
            (expand* "union" "member") (flatten) (hide 4)
            (replace -1 3 rl) (expand* "right_pos" "only_empty_seq")
            (prop) (expand* "union" "member") (flatten)
            (hide-all-but 2) (expand "singleton") (propax))
           (spread (inst -2 "x!1" "delete(x!2, length(x!2) - 1)")
            ((then (inst -2 "q!1") (expand "delete" -2 1)
              (rewrite "empty_0") (assert) (expand "right_pos" 3)
              (expand* "union" "member") (flatten 3) (assert)
              (hide 4 5) (expand* "singleton" "left_pos") (skosimp)
              (spread (prop)
               ((spread
                 (inst 5 "r!1" "delete(p1!1, length(p1!1) - 1)"
                  "empty_seq")
                 ((then (assert)
                   (spread (prop)
                    ((then (expand "o") (decompose-equality -3)
                      (expand* "delete" "finseq_appl")
                      (expand "empty_seq" -3) (decompose-equality -3)
                      (lemma "empty_0[posnat]") (inst -1 "p1!1")
                      (assert) (replaces -5) (decompose-equality 3)
                      (spread (decompose-equality 1)
                       ((then (decompose-equality -4) (inst -1 "x!3")
                         (assert))
                        (then (skosimp)
                         (spread (prop) ((assert) (assert)))))))
                     (then (expand "delete" 1) (rewrite "empty_0")
                      (rewrite "empty_0") (expand "o")
                      (expand "finseq_appl") (decompose-equality -2)
                      (assert)
                      (spread (decompose-equality 1)
                       ((then (decompose-equality -2) (inst -1 "x!3"))
                        (then (skosimp)
                         (spread (prop) ((assert) (assert))))
                        (then (skosimp) (assert))
                        (then (hide-all-but (1 2))
                         (lemma "empty_0[posnat]") (inst -1 "p1!1")
                         (assert))
                        (then (hide-all-but (1 4))
                         (lemma "empty_0[posnat]") (inst -1 "x!2")
                         (assert))))))))
                  (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
                   (inst -1 "p1!1") (assert))))
                (spread
                 (inst 6 "r!1" "delete(p1!1, length(p1!1) - 1)" "q1!1")
                 ((then (flatten) (hide 6)
                   (spread (prop)
                    ((then (hide -1 -3 4)
                      (expand* "delete" "finseq_appl")
                      (rewrite "empty_0") (rewrite "empty_0") (assert)
                      (expand "o") (decompose-equality -1) (assert)
                      (decompose-equality -2)
                      (spread (decompose-equality 1)
                       ((inst -1 "x!3")
                        (then (skosimp)
                         (spread (prop) ((assert) (assert))))
                        (then (skosimp) (assert))
                        (then (hide-all-but (1 3))
                         (lemma "empty_0[posnat]") (inst -1 "p1!1")
                         (assert))
                        (then (hide-all-but (1 4))
                         (lemma "empty_0[posnat]") (inst -1 "x!2")
                         (assert)))))
                     (then (reveal 4) (expand "IUnion")
                      (spread (inst 1 "first(q1!1) - 1 - last(x!2)")
                       ((then (assert) (inst 1 "rest(q1!1)")
                         (spread (prop)
                          ((spread
                            (case "add_last(delete(x!2, length(x!2) - 1), first(q1!1)) o rest(q1!1) = r!1 o q1!1")
                            ((then (typepred "q!1")
                              (lemma "pos_subterm_ax")
                              (spread
                               (inst
                                -1
                                "add_last(delete(x!2, length(x!2) - 1), first(q1!1))"
                                "rest(q1!1)"
                                "x!1")
                               ((then (replace -3 -1) (assert))
                                (then
                                 (hide-all-but (1 6))
                                 (lemma "empty_0[posnat]")
                                 (inst -1 "x!2")
                                 (assert)))))
                             (then (hide 2)
                              (spread
                               (case
                                "r!1 = delete(x!2, length(x!2) - 1)")
                               ((then
                                 (replace -1 1 rl)
                                 (lemma "seq_first_rest_1[posnat]")
                                 (inst -1 "q1!1")
                                 (lemma "empty_0[posnat]")
                                 (inst -1 "q1!1")
                                 (assert)
                                 (spread
                                  (case
                                   "add_last(r!1, first(q1!1)) o rest(q1!1) = r!1 o ( #(first(q1!1)) o rest(q1!1))")
                                  ((then (replaces -1) (assert))
                                   (then
                                    (hide-all-but (1 4))
                                    (expand*
                                     "add_last"
                                     "insert?"
                                     "finseq_appl")
                                    (expand "o")
                                    (spread
                                     (prop)
                                     ((grind)
                                      (spread
                                       (decompose-equality 1)
                                       ((grind)
                                        (then (skosimp) (grind))
                                        (then (skosimp) (assert))
                                        (then (skosimp) (assert))
                                        (then
                                         (skosimp)
                                         (assert))))))))))
                                (then
                                 (hide -2 -4 2 3 5 7)
                                 (expand* "delete" "finseq_appl")
                                 (rewrite "empty_0")
                                 (rewrite "empty_0")
                                 (spread
                                  (decompose-equality)
                                  ((then
                                    (expand "empty_seq" -1)
                                    (flatten)
                                    (hide -2)
                                    (expand "o")
                                    (decompose-equality -2)
                                    (assert))
                                   (then
                                    (expand "empty_seq" -1)
                                    (flatten)
                                    (hide -2)
                                    (expand "o")
                                    (decompose-equality -2)
                                    (decompose-equality -2)
                                    (spread
                                     (decompose-equality 1)
                                     ((then (inst -1 "x!3") (assert))
                                      (then
                                       (hide -1)
                                       (skosimp)
                                       (spread
                                        (prop)
                                        ((assert) (assert)))))))
                                   (then
                                    (lemma "empty_0[posnat]")
                                    (inst -1 "x!2")
                                    (assert))))))))))
                           (spread
                            (case "r!1 = delete(x!2, length(x!2) - 1)")
                            ((then (replace -1 1 rl)
                              (hide -1 -2 -4 -5 3 4 5 6) (expand "o")
                              (decompose-equality -1)
                              (decompose-equality -2)
                              (spread (decompose-equality 1)
                               ((then
                                 (lemma "seq_first_rest_1[posnat]")
                                 (inst -1 "q1!1")
                                 (lemma "empty_0[posnat]")
                                 (inst -1 "q1!1")
                                 (assert)
                                 (expand "o")
                                 (decompose-equality -1))
                                (spread
                                 (decompose-equality 1)
                                 ((then (inst -1 "x!3") (grind))
                                  (then
                                   (skosimp)
                                   (hide -1)
                                   (lemma "seq_first_rest_1[posnat]")
                                   (inst -1 "q1!1")
                                   (lemma "empty_0[posnat]")
                                   (inst -1 "q1!1")
                                   (assert)
                                   (expand "o")
                                   (decompose-equality -1)
                                   (spread (prop) ((assert) (assert))))
                                  (then (skosimp) (assert))
                                  (then (skosimp) (rewrite "empty_0"))
                                  (then (skosimp) (rewrite "empty_0"))
                                  (then (skosimp) (assert))
                                  (then (skosimp) (rewrite "empty_0"))
                                  (then
                                   (hide -)
                                   (flatten)
                                   (rewrite "empty_0"))))
                                (then (skosimp) (assert))
                                (then (skosimp) (assert)))))
                             (then (hide -2 -4 2 3 5 7)
                              (expand* "delete" "finseq_appl")
                              (rewrite "empty_0") (rewrite "empty_0")
                              (expand "empty_seq" -1) (flatten)
                              (hide -2) (expand "o")
                              (decompose-equality -2)
                              (decompose-equality -2)
                              (decompose-equality 1)
                              (spread (decompose-equality 1)
                               ((then (inst -1 "x!3") (assert))
                                (then (skosimp) (ground))))))))))
                        (spread (prop)
                         ((spread (case "last(x!2) = first(p1!1)")
                           ((then (replace -1) (assert))
                            (then (hide-all-but (-1 -3 1 4 6))
                             (expand* "last" "first" "finseq_appl")
                             (expand "o") (decompose-equality -2)
                             (decompose-equality -2)
                             (spread (inst -1 "x!2`length - 1")
                              ((then
                                (expand "delete" -3)
                                (rewrite "empty_0")
                                (assert)
                                (expand "empty_seq" -3)
                                (flatten)
                                (hide -4)
                                (assert))
                               (then
                                (lemma "empty_0[posnat]")
                                (inst -1 "x!2")
                                (assert)))))))
                          (then (name "pi" "r!1 o #(first(q1!1))")
                           (spread
                            (case "delete(x!2, length(x!2) - 1) = r!1")
                            ((then (replaces -1)
                              (spread (case "first(q1!1) =  last(pi)")
                               ((then
                                 (replaces -1)
                                 (lemma "next_position_TCC5")
                                 (spread
                                  (inst -1 "x!1" "x!1" "pi")
                                  ((spread
                                    (prop)
                                    ((spread
                                      (case
                                       "delete(pi, length(pi) - 1) = r!1")
                                      ((then (replaces -1) (assert))
                                       (then
                                        (hide-all-but (-2 1))
                                        (expand*
                                         "delete"
                                         "finseq_appl")
                                        (lift-if)
                                        (spread
                                         (prop)
                                         ((grind)
                                          (spread
                                           (decompose-equality 2)
                                           ((then
                                             (expand "o")
                                             (decompose-equality -1)
                                             (hide -2)
                                             (grind))
                                            (then
                                             (decompose-equality 1)
                                             (expand "o")
                                             (decompose-equality -1)
                                             (decompose-equality -2)
                                             (spread
                                              (inst -1 "x!3")
                                              ((then
                                                (typepred "x!3")
                                                (grind))
                                               (grind))))
                                            (grind))))))
                                       (then
                                        (hide-all-but (-2 1))
                                        (grind))))
                                     (then
                                      (hide-all-but (-1 -2))
                                      (grind))))
                                   (then
                                    (reveal -2)
                                    (lemma "seq_first_rest_1[posnat]")
                                    (inst -1 "q1!1")
                                    (lemma "empty_0[posnat]")
                                    (inst -1 "q1!1")
                                    (assert)
                                    (replace -1 -5)
                                    (lemma "pos_ax")
                                    (rewrite "o_assoc")
                                    (inst
                                     -1
                                     "r!1 o  #(first(q1!1))"
                                     "rest(q1!1)"
                                     "x!1")
                                    (assert)))))
                                (then
                                 (hide-all-but (-1 1 3))
                                 (expand* "first" "last" "finseq_appl")
                                 (expand "o")
                                 (decompose-equality -1)
                                 (decompose-equality -2)
                                 (spread
                                  (inst -1 "pi`length - 1")
                                  ((then
                                    (expand "#" -2)
                                    (assert)
                                    (replace -2 -1 rl)
                                    (assert)
                                    (expand "#")
                                    (assert))
                                   (grind))))
                                (then (hide-all-but (-1 1)) (grind)))))
                             (then (hide -1 -3 -5 2 3 5 7)
                              (expand "delete") (rewrite "empty_0")
                              (rewrite "empty_0") (assert)
                              (expand "finseq_appl")
                              (expand "empty_seq" -1) (flatten)
                              (hide -2)
                              (spread (decompose-equality 1)
                               ((then
                                 (expand "o")
                                 (decompose-equality -2))
                                (spread
                                 (decompose-equality 1)
                                 ((then
                                   (expand "o")
                                   (decompose-equality -2)
                                   (decompose-equality -2)
                                   (inst -1 "x!3")
                                   (assert))
                                  (then
                                   (hide - 2)
                                   (lemma "empty_0[posnat]")
                                   (inst -1 "x!2")
                                   (assert))))
                                (then
                                 (skosimp)
                                 (expand "o")
                                 (decompose-equality -2)
                                 (hide -2)
                                 (ground))
                                (then
                                 (hide - 2)
                                 (lemma "empty_0[posnat]")
                                 (inst -1 "x!2")
                                 (assert))))))))))
                        (then (hide-all-but (1 5)) (flatten)
                         (rewrite "empty_0")))))
                     (then (hide-all-but (-3 1 2 3))
                      (expand* "delete" "finseq_appl")
                      (rewrite "empty_0") (assert) (expand "first")
                      (expand "finseq_appl") (propax)))))
                  (then (hide-all-but (1 3)) (lemma "empty_0[posnat]")
                   (inst -1 "p1!1") (assert)))))))
             (then (rewrite "delete_is_position") (flatten)
              (rewrite "empty_0"))
             (then (lemma "empty_0[posnat]") (inst -1 "x!2")
              (assert))))
           (then (lemma "empty_0[posnat]") (inst -1 "x!2")
            (assert))))))
       (then (hide -3) (expand "left_pos") (skosimp)
        (spread (prop)
         ((then (replaces -1) (replaces -2) (expand "o")
           (decompose-equality -1) (hide -2) (lemma "empty_0[posnat]")
           (inst -1 "p1!1") (assert))
          (then (replaces -4) (replaces -1) (expand "o") (flatten)
           (decompose-equality -2)
           (spread (inst -1 "length(r!1)")
            ((then (assert) (expand "first") (expand "finseq_appl")
              (assert))
             (then (hide - 3) (lemma "empty_0[posnat]")
              (inst -1 "q1!1") (assert)))))))))))
    nil)
   ((only_empty_seq const-decl "positions" positions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (first const-decl "T" seq_extras structures)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (union const-decl "set" sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (rest const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (insert? const-decl "finseq" seq_extras structures)
    (pos_ax formula-decl nil positions nil)
    (seq_empty formula-decl nil seq_extras structures)
    (left_pos const-decl "bool" positions nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (member_right_pos-1 nil 3506959387
   ("" (measure-induct+ "length(p)" ("s" "p"))
    (("" (skosimp)
      (("" (expand "member")
        (("" (prop)
          (("1" (expand "right_pos" -1)
            (("1" (prop)
              (("1" (hide 2 -3)
                (("1" (expand "only_empty_seq")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (expand "union")
                (("2" (prop)
                  (("1" (expand "member")
                    (("1" (prop)
                      (("1" (hide -2 1 3)
                        (("1" (expand "singleton")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2"
                        (inst -2 "x!1" "delete(x!2, length(x!2) - 1)")
                        (("1" (inst -2 "q!1")
                          (("1" (expand "delete" -2 1)
                            (("1" (rewrite "empty_0")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "left_pos")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst
                                             5
                                             "r!1"
                                             "p1!1 o #(last(x!2))"
                                             "q1!1")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but -1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "o_assoc")
                                                      (("2"
                                                        (replace
                                                         -2
                                                         1
                                                         rl)
                                                        (("2"
                                                          (hide
                                                           -
                                                           2
                                                           3
                                                           5)
                                                          (("2"
                                                            (expand
                                                             "delete")
                                                            (("2"
                                                              (rewrite
                                                               "empty_0")
                                                              (("2"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (decompose-equality)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "empty_0[posnat]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x!2")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "empty_0[posnat]")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "x!2")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 4))
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite "empty_0")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst
                                             6
                                             "r!1"
                                             "p1!1 o #(last(x!2))"
                                             "q1!1")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (rewrite
                                                       "o_assoc")
                                                      (("1"
                                                        (replace
                                                         -2
                                                         1
                                                         rl)
                                                        (("1"
                                                          (hide
                                                           -
                                                           2
                                                           3
                                                           4
                                                           6)
                                                          (("1"
                                                            (expand
                                                             "delete")
                                                            (("1"
                                                              (rewrite
                                                               "empty_0")
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (decompose-equality)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "empty_0[posnat]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x!2")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "empty_0[posnat]")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "x!2")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but -1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (rewrite
                                                       "first_compo")
                                                      (("3"
                                                        (hide-all-but
                                                         (1 4))
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (rewrite
                                                             "empty_0")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 5))
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite "empty_0")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -2 1)
                                    (("2"
                                      (expand "left_pos")
                                      (("2"
                                        (inst
                                         3
                                         "delete(x!2, length(x!2) - 1)"
                                         "#(last(x!2))"
                                         "empty_seq")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide-all-but -1)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (hide -1 3)
                                              (("2"
                                                (expand "delete")
                                                (("2"
                                                  (rewrite "empty_0")
                                                  (("2"
                                                    (decompose-equality)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (decompose-equality)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "empty_0[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "empty_0[posnat]")
                                                      (("3"
                                                        (inst -1 "x!2")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 3)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite "empty_0")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -1 3)
                                          (("3"
                                            (lemma "empty_0[posnat]")
                                            (("3"
                                              (inst -1 "x!2")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "delete_is_position")
                          (("2" (hide-all-but (1 3))
                            (("2" (flatten)
                              (("2" (rewrite "empty_0") nil nil)) nil))
                            nil))
                          nil)
                         ("3" (hide-all-but (1 2))
                          (("3" (lemma "empty_0[posnat]")
                            (("3" (inst -1 "x!2")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (expand* "member" "IUnion")
                      (("2" (skosimp*)
                        (("2" (expand "left_pos")
                          (("2"
                            (inst 3 "delete(x!2, length(x!2) - 1)"
                             "#(last(x!2))"
                             "#(1 + i!1 + last(x!2)) o q1!1")
                            (("1" (flatten)
                              (("1"
                                (hide 3)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide -1 3)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "delete")
                                        (("1"
                                          (rewrite "empty_0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (decompose-equality)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (decompose-equality)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (lemma
                                                   "empty_0[posnat]")
                                                  (("2"
                                                    (inst -1 "x!2")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "empty_0[posnat]")
                                                (("3"
                                                  (inst -1 "x!2")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide - 3)
                                    (("2"
                                      (expand "delete")
                                      (("2"
                                        (rewrite "empty_0")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (decompose-equality)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (decompose-equality)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (lemma
                                                 "empty_0[posnat]")
                                                (("2"
                                                  (inst -1 "x!2")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma "empty_0[posnat]")
                                              (("3"
                                                (inst -1 "x!2")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but -1)
                                    (("3" (grind) nil nil))
                                    nil)
                                   ("4"
                                    (hide-all-but -1)
                                    (("4" (grind) nil nil))
                                    nil)
                                   ("5"
                                    (rewrite "first_compo")
                                    (("1"
                                      (hide-all-but 1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 2))
                              (("2"
                                (lemma "empty_0[posnat]")
                                (("2"
                                  (inst -1 "x!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "x!2 = empty_seq")
            (("1" (hide -3)
              (("1" (expand* "left_pos" "right_pos" "only_empty_seq")
                (("1" (assert)
                  (("1" (skosimp)
                    (("1" (prop)
                      (("1" (replaces -3)
                        (("1" (lemma "seq_empty[posnat]")
                          (("1" (inst -1 "r!1" "p1!1")
                            (("1" (assert)
                              (("1"
                                (lemma "empty_0[posnat]")
                                (("1"
                                  (inst -1 "r!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replaces -4)
                        (("2" (hide -1 -3)
                          (("2" (lemma "seq_empty[posnat]")
                            (("2" (inst -1 "r!1" "p1!1")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "empty_0[posnat]")
                                  (("2"
                                    (inst -1 "p1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "q!1 = delete(x!2, length(x!2) - 1)")
              (("1" (hide -2 -3)
                (("1" (expand "right_pos")
                  (("1" (assert)
                    (("1" (expand* "union" "member")
                      (("1" (flatten)
                        (("1" (hide 4)
                          (("1" (replace -1 3 rl)
                            (("1"
                              (expand* "right_pos" "only_empty_seq")
                              (("1"
                                (prop)
                                (("1"
                                  (expand* "union" "member")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide-all-but 2)
                                      (("1"
                                        (expand "singleton")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 "x!1" "delete(x!2, length(x!2) - 1)")
                (("1" (inst -2 "q!1")
                  (("1" (expand "delete" -2 1)
                    (("1" (rewrite "empty_0")
                      (("1" (assert)
                        (("1" (expand "right_pos" 3)
                          (("1" (expand* "union" "member")
                            (("1" (flatten 3)
                              (("1"
                                (assert)
                                (("1"
                                  (hide 4 5)
                                  (("1"
                                    (expand* "singleton" "left_pos")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst
                                           5
                                           "r!1"
                                           "delete(p1!1, length(p1!1) - 1)"
                                           "empty_seq")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (decompose-equality
                                                   -3)
                                                  (("1"
                                                    (expand*
                                                     "delete"
                                                     "finseq_appl")
                                                    (("1"
                                                      (expand
                                                       "empty_seq"
                                                       -3)
                                                      (("1"
                                                        (decompose-equality
                                                         -3)
                                                        (("1"
                                                          (lemma
                                                           "empty_0[posnat]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -5)
                                                                (("1"
                                                                  (decompose-equality
                                                                   3)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -4)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x!3")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "delete" 1)
                                                (("2"
                                                  (rewrite "empty_0")
                                                  (("2"
                                                    (rewrite "empty_0")
                                                    (("2"
                                                      (expand "o")
                                                      (("2"
                                                        (expand
                                                         "finseq_appl")
                                                        (("2"
                                                          (decompose-equality
                                                           -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (decompose-equality
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!3")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide-all-but
                                                                 (1 2))
                                                                (("4"
                                                                  (lemma
                                                                   "empty_0[posnat]")
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "p1!1")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (hide-all-but
                                                                 (1 4))
                                                                (("5"
                                                                  (lemma
                                                                   "empty_0[posnat]")
                                                                  (("5"
                                                                    (inst
                                                                     -1
                                                                     "x!2")
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 2))
                                            (("2"
                                              (lemma "empty_0[posnat]")
                                              (("2"
                                                (inst -1 "p1!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst
                                           6
                                           "r!1"
                                           "delete(p1!1, length(p1!1) - 1)"
                                           "q1!1")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 6)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -1 -3 4)
                                                  (("1"
                                                    (expand*
                                                     "delete"
                                                     "finseq_appl")
                                                    (("1"
                                                      (rewrite
                                                       "empty_0")
                                                      (("1"
                                                        (rewrite
                                                         "empty_0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "o")
                                                            (("1"
                                                              (decompose-equality
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x!3")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide-all-but
                                                                       (1
                                                                        3))
                                                                      (("4"
                                                                        (lemma
                                                                         "empty_0[posnat]")
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "p1!1")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (hide-all-but
                                                                       (1
                                                                        4))
                                                                      (("5"
                                                                        (lemma
                                                                         "empty_0[posnat]")
                                                                        (("5"
                                                                          (inst
                                                                           -1
                                                                           "x!2")
                                                                          (("5"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal 4)
                                                  (("2"
                                                    (expand "IUnion")
                                                    (("2"
                                                      (inst
                                                       1
                                                       "first(q1!1) - 1 - last(x!2)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "rest(q1!1)")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (case
                                                               "add_last(delete(x!2, length(x!2) - 1),
                                     first(q1!1)) o rest(q1!1)
             = r!1 o q1!1")
                                                              (("1"
                                                                (typepred
                                                                 "q!1")
                                                                (("1"
                                                                  (lemma
                                                                   "pos_subterm_ax")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "add_last(delete(x!2, length(x!2) - 1), first(q1!1))"
                                                                     "rest(q1!1)"
                                                                     "x!1")
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        6))
                                                                      (("2"
                                                                        (lemma
                                                                         "empty_0[posnat]")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "x!2")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (case
                                                                   "r!1 = delete(x!2, length(x!2) - 1)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "seq_first_rest_1[posnat]")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "q1!1")
                                                                        (("1"
                                                                          (lemma
                                                                           "empty_0[posnat]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "q1!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "add_last(r!1, first(q1!1)) o rest(q1!1) = r!1 o ( #(first(q1!1)) o rest(q1!1))")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    4))
                                                                                  (("2"
                                                                                    (expand*
                                                                                     "add_last"
                                                                                     "insert?"
                                                                                     "finseq_appl")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "o")
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (skosimp)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (skosimp)
                                                                                            (("5"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -2
                                                                     -4
                                                                     2
                                                                     3
                                                                     5
                                                                     7)
                                                                    (("2"
                                                                      (expand*
                                                                       "delete"
                                                                       "finseq_appl")
                                                                      (("2"
                                                                        (rewrite
                                                                         "empty_0")
                                                                        (("2"
                                                                          (rewrite
                                                                           "empty_0")
                                                                          (("2"
                                                                            (decompose-equality)
                                                                            (("1"
                                                                              (expand
                                                                               "empty_seq"
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "o")
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "empty_seq"
                                                                               -1)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "o")
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         -2)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!3")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (lemma
                                                                               "empty_0[posnat]")
                                                                              (("3"
                                                                                (inst
                                                                                 -1
                                                                                 "x!2")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "r!1 = delete(x!2, length(x!2) - 1)")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 rl)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -4
                                                                   -5
                                                                   3
                                                                   4
                                                                   5
                                                                   6)
                                                                  (("1"
                                                                    (expand
                                                                     "o")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         -2)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (lemma
                                                                             "seq_first_rest_1[posnat]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "q1!1")
                                                                              (("1"
                                                                                (lemma
                                                                                 "empty_0[posnat]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "q1!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "o")
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!3")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "seq_first_rest_1[posnat]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "q1!1")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "empty_0[posnat]")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "q1!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "o")
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               -1)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skosimp)
                                                                              (("4"
                                                                                (rewrite
                                                                                 "empty_0")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (skosimp)
                                                                              (("5"
                                                                                (rewrite
                                                                                 "empty_0")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (skosimp)
                                                                              (("6"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("7"
                                                                              (skosimp)
                                                                              (("7"
                                                                                (rewrite
                                                                                 "empty_0")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("8"
                                                                              (hide
                                                                               -)
                                                                              (("8"
                                                                                (flatten)
                                                                                (("8"
                                                                                  (rewrite
                                                                                   "empty_0")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (skosimp)
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 -4
                                                                 2
                                                                 3
                                                                 5
                                                                 7)
                                                                (("2"
                                                                  (expand*
                                                                   "delete"
                                                                   "finseq_appl")
                                                                  (("2"
                                                                    (rewrite
                                                                     "empty_0")
                                                                    (("2"
                                                                      (rewrite
                                                                       "empty_0")
                                                                      (("2"
                                                                        (expand
                                                                         "empty_seq"
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "o")
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 -2)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   -2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!3")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (prop)
                                                        (("1"
                                                          (case
                                                           "last(x!2) = first(p1!1)")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1
                                                              -3
                                                              1
                                                              4
                                                              6))
                                                            (("2"
                                                              (expand*
                                                               "last"
                                                               "first"
                                                               "finseq_appl")
                                                              (("2"
                                                                (expand
                                                                 "o")
                                                                (("2"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -2)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x!2`length - 1")
                                                                      (("1"
                                                                        (expand
                                                                         "delete"
                                                                         -3)
                                                                        (("1"
                                                                          (rewrite
                                                                           "empty_0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "empty_seq"
                                                                               -3)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -4)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "empty_0[posnat]")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "x!2")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (name
                                                           "pi"
                                                           "r!1 o #(first(q1!1))")
                                                          (("2"
                                                            (case
                                                             "delete(x!2, length(x!2) - 1) = r!1")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "first(q1!1) =  last(pi)")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "next_position_TCC5")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x!1"
                                                                       "x!1"
                                                                       "pi")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (case
                                                                           "delete(pi, length(pi) - 1) = r!1")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("2"
                                                                              (expand*
                                                                               "delete"
                                                                               "finseq_appl")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (decompose-equality
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "o")
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1
                                                                                               rl)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "o")
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           -1)
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             -2)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!3")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "x!3")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2))
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (reveal
                                                                         -2)
                                                                        (("2"
                                                                          (lemma
                                                                           "seq_first_rest_1[posnat]")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "q1!1")
                                                                            (("2"
                                                                              (lemma
                                                                               "empty_0[posnat]")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "q1!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     -5)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "pos_ax")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "o_assoc")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "r!1 o  #(first(q1!1))"
                                                                                           "rest(q1!1)"
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    3))
                                                                  (("2"
                                                                    (expand*
                                                                     "first"
                                                                     "last"
                                                                     "finseq_appl")
                                                                    (("2"
                                                                      (expand
                                                                       "o")
                                                                      (("2"
                                                                        (decompose-equality
                                                                         -1)
                                                                        (("2"
                                                                          (decompose-equality
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "pi`length - 1")
                                                                            (("1"
                                                                              (expand
                                                                               "#"
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   -1
                                                                                   rl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "#")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -3
                                                               -5
                                                               2
                                                               3
                                                               5
                                                               7)
                                                              (("2"
                                                                (expand
                                                                 "delete")
                                                                (("2"
                                                                  (rewrite
                                                                   "empty_0")
                                                                  (("2"
                                                                    (rewrite
                                                                     "empty_0")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("2"
                                                                          (expand
                                                                           "empty_seq"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "o")
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -2)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "o")
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!3")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "empty_0[posnat]")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!2")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "o")
                                                                                    (("3"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("3"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("3"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (hide
                                                                                   -
                                                                                   2)
                                                                                  (("4"
                                                                                    (lemma
                                                                                     "empty_0[posnat]")
                                                                                    (("4"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!2")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (1 5))
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (rewrite
                                                             "empty_0")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but
                                                   (-3 1 2 3))
                                                  (("3"
                                                    (expand*
                                                     "delete"
                                                     "finseq_appl")
                                                    (("3"
                                                      (rewrite
                                                       "empty_0")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "first")
                                                          (("3"
                                                            (expand
                                                             "finseq_appl")
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 3))
                                            (("2"
                                              (lemma "empty_0[posnat]")
                                              (("2"
                                                (inst -1 "p1!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "delete_is_position")
                  (("2" (flatten) (("2" (rewrite "empty_0") nil nil))
                    nil))
                  nil)
                 ("3" (lemma "empty_0[posnat]")
                  (("3" (inst -1 "x!2") (("3" (assert) nil nil)) nil))
                  nil))
                nil)
               ("3" (lemma "empty_0[posnat]")
                (("3" (inst -1 "x!2") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (hide -3)
            (("3" (expand "left_pos")
              (("3" (skosimp)
                (("3" (prop)
                  (("1" (replaces -1)
                    (("1" (replaces -2)
                      (("1" (expand "o")
                        (("1" (decompose-equality -1)
                          (("1" (hide -2)
                            (("1" (lemma "empty_0[posnat]")
                              (("1"
                                (inst -1 "p1!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -4)
                    (("2" (replaces -1)
                      (("2" (expand "o")
                        (("2" (flatten)
                          (("2" (decompose-equality -2)
                            (("2" (inst -1 "length(r!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "first")
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide - 3)
                                (("2"
                                  (lemma "empty_0[posnat]")
                                  (("2"
                                    (inst -1 "q1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((only_empty_seq const-decl "positions" positions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (first const-decl "T" seq_extras structures)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (union const-decl "set" sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (rest const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (insert? const-decl "finseq" seq_extras structures)
    (pos_ax formula-decl nil positions nil)
    (seq_empty formula-decl nil seq_extras structures)
    (left_pos const-decl "bool" positions nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (next_pos_member_right_pos 0
  (next_pos_member_right_pos-1 nil 3507041072
   (""
    (then (lemma "empty_0[posnat]")
     (spread
      (measure-induct+
       "lex2(length(p), arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))"
       ("s" "t" "p"))
      ((spread (case "x!3 = empty_seq")
        ((then (hide -2 -3) (replaces -1)
          (expand* "member" "right_pos" "next_position" "emptyset"
           "only_empty_seq")
          (prop) (expand "positionsOF") (lift-if)
          (expand "only_empty_seq") (prop) (expand "union") (flatten)
          (hide 3) (expand "member") (propax))
         (then (lemma "member_right_pos")
          (spread (inst -1 "x!1" "x!3" "next_position(x!1, x!2, x!3)")
           ((then (assert)
             (name-replace "q!1" "next_position(x!1, x!2, x!3)" :hide?
              nil)
             (hide 3) (expand "next_position" -1) (lift-if)
             (spread (prop)
              ((then (hide -2 1) (expand "left_pos")
                (spread
                 (inst 1 "delete(x!3, length(x!3) - 1)" "#(last(x!3))"
                  "empty_seq")
                 ((then (assert)
                   (spread (prop)
                    ((then (hide -2 -3 1) (expand "empty_seq")
                      (expand "#") (propax))
                     (then (hide -1) (expand* "delete" "finseq_appl")
                      (rewrite "empty_0")
                      (spread (decompose-equality)
                       ((then (expand "o") (expand "#") (propax))
                        (spread (decompose-equality)
                         ((then (expand "o") (grind))
                          (then (inst -1 "x!3") (assert))))
                        (then (inst -1 "x!3") (assert))))))))
                  (then (hide -) (flatten) (rewrite "empty_0"))
                  (then (hide -1) (inst -1 "x!3") (assert)))))
               (then (hide -2 -3 -4 1) (expand "left_pos")
                (spread
                 (inst 1 "delete(x!3, length(x!3) - 1)" "#(last(x!3))"
                  "#(1 + last(x!3))")
                 ((then (flatten) (hide 1)
                   (spread (prop)
                    ((then (replace -1 1 rl) (hide -1)
                      (expand* "add_last" "insert?" "delete"
                       "finseq_appl")
                      (inst -1 "x!3") (assert) (assert)
                      (spread (decompose-equality)
                       ((grind)
                        (spread (decompose-equality)
                         ((grind) (then (skosimp) (assert))))
                        (grind) (grind))))
                     (then (hide -1) (expand "delete") (inst -1 "x!3")
                      (assert) (assert)
                      (spread (decompose-equality)
                       ((grind) (then (decompose-equality) (grind)))))
                     (then (hide-all-but -1) (grind))
                     (then (hide-all-but -1) (grind))
                     (then (hide-all-but 1)
                      (expand* "first" "finseq_appl" "#") (assert)))))
                  (then (hide -1) (inst -1 "x!3") (assert)))))
               (spread
                (inst -5 "x!1" "x!2"
                 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                ((then (lemma "next_position_TCC17")
                  (inst -1 "x!1" "x!2" "x!3") (assert)
                  (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                   ((then (assert)
                     (spread
                      (inst -1
                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                      ((then (assert)
                        (spread
                         (case "NOT add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = empty_seq")
                         ((then (assert) (hide -1 -2 -4 -5 1)
                           (replace -1)
                           (name-replace "pi"
                            "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))"
                            :hide? nil)
                           (lemma "member_right_pos")
                           (spread (inst -1 "x!1" "pi" "q!1")
                            ((then (assert)
                              (lemma "next_pos_is_a_diff_pos")
                              (inst -1 "x!1" "x!2" "pi") (assert)
                              (hide -1 -4 -5) (expand "left_pos")
                              (skosimp)
                              (spread (prop)
                               ((spread
                                 (inst
                                  2
                                  "r!1"
                                  "add_last(delete(p1!1, length(p1!1) - 1), last(p1!1) - 1)"
                                  "empty_seq")
                                 ((then
                                   (assert)
                                   (spread
                                    (prop)
                                    ((then (hide-all-but -1) (grind))
                                     (then
                                      (replaces -2)
                                      (expand*
                                       "add_last"
                                       "insert?"
                                       "delete"
                                       "finseq_appl"
                                       "o")
                                      (flatten)
                                      (inst-cp -4 "p1!1")
                                      (inst -4 "x!3")
                                      (assert)
                                      (assert)
                                      (spread
                                       (decompose-equality -3)
                                       ((spread
                                         (decompose-equality 1)
                                         ((spread
                                           (decompose-equality 1)
                                           ((then
                                             (lift-if)
                                             (spread
                                              (prop)
                                              ((spread
                                                (inst -2 "x!4")
                                                ((assert)
                                                 (then
                                                  (expand "delete")
                                                  (assert))))
                                               (spread
                                                (inst -2 "x!4")
                                                ((assert)
                                                 (then
                                                  (expand "delete")
                                                  (assert))))
                                               (spread
                                                (inst -1 "x!4")
                                                ((then
                                                  (assert)
                                                  (typepred "x!4")
                                                  (expand*
                                                   "last"
                                                   "finseq_appl")
                                                  (assert))
                                                 (then
                                                  (expand "delete")
                                                  (assert)))))))
                                            (then (skosimp) (ground))
                                            (grind)
                                            (then (skosimp) (assert))))
                                          (grind)
                                          (then (skosimp) (assert))))
                                        (then
                                         (expand "delete" -1)
                                         (assert))))))))
                                  (spread
                                   (case "last(p1!1) = 1 + last(x!3)")
                                   ((assert)
                                    (then
                                     (hide 2)
                                     (replaces -2)
                                     (expand*
                                      "add_last"
                                      "insert?"
                                      "delete"
                                      "last"
                                      "finseq_appl"
                                      "o")
                                     (flatten)
                                     (rewrite "empty_0")
                                     (assert)
                                     (spread
                                      (decompose-equality -3)
                                      ((spread
                                        (inst -1 "x!3`length - 1")
                                        ((then
                                          (assert)
                                          (lift-if)
                                          (ground)
                                          (replace -4 -1)
                                          (inst -5 "p1!1")
                                          (assert))
                                         (then
                                          (expand "delete" 1)
                                          (inst -3 "x!3")
                                          (ground))))
                                       (then
                                        (expand "delete" -1)
                                        (inst -5 "x!3")
                                        (assert)
                                        (assert))
                                       (then (inst -6 "p1!1") (assert))
                                       (then
                                        (inst -5 "p1!1")
                                        (assert)))))
                                    (then (inst -4 "p1!1") (assert))))
                                  (then (inst -4 "p1!1") (assert))
                                  (then (inst -4 "p1!1") (assert))))
                                (spread
                                 (inst
                                  3
                                  "r!1"
                                  "add_last(delete(p1!1, length(p1!1) - 1), last(p1!1) - 1)"
                                  "q1!1")
                                 ((then
                                   (flatten)
                                   (hide 3)
                                   (assert)
                                   (spread
                                    (prop)
                                    ((then
                                      (replace -2)
                                      (hide -1 -2 -3 2)
                                      (inst-cp -2 "x!3")
                                      (inst -2 "p1!1")
                                      (assert)
                                      (expand*
                                       "add_last"
                                       "insert?"
                                       "delete"
                                       "last"
                                       "finseq_appl"
                                       "o")
                                      (flatten)
                                      (spread
                                       (decompose-equality -2)
                                       ((spread
                                         (decompose-equality 1)
                                         ((spread
                                           (decompose-equality 1)
                                           ((then
                                             (lift-if)
                                             (spread
                                              (ground)
                                              ((spread
                                                (inst -2 "x!4")
                                                ((assert)
                                                 (then
                                                  (expand "delete" 1)
                                                  (assert))))
                                               (spread
                                                (inst -2 "x!4")
                                                ((assert)
                                                 (then
                                                  (expand "delete" 1)
                                                  (assert))))
                                               (spread
                                                (inst -1 "x!4")
                                                ((assert)
                                                 (then
                                                  (expand "delete" 1)
                                                  (assert)))))))
                                            (grind)
                                            (grind)
                                            (grind)))
                                          (grind)
                                          (grind)))
                                        (then
                                         (expand "delete" -1)
                                         (assert)))))
                                     (then (hide-all-but -1) (grind))
                                     (then
                                      (hide -1 -2 -4)
                                      (expand*
                                       "add_last"
                                       "insert?"
                                       "delete"
                                       "first"
                                       "finseq_appl")
                                      (inst -2 "p1!1")
                                      (assert)
                                      (assert)
                                      (lift-if)
                                      (ground)
                                      (grind)))))
                                  (spread
                                   (case "last(p1!1) - 1 = last(x!3)")
                                   ((assert)
                                    (then
                                     (replace -2)
                                     (hide -1 -2 -3 2 3)
                                     (inst-cp -2 "x!3")
                                     (inst -2 "p1!1")
                                     (assert)
                                     (expand*
                                      "add_last"
                                      "insert?"
                                      "delete"
                                      "last"
                                      "finseq_appl"
                                      "o")
                                     (flatten)
                                     (spread
                                      (decompose-equality -2)
                                      ((spread
                                        (inst -1 "x!3`length - 1")
                                        ((assert)
                                         (then
                                          (expand "delete")
                                          (assert))))
                                       (then
                                        (expand "delete" -1)
                                        (assert)))))))
                                  (then (inst -5 "p1!1") (assert)))))))
                             (then (lemma "next_position_is_position")
                              (inst -1 "x!1" "x!2" "pi") (assert))
                             (then (reveal -3) (assert)))))
                          (then (hide-all-but -1) (grind))
                          (then (hide-all-but (-7 1 3)) (inst -1 "x!3")
                           (assert)))))
                       (then (hide-all-but (-6 1 3)) (inst -1 "x!3")
                        (assert)))))
                    (then (hide-all-but (-6 1 3)) (inst -1 "x!3")
                     (assert)))))
                 (then (assert)
                  (spread (prop)
                   ((then (lemma "next_position_TCC15")
                     (inst -1 "x!1" "x!2" "x!3") (assert)
                     (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                      ((then (assert)
                        (spread
                         (inst -1
                          "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                         ((assert)
                          (then (hide-all-but (-5 1 4)) (inst -1 "x!3")
                           (assert)))))
                       (then (hide-all-but (-5 1 4)) (inst -1 "x!3")
                        (assert)))))
                    (then (hide-all-but -1) (grind)))))
                 (then (hide-all-but (-5 1 3)) (inst -1 "x!3")
                  (assert))))
               (spread
                (inst -3 "x!1" "x!2" "delete(x!3, length(x!3) - 1)")
                ((then (lemma "next_position_TCC19")
                  (inst -1 "x!1" "x!2" "x!3") (assert)
                  (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                   ((then (assert)
                     (spread
                      (inst -1
                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                      ((then (assert) (hide -1 -3 1 2) (replace -1)
                        (lemma "member_right_pos")
                        (spread
                         (inst -1 "x!1" "delete(x!3, length(x!3) - 1)"
                          "q!1")
                         ((then (assert)
                           (lemma "next_pos_is_a_diff_pos")
                           (spread
                            (inst -1 "x!1" "x!2"
                             "delete(x!3, length(x!3) - 1)")
                            ((then (assert) (hide -1 -3 -4)
                              (spread
                               (name-replace
                                "pi"
                                "delete(x!3, length(x!3) - 1)"
                                :hide?
                                nil)
                               ((then
                                 (expand "left_pos")
                                 (skosimp)
                                 (spread
                                  (prop)
                                  ((spread
                                    (inst
                                     2
                                     "r!1"
                                     "add_last(p1!1, last(x!3))"
                                     "empty_seq")
                                    ((then
                                      (assert)
                                      (spread
                                       (prop)
                                       ((then
                                         (hide-all-but -1)
                                         (grind))
                                        (then
                                         (replaces -2)
                                         (hide -1)
                                         (inst-cp -2 "p1!1")
                                         (inst -2 "x!3")
                                         (assert)
                                         (expand*
                                          "delete"
                                          "add_last"
                                          "insert?"
                                          "last"
                                          "finseq_appl"
                                          "o")
                                         (flatten)
                                         (decompose-equality -2)
                                         (spread
                                          (decompose-equality 1)
                                          ((spread
                                            (decompose-equality 1)
                                            ((spread
                                              (inst -1 "x!4")
                                              ((then
                                                (lift-if)
                                                (ground))
                                               (assert)))
                                             (grind)
                                             (grind)))
                                           (grind)))))))
                                     (then (inst -4 "x!3") (assert))))
                                   (spread
                                    (inst
                                     3
                                     "r!1"
                                     "add_last(p1!1, last(x!3))"
                                     "q1!1")
                                    ((then
                                      (assert)
                                      (flatten)
                                      (hide 3)
                                      (spread
                                       (prop)
                                       ((then
                                         (replaces -2)
                                         (hide -1 -2 2)
                                         (inst-cp -2 "x!3")
                                         (inst -2 "p1!1")
                                         (assert)
                                         (expand*
                                          "delete"
                                          "add_last"
                                          "insert?"
                                          "last"
                                          "o"
                                          "finseq_appl")
                                         (flatten)
                                         (decompose-equality -2)
                                         (spread
                                          (decompose-equality 1)
                                          ((spread
                                            (decompose-equality 1)
                                            ((spread
                                              (case
                                               "x!4 = x!3`length - 1")
                                              ((assert)
                                               (spread
                                                (inst -1 "x!4")
                                                ((assert) (assert)))))
                                             (grind)
                                             (grind)))
                                           (grind))))
                                        (then
                                         (hide-all-but -1)
                                         (grind))
                                        (then
                                         (rewrite "first_add_last")
                                         (inst -5 "p1!1")
                                         (assert)))))
                                     (then
                                      (inst -5 "x!3")
                                      (assert)))))))
                                (then (inst -2 "x!3") (assert)))))
                             (then (inst -4 "x!3") (assert)))))
                          (then (lemma "next_position_is_position")
                           (spread
                            (inst -1 "x!1" "x!2"
                             "delete(x!3, length(x!3) - 1)")
                            ((assert)
                             (then (inst -3 "x!3") (assert)))))
                          (then (rewrite "delete_is_position")
                           (inst -3 "x!3") (assert))
                          (then (inst -3 "x!3") (assert)))))
                       (then (inst -4 "x!3") (assert)))))
                    (then (inst -4 "x!3") (assert)))))
                 (then (assert)
                  (spread (rewrite "delete_is_position")
                   ((then (rewrite "delete_is_position")
                     (inst -3 "x!3") (assert))
                    (then (inst -3 "x!3") (assert)))))
                 (then (inst -3 "x!3") (assert))))
               (then (hide -1 -3 -4 1) (expand "left_pos")
                (inst 1 "empty_seq" "x!3" "empty_seq") (assert)
                (rewrite "empty_o_seq")))))
            (rewrite "next_position_is_position"))))))
       (then (hide 2) (lemma "next_position_TCC5")
        (inst -1 "x!1" "x!2" "x!3") (assert))
       (then (hide 1) (inst -2 "x!3") (assert))
       (then (hide 2) (lemma "next_position_TCC3")
        (inst -1 "x!1" "x!2" "x!3") (assert))
       (then (hide 2) (rewrite "delete_is_position") (inst -1 "x!3")
        (assert))
       (then (hide 2) (inst -1 "x!3") (assert))
       (then (hide 2) (lemma "next_position_TCC5")
        (inst -1 "y!1" "y!2" "y!3") (assert))
       (then (hide 1) (inst -2 "y!3") (assert))
       (then (hide 2) (lemma "next_position_TCC3")
        (inst -1 "y!1" "y!2" "y!3") (assert))
       (then (hide 2) (rewrite "delete_is_position") (inst -1 "y!3")
        (assert))
       (then (hide 2) (inst -1 "y!3") (assert))
       (then (hide 2) (lemma "next_position_TCC5")
        (inst -1 "x!1`1" "x!1`2" "x!1`3") (assert))
       (then (hide 1) (inst -2 "x!1`3") (assert))
       (then (hide 2) (lemma "next_position_TCC3")
        (inst -1 "x!1`1" "x!1`2" "x!1`3") (assert))
       (then (hide 2) (rewrite "delete_is_position") (inst -1 "x!1`3")
        (assert))
       (then (hide 2) (inst -1 "x!1`3") (assert))
       (then (hide 2) (lemma "next_position_TCC5")
        (inst -1 "y!1`1" "y!1`2" "y!1`3") (assert))
       (then (hide 1) (inst -2 "y!1`3") (assert))
       (then (hide 2) (lemma "next_position_TCC3")
        (inst -1 "y!1`1" "y!1`2" "y!1`3") (assert))
       (then (hide 2) (rewrite "delete_is_position") (inst -1 "y!1`3")
        (assert))
       (then (hide 2) (inst -1 "y!1`3") (assert))
       (then (hide 2) (lemma "next_position_TCC5")
        (inst -1 "s!1" "t!1" "p!1") (assert))
       (then (hide 1) (inst -2 "p!1") (assert))
       (then (hide 2) (lemma "next_position_TCC3")
        (inst -1 "s!1" "t!1" "p!1") (assert))
       (then (hide 2) (rewrite "delete_is_position") (inst -1 "p!1")
        (assert))
       (then (hide 2) (inst -1 "p!1") (assert)))))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (delete const-decl "finseq" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (empty_o_seq formula-decl nil seq_extras structures)
    (delete_is_position formula-decl nil positions nil)
    (first_add_last formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (left_pos const-decl "bool" positions nil)
    (emptyset const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (union const-decl "set" sets nil)
    (empty_0 formula-decl nil seq_extras structures))
   shostak))
 (equal_right_pos 0
  (equal_right_pos-1 nil 3507387106
   (""
    (then (skosimp)
     (spread
      (case "subset?(right_pos(s!1, p!1), right_pos(s!1, q!1)) AND subset?(right_pos(s!1, q!1), right_pos(s!1, p!1))")
      ((then (hide -2) (flatten) (expand "subset?") (inst -1 "p!1")
        (inst -2 "q!1")
        (spread (case "p!1 = empty_seq")
         ((then (hide -2) (expand "right_pos" -2 2) (assert)
           (spread (case "member(q!1, right_pos(s!1, q!1))")
            ((then (assert) (hide -1)
              (expand* "member" "only_empty_seq") (assert))
             (then (hide-all-but 1) (expand* "right_pos" "member")
              (expand* "union" "member") (flatten) (hide 2 3)
              (expand "singleton") (propax)))))
          (spread (case "q!1 = empty_seq")
           ((then (hide -3) (expand "right_pos" -2 2) (assert)
             (spread (case "member(p!1, right_pos(s!1, p!1))")
              ((then (assert) (hide -1)
                (expand* "member" "only_empty_seq"))
               (then (hide-all-but 1)
                (expand* "right_pos" "union" "member") (flatten)
                (hide 2 3) (expand "singleton") (propax)))))
            (spread
             (case "member(p!1, right_pos(s!1, p!1)) AND member(q!1, right_pos(s!1, q!1))")
             ((then (flatten) (assert) (hide -1 -2)
               (lemma "member_right_pos")
               (inst-cp -1 "s!1" "p!1" "q!1")
               (inst -1 "s!1" "q!1" "p!1") (assert) (hide -3 -4)
               (expand "left_pos") (skosimp*)
               (spread (ground)
                ((then (replace -1 -4) (replace -4 -2) (replace -3 -2)
                  (expand "o" -2) (decompose-equality -2)
                  (hide -2 -3 -4 -5 3 4 5) (lemma "empty_0[posnat]")
                  (inst-cp -1 "p1!2") (inst -1 "p1!1") (assert))
                 (then (replace -5 -1) (replace -4 -2) (replace -2 -1)
                  (spread (case "p1!2 o p1!1 = q1!2")
                   ((then (replace -1 -4 rl)
                     (spread (rewrite "first_compo")
                      ((assert)
                       (then (hide-all-but (1 3)) (flatten)
                        (rewrite "empty_0")))))
                    (then (hide -2 -3 -4 -5 5 6 7) (expand "o")
                     (flatten) (decompose-equality -2)
                     (spread (decompose-equality 1)
                      ((spread (decompose-equality 1)
                        ((then (lift-if)
                          (spread (prop)
                           ((then (inst -2 "x!1 + r!2`length")
                             (assert))
                            (then (inst -1 "x!1 + r!2`length")
                             (assert)))))
                         (then (skosimp) (assert))))
                       (then (skosimp) (ground))
                       (then (skosimp) (assert))))))))
                 (then (replace -4 -1) (replace -3 -2)
                  (replace -1 -2 rl)
                  (spread (case "q1!1 = p1!1 o p1!2")
                   ((then (replace -1 -6)
                     (spread (rewrite "first_compo")
                      ((assert)
                       (then (hide-all-but (1 4)) (flatten)
                        (rewrite "empty_0")))))
                    (then (hide -1 -3 -4 -5 5 6 7) (expand "o")
                     (flatten) (decompose-equality -2)
                     (spread (decompose-equality 1)
                      ((spread (decompose-equality 1)
                        ((then (lift-if)
                          (spread (prop)
                           ((then (inst -2 "x!1 + r!1`length")
                             (assert))
                            (then (inst -1 "x!1 + r!1`length")
                             (assert)))))
                         (then (skosimp) (ground))
                         (then (skosimp) (assert))))
                       (then (skosimp) (assert))))))))
                 (then (replace -5 -1) (replace -4 -2) (hide -4 -5)
                  (expand "o") (flatten) (decompose-equality -2)
                  (decompose-equality -4) (hide -3 -4)
                  (spread (case "r!1`length = r!2`length")
                   ((spread (inst -2 "r!1`length")
                     ((spread (inst -3 "r!1`length")
                       ((then (assert) (replaces -1) (assert)
                         (expand* "first" "finseq_appl") (assert))
                        (then (hide-all-but (1 5))
                         (lemma "empty_0[posnat]") (inst -1 "p1!1")
                         (assert))))
                      (then (hide-all-but (1 4))
                       (lemma "empty_0[posnat]") (inst -1 "q1!1")
                       (assert))))
                    (spread (case "r!1`length < r!2`length")
                     ((spread (inst -2 "r!1`length")
                       ((spread (inst -3 "r!1`length")
                         ((then (assert) (replace -2 -3 rl)
                           (hide-all-but (-3 -5))
                           (expand* "first" "finseq_appl") (assert))
                          (then (hide-all-but (1 6))
                           (lemma "empty_0[posnat]") (inst -1 "p1!1")
                           (assert))))
                        (then (hide-all-but (1 5))
                         (lemma "empty_0[posnat]") (inst -1 "q1!1")
                         (assert))))
                      (spread (inst -1 "r!2`length")
                       ((spread (inst -2 "r!2`length")
                         ((then (assert) (replace -1 -2)
                           (hide-all-but (-2 -3))
                           (expand* "first" "finseq_appl") (assert))
                          (then (hide-all-but (1 2 3 7))
                           (lemma "empty_0[posnat]") (inst -1 "p1!1")
                           (assert))))
                        (then (hide-all-but (1 2 3 6))
                         (lemma "empty_0[posnat]") (inst -1 "q1!1")
                         (assert))))))))))))
              (then (hide - 4)
               (spread (prop)
                ((then (expand* "right_pos" "union" "member") (assert)
                  (flatten) (hide-all-but 1) (expand "singleton")
                  (propax))
                 (then (expand* "right_pos" "union" "member") (assert)
                  (flatten) (hide-all-but 1) (expand "singleton")
                  (propax))))))))))))
       (spread (prop)
        ((then (expand "subset?") (skosimp) (decompose-equality -2)
          (expand "member") (inst -1 "x!1") (assert))
         (then (expand* "subset?" "member") (decompose-equality -1)
          (skosimp) (inst -1 "x!1") (assert)))))))
    nil)
   ((positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (member const-decl "bool" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (first const-decl "T" seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (left_pos const-decl "bool" positions nil))
   shostak))
 (subset_right_pos 0
  (subset_right_pos-1 nil 3503741089
   (""
    (then (skosimp) (expand* "strict_subset?" "subset?")
     (spread (prop)
      ((then (skosimp) (lemma "member_right_pos")
        (spread (inst-cp -1 "s!1" "q!1" "x!1")
         ((then (inst-cp -1 "s!1" "p!1" "q!1")
           (spread (inst -1 "s!1" "p!1" "x!1")
            ((then (assert) (hide -3 -4 2) (expand "left_pos" -1)
              (skosimp)
              (spread (prop)
               ((then (expand "left_pos" -3) (skosimp)
                 (spread (prop)
                  ((then (replaces -3) (replaces -2)
                    (expand "left_pos")
                    (inst 3 "r!2" "p1!2 o p1!1" "empty_seq") (assert)
                    (spread (prop)
                     ((then (lemma "seq_empty[posnat]")
                       (inst -1 "p1!2" "p1!1")
                       (lemma "empty_0[posnat]") (inst -1 "p1!1")
                       (assert))
                      (then (hide -1 4) (expand "o")
                       (decompose-equality -1)
                       (spread (decompose-equality 1)
                        ((then (decompose-equality -2)
                          (spread (decompose-equality 1)
                           ((then (inst -1 "x!2") (assert) (grind))
                            (grind) (grind) (grind))))
                         (grind) (grind)))))))
                   (then (replaces -4) (replaces -2)
                    (expand "left_pos")
                    (inst 4 "r!2" "p1!2 o p1!1" "q1!2") (flatten)
                    (hide 4) (assert)
                    (spread (prop)
                     ((then (hide -1 -2 2 5) (expand "o")
                       (decompose-equality -1) (decompose-equality -2)
                       (spread (decompose-equality 1)
                        ((spread (decompose-equality 1)
                          ((then (inst -1 "x!2") (assert) (grind))
                           (grind) (grind) (grind)))
                         (grind) (grind))))
                      (then (lemma "seq_empty[posnat]")
                       (inst -1 "p1!2" "p1!1")
                       (lemma "empty_0[posnat]") (inst -1 "p1!1")
                       (assert))
                      (then (rewrite "first_compo") (flatten)
                       (rewrite "empty_0"))))))))
                (then (expand "left_pos" -4) (skosimp)
                 (spread (prop)
                  ((spread (case "r!1 = r!2")
                    ((then (replaces -1) (expand "left_pos")
                      (inst 4 "r!2" "p1!1" "empty_seq") (assert))
                     (spread (case "<=(r!1, r!2) OR <=(r!2, r!1)")
                      ((spread (prop)
                        ((then (expand "<=") (skosimp) (replaces -1)
                          (expand "left_pos")
                          (inst 5 "r!1" "p1!1" "p1!3") (assert)
                          (spread (prop)
                           ((then (hide-all-but (-1 1)) (replaces -1)
                             (rewrite "seq_o_empty"))
                            (spread (case "p1!3 o p1!2 = q1!1")
                             ((then (replace -1 -6 rl)
                               (rewrite "first_compo")
                               (hide-all-but (1 3)) (flatten)
                               (rewrite "empty_0") (replaces -1)
                               (rewrite "seq_o_empty"))
                              (then (hide-all-but (-2 -3 1 4 5))
                               (replaces -2) (expand "o") (flatten)
                               (decompose-equality -2)
                               (spread
                                (decompose-equality 1)
                                ((spread
                                  (decompose-equality 1)
                                  ((then
                                    (inst -1 "x!2 + r!1`length")
                                    (assert)
                                    (grind))
                                   (grind)))
                                 (grind)
                                 (grind)))))))))
                         (then (expand "<=") (skosimp) (replaces -1)
                          (expand "left_pos")
                          (inst 5 "r!2" "p1!3 o p1!1" "empty_seq")
                          (assert)
                          (spread (prop)
                           ((then (hide-all-but (-1 4))
                             (lemma "seq_empty[posnat]")
                             (inst -1 "p1!3" "p1!1")
                             (lemma "empty_0[posnat]") (inst -1 "p1!1")
                             (assert))
                            (then (hide-all-but (-4 1)) (expand "o")
                             (decompose-equality -1)
                             (decompose-equality -2)
                             (spread (decompose-equality 1)
                              ((spread
                                (decompose-equality 1)
                                ((then
                                  (inst -1 "x!2")
                                  (assert)
                                  (grind))
                                 (grind)
                                 (grind)
                                 (grind)))
                               (grind) (grind)))))))))
                       (then (flatten) (hide-all-but (-2 -3 1 2 3 4 5))
                        (replaces -1)
                        (spread (case "length(r!2) > length(r!1)")
                         ((then (hide 2) (expand "<=")
                           (spread
                            (name "pi"
                                  "(# length := length(r!2) - length(r!1), seq := (LAMBDA (j: below[length(r!2) - length(r!1)]): q1!1`seq(j)) #)")
                            ((spread (inst 1 "pi")
                              ((spread
                                (decompose-equality -1)
                                ((spread
                                  (decompose-equality -2)
                                  ((then
                                    (expand "o" 1)
                                    (spread
                                     (decompose-equality 1)
                                     ((spread
                                       (decompose-equality 1)
                                       ((then
                                         (lift-if)
                                         (spread
                                          (prop)
                                          ((then
                                            (expand "o" -5)
                                            (flatten)
                                            (decompose-equality -6)
                                            (spread
                                             (inst -1 "x!2")
                                             ((assert) (assert))))
                                           (then
                                            (typepred "x!2")
                                            (expand "o" -5)
                                            (flatten)
                                            (decompose-equality -6)
                                            (spread
                                             (inst -1 "x!2")
                                             ((then
                                               (assert)
                                               (inst
                                                -3
                                                "x!2 - r!1`length")
                                               (assert))
                                              (assert)))))))
                                        (then
                                         (skosimp)
                                         (spread
                                          (prop)
                                          ((then
                                            (replace -3 -1 rl)
                                            (assert))
                                           (then
                                            (replace -3 1 rl)
                                            (assert)))))
                                        (then (skosimp) (assert))))
                                      (then (skosimp) (assert)))))
                                   (then
                                    (hide-all-but (-1 -3 -6 1))
                                    (expand "o")
                                    (flatten)
                                    (decompose-equality)
                                    (hide -1)
                                    (assert))))
                                 (then
                                  (hide-all-but (-1 -2 -5 1))
                                  (expand "o")
                                  (flatten)
                                  (hide -4)
                                  (assert))))
                               (then (assert) (skosimp) (grind))))
                             (then (skosimp) (typepred "j!1")
                              (hide -2 2 3 4 5) (expand "o") (flatten)
                              (hide -3) (assert))
                             (assert))))
                          (spread (case "length(r!2) = length(r!1)")
                           ((then (decompose-equality 4)
                             (decompose-equality 1) (expand "o")
                             (flatten) (decompose-equality -3)
                             (spread (inst -1 "x!2")
                              ((assert) (assert))))
                            (then (hide 3) (expand "<=")
                             (spread
                              (name "pi"
                                    "(# length := length(r!1) - length(r!2), seq := (LAMBDA (j: below[length(r!1) - length(r!2)]): p1!2`seq(j)) #)")
                              ((spread
                                (inst 3 "pi")
                                ((spread
                                  (decompose-equality -1)
                                  ((spread
                                    (decompose-equality -2)
                                    ((then
                                      (expand "o" 3)
                                      (spread
                                       (decompose-equality 3)
                                       ((spread
                                         (decompose-equality 1)
                                         ((then
                                           (lift-if)
                                           (spread
                                            (prop)
                                            ((then
                                              (expand "o" -4)
                                              (flatten)
                                              (decompose-equality -5)
                                              (spread
                                               (inst -1 "x!2")
                                               ((assert) (assert))))
                                             (then
                                              (typepred "x!2")
                                              (expand "o" -4)
                                              (flatten)
                                              (decompose-equality -5)
                                              (spread
                                               (inst -1 "x!2")
                                               ((then
                                                 (assert)
                                                 (inst
                                                  -3
                                                  "x!2 - r!2`length")
                                                 (assert))
                                                (assert)))))))
                                          (then
                                           (skosimp)
                                           (spread
                                            (prop)
                                            ((then
                                              (replace -3 -1 rl)
                                              (assert))
                                             (then
                                              (replace -3 1 rl)
                                              (assert)))))
                                          (then (skosimp) (assert))))
                                        (then (skosimp) (assert)))))
                                     (then
                                      (hide-all-but (-1 -3 -5 1))
                                      (expand "o")
                                      (flatten)
                                      (hide -4)
                                      (assert))))
                                   (then
                                    (hide-all-but (-1 -2 -4 1))
                                    (expand "o")
                                    (flatten)
                                    (hide -4)
                                    (assert))))
                                 (then (assert) (skosimp) (grind))))
                               (then
                                (skosimp)
                                (typepred "j!1")
                                (hide 2 3 4 5 6)
                                (expand "o")
                                (flatten)
                                (hide -3)
                                (assert))
                               (assert)))))))))))))
                   (spread (case "r!1 = r!2")
                    ((then (replaces -1) (expand "left_pos")
                      (inst 5 "r!2" "p1!1" "q1!2") (assert) (ground)
                      (replace -4 -2)
                      (hide-all-but (-2 -3 -6 1 2 3 4 6))
                      (expand* "o" "first" "finseq_appl") (flatten)
                      (decompose-equality -2)
                      (spread (inst -1 "r!2`length")
                       ((assert)
                        (then (hide-all-but (1 4))
                         (lemma "empty_0[posnat]") (inst -1 "q1!1")
                         (assert)))))
                     (spread (case "<=(r!1, r!2) OR <=(r!2, r!1)")
                      ((spread (prop)
                        ((then (expand "<=") (skosimp) (replaces -1)
                          (expand "left_pos")
                          (inst 6 "r!1" "p1!1" "p1!3 o q1!2") (assert)
                          (spread (ground)
                           ((then (hide-all-but (-1 1)) (replaces -1)
                             (expand "o")
                             (spread (decompose-equality)
                              ((then
                                (lift-if)
                                (lift-if)
                                (lift-if)
                                (ground))
                               (then (skosimp) (assert))
                               (then (skosimp) (assert))
                               (then (skosimp) (assert))
                               (then (skosimp) (assert)))))
                            (then (hide-all-but (-1 2))
                             (lemma "seq_empty[posnat]")
                             (inst -1 "p1!3" "q1!2")
                             (lemma "empty_0[posnat]") (inst -1 "q1!2")
                             (assert))
                            (spread (case "p1!3 o p1!2 = q1!1")
                             ((then (replace -1 -7 rl)
                               (spread
                                (rewrite "first_compo")
                                ((then
                                  (rewrite "first_compo")
                                  (hide-all-but (1 3))
                                  (flatten)
                                  (rewrite "empty_0")
                                  (replaces -1)
                                  (rewrite "seq_o_empty"))
                                 (then
                                  (hide-all-but (1 3))
                                  (flatten)
                                  (rewrite "empty_0")
                                  (replaces -1)
                                  (rewrite "seq_o_empty")))))
                              (then (hide-all-but (-2 -4 1 5 6))
                               (replaces -2) (expand "o") (flatten)
                               (decompose-equality -2)
                               (spread
                                (decompose-equality 1)
                                ((spread
                                  (decompose-equality 1)
                                  ((then
                                    (lift-if)
                                    (spread
                                     (ground)
                                     ((then
                                       (inst -2 "x!2 + r!1`length")
                                       (assert))
                                      (then
                                       (inst -1 "x!2 + r!1`length")
                                       (assert)))))
                                   (grind)))
                                 (grind)
                                 (grind)))))))))
                         (then (expand "<=") (skosimp) (replaces -1)
                          (expand "left_pos")
                          (inst 6 "r!2" "p1!3 o p1!1" "q1!2") (assert)
                          (flatten) (hide 6)
                          (spread (prop)
                           ((then (hide-all-but (-5 1)) (replaces -1)
                             (expand "o")
                             (spread (decompose-equality)
                              ((grind) (grind) (grind) (grind)
                               (grind))))
                            (then (hide-all-but (-1 5))
                             (lemma "seq_empty[posnat]")
                             (inst -1 "p1!3" "p1!1")
                             (lemma "empty_0[posnat]") (inst -1 "p1!1")
                             (assert))
                            (spread (case "p1!3 o q1!1 = p1!2")
                             ((then (replace -1 -4 rl)
                               (spread
                                (rewrite "first_compo")
                                ((then
                                  (rewrite "first_compo")
                                  (hide-all-but (1 3))
                                  (flatten)
                                  (rewrite "empty_0")
                                  (replaces -1)
                                  (rewrite "seq_o_empty"))
                                 (then
                                  (hide-all-but (1 3))
                                  (flatten)
                                  (rewrite "empty_0")
                                  (replaces -1)
                                  (rewrite "seq_o_empty")))))
                              (then (hide-all-but (-2 -4 1 5 6))
                               (replaces -2) (expand "o") (flatten)
                               (decompose-equality -2)
                               (spread
                                (decompose-equality 1)
                                ((spread
                                  (decompose-equality 1)
                                  ((then
                                    (inst -1 "x!2 + r!2`length")
                                    (assert)
                                    (grind))
                                   (grind)))
                                 (grind)
                                 (grind)))))))))))
                       (then (flatten) (hide-all-but (-2 -4 1 2 3 4 5))
                        (replaces -1)
                        (spread (case "length(r!2) > length(r!1)")
                         ((then (hide 2) (expand "<=")
                           (spread
                            (name "pi"
                                  "(# length := length(r!2) - length(r!1), seq := (LAMBDA (j: below[length(r!2) - length(r!1)]): q1!1`seq(j)) #)")
                            ((spread (inst 1 "pi")
                              ((spread
                                (decompose-equality -1)
                                ((spread
                                  (decompose-equality -2)
                                  ((then
                                    (expand "o" 1)
                                    (spread
                                     (decompose-equality 1)
                                     ((spread
                                       (decompose-equality 1)
                                       ((then
                                         (lift-if)
                                         (spread
                                          (prop)
                                          ((then
                                            (expand "o" -5)
                                            (flatten)
                                            (decompose-equality -6)
                                            (spread
                                             (inst -1 "x!2")
                                             ((assert) (assert))))
                                           (then
                                            (typepred "x!2")
                                            (expand "o" -5)
                                            (flatten)
                                            (decompose-equality -6)
                                            (spread
                                             (inst -1 "x!2")
                                             ((then
                                               (assert)
                                               (inst
                                                -3
                                                "x!2 - r!1`length")
                                               (assert))
                                              (assert)))))))
                                        (then
                                         (skosimp)
                                         (spread
                                          (prop)
                                          ((then
                                            (replace -3 -1 rl)
                                            (assert))
                                           (then
                                            (replace -3 1 rl)
                                            (assert)))))
                                        (then (skosimp) (assert))))
                                      (then (skosimp) (assert)))))
                                   (then
                                    (hide-all-but (-1 -3 -6 1))
                                    (expand "o")
                                    (flatten)
                                    (decompose-equality)
                                    (hide -1)
                                    (assert))))
                                 (then
                                  (hide-all-but (-1 -2 -5 1))
                                  (expand "o")
                                  (flatten)
                                  (hide -4)
                                  (assert))))
                               (then (assert) (skosimp) (grind))))
                             (then (skosimp) (typepred "j!1")
                              (hide -2 2 3 4 5) (expand "o") (flatten)
                              (hide -3) (assert))
                             (assert))))
                          (spread (case "length(r!2) = length(r!1)")
                           ((then (decompose-equality 4)
                             (decompose-equality 1) (expand "o")
                             (flatten) (decompose-equality -3)
                             (spread (inst -1 "x!2")
                              ((assert) (assert))))
                            (then (hide 3) (expand "<=")
                             (spread
                              (name "pi"
                                    "(# length := length(r!1) - length(r!2), seq := (LAMBDA (j: below[length(r!1) - length(r!2)]): p1!2`seq(j)) #)")
                              ((spread
                                (inst 3 "pi")
                                ((spread
                                  (decompose-equality -1)
                                  ((spread
                                    (decompose-equality -2)
                                    ((then
                                      (expand "o" 3)
                                      (spread
                                       (decompose-equality 3)
                                       ((spread
                                         (decompose-equality 1)
                                         ((then
                                           (lift-if)
                                           (spread
                                            (prop)
                                            ((then
                                              (expand "o" -4)
                                              (flatten)
                                              (decompose-equality -5)
                                              (spread
                                               (inst -1 "x!2")
                                               ((assert) (assert))))
                                             (then
                                              (typepred "x!2")
                                              (expand "o" -4)
                                              (flatten)
                                              (decompose-equality -5)
                                              (spread
                                               (inst -1 "x!2")
                                               ((then
                                                 (assert)
                                                 (inst
                                                  -3
                                                  "x!2 - r!2`length")
                                                 (assert))
                                                (assert)))))))
                                          (then
                                           (skosimp)
                                           (spread
                                            (prop)
                                            ((then
                                              (replace -3 -1 rl)
                                              (assert))
                                             (then
                                              (replace -3 1 rl)
                                              (assert)))))
                                          (then (skosimp) (assert))))
                                        (then (skosimp) (assert)))))
                                     (then
                                      (hide-all-but (-1 -3 -5 1))
                                      (expand "o")
                                      (flatten)
                                      (hide -4)
                                      (assert))))
                                   (then
                                    (hide-all-but (-1 -2 -4 1))
                                    (expand "o")
                                    (flatten)
                                    (hide -4)
                                    (assert))))
                                 (then (assert) (skosimp) (grind))))
                               (then
                                (skosimp)
                                (typepred "j!1")
                                (hide 2 3 4 5 6)
                                (expand "o")
                                (flatten)
                                (hide -3)
                                (assert))
                               (assert)))))))))))))))))))
             (then (hide -1 -2 -4 2 3) (lemma "right_pos_subset")
              (inst -1 "s!1" "q!1") (expand "subset?") (inst -1 "x!1")
              (assert) (hide -2) (expand "member") (propax)))))
          (then (hide -2 2 3) (lemma "right_pos_subset")
           (inst -1 "s!1" "q!1") (expand "subset?") (inst -1 "x!1")
           (assert) (hide -2) (expand "member") (propax)))))
       (then (lemma "equal_right_pos") (inst -1 "s!1" "q!1" "p!1")
        (assert)))))
    nil)
   ((subset? const-decl "bool" sets nil)
    (strict_subset? const-decl "bool" sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (<= const-decl "bool" positions nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (first const-decl "T" seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_empty formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (left_pos const-decl "bool" positions nil)
    (member const-decl "bool" sets nil))
   shostak))
 (next_pos_to_the_right_TCC1 0
  (next_pos_to_the_right_TCC1-1 nil 3501322880
   (""
    (then (skosimp) (lemma "right_pos_subset")
     (spread (inst -1 "s!1" "next_position(s!1, t!1, p!1)")
      ((then (lemma "positions_of_terms_finite") (inst -1 "s!1")
        (lemma "finite_subset[position]")
        (inst -1 "positionsOF(s!1)"
         "right_pos(s!1, next_position(s!1, t!1, p!1))")
        (assert))
       (rewrite "next_position_is_position"))))
    nil)
   ((positions_of_terms_finite formula-decl nil positions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil
   (next_pos_to_the_right subtype
    "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.p))"
    "finite_set[position[variable, symbol, arity]]")))
 (next_pos_to_the_right_TCC2 0
  (next_pos_to_the_right_TCC2-1 nil 3501322880
   (""
    (then (skosimp) (lemma "right_pos_subset") (inst -1 "s!1" "p!1")
     (lemma "positions_of_terms_finite") (inst -1 "s!1")
     (lemma "finite_subset[position]")
     (inst -1 "positionsOF(s!1)" "right_pos(s!1, p!1)") (assert))
    nil)
   ((positions_of_terms_finite formula-decl nil positions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (next_pos_to_the_right subtype
    "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p)"
    "finite_set[position[variable, symbol, arity]]")))
 (next_pos_to_the_right 0
  (next_pos_to_the_right-1 nil 3503391279
   (""
    (then (skosimp) (lemma "subset_right_pos")
     (spread (inst -1 "s!1" "p!1" "next_position(s!1, t!1, p!1)")
      ((then (lemma "next_pos_member_right_pos")
        (inst -1 "s!1" "t!1" "p!1") (lemma "next_pos_is_a_diff_pos")
        (inst -1 "s!1" "t!1" "p!1") (assert) (hide -1 -2)
        (lemma "card_subset[position]")
        (inst -1 "right_pos(s!1, next_position(s!1, t!1, p!1))"
         "right_pos(s!1, p!1)")
        (expand "strict_subset?") (flatten) (assert)
        (rewrite "same_card_subset"))
       (rewrite "next_position_is_position"))))
    nil)
   ((card_subset formula-decl nil finite_sets nil)
    (strict_subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (ext_link_remove_x_TCC1 0
  (ext_link_remove_x_TCC1-1 nil 3503824755 ("" (subtype-tcc) nil) nil
   nil
   (ext_link_remove_x subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)"
    "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p) /= t}")))
 (ext_link_remove_x 0
  (ext_link_remove_x-1 nil 3504359379
   (""
    (then (skosimp)
     (name-replace "sp" "subtermOF(s!1, p!1)" :hide? nil)
     (name-replace "tp" "subtermOF(t!1, p!1)" :hide? nil)
     (name-replace "sig1" "link_of_frst_diff(sp, tp)" :hide? nil)
     (assert) (flatten)
     (spread (prop)
      ((then (lemma "vars_subst_not_in") (inst -1 "s!1" "sig1" "x!1")
        (assert) (skosimp) (lemma "dom_ran_link_disjoint")
        (inst -1 "sp" "tp") (replace -5) (assert)
        (spread (inst -1 "x!1" "r!1")
         ((then (hide-all-but (-1 1)) (expand "member") (propax))
          (then (hide-all-but (-7 1)) (expand "member") (propax)))))
       (then (lemma "vars_subst_not_in") (inst -1 "t!1" "sig1" "x!1")
        (assert) (skosimp) (lemma "dom_ran_link_disjoint")
        (inst -1 "sp" "tp") (replace -5) (assert)
        (spread (inst -1 "x!1" "r!1")
         ((then (hide-all-but (-1 1)) (expand "member") (propax))
          (then (hide-all-but (-7 1)) (expand "member") (propax))))))))
    nil)
   ((term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (vars_subst_not_in formula-decl nil substitution nil)
    (dom_ran_link_disjoint formula-decl nil robinsonunification nil)
    (Ran const-decl "set[term[variable, symbol, arity]]" substitution
     nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (member const-decl "bool" sets nil))
   shostak))
 (vars_ext_link_s_subset 0
  (vars_ext_link_s_subset-1 nil 3503927962
   (""
    (then (skosimp) (assert) (flatten)
     (name-replace "sig1"
      "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
      :hide? nil)
     (name "pi" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
     (name-replace "sp" "subtermOF(s!1, p!1)" :hide? nil)
     (name-replace "tp" "subtermOF(t!1, p!1)" :hide? nil)
     (expand* "subset?") (skosimp) (expand* "union" "member") (flatten)
     (spread (case "member(x!1, VRan(sig1))")
      ((then (expand* "member" "VRan") (expand "IUnion") (skosimp)
        (lemma "dom_link_of_frst_diff_is") (inst -1 "pi" "sp" "tp")
        (assert) (replace -6) (replace -5) (assert)
        (expand* "restrict" "singleton")
        (spread (prop)
         ((then (decompose-equality -2) (inst -1 "i!1") (assert)
           (replaces -1) (replace -6 -2 rl)
           (expand "link_of_frst_diff" -2) (replace -5)
           (spread (prop)
            ((then (hide-all-but (-1 -3 -5 4)) (expand "Vars")
              (skosimp) (typepred "p!2") (lemma "pos_o_term")
              (inst -1 "p!1" "pi o p!2" "t!1") (replace -4)
              (lemma "pos_o_term") (inst -1 "pi" "p!2" "tp")
              (lemma "position_t_first_diff") (inst -1 "sp" "tp" "pi")
              (assert) (inst 1 "p!1 o (pi o p!2)")
              (lemma "pos_subterm") (inst -1 "p!1" "pi o p!2" "t!1")
              (assert) (replace -7) (lemma "pos_subterm")
              (inst -1 "pi" "p!2" "tp") (assert))
             (then (hide-all-but (-1 -3 -6 -7 1))
              (expand "link_of_frst_diff") (replace -3) (assert)))))
          (spread (decompose-equality -1)
           ((then (inst -1 "i!1") (assert) (replaces -1)
             (replace -5 -1 rl) (expand "link_of_frst_diff" -1)
             (replace -4)
             (spread (prop)
              ((then (hide-all-but (-1 -4 -5 4)) (expand "Vars")
                (skosimp) (typepred "p!2") (lemma "pos_o_term")
                (inst -1 "p!1" "pi o p!2" "s!1") (replace -4)
                (lemma "pos_o_term") (inst -1 "pi" "p!2" "sp")
                (lemma "position_s_first_diff")
                (inst -1 "sp" "tp" "pi") (assert)
                (inst 1 "p!1 o (pi o p!2)") (lemma "pos_subterm")
                (inst -1 "p!1" "pi o p!2" "s!1") (assert) (replace -7)
                (lemma "pos_subterm") (inst -1 "pi" "p!2" "sp")
                (assert))
               (then (hide-all-but (-1 -3 -6 -7 1 2))
                (expand "link_of_frst_diff") (replace -3) (assert))
               (then (expand "link_of_frst_diff") (assert)))))
            (then (hide-all-but (-7 1)) (lemma "position_t_first_diff")
             (inst -1 "sp" "tp" "pi") (assert)))))))
       (then (expand "member")
        (spread (case "vars?(subtermOF(sp,pi))")
         ((spread (case "VRan(sig1) = Vars(subtermOF(tp,pi))")
           ((then (replaces -1) (lemma "ext_link_remove_x")
             (inst -1 "x!1" "s!1" "t!1" "p!1") (replace -3)
             (replace -4) (replace -6) (expand "member") (assert)
             (lemma "positions_of_ext") (inst -1 "sig1" "s!1")
             (decompose-equality -1) (expand "Vars" -7) (skosimp)
             (inst -1 "p!2") (assert) (expand "union")
             (spread (prop)
              ((then (expand "member") (flatten)
                (rewrite "subterm_ext_commute") (decompose-equality -7)
                (spread (prop)
                 ((then (hide-all-but (-1 1)) (expand "ext") (assert)
                   (lift-if) (prop) (assert))
                  (then (hide-all-but -2) (typepred "x!1") (expand "V")
                   (assert)))))
               (then (expand "member") (skosimp) (replace -1 -10)
                (rewrite "pos_subterm") (rewrite "subterm_ext_commute")
                (expand "ext" -10) (assert)
                (spread
                 (case "subtermOF(s!1, p1!1) = subtermOF(sp, pi)")
                 ((then (replace -10 -11 rl)
                   (expand "link_of_frst_diff" -11) (assert)
                   (replace -9) (lift-if)
                   (spread (prop)
                    ((then (hide-all-but (-1 3)) (expand "Vars")
                      (inst 1 "p2!1"))
                     (then (hide-all-but (-1 -8 -11 -12 3))
                      (expand "link_of_frst_diff") (replace -3)
                      (assert)))))
                  (then (replace -9 -10 rl)
                   (expand "link_of_frst_diff" -10) (replace -8)
                   (assert) (lift-if)
                   (spread (prop)
                    ((then (expand "ext" -5) (replace -10 -5 rl)
                      (expand "link_of_frst_diff" -5) (assert)
                      (lemma "pos_o_term")
                      (inst -1 "p1!1" "p2!1" "s!1") (assert)
                      (lemma "pos_subterm")
                      (inst -1 "p1!1" "p2!1" "s!1") (assert)
                      (replace -1 -3 rl) (hide-all-but (-3 6))
                      (expand "Vars") (inst 1 "p1!1 o p2!1"))
                     (then (hide-all-but (-1 -7 -10 -11 4))
                      (expand "link_of_frst_diff") (replace -3)
                      (assert)))))))))))
            (then (decompose-equality 1) (iff)
             (spread (prop)
              ((then (expand "VRan" -1) (expand "IUnion") (skosimp)
                (lemma "dom_link_of_frst_diff_is")
                (inst -1 "pi" "sp" "tp") (replace -7) (replace -6)
                (expand* "restrict" "singleton")
                (decompose-equality -1) (inst -1 "i!1") (assert)
                (replaces -1) (replace -6 -1 rl)
                (expand "link_of_frst_diff" -1) (replace -5) (prop)
                (hide-all-but (-1 -3 -6 -7 3))
                (expand "link_of_frst_diff") (replace -3) (assert))
               (then (expand "VRan" 1) (expand "IUnion")
                (spread (inst 1 "subtermOF(sp, pi)")
                 ((then (replace -6 1 rl)
                   (expand "link_of_frst_diff" 1) (replace -5) (prop)
                   (hide-all-but (-1 -3 -6 -7 3))
                   (expand "link_of_frst_diff") (replace -3) (assert))
                  (then (expand "V") (expand "Dom")
                   (lemma "dom_link_of_frst_diff_is")
                   (inst -1 "pi" "sp" "tp") (replace -7) (replace -6)
                   (assert) (expand* "restrict" "singleton")
                   (decompose-equality -1)
                   (inst -1 "subtermOF(sp, pi)") (expand "Dom")
                   (assert))))))))
            (then (hide-all-but (-4 1)) (lemma "position_t_first_diff")
             (inst -1 "sp" "tp" "pi") (assert))))
          (spread (case "vars?(subtermOF(tp, pi))")
           ((spread (case "VRan(sig1) = Vars(subtermOF(sp,pi))")
             ((then (replaces -1) (lemma "ext_link_remove_x")
               (inst -1 "x!1" "s!1" "t!1" "p!1") (replace -3)
               (replace -4) (replace -6) (expand "member") (assert)
               (lemma "positions_of_ext") (inst -1 "sig1" "s!1")
               (decompose-equality -1) (expand "Vars" -7) (skosimp)
               (inst -1 "p!2") (assert) (expand "union")
               (spread (prop)
                ((then (expand "member") (flatten)
                  (rewrite "subterm_ext_commute")
                  (decompose-equality -7)
                  (spread (prop)
                   ((then (hide-all-but (-1 1)) (expand "ext") (assert)
                     (lift-if) (prop) (assert))
                    (then (hide-all-but -2) (typepred "x!1")
                     (expand "V") (assert)))))
                 (then (expand "member") (skosimp) (replace -1 -10)
                  (rewrite "pos_subterm")
                  (rewrite "subterm_ext_commute") (expand "ext" -10)
                  (assert)
                  (spread
                   (case "subtermOF(s!1, p1!1) = subtermOF(tp, pi)")
                   ((then (replace -10 -11 rl)
                     (expand "link_of_frst_diff" -11) (replace -9)
                     (assert) (lift-if)
                     (spread (prop)
                      ((then (hide-all-but (-1 4)) (expand "Vars")
                        (inst 1 "p2!1"))
                       (then (hide-all-but (-1 -8 -11 -12 2 4))
                        (expand "link_of_frst_diff") (replace -3)
                        (assert)))))
                    (then (replace -9 -10 rl)
                     (expand "link_of_frst_diff" -10) (replace -8)
                     (assert) (lift-if)
                     (spread (prop)
                      ((then (lemma "pos_subterm")
                        (inst -1 "p1!1" "p2!1" "s!1")
                        (lemma "pos_o_term")
                        (inst -1 "p1!1" "p2!1" "s!1") (expand "ext" -7)
                        (replace -12 -7 rl)
                        (expand "link_of_frst_diff" -7) (replace -11)
                        (spread (split -7)
                         ((then (assert) (replace -5 -2 rl)
                           (replace -5 -3 rl)
                           (hide-all-but (-2 -3 -4 7)) (expand "Vars")
                           (inst 1 "p!2") (assert))
                          (assert))))
                       (then (hide-all-but (-1 -7 -10 -11 3 5))
                        (expand "link_of_frst_diff") (replace -3)
                        (assert)))))))))))
              (then (decompose-equality 1) (iff)
               (spread (prop)
                ((then (expand "VRan" -1) (expand "IUnion") (skosimp)
                  (lemma "dom_link_of_frst_diff_is")
                  (inst -1 "pi" "sp" "tp") (replace -7) (replace -6)
                  (assert) (expand* "restrict" "singleton")
                  (decompose-equality -1) (inst -1 "i!1") (assert)
                  (replaces -1) (replace -6 -1 rl)
                  (expand "link_of_frst_diff" -1) (replace -5) (prop)
                  (hide-all-but (-1 -3 -6 -7 2 4))
                  (expand "link_of_frst_diff") (replace -3) (assert))
                 (then (expand "VRan" 1) (expand "IUnion")
                  (spread (inst 1 "subtermOF(tp, pi)")
                   ((then (replace -6 1 rl)
                     (expand "link_of_frst_diff" 1) (replace -5) (prop)
                     (hide-all-but (-1 -3 -6 -7 2 4))
                     (expand "link_of_frst_diff") (replace -3)
                     (assert))
                    (then (expand "V")
                     (lemma "dom_link_of_frst_diff_is")
                     (inst -1 "pi" "sp" "tp") (replace -7) (replace -6)
                     (expand* "restrict" "singleton")
                     (decompose-equality -1)
                     (inst -1 "subtermOF(tp, pi)"))))))))))
            (then (hide-all-but (-3 -4 1 2 4))
             (expand "link_of_frst_diff") (replace -1) (assert))
            (then (hide-all-but (-3 1)) (lemma "position_t_first_diff")
             (inst -1 "sp" "tp" "pi") (assert))))
          (then (hide-all-but (-3 1)) (lemma "position_s_first_diff")
           (inst -1 "sp" "tp" "pi") (assert))))))))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (positions_of_ext formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (v adt-accessor-decl "[(vars?) -> variable]" term_adt nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (first_diff def-decl "position" robinsonunification nil))
   shostak))
 (vars_ext_link_t_subset 0
  (vars_ext_link_t_subset-1 nil 3503831830
   (""
    (then (skosimp)
     (name-replace "sp" "subtermOF(s!1, p!1)" :hide? nil)
     (name-replace "tp" "subtermOF(t!1, p!1)" :hide? nil)
     (name-replace "sig!1" "link_of_frst_diff(sp, tp)" :hide? nil)
     (name "q!1" "first_diff(sp, tp)") (assert) (flatten)
     (spread (case "NOT vars?(subtermOF(sp, q!1))")
      ((then (lemma "commutative_link_fd")
        (lemma "vars_ext_link_s_subset") (inst -1 "t!1" "s!1" "p!1")
        (inst -2 "sp" "tp") (replace -6) (replace -5) (replace -4)
        (replace -3) (assert) (assert)
        (spread
         (case "union(Vars(t!1), Vars(s!1)) = union(Vars(s!1), Vars(t!1))")
         ((assert)
          (then (hide-all-but 1) (decompose-equality) (expand "union")
           (iff) (prop)))))
       (then (expand* "subset?") (skosimp) (expand* "union" "member")
        (flatten)
        (spread (case "member(x!1, VRan(sig!1))")
         ((then (expand* "member" "VRan") (expand "IUnion") (skosimp)
           (lemma "dom_link_of_frst_diff_is") (inst -1 "q!1" "sp" "tp")
           (replace -5) (assert) (assert)
           (expand* "restrict" "singleton") (decompose-equality -1)
           (typepred "i!1") (inst -3 "i!1") (assert) (replaces -3)
           (hide -1) (replace -5 -2 rl) (expand "link_of_frst_diff" -2)
           (replace -4)
           (spread (prop)
            ((then (hide-all-but (-1 -4 -6 4)) (expand "Vars")
              (skosimp) (typepred "p!2") (lemma "pos_o_term")
              (inst -1 "q!1" "p!2" "tp")
              (lemma "position_t_first_diff") (inst -1 "sp" "tp" "q!1")
              (lemma "pos_o_term") (inst -1 "p!1" "q!1 o p!2" "t!1")
              (replace -7) (ground) (inst 1 "p!1 o (q!1 o p!2)")
              (lemma "pos_subterm") (inst -1 "q!1" "p!2" "tp") (assert)
              (replace -1 -6 rl) (replace -8 -6 rl)
              (hide-all-but (-4 -6 1)) (lemma "pos_subterm")
              (inst -1 "p!1" "q!1 o p!2" "t!1") (assert))
             (then (hide-all-but (-1 -4 -5 -6 1))
              (expand "link_of_frst_diff") (replace -3) (assert)))))
          (then (expand "member")
           (spread (case "VRan(sig!1) = Vars(subtermOF(tp,q!1))")
            ((then (replaces -1) (lemma "ext_link_remove_x")
              (inst -1 "x!1" "s!1" "t!1" "p!1") (replace -6)
              (replace -5) (replace -4) (assert) (assert)
              (expand "member") (lemma "positions_of_ext")
              (inst -1 "sig!1" "t!1") (decompose-equality -1)
              (expand "Vars" -7) (skosimp) (inst -1 "p!2") (assert)
              (expand "union") (expand "member")
              (spread (prop)
               ((then (rewrite "subterm_ext_commute")
                 (decompose-equality -7)
                 (spread (prop)
                  ((then (hide-all-but (-1 1)) (expand "ext") (assert)
                    (lift-if) (prop) (assert))
                   (then (hide-all-but -2) (typepred "x!1")
                    (expand "V") (assert)))))
                (then (skosimp) (replace -1 -10)
                 (rewrite "pos_subterm")
                 (rewrite "subterm_ext_commute") (expand "ext" -10)
                 (assert)
                 (spread
                  (case "subtermOF(t!1, p1!1) = subtermOF(sp, q!1)")
                  ((then (replace -8 -11 rl)
                    (expand "link_of_frst_diff" -11) (replace -7)
                    (assert) (lift-if)
                    (spread (prop)
                     ((then (hide-all-but (-1 3)) (expand "Vars")
                       (inst 1 "p2!1"))
                      (then (hide-all-but (-1 -8 -9 -10 3))
                       (expand "link_of_frst_diff") (replaces -3)
                       (assert)))))
                   (then (replace -7 -10 rl)
                    (expand "link_of_frst_diff" -10) (replace -6)
                    (assert) (lift-if)
                    (spread (prop)
                     ((then (replace -8 -5 rl)
                       (expand "link_of_frst_diff" -5) (replace -7)
                       (assert) (expand "ext" -5) (lemma "pos_o_term")
                       (inst -1 "p1!1" "p2!1" "t!1") (assert)
                       (lemma "pos_subterm")
                       (inst -1 "p1!1" "p2!1" "t!1") (assert)
                       (replace -1 -3 rl) (replace -4 -3 rl)
                       (replace -4 -2 rl) (hide-all-but (-2 -3 7))
                       (expand "Vars") (inst 1 "p!2"))
                      (then (hide-all-but (-1 -7 -8 -9 4))
                       (expand "link_of_frst_diff") (replace -3)
                       (assert)))))))))))
             (then (decompose-equality 1) (iff)
              (spread (prop)
               ((then (expand "VRan" -1) (expand "IUnion") (skosimp)
                 (lemma "dom_link_of_frst_diff_is")
                 (inst -1 "q!1" "sp" "tp") (replace -4) (replace -5)
                 (assert) (expand* "restrict" "singleton")
                 (decompose-equality -1) (inst -1 "i!1") (assert)
                 (replaces -1) (replace -4 -1 rl)
                 (expand "link_of_frst_diff" -1) (replace -3) (prop)
                 (hide-all-but (-1 -3 -4 -5 3))
                 (expand "link_of_frst_diff") (replace -3) (assert))
                (then (expand "VRan" 1) (expand "IUnion")
                 (lemma "dom_link_of_frst_diff_is")
                 (inst -1 "q!1" "sp" "tp") (replace -4) (replace -5)
                 (assert) (expand* "restrict" "singleton")
                 (decompose-equality -1)
                 (spread (inst -1 "subtermOF(sp, q!1)")
                  ((then (inst 1 "subtermOF(sp, q!1)")
                    (replace -5 1 rl) (expand "link_of_frst_diff" 1)
                    (replace -4) (assert) (prop)
                    (hide-all-but (-1 -4 -5 -6 3))
                    (expand "link_of_frst_diff") (replace -3) (assert))
                   (then (hide-all-but (-2 1)) (expand "V")
                    (propax))))))))
             (then (hide-all-but (-2 1))
              (lemma "position_t_first_diff") (inst -1 "sp" "tp" "q!1")
              (assert))))))))
       (then (hide-all-but (-1 1)) (lemma "position_s_first_diff")
        (inst -1 "sp" "tp" "q!1") (assert)))))
    nil)
   ((term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (commutative_link_fd formula-decl nil robinsonunification nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (v adt-accessor-decl "[(vars?) -> variable]" term_adt nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (positions_of_ext formula-decl nil substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (pos_subterm formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (pos_o_term formula-decl nil subterm nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (first_diff def-decl "position" robinsonunification nil))
   shostak))
 (union_vars_ext_link_subterm 0
  (union_vars_ext_link_subterm-1 nil 3503402991
   (""
    (then (skosimp*) (assert) (flatten)
     (name-replace "sig!1"
      "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
      :hide? nil)
     (decompose-equality 2) (iff)
     (spread (prop)
      ((then (expand "difference") (expand "union") (expand "member")
        (spread (prop)
         ((then (lemma "vars_ext_link_s_subset")
           (inst -1 "s!1" "t!1" "p!1") (replace -3 -1) (assert)
           (expand "subset?") (inst -1 "x!1")
           (expand* "union" "member"))
          (then (lemma "ext_link_remove_x")
           (inst -1 "x!1" "s!1" "t!1" "p!1") (replace -4 -1) (assert)
           (assert) (prop) (expand "member") (propax))
          (then (lemma "vars_ext_link_t_subset")
           (inst -1 "s!1" "t!1" "p!1") (replace -3 -1) (assert)
           (expand "subset?") (inst -1 "x!1")
           (expand* "union" "member"))
          (then (lemma "ext_link_remove_x")
           (inst -1 "x!1" "s!1" "t!1" "p!1") (replace -4 -1) (assert)
           (assert) (prop) (expand "member") (propax)))))
       (then (expand* "difference" "union" "member")
        (spread (prop)
         ((then (hide 3) (expand "Vars") (skosimp)
           (spread (inst 2 "p!2")
            ((then (rewrite "subterm_ext_commute") (replaces -1)
              (typepred "x!1") (expand* "V" "Dom" "ext") (assert))
             (rewrite "ext_preserv_pos"))))
          (then (hide 2) (expand "Vars") (skosimp)
           (spread (inst 2 "p!2")
            ((then (rewrite "subterm_ext_commute") (replaces -1)
              (typepred "x!1") (expand* "V" "Dom" "ext") (assert))
             (rewrite "ext_preserv_pos"))))))))))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (ext def-decl "term" substitution nil)
    (difference const-decl "set" sets nil)
    (Dom const-decl "set[(V)]" substitution nil))
   shostak))
 (termination_lemma_subterm_TCC1 0
  (termination_lemma_subterm_TCC1-1 nil 3503156263
   (""
    (then (skosimp) (hide -1 1)
     (spread (rewrite "finite_union")
      ((then (hide 2) (rewrite "vars_of_term_finite"))
       (then (hide 2) (rewrite "vars_of_term_finite")))))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_union judgement-tcc nil finite_sets nil))
   nil
   (termination_lemma_subterm subtype
    "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s)), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t)))"
    "finite_set[(V[variable, symbol, arity])]")))
 (termination_lemma_subterm_TCC2 0
  (termination_lemma_subterm_TCC2-1 nil 3503156263
   (""
    (then (skosimp) (hide -1 1)
     (spread (rewrite "finite_union")
      ((then (hide 2) (rewrite "vars_of_term_finite"))
       (then (hide 2) (rewrite "vars_of_term_finite")))))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_union judgement-tcc nil finite_sets nil))
   nil
   (termination_lemma_subterm subtype
    "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.s), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.t))"
    "finite_set[(V[variable, symbol, arity])]")))
 (termination_lemma_subterm 0
  (termination_lemma_subterm-1 nil 3503302874
   (""
    (then (skosimp*) (assert) (prop)
     (name-replace "sig1"
      "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
      :hide? nil)
     (lemma "card_diff_subset[(V)]")
     (lemma "union_vars_ext_link_subterm") (inst -1 "s!1" "t!1" "p!1")
     (assert) (replace -3 -1) (assert) (replaces -1)
     (spread (inst -1 "Dom(sig1)" "union(Vars(s!1), Vars(t!1))")
      ((spread (prop)
        ((spread (case-replace "card(Dom(sig1)) = 1")
          ((assert)
           (then (hide-all-but (-2 1 2)) (rewrite "card_one")
            (lemma "dom_link_of_frst_diff_is")
            (inst -1
             "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
             "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)")
            (replace -2 -1) (assert)
            (spread (prop)
             ((then (expand "restrict")
               (spread
                (inst 1
                 "subtermOF(subtermOF(s!1, p!1), first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1)))")
                ((then (decompose-equality 1) (decompose-equality -2)
                  (inst -1 "x!1") (hide -2 -3 2) (expand "singleton")
                  (propax))
                 (then (expand "V") (propax)))))
              (then (expand "restrict")
               (spread
                (case "vars?(subtermOF(subtermOF(t!1, p!1), first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))))")
                ((spread
                  (inst 2
                   "subtermOF(subtermOF(t!1, p!1), first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1)))")
                  ((then (decompose-equality -2) (decompose-equality 2)
                    (inst -1 "x!1") (hide-all-but (-1 1))
                    (expand "singleton") (propax))
                   (then (expand "V") (propax))))
                 (then (hide -1 3) (expand "link_of_frst_diff")
                  (assert))
                 (then (hide-all-but 1) (lemma "position_s_first_diff")
                  (inst -1 "subtermOF(t!1, p!1)" "subtermOF(s!1, p!1)"
                   "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                  (assert) (hide 2) (lemma "commutative_first_diff")
                  (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
                   "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"))))))))))
         (then (lemma "dom_link_of_frst_diff_is")
          (inst -1
           "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
           "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)")
          (replace -2 -1) (assert) (expand "restrict")
          (spread (prop)
           ((then (decompose-equality -2) (hide 3) (expand "subset?")
             (skosimp) (inst -1 "x!1") (expand "member") (iff) (assert)
             (expand "singleton") (expand "union") (flatten)
             (hide-all-but (-1 1)) (expand* "member" "Vars")
             (spread
              (inst 1
               "p!1 o first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
              ((spread (rewrite "pos_subterm")
                ((assert)
                 (then (hide -1 2) (lemma "position_s_first_diff")
                  (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
                   "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                  (rewrite "pos_o_term"))))
               (then (hide -1) (lemma "position_s_first_diff")
                (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
                 "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                (rewrite "pos_o_term")))))
            (spread
             (case "vars?(subtermOF(subtermOF(t!1, p!1), first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))))")
             ((then (hide 1 4) (expand "subset?") (skosimp)
               (decompose-equality -2) (inst -1 "x!1")
               (expand "member") (iff) (assert) (hide -2 -3)
               (expand* "union" "member") (flatten) (hide 1)
               (expand "Vars")
               (spread
                (inst 1
                 "p!1 o first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                ((then (expand "singleton")
                  (spread (rewrite "pos_subterm")
                   ((assert)
                    (then (hide -1 2) (lemma "position_t_first_diff")
                     (inst -1 "subtermOF(s!1, p!1)"
                      "subtermOF(t!1, p!1)"
                      "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                     (rewrite "pos_o_term")))))
                 (then (hide -1 -2 2) (lemma "position_t_first_diff")
                  (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
                   "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                  (rewrite "pos_o_term")))))
              (then (hide -1 3 5) (expand "link_of_frst_diff")
               (assert))
              (then (hide-all-but 1) (lemma "position_t_first_diff")
               (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
                "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")))))))))
       (then (hide -1 2 3) (typepred "sig1") (expand "Sub?")
        (propax)))))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (subset? const-decl "bool" sets nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card_one formula-decl nil finite_sets nil)
    (first_diff def-decl "position" robinsonunification nil)
    (commutative_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (card_diff_subset formula-decl nil finite_sets nil))
   shostak))
 (subtermOF_next_position_TCC1 0
  (subtermOF_next_position_TCC1-1 nil 3509290215
   (""
    (then (skosimp*) (lemma "next_position_is_position") (inst?)
     (assert))
    nil)
   ((positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (subtermOF_next_position subtype "robinsonunificationEF.q"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.s)")))
 (subtermOF_next_position_TCC2 0
  (subtermOF_next_position_TCC2-1 nil 3509290215
   (""
    (then (skosimp*) (lemma "next_position_is_position")
     (inst -1 "t!1" "s!1" "p!1") (lemma "next_position_commute")
     (inst?) (assert))
    nil)
   ((positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (subtermOF_next_position subtype "robinsonunificationEF.q"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.t)")))
 (subtermOF_next_position 0
  (subtermOF_next_position-1 nil 3509290246
   (""
    (then (skolem 1 ("s!1" "t!1" "_"))
     (spread
      (measure-induct+
       "IF p = empty_seq THEN lex2(0,0) ELSE lex2(length(p), arity(f(subtermOF(s!1,delete(p,length(p) - 1)))) - last(p)) ENDIF"
       ("p"))
      ((then
        (name-replace "p!1" "next_position(s!1, t!1, x!1)" :hide? nil)
        (spread (case "x!1 = empty_seq")
         ((then (hide -3) (replaces -1) (expand "next_position")
           (replace -1 -2 rl) (hide -1) (expand "subtermOF")
           (rewrite "empty_0") (assert))
          (then (expand "next_position" -1) (assert) (lift-if)
           (spread (ground)
            ((spread
              (inst -5
               "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))")
              ((then (replace -2) (prop) (hide -2 -5)
                (lemma "next_position_TCC17")
                (inst -1 "s!1" "t!1" "x!1") (assert)
                (spread (inst -1 "delete(x!1, length(x!1) - 1)")
                 ((then (assert)
                   (spread
                    (inst -1
                     "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))")
                    ((assert)
                     (then (lift-if)
                      (spread (prop)
                       ((then (hide-all-but -1) (grind))
                        (then (hide-all-but (3 4))
                         (lemma "empty_0[posnat]") (inst -1 "x!1")
                         (assert))))))))
                  (then (hide-all-but (1 3)) (lemma "empty_0[posnat]")
                   (inst -1 "x!1") (assert)))))
               (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
                (inst -1 "x!1") (assert))))
             (spread (inst -3 "delete(x!1, length(x!1) - 1)")
              ((then (replace -1) (prop) (hide -3 -1)
                (lemma "next_position_TCC19")
                (inst -1 "s!1" "t!1" "x!1") (assert)
                (spread (inst -1 "delete(x!1, length(x!1) - 1)")
                 ((then (assert)
                   (inst -1
                    "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))")
                   (hide-all-but (1 5)) (lemma "empty_0[posnat]")
                   (inst -1 "x!1") (assert))
                  (then (hide-all-but (1 5)) (lemma "empty_0[posnat]")
                   (inst -1 "x!1") (assert)))))
               (then (hide-all-but (1 4)) (lemma "empty_0[posnat]")
                (inst -1 "x!1") (assert))))
             (then (hide-all-but (-2 -5)) (replace -1 -2 rl) (hide -1)
              (expand "subtermOF") (rewrite "empty_0") (assert))))))))
       (then (hide 2) (lemma "next_position_is_position")
        (inst -1 "t!1" "s!1" "p!1") (lemma "next_position_commute")
        (inst -1 "s!1" "t!1" "p!1") (assert))
       (then (hide 2) (replaces -1)
        (rewrite "next_position_is_position"))
       (then (hide 3) (lemma "next_position_TCC5")
        (inst -1 "s!1" "t!1" "p!1") (assert))
       (then (hide 2) (rewrite "empty_0"))
       (then (hide 3) (lemma "next_position_TCC3")
        (inst -1 "s!1" "t!1" "p!1") (assert))
       (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
        (rewrite "empty_0"))
       (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "p!1")
        (assert)))))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (delete const-decl "finseq" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (delete_is_position formula-decl nil positions nil))
   shostak))
 (np_o_fd_is_position_TCC1 0
  (np_o_fd_is_position_TCC1-1 nil 3510656190
   (""
    (then (skosimp) (lemma "subtermOF_next_position")
     (inst -1 "s!1" "t!1" "p!1") (assert))
    nil)
   ((positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (np_o_fd_is_position subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.q)"
    "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.q) /= t}")))
 (np_o_fd_is_position 0
  (np_o_fd_is_position-1 nil 3510656191
   (""
    (then (skosimp) (assert)
     (name-replace "pi" "next_position(s!1, t!1, p!1)" :hide? nil)
     (name-replace "qi"
      "first_diff(subtermOF(s!1, pi), subtermOF(t!1, pi))" :hide? nil)
     (lemma "position_s_first_diff") (lemma "position_t_first_diff")
     (inst -1 "subtermOF(s!1, pi)" "subtermOF(t!1, pi)" "qi")
     (inst -2 "subtermOF(s!1, pi)" "subtermOF(t!1, pi)" "qi") (assert)
     (lemma "next_position_is_position") (inst-cp -1 "s!1" "t!1" "p!1")
     (inst -1 "t!1" "s!1" "p!1") (lemma "next_position_commute")
     (inst -1 "s!1" "t!1" "p!1") (replace -1 -2 rl) (hide -1)
     (replace -6) (hide -5 -6) (lemma "pos_o_term")
     (inst-cp -1 "pi" "qi" "s!1") (inst -1 "pi" "qi" "t!1") (assert))
    nil)
   ((first_diff def-decl "position" robinsonunification nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   shostak))
 (child_np_child_p 0
  (child_np_child_p-1 nil 3514657234
   (""
    (spread
     (measure-induct+
      "IF p = empty_seq THEN lex2(0,0) ELSE lex2(length(p), arity(f(subtermOF(s, delete(p,length(p) - 1)))) - last(p)) ENDIF"
      ("s" "t" "p"))
     ((then (skosimp)
       (name-replace "np" "next_position(x!1, x!2, x!3)" :hide? nil)
       (expand "next_position" -1) (lift-if -1)
       (spread (prop)
        ((then (hide-all-but (-2 -4)) (replace -1 -2 rl) (hide -1)
          (expand "child") (skosimp) (lemma "seq_empty[posnat]")
          (inst -1 "q!1" "p1!1") (assert) (flatten)
          (rewrite "empty_0" -2))
         (then (hide -2 1) (expand "child") (skosimp)
          (spread (inst 3 "p1!1 o #(last(x!3))")
           ((spread (split)
             ((then (hide-all-but 1) (expand* "#" "o" "empty_seq")
               (flatten) (assert))
              (then (rewrite "o_assoc") (replace -2 1 rl) (hide -2)
               (lemma "add_last_delete[posnat]") (inst -1 "x!3")
               (lemma "empty_0[posnat]") (inst -1 "x!3") (assert)
               (replace -2) (rewrite "add_last_is_o"))))
            (then (flatten) (rewrite "empty_0")))))
         (then (hide -2 -3 -4 1) (lemma "add_last_delete[posnat]")
          (inst -1 "x!3") (lemma "empty_0[posnat]") (inst -1 "x!3")
          (assert)
          (name-replace "dp" "delete(x!3, x!3`length - 1)" :hide? nil)
          (rewrite "add_last_is_o") (rewrite "add_last_is_o")
          (expand "child") (skosimp)
          (spread (case "dp = q!1")
           ((then (inst 4 "#(last(x!3))") (assert) (flatten)
             (hide-all-but -6) (expand* "#" "empty_seq"))
            (spread (case "length(q!1) < length(dp)")
             ((then (lemma "o_length_o[posnat]")
               (inst -1 "q!1" "p1!1" "dp" "#(1 + last(x!3))") (assert)
               (skosimp) (replace -1 -4)
               (inst 5 "seq!1 o  #(last(x!3))") (rewrite "o_assoc")
               (assert) (hide-all-but 5) (flatten)
               (expand* "#" "o" "empty_seq") (flatten) (hide -2)
               (assert))
              (then (hide-all-but (-3 -4 1 2 5)) (replaces -2)
               (lemma "o_equals_o[posnat]")
               (inst -1 "q!1" "p1!1" "dp" "#(1 + last(x!3))") (assert)
               (hide 3) (lemma "empty_0[posnat]") (inst -1 "p1!1")
               (assert) (hide 4) (expand "o") (flatten) (hide -2)
               (expand "#") (assert)))))))
         (spread
          (name-replace "pi"
           "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))"
           :hide? nil)
          ((spread
            (name-replace "dp" "delete(x!3, length(x!3) - 1)" :hide?
             nil)
            ((then (inst -7 "x!1" "x!2" "pi") (inst -7 "q!1") (assert)
              (spread (prop)
               ((then (hide -4 -5 -6 -7 -8)
                 (lemma "add_last_delete[posnat]") (inst -1 "x!3")
                 (lemma "empty_0[posnat]") (inst -1 "x!3") (assert)
                 (replace -3) (rewrite "add_last_is_o")
                 (rewrite "add_last_is_o") (expand "child") (skosimp)
                 (replace -2 -4)
                 (spread (case "dp = q!1")
                  ((then (inst 4 "#(last(x!3))") (assert)
                    (hide-all-but 4) (flatten)
                    (expand* "#" "empty_seq"))
                   (spread (case "length(dp) > length(q!1)")
                    ((then (lemma "o_length_o[posnat]")
                      (inst -1 "q!1" "p1!1" "dp" "#(1 + last(x!3))")
                      (assert) (skosimp) (replace -1 -3)
                      (inst 5 "seq!1 o  #(last(x!3))")
                      (rewrite "o_assoc") (assert) (hide-all-but 5)
                      (expand* "#" "o" "empty_seq") (flatten) (hide -2)
                      (assert))
                     (then (hide-all-but (-4 1 2 4))
                      (lemma "empty_0[posnat]") (inst -1 "p1!1")
                      (assert) (lemma "o_equals_o[posnat]")
                      (inst -1 "q!1" "p1!1" "dp" "#(1 + last(x!3))")
                      (assert) (expand "o") (flatten) (hide -2)
                      (expand "#") (assert)))))))
                (then (lift-if)
                 (spread (prop)
                  ((then (hide-all-but (-1 -3)) (replace -2 -1 rl)
                    (hide -2)
                    (expand* "add_last" "insert?" "empty_seq")
                    (flatten) (hide -2) (assert))
                   (then (hide -7 4) (lemma "next_position_TCC17")
                    (inst -1 "x!1" "x!2" "x!3") (assert) (inst -1 "dp")
                    (assert) (replace -2) (inst -1 "pi")
                    (assert))))))))
             (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
              (inst -1 "x!3") (assert))))
           (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
            (inst -1 "x!3") (assert))))
         (spread
          (name-replace "dp" "delete(x!3, length(x!3) - 1)" :hide? nil)
          ((then (inst -4 "x!1" "x!2" "dp") (replace -2)
            (inst -4 "q!1") (assert) (lemma "next_position_TCC19")
            (inst -1 "x!1" "x!2" "x!3") (assert) (inst -1 "dp")
            (assert) (replace -2)
            (inst -1 "add_last(dp, 1 + last(x!3))") (assert)
            (hide-all-but (-2 -5 3 4))
            (lemma "add_last_delete[posnat]") (inst -1 "x!3")
            (lemma "empty_0[posnat]") (inst -1 "x!3") (assert)
            (replace -2) (rewrite "add_last_is_o") (expand "child")
            (skosimp) (replace -3 -1) (inst 4 "p1!1 o  #(last(x!3))")
            (rewrite "o_assoc") (assert) (hide-all-but 4) (flatten)
            (expand* "#" "o" "empty_seq") (flatten) (hide -2) (assert))
           (then (hide-all-but (1 4)) (lemma "empty_0[posnat]")
            (inst -1 "x!3") (assert))))
         (then (hide-all-but (-2 -5)) (replace -1 -2 rl) (hide -1)
          (expand "child") (skosimp) (lemma "seq_empty[posnat]")
          (inst -1 "q!1" "p1!1") (assert) (flatten)
          (rewrite "empty_0" -2)))))
      (then (hide-all-but (1 2)) (lemma "next_position_TCC5")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide-all-but (-1 1)) (rewrite "empty_0"))
      (then (hide-all-but (1 2)) (lemma "next_position_TCC3")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide-all-but (1 2)) (rewrite "delete_is_position")
       (hide 3) (flatten) (rewrite "empty_0"))
      (then (hide -1 3) (lemma "empty_0[posnat]") (inst -1 "x!3")
       (assert))
      (then (hide -1 3) (lemma "next_position_TCC5")
       (inst -1 "y!1" "y!2" "y!3") (assert))
      (then (hide -2 2) (rewrite "empty_0"))
      (then (hide -1 3) (lemma "next_position_TCC3")
       (inst -1 "y!1" "y!2" "y!3") (assert))
      (then (hide -1 3) (rewrite "delete_is_position") (hide 3)
       (flatten) (rewrite "empty_0"))
      (then (hide -1 3) (lemma "empty_0[posnat]") (inst -1 "y!3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "x!3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5")
       (inst -1 "y!1" "y!2" "y!3") (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3")
       (inst -1 "y!1" "y!2" "y!3") (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst -1 "y!3")
       (assert))
      (then (hide 3) (lemma "next_position_TCC5") (inst?) (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3") (inst?) (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst?) (assert))
      (then (hide 3) (lemma "next_position_TCC5") (inst?) (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3") (inst?) (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst?) (assert))
      (then (hide 3) (lemma "next_position_TCC5") (inst?) (assert))
      (then (hide 2) (rewrite "empty_0"))
      (then (hide 3) (lemma "next_position_TCC3") (inst?) (assert))
      (then (hide 3) (rewrite "delete_is_position") (hide 3) (flatten)
       (rewrite "empty_0"))
      (then (hide 3) (lemma "empty_0[posnat]") (inst?) (assert))))
    nil)
   ((delete_is_position formula-decl nil positions nil)
    (seq_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (add_last_is_o formula-decl nil seq_extras structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (child const-decl "bool" positions nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (next_pos_empty_equal_subterm_TCC1 0
  (next_pos_empty_equal_subterm_TCC1-1 nil 3511709362
   (""
    (then (skosimp*) (hide -1) (expand "child") (skosimp)
     (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "s!1") (assert)
     (lemma "not_var") (lemma "seq_first_rest[posnat]")
     (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
     (assert)
     (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)")
     (assert))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (not_var formula-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (child const-decl "bool" positions nil))
   nil
   (next_pos_empty_equal_subterm subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_pos_empty_equal_subterm_TCC2 0
  (next_pos_empty_equal_subterm_TCC2-1 nil 3511709362
   (""
    (then (skosimp*) (hide -1) (expand "child") (skosimp)
     (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "t!1") (assert)
     (lemma "not_var") (lemma "seq_first_rest[posnat]")
     (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
     (assert)
     (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)")
     (assert))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (not_var formula-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (child const-decl "bool" positions nil))
   nil
   (next_pos_empty_equal_subterm subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_pos_empty_equal_subterm 0
  (next_pos_empty_equal_subterm-3 "" 3803841310
   (""
    (spread
     (measure-induct+
      "lex2(length(p), arity(f(subtermOF(s, delete(p,length(p) - 1)))) - last(p))"
      ("s" "t" "p"))
     ((then (skosimp) (expand "next_position" -2) (lift-if)
       (spread (prop)
        ((then (hide-all-but (-1 -3 1)) (replaces -1)
          (spread (inst -1 "empty_seq")
           ((then (assert) (hide 1) (expand "child") (inst 1 "x!3")
             (assert) (rewrite "empty_o_seq"))
            (then (hide 2)
             (spread (split)
              ((then (expand "positionsOF") (lift-if)
                (expand* "only_empty_seq" "union" "member"))
               (then (expand "positionsOF") (lift-if)
                (expand* "only_empty_seq" "union" "member"))))))))
         (then (hide-all-but -1) (grind))
         (spread
          (name-replace "nx3"
           "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))"
           :hide? nil)
          ((spread (inst -6 "x!1" "x!2" "nx3")
            ((spread (prop)
              ((spread (case "q!1 = nx3")
                ((assert)
                 (spread (case "child(q!1, nx3)")
                  ((then (hide-all-but (-1 -4 2)) (expand "child")
                    (skosimp) (replace -1 2) (rewrite "pos_subterm")
                    (rewrite "pos_subterm") (assert))
                   (spread (case "left_without_children(nx3, q!1)")
                    ((then (inst -2 "q!1") (assert))
                     (then (hide-all-but (-2 -8 1 2 3))
                      (lemma "lwc_add_last_delete")
                      (inst -1 "x!3" "q!1") (assert))))))))
               (then (skosimp) (inst -7 "p1!1") (assert)
                (hide-all-but (-1 -2 2)) (expand "child") (skosimp)
                (spread
                 (inst 2
                  "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)")
                 ((spread (split)
                   ((then (hide-all-but 1) (grind))
                    (then (replaces -1)
                     (spread
                      (case "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = delete(x!3, length(x!3) - 1) o #(1 + last(x!3))")
                      ((then (replaces -1)
                        (spread
                         (case "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1) = delete(p1!2, length(p1!2) - 1) o #(last(p1!2) - 1)")
                         ((then (replaces -1)
                           (lemma "add_last_delete[posnat]")
                           (inst -1 "x!3") (lemma "empty_0[posnat]")
                           (inst -1 "x!3") (assert)
                           (rewrite "add_last_delete_is_o")
                           (expand "finseq_appl")
                           (lemma "add_last_delete[posnat]")
                           (inst -1 "p1!2") (lemma "empty_0[posnat]")
                           (inst -1 "p1!2") (assert)
                           (rewrite "add_last_delete_is_o")
                           (expand "finseq_appl") (rewrite "o_assoc")
                           (expand* "last" "finseq_appl") (assert)
                           (replace -1 -3) (rewrite "o_assoc")
                           (name-replace "pi1"
                            "delete(x!3, x!3`length - 1)" :hide? nil)
                           (name-replace "pi2"
                            "(p1!1 o delete(p1!2, p1!2`length - 1))"
                            :hide? nil)
                           (lemma "o_equals_o[posnat]")
                           (inst -1 "pi1"
                            "#(1 + x!3`seq(x!3`length - 1))" "pi2"
                            "#(p1!2`seq(p1!2`length - 1))")
                           (assert)
                           (spread (split)
                            ((spread
                              (case "x!3`seq(x!3`length - 1) = p1!2`seq(p1!2`length - 1) - 1")
                              ((assert)
                               (then
                                (lemma "equal_prefix[posnat]")
                                (inst
                                 -1
                                 "pi1"
                                 "#(1 + x!3`seq(x!3`length - 1))"
                                 "#(p1!2`seq(p1!2`length - 1))")
                                (assert)
                                (expand "#" -1)
                                (decompose-equality -1)
                                (inst -1 "0"))))
                             (then (hide-all-but (-5 1)) (expand "o")
                              (flatten) (hide -2) (expand "#")
                              (propax)))))
                          (then (hide-all-but (1 3))
                           (lemma "nth_add_last[posnat]")
                           (spread (inst?)
                            ((then (expand "finseq_appl")
                              (spread (decompose-equality 1)
                               ((then (hide-all-but 1) (grind))
                                (spread
                                 (decompose-equality 1)
                                 ((then
                                   (typepred "x!4")
                                   (spread
                                    (inst -2 "x!4")
                                    ((spread
                                      (prop)
                                      ((then
                                        (replaces -2)
                                        (expand "o")
                                        (assert)
                                        (expand "#")
                                        (propax))
                                       (then
                                        (replaces -1)
                                        (expand "o")
                                        (lift-if)
                                        (prop)
                                        (hide 2 4)
                                        (grind))))
                                     (then (hide 2 3) (grind)))))
                                  (then
                                   (hide -1)
                                   (lemma "empty_0[posnat]")
                                   (inst -1 "p1!2")
                                   (assert))))
                                (then
                                 (hide -1)
                                 (lemma "empty_0[posnat]")
                                 (inst -1 "p1!2")
                                 (assert)))))
                             (then (hide 2) (lemma "empty_0[posnat]")
                              (inst -1 "p1!2") (assert))
                             (then (hide 2) (lemma "empty_0[posnat]")
                              (inst -1 "p1!2") (assert)))))
                          (then (hide-all-but (1 3))
                           (lemma "empty_0[posnat]") (inst -1 "p1!2")
                           (assert))
                          (then (hide-all-but (1 3))
                           (lemma "empty_0[posnat]") (inst -1 "p1!2")
                           (assert)))))
                       (then (hide -1 2) (lemma "nth_add_last[posnat]")
                        (expand "finseq_appl")
                        (spread (decompose-equality 1)
                         ((then (hide-all-but 1)
                           (expand* "add_last" "insert?" "o" "#"))
                          (spread (decompose-equality 1)
                           ((then (typepred "x!4")
                             (spread (inst?)
                              ((spread
                                (inst?)
                                ((spread
                                  (prop)
                                  ((then
                                    (replaces -2)
                                    (expand "o")
                                    (assert)
                                    (replace -1 1)
                                    (assert)
                                    (expand "#")
                                    (propax))
                                   (then
                                    (replaces -1)
                                    (expand "o")
                                    (assert)
                                    (lift-if)
                                    (prop)
                                    (hide-all-but (-1 1 3))
                                    (expand* "add_last" "insert?")
                                    (assert))))
                                 (then
                                  (hide 2 3 4)
                                  (expand* "add_last" "insert?"))))
                               (then
                                (hide-all-but 1)
                                (lemma "empty_0[posnat]")
                                (inst -1 "x!3")
                                (assert)))))
                            (then (hide-all-but 1)
                             (lemma "empty_0[posnat]") (inst -1 "x!3")
                             (assert))))
                          (then (hide-all-but 1)
                           (lemma "empty_0[posnat]") (inst -1 "x!3")
                           (assert)))))
                       (then (hide-all-but 1) (lemma "empty_0[posnat]")
                        (inst -1 "x!3") (assert)))))))
                  (then (lemma "empty_0[posnat]") (inst-cp -1 "p1!2")
                   (inst -1 "x!3") (assert)
                   (spread (case "last(p1!2) = 1 + last(x!3)")
                    ((assert)
                     (then (replaces -1) (hide 4)
                      (expand* "add_last" "insert?" "o" "finseq_appl")
                      (flatten) (decompose-equality -2)
                      (inst -1 "length(delete(x!3, length(x!3) - 1))")
                      (assert) (expand "last" 1 1)
                      (expand "finseq_appl") (assert)))))
                  (then (hide-all-but (1 2)) (flatten)
                   (rewrite "empty_0"))
                  (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
                   (inst -1 "p1!2") (assert)))))
               (then (hide -6 -7 2) (lemma "next_position_TCC17")
                (inst -1 "x!1" "x!2" "x!3") (assert)
                (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                 ((then (assert) (inst -1 "nx3") (assert) (lift-if)
                   (prop) (hide-all-but (-1 -3)) (replaces -1) (grind))
                  (then (hide-all-but 1) (lemma "empty_0[posnat]")
                   (inst -1 "x!3") (assert)))))))
             (then (assert)
              (spread (prop)
               ((then (lemma "next_position_TCC15")
                 (inst -1 "x!1" "x!2" "x!3") (assert)
                 (spread (inst -1 "delete(x!3, length(x!3) - 1)")
                  ((then (assert) (inst -1 "nx3") (assert))
                   (then (hide-all-but 1) (lemma "empty_0[posnat]")
                    (inst -1 "x!3") (assert)))))
                (then (hide-all-but (-1 -2)) (replaces -1)
                 (grind)))))))
           (then (hide-all-but 1) (lemma "empty_0[posnat]")
            (inst -1 "x!3") (assert))))
         (spread
          (name-replace "px3" "delete(x!3, length(x!3) - 1)" :hide?
           nil)
          ((spread (inst -4 "x!1" "x!2" "px3")
            ((spread (prop)
              ((spread (case "left_without_children(px3, q!1)")
                ((then (inst -2 "q!1") (assert))
                 (then (hide -1 -3 -4 -5 4)
                  (spread
                   (case "EXISTS (r : position): q!1 = px3 o r AND first(r) > last(x!3)")
                   ((then (skosimp)
                     (spread (case "r!1 = empty_seq")
                      ((then (hide-all-but (-1 -2 -4 -5 2))
                        (replaces -1) (rewrite "seq_o_empty")
                        (replaces -1) (expand "left_without_children")
                        (skosimp) (lemma "add_last_delete[posnat]")
                        (inst -1 "x!3") (lemma "empty_0[posnat]")
                        (inst -1 "x!3") (assert)
                        (rewrite "add_last_delete_is_o")
                        (expand "finseq_appl") (replace -2 -1)
                        (replace -1 -4) (replace -3 -4)
                        (lemma "equal_prefix[posnat]")
                        (inst -1 "r!2"
                         "q1!1 o  #(x!3`seq(x!3`length - 1))" "p1!1")
                        (rewrite "o_assoc") (assert) (hide -2 -3 -4 -5)
                        (expand* "first" "o" "finseq_appl")
                        (decompose-equality -1) (decompose-equality -2)
                        (spread (inst -1 "0")
                         ((then (lift-if)
                           (spread (prop)
                            ((assert)
                             (then (hide-all-but (1 4))
                              (lemma "empty_0[posnat]")
                              (inst -1 "q1!1") (assert)))))
                          (then (hide-all-but 1) (expand "#")
                           (assert)))))
                       (then (lemma "seq_first_rest_1[posnat]")
                        (inst -1 "r!1") (lemma "empty_0[posnat]")
                        (inst -1 "r!1") (assert) (replace -1 -2)
                        (rewrite "o_assoc")
                        (name-replace "q!2" "px3 o  #(first(r!1))"
                         :hide? nil)
                        (lemma "pos_ax")
                        (inst -1 "q!2" "rest(r!1)" "x!1") (assert)
                        (hide -3 -4 -6 -7 3)
                        (spread
                         (case "add_last(px3, 1 + last(x!3)) = px3 o #(1 + last(x!3))")
                         ((then (replaces -1) (lemma "pos_subterm_ax")
                           (inst -1 "px3" "#(first(r!1))" "x!1")
                           (assert) (hide -2) (lemma "pos_o_term")
                           (inst -1 "px3" "#(1 + last(x!3))" "x!1")
                           (assert)
                           (spread (split)
                            ((then (hide-all-but 1) (reveal -10)
                              (replace -1 1 rl)
                              (rewrite "delete_is_position") (flatten)
                              (rewrite "empty_0"))
                             (then (hide 5)
                              (lemma "subterms_acc_arity")
                              (inst -1 "first(r!1)" "1 + last(x!3)"
                               "subtermOF(x!1, px3)")
                              (assert)))))
                          (then (hide - 2 3 5) (expand "o")
                           (spread (decompose-equality 1)
                            ((expand* "add_last" "insert?" "#"
                              "finseq_appl")
                             (spread (decompose-equality 1)
                              ((then
                                (lemma "nth_add_last[posnat]")
                                (expand "finseq_appl")
                                (lift-if)
                                (spread
                                 (prop)
                                 ((spread
                                   (inst
                                    -2
                                    "px3"
                                    "1 + last(x!3)"
                                    "x!4")
                                   ((assert) (assert)))
                                  (spread
                                   (inst
                                    -1
                                    "px3"
                                    "1 + last(x!3)"
                                    "x!4")
                                   ((spread
                                     (ground)
                                     ((then
                                       (replaces -2)
                                       (replace -1 2)
                                       (assert)
                                       (expand*
                                        "last"
                                        "finseq_appl"
                                        "#"))
                                      (then
                                       (typepred "x!4")
                                       (hide -2 3 4)
                                       (expand* "add_last" "insert?")
                                       (assert))))
                                    (then
                                     (typepred "x!4")
                                     (hide 3 4)
                                     (expand*
                                      "add_last"
                                      "insert?")))))))
                               (then
                                (skosimp)
                                (expand*
                                 "add_last"
                                 "insert?"
                                 "last"
                                 "#"
                                 "finseq_appl"))
                               (then (skosimp) (assert))))
                             (then (skosimp) (assert)))))))))))
                    (then (hide 4) (expand "left_without_children")
                     (skosimp)
                     (spread (case "length(r!1) = length(px3)")
                      ((then (lemma "add_last_delete[posnat]")
                        (inst -1 "x!3") (lemma "empty_0[posnat]")
                        (inst -1 "x!3") (assert)
                        (rewrite "add_last_delete_is_o")
                        (replace -3 -1) (expand "finseq_appl")
                        (replace -1 -5) (lemma "o_equals_o[posnat]")
                        (inst -1 "px3" "#(x!3`seq(x!3`length - 1))"
                         "r!1" "p1!1")
                        (assert) (inst 2 "q1!1") (assert)
                        (spread (case "last(x!3) = first(p1!1)")
                         ((assert)
                          (then (hide-all-but (-1 -4 -6 1 2 5 7))
                           (replaces -1) (replace -1 -2 rl) (hide -1)
                           (expand* "o" "last" "first" "delete" "#"
                            "finseq_appl")
                           (flatten)
                           (spread (decompose-equality -2)
                            ((spread (inst -1 "x!3`length - 1")
                              ((assert)
                               (then
                                (hide -1 2 4 5)
                                (expand* "#" "delete")
                                (assert))))
                             (then (hide-all-but (-1 1))
                              (expand* "#" "delete") (assert))
                             (then (hide-all-but 1) (typepred "x!4")
                              (expand* "#" "delete") (assert))))))))
                       (then (lemma "add_last_delete[posnat]")
                        (inst -1 "x!3") (lemma "empty_0[posnat]")
                        (inst -1 "x!3") (assert)
                        (rewrite "add_last_delete_is_o")
                        (expand "finseq_appl") (replace -2 -1)
                        (replace -1 -4)
                        (spread (case "length(r!1) > length(px3)")
                         ((then (lemma "o_length_o[posnat]")
                           (inst -1 "px3" "#(x!3`seq(x!3`length - 1))"
                            "r!1" "p1!1")
                           (assert) (skosimp) (replace -1 -5)
                           (inst 3 "seq!1 o q1!1") (rewrite "o_assoc")
                           (assert)
                           (spread (case "seq!1 = empty_seq")
                            ((then (replace -1 -2)
                              (rewrite "seq_o_empty")
                              (lemma "o_equals_o[posnat]")
                              (inst -1 "px3"
                               "#(x!3`seq(x!3`length - 1))" "r!1"
                               "p1!1")
                              (assert))
                             (then (lemma "empty_0[posnat]")
                              (inst -1 "seq!1") (assert)
                              (rewrite "first_compo") (replace -1 -6)
                              (lemma "equal_prefix[posnat]")
                              (inst -1 "px3"
                               "#(x!3`seq(x!3`length - 1))"
                               "seq!1 o p1!1")
                              (rewrite "o_assoc") (assert)
                              (hide-all-but (-1 1 9)) (expand* "#" "o")
                              (flatten) (hide -2)
                              (lemma "empty_0[posnat]")
                              (inst -1 "p1!1") (assert)))))
                          (then (lemma "o_length_o[posnat]")
                           (inst -1 "r!1" "p1!1" "px3"
                            "#(x!3`seq(x!3`length - 1))")
                           (assert) (skosimp)
                           (spread (case "seq!1 = empty_seq")
                            ((then (hide-all-but (-1 -2 3))
                              (replaces -1) (rewrite "seq_o_empty")
                              (assert))
                             (then (replace -1 -5)
                              (lemma "equal_prefix[posnat]")
                              (inst -1 "r!1"
                               "seq!1 o  #(x!3`seq(x!3`length - 1))"
                               "p1!1")
                              (rewrite "o_assoc") (assert)
                              (inst 6 "r!1" "seq!1" "q1!1") (assert)
                              (hide-all-but (-1 -7 1 6))
                              (spread
                               (case "first(seq!1) = first(p1!1)")
                               ((assert)
                                (then
                                 (hide-all-but (-1 1 2))
                                 (replace -1 1 rl)
                                 (rewrite "first_compo")
                                 (hide -1 2)
                                 (flatten)
                                 (rewrite "empty_0"))))))))))))))
                    (then (skosimp) (lemma "empty_0[posnat]")
                     (inst -1 "r!1") (assert) (replace -1 -2)
                     (rewrite "seq_o_empty") (hide -1 -3 1 3)
                     (replaces -1) (expand "left_without_children")
                     (skosimp) (lemma "add_last_delete[posnat]")
                     (inst -1 "x!3") (lemma "empty_0[posnat]")
                     (inst -1 "x!3") (assert)
                     (rewrite "add_last_delete_is_o")
                     (expand "finseq_appl") (replace -2 -1)
                     (replace -1 -4) (replace -3 -4)
                     (lemma "equal_prefix[posnat]")
                     (inst -1 "r!2"
                      "q1!1 o  #(x!3`seq(x!3`length - 1))" "p1!1")
                     (rewrite "o_assoc") (assert) (replace -1 -6 rl)
                     (hide-all-but (-6 3))
                     (spread (rewrite "first_compo")
                      ((assert)
                       (then (hide -1) (flatten)
                        (rewrite "empty_0"))))))))))
               (then (skosimp) (inst -5 "p1!1") (assert)
                (hide-all-but (-1 -2 4)) (expand "child") (skosimp)
                (spread (inst 2 "add_last(p1!2, last(x!3))")
                 ((spread (prop)
                   ((then (hide-all-but -1) (grind))
                    (then (replaces -1) (lemma "empty_0[posnat]")
                     (inst-cp -1 "x!3") (inst -1 "p1!2") (assert)
                     (expand* "delete" "o" "add_last" "insert?"
                      "finseq_appl")
                     (flatten) (decompose-equality -2)
                     (spread (decompose-equality 3)
                      ((spread (decompose-equality 1)
                        ((then (lift-if)
                          (spread (prop)
                           ((spread (inst -2 "x!4")
                             ((assert) (assert)))
                            (spread (inst -2 "x!4")
                             ((assert) (assert)))
                            (then (hide -1) (typepred "x!4")
                             (expand* "last" "finseq_appl")
                             (assert)))))
                         (then (skosimp) (hide -1)
                          (expand* "add_last" "insert?" "finseq_appl")
                          (ground))
                         (then (skosimp) (assert))))
                       (then (skosimp) (hide -1)
                        (expand* "add_last" "insert?" "finseq_appl"))
                       (then (skosimp) (assert)))))))
                  (then (hide - 2) (flatten) (rewrite "empty_0")))))
               (then (hide -4 -5 4) (lemma "next_position_TCC19")
                (inst -1 "x!1" "x!2" "x!3") (assert) (inst -1 "px3")
                (assert) (inst -1 "add_last(px3, 1 + last(x!3))")
                (assert))))
             (then (assert) (replace -1 1 rl)
              (spread (rewrite "delete_is_position")
               ((then (rewrite "delete_is_position") (hide-all-but 1)
                 (lemma "empty_0[posnat]") (inst -1 "x!3") (assert))
                (then (hide-all-but 1) (lemma "empty_0[posnat]")
                 (inst -1 "x!3") (assert)))))))
           (then (hide-all-but 1) (lemma "empty_0[posnat]")
            (inst -1 "x!3") (assert))))
         (then (hide -2 -3 -4 2)
          (spread
           (name-replace "px3" "delete(x!3, length(x!3) - 1)" :hide?
            nil)
           ((then (typepred "q!1") (hide -2)
             (expand "left_without_children") (skosimp)
             (lemma "add_last_delete[posnat]") (inst -1 "x!3")
             (lemma "empty_0[posnat]") (inst -1 "x!3") (assert)
             (rewrite "add_last_delete_is_o") (expand "finseq_appl")
             (replace -3 -1) (replace -1 -6) (replace -4)
             (rewrite "empty_o_seq") (copy -6) (expand "#" -1)
             (expand "o" -1) (flatten) (hide -2)
             (lemma "empty_0[posnat]") (inst -1 "p1!1") (assert)
             (spread (case "p1!1`length = 1 AND r!1`length = 0")
              ((then (flatten) (lemma "empty_0[posnat]")
                (inst -1 "r!1") (assert) (replace -1 (-9 -10))
                (rewrite "empty_o_seq") (rewrite "empty_o_seq")
                (replace -9 -11 rl) (lemma "seq_first_rest_1[posnat]")
                (inst -1 "q!1") (lemma "empty_0[posnat]")
                (inst -1 "q!1") (assert) (lemma "pos_ax")
                (inst -1 "#(first(q!1))" "rest(q!1)" "x!1") (assert)
                (spread
                 (case "add_last(empty_seq, 1 + last(x!3)) = #(1 + last(x!3))")
                 ((then (replaces -1)
                   (spread (case "first(p1!1) = last(x!3)")
                    ((then (replace -1 4 rl) (hide-all-but (-2 -14 4))
                      (lemma "subterms_acc_arity")
                      (inst -1 "first(q!1)" "1 + first(p1!1)" "x!1")
                      (assert))
                     (then (hide-all-but (-12 1)) (replace -1 1 rl)
                      (hide -1)
                      (expand* "first" "last" "#" "finseq_appl")))))
                  (then (hide-all-but 1)
                   (expand* "add_last" "insert?" "#")))))
               (assert))))
            (then (typepred "x!3") (hide-all-but (-3 1))
             (lemma "empty_0[posnat]") (inst -1 "x!3") (assert))))))))
      (then (hide-all-but 1) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!2") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!2, p1!1)")
       (assert))
      (then (hide-all-but 1) (skosimp) (lemma "app_term")
       (inst -1 "y!3" "p1!1" "y!1") (assert))
      (then (hide 2) (lemma "next_position_TCC5")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide 1) (rewrite "empty_0"))
      (then (hide 2) (rewrite "subterm_is_app") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (rewrite "delete_is_position") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "x!3")
       (assert))
      (then (hide 2) (lemma "next_position_TCC5")
       (inst -1 "y!1" "y!2" "y!3") (assert))
      (then (hide 1) (rewrite "empty_0"))
      (then (hide 2) (rewrite "subterm_is_app") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (rewrite "delete_is_position") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "y!3")
       (assert))
      (then (hide-all-but 1) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst?) (inst?) (assert)
       (lemma "seq_first_rest[posnat]") (inst -1 "p1!2")
       (lemma "empty_0[posnat]") (inst -1 "p1!2") (assert)
       (lemma "not_var") (inst?) (inst?) (assert))
      (then (hide-all-but 1) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst?) (inst?) (assert)
       (lemma "seq_first_rest[posnat]") (inst -1 "p1!2")
       (lemma "empty_0[posnat]") (inst -1 "p1!2") (assert)
       (lemma "not_var") (inst?) (inst?) (assert))
      (then (hide-all-but 1) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst?) (inst?) (assert)
       (lemma "seq_first_rest[posnat]") (inst -1 "p1!2")
       (lemma "empty_0[posnat]") (inst -1 "p1!2") (assert)
       (lemma "not_var") (inst?) (inst?) (assert))
      (then (hide-all-but 1) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst?) (inst?) (assert)
       (lemma "seq_first_rest[posnat]") (inst -1 "p1!2")
       (lemma "empty_0[posnat]") (inst -1 "p1!2") (assert)
       (lemma "not_var") (inst?) (inst?) (assert))
      (then (hide 2) (lemma "next_position_TCC5") (inst?) (inst?)
       (inst?) (assert))
      (then (hide 1) (rewrite "empty_0") (assert))
      (then (hide 2) (rewrite "subterm_is_app") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (rewrite "delete_is_position") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst?) (assert))
      (then (hide 2) (lemma "next_position_TCC5") (inst?) (inst?)
       (inst?) (assert))
      (then (hide 1) (rewrite "empty_0") (assert))
      (then (hide 2) (rewrite "subterm_is_app") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (rewrite "delete_is_position") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst?) (assert))
      (then (hide -1 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "t!1") (assert)
       (lemma "seq_first_rest[posnat]") (inst -1 "p1!2")
       (lemma "empty_0[posnat]") (inst -1 "p1!2") (assert)
       (lemma "not_var")
       (inst -1 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(t!1, p1!1)")
       (assert))
      (then (hide -1 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "s!1") (assert)
       (lemma "seq_first_rest[posnat]") (inst -1 "p1!2")
       (lemma "empty_0[posnat]") (inst -1 "p1!2") (assert)
       (lemma "not_var")
       (inst -1 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(s!1, p1!1)")
       (assert))
      (then (hide 2) (lemma "next_position_TCC5")
       (inst -1 "s!1" "t!1" "p!1") (assert))
      (then (hide 1) (rewrite "empty_0"))
      (then (hide 2) (rewrite "subterm_is_app") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (rewrite "delete_is_position") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "p!1")
       (assert))))
    nil)
   ((subterm_is_app formula-decl nil subterm nil)
    (app_term formula-decl nil subterm nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (not_var formula-decl nil positions nil)
    (o_length_o formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (pos_ax formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (subterms_acc_arity formula-decl nil positions nil)
    (delete_is_position formula-decl nil positions nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (pos_subterm formula-decl nil subterm nil)
    (lwc_add_last_delete formula-decl nil positions nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (add_last_delete_is_o formula-decl nil seq_extras structures)
    (nth_add_last formula-decl nil seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_o_seq formula-decl nil seq_extras structures)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (left_without_children const-decl "bool" positions nil)
    (child const-decl "bool" positions nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (next_pos_empty_equal_subterm-2 nil 3513029724
   (""
    (measure-induct+ "lex2(length(p),
                          arity(f(subtermOF(s,
                                         delete(p,length(p) - 1)))) - last(p))"
     ("s" "t" "p"))
    (("1" (skosimp)
      (("1" (expand "next_position" -2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (hide-all-but (-1 -3 1))
              (("1" (replaces -1)
                (("1" (inst -1 "empty_seq")
                  (("1" (assert)
                    (("1" (hide 1)
                      (("1" (expand "child")
                        (("1" (inst 1 "x!3")
                          (("1" (assert)
                            (("1" (rewrite "empty_o_seq") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (split)
                      (("1" (expand "positionsOF")
                        (("1" (lift-if)
                          (("1"
                            (expand* "only_empty_seq" "union" "member")
                            nil nil))
                          nil))
                        nil)
                       ("2" (expand "positionsOF")
                        (("2" (lift-if)
                          (("2"
                            (expand* "only_empty_seq" "union" "member")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but -1) (("2" (grind) nil nil)) nil)
             ("3"
              (name-replace "nx3"
               "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))"
               :hide? nil)
              (("1" (inst -6 "x!1" "x!2" "nx3")
                (("1" (prop)
                  (("1" (case "q!1 = nx3")
                    (("1" (assert) nil nil)
                     ("2" (case "child(q!1, nx3)")
                      (("1" (hide-all-but (-1 -4 2))
                        (("1" (expand "child")
                          (("1" (skosimp)
                            (("1" (replace -1 2)
                              (("1"
                                (rewrite "pos_subterm")
                                (("1"
                                  (rewrite "pos_subterm")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "left_without_children(nx3, q!1)")
                        (("1" (inst -2 "q!1") (("1" (assert) nil nil))
                          nil)
                         ("2" (hide-all-but (-2 -8 1 2 3))
                          (("2" (lemma "lwc_add_last_delete")
                            (("2" (inst -1 "x!3" "q!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (inst -7 "p1!1")
                      (("2" (assert)
                        (("2" (hide-all-but (-1 -2 2))
                          (("2" (expand "child")
                            (("2" (skosimp)
                              (("2"
                                (inst
                                 2
                                 "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)")
                                (("1"
                                  (split)
                                  (("1"
                                    (hide-all-but 1)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (case
                                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = delete(x!3, length(x!3) - 1) o #(1 + last(x!3))")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1) = delete(p1!2, length(p1!2) - 1) o #(last(p1!2) - 1)")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (lemma
                                               "add_last_delete[posnat]")
                                              (("1"
                                                (inst -1 "x!3")
                                                (("1"
                                                  (lemma
                                                   "empty_0[posnat]")
                                                  (("1"
                                                    (inst -1 "x!3")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "add_last_delete_is_o")
                                                        (("1"
                                                          (expand
                                                           "finseq_appl")
                                                          (("1"
                                                            (lemma
                                                             "add_last_delete[posnat]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p1!2")
                                                              (("1"
                                                                (lemma
                                                                 "empty_0[posnat]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p1!2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "add_last_delete_is_o")
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (rewrite
                                                                           "o_assoc")
                                                                          (("1"
                                                                            (expand*
                                                                             "last"
                                                                             "finseq_appl")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -3)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "o_assoc")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "pi1"
                                                                                     "delete(x!3, x!3`length - 1)"
                                                                                     :hide?
                                                                                     nil)
                                                                                    (("1"
                                                                                      (name-replace
                                                                                       "pi2"
                                                                                       "(p1!1 o delete(p1!2, p1!2`length - 1))"
                                                                                       :hide?
                                                                                       nil)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "o_equals_o[posnat]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "pi1"
                                                                                           "#(1 + x!3`seq(x!3`length - 1))"
                                                                                           "pi2"
                                                                                           "#(p1!2`seq(p1!2`length - 1))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "x!3`seq(x!3`length - 1) = p1!2`seq(p1!2`length - 1) - 1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "equal_prefix[posnat]")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "pi1"
                                                                                                     "#(1 + x!3`seq(x!3`length - 1))"
                                                                                                     "#(p1!2`seq(p1!2`length - 1))")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "#"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (decompose-equality
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "0")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "o")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "#")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 3))
                                            (("2"
                                              (lemma
                                               "nth_add_last[posnat]")
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (expand
                                                   "finseq_appl")
                                                  (("1"
                                                    (decompose-equality
                                                     1)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (typepred
                                                         "x!4")
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "x!4")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replaces
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "o")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "#")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "o")
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (hide
                                                                       2
                                                                       4)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2 3)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1)
                                                        (("2"
                                                          (lemma
                                                           "empty_0[posnat]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "p1!2")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -1)
                                                      (("3"
                                                        (lemma
                                                         "empty_0[posnat]")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "p1!2")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "empty_0[posnat]")
                                                    (("2"
                                                      (inst -1 "p1!2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (lemma
                                                     "empty_0[posnat]")
                                                    (("3"
                                                      (inst -1 "p1!2")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but (1 3))
                                            (("3"
                                              (lemma "empty_0[posnat]")
                                              (("3"
                                                (inst -1 "p1!2")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide-all-but (1 3))
                                            (("4"
                                              (lemma "empty_0[posnat]")
                                              (("4"
                                                (inst -1 "p1!2")
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (lemma
                                           "nth_add_last[posnat]")
                                          (("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (decompose-equality 1)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (expand*
                                                   "add_last"
                                                   "insert?"
                                                   "o"
                                                   "#")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (decompose-equality 1)
                                                (("1"
                                                  (typepred "x!4")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (replaces -2)
                                                          (("1"
                                                            (expand
                                                             "o")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "#")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand
                                                             "o")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1
                                                                      3))
                                                                    (("2"
                                                                      (expand*
                                                                       "add_last"
                                                                       "insert?")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 3 4)
                                                        (("2"
                                                          (expand*
                                                           "add_last"
                                                           "insert?")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (lemma
                                                         "empty_0[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!3")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (lemma
                                                     "empty_0[posnat]")
                                                    (("2"
                                                      (inst -1 "x!3")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (lemma
                                                   "empty_0[posnat]")
                                                  (("3"
                                                    (inst -1 "x!3")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (lemma "empty_0[posnat]")
                                          (("3"
                                            (inst -1 "x!3")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "empty_0[posnat]")
                                  (("2"
                                    (inst-cp -1 "p1!2")
                                    (("2"
                                      (inst -1 "x!3")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "last(p1!2) = 1 + last(x!3)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replaces -1)
                                            (("2"
                                              (hide 4)
                                              (("2"
                                                (expand*
                                                 "add_last"
                                                 "insert?"
                                                 "o"
                                                 "finseq_appl")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (decompose-equality
                                                     -2)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "length(delete(x!3, length(x!3) - 1))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "last"
                                                           1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but (1 2))
                                  (("3"
                                    (flatten)
                                    (("3" (rewrite "empty_0") nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide-all-but (1 2))
                                  (("4"
                                    (lemma "empty_0[posnat]")
                                    (("4"
                                      (inst -1 "p1!2")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -6 -7 2)
                    (("3" (lemma "next_position_TCC17")
                      (("3" (inst -1 "x!1" "x!2" "x!3")
                        (("3" (assert)
                          (("3"
                            (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert)
                              (("1"
                                (inst -1 "nx3")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 -3))
                                        (("1"
                                          (replaces -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (lemma "empty_0[posnat]")
                                (("2"
                                  (inst -1 "x!3")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (prop)
                    (("1" (lemma "next_position_TCC15")
                      (("1" (inst -1 "x!1" "x!2" "x!3")
                        (("1" (assert)
                          (("1"
                            (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert)
                              (("1"
                                (inst -1 "nx3")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (lemma "empty_0[posnat]")
                                (("2"
                                  (inst -1 "x!3")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -2))
                      (("2" (replaces -1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma "empty_0[posnat]")
                  (("2" (inst -1 "x!3") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("4"
              (name-replace "px3" "delete(x!3, length(x!3) - 1)" :hide?
               nil)
              (("1" (inst -4 "x!1" "x!2" "px3")
                (("1" (prop)
                  (("1" (case "left_without_children(px3, q!1)")
                    (("1" (inst -2 "q!1") (("1" (assert) nil nil)) nil)
                     ("2" (hide -1 -3 -4 -5 4)
                      (("2"
                        (case "EXISTS (r : position): q!1 = px3 o r AND first(r) > last(x!3)")
                        (("1" (skosimp)
                          (("1" (case "r!1 = empty_seq")
                            (("1" (hide-all-but (-1 -2 -4 -5 2))
                              (("1"
                                (replaces -1)
                                (("1"
                                  (rewrite "seq_o_empty")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "left_without_children")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (lemma
                                           "add_last_delete[posnat]")
                                          (("1"
                                            (inst -1 "x!3")
                                            (("1"
                                              (lemma "empty_0[posnat]")
                                              (("1"
                                                (inst -1 "x!3")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "add_last_delete_is_o")
                                                    (("1"
                                                      (expand
                                                       "finseq_appl")
                                                      (("1"
                                                        (replace -2 -1)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -4)
                                                          (("1"
                                                            (replace
                                                             -3
                                                             -4)
                                                            (("1"
                                                              (lemma
                                                               "equal_prefix[posnat]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "r!2"
                                                                 "q1!1 o  #(x!3`seq(x!3`length - 1))"
                                                                 "p1!1")
                                                                (("1"
                                                                  (rewrite
                                                                   "o_assoc")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5)
                                                                      (("1"
                                                                        (expand*
                                                                         "first"
                                                                         "o"
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -1)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             -2)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "0")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      4))
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "empty_0[posnat]")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "q1!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "#")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "seq_first_rest_1[posnat]")
                              (("2"
                                (inst -1 "r!1")
                                (("2"
                                  (lemma "empty_0[posnat]")
                                  (("2"
                                    (inst -1 "r!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 -2)
                                        (("2"
                                          (rewrite "o_assoc")
                                          (("2"
                                            (name-replace
                                             "q!2"
                                             "px3 o  #(first(r!1))"
                                             :hide?
                                             nil)
                                            (("2"
                                              (lemma "pos_ax")
                                              (("2"
                                                (inst
                                                 -1
                                                 "q!2"
                                                 "rest(r!1)"
                                                 "x!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide
                                                     -3
                                                     -4
                                                     -6
                                                     -7
                                                     3)
                                                    (("2"
                                                      (case
                                                       "add_last(px3, 1 + last(x!3)) = px3 o #(1 + last(x!3))")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (lemma
                                                           "pos_subterm_ax")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "px3"
                                                             "#(first(r!1))"
                                                             "x!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "pos_o_term")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "px3"
                                                                     "#(1 + last(x!3))"
                                                                     "x!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("1"
                                                                            (reveal
                                                                             -10)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               rl)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "delete_is_position")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "empty_0")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           5)
                                                                          (("2"
                                                                            (lemma
                                                                             "subterms_acc_arity")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "first(r!1)"
                                                                               "1 + last(x!3)"
                                                                               "subtermOF(x!1, px3)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide - 2 3 5)
                                                        (("2"
                                                          (expand "o")
                                                          (("2"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand*
                                                               "add_last"
                                                               "insert?"
                                                               "#"
                                                               "finseq_appl")
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "nth_add_last[posnat]")
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "px3"
                                                                         "1 + last(x!3)"
                                                                         "x!4")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -1
                                                                         "px3"
                                                                         "1 + last(x!3)"
                                                                         "x!4")
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (replaces
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand*
                                                                                   "last"
                                                                                   "finseq_appl"
                                                                                   "#")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "x!4")
                                                                            (("2"
                                                                              (hide
                                                                               -2
                                                                               3
                                                                               4)
                                                                              (("2"
                                                                                (expand*
                                                                                 "add_last"
                                                                                 "insert?")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "x!4")
                                                                          (("2"
                                                                            (hide
                                                                             3
                                                                             4)
                                                                            (("2"
                                                                              (expand*
                                                                               "add_last"
                                                                               "insert?")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (expand*
                                                                   "add_last"
                                                                   "insert?"
                                                                   "last"
                                                                   "#"
                                                                   "finseq_appl")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skosimp)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 4)
                          (("2" (expand "left_without_children")
                            (("2" (skosimp)
                              (("2"
                                (case "length(r!1) = length(px3)")
                                (("1"
                                  (lemma "add_last_delete[posnat]")
                                  (("1"
                                    (inst -1 "x!3")
                                    (("1"
                                      (lemma "empty_0[posnat]")
                                      (("1"
                                        (inst -1 "x!3")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite
                                             "add_last_delete_is_o")
                                            (("1"
                                              (replace -3 -1)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (replace -1 -5)
                                                  (("1"
                                                    (lemma
                                                     "o_equals_o[posnat]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "px3"
                                                       "#(x!3`seq(x!3`length - 1))"
                                                       "r!1"
                                                       "p1!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           2
                                                           "q1!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "last(x!3) = first(p1!1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -4
                                                                  -6
                                                                  1
                                                                  2
                                                                  5
                                                                  7))
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     -2
                                                                     rl)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (expand*
                                                                         "o"
                                                                         "last"
                                                                         "first"
                                                                         "delete"
                                                                         "#"
                                                                         "finseq_appl")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (decompose-equality
                                                                             -2)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!3`length - 1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1
                                                                                 2
                                                                                 4
                                                                                 5)
                                                                                (("2"
                                                                                  (expand*
                                                                                   "#"
                                                                                   "delete")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("2"
                                                                                (expand*
                                                                                 "#"
                                                                                 "delete")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (typepred
                                                                                 "x!4")
                                                                                (("3"
                                                                                  (expand*
                                                                                   "#"
                                                                                   "delete")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "add_last_delete[posnat]")
                                  (("2"
                                    (inst -1 "x!3")
                                    (("2"
                                      (lemma "empty_0[posnat]")
                                      (("2"
                                        (inst -1 "x!3")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite
                                             "add_last_delete_is_o")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (replace -2 -1)
                                                (("2"
                                                  (replace -1 -4)
                                                  (("2"
                                                    (case
                                                     "length(r!1) > length(px3)")
                                                    (("1"
                                                      (lemma
                                                       "o_length_o[posnat]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "px3"
                                                         "#(x!3`seq(x!3`length - 1))"
                                                         "r!1"
                                                         "p1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -5)
                                                              (("1"
                                                                (inst
                                                                 3
                                                                 "seq!1 o q1!1")
                                                                (("1"
                                                                  (rewrite
                                                                   "o_assoc")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "seq!1 = empty_seq")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (rewrite
                                                                           "seq_o_empty")
                                                                          (("1"
                                                                            (lemma
                                                                             "o_equals_o[posnat]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "px3"
                                                                               "#(x!3`seq(x!3`length - 1))"
                                                                               "r!1"
                                                                               "p1!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "empty_0[posnat]")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "seq!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (rewrite
                                                                               "first_compo")
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 -6)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "equal_prefix[posnat]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "px3"
                                                                                     "#(x!3`seq(x!3`length - 1))"
                                                                                     "seq!1 o p1!1")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "o_assoc")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            1
                                                                                            9))
                                                                                          (("2"
                                                                                            (expand*
                                                                                             "#"
                                                                                             "o")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "empty_0[posnat]")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "p1!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "o_length_o[posnat]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "r!1"
                                                         "p1!1"
                                                         "px3"
                                                         "#(x!3`seq(x!3`length - 1))")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (case
                                                               "seq!1 = empty_seq")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -2
                                                                  3))
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "seq_o_empty")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1
                                                                 -5)
                                                                (("2"
                                                                  (lemma
                                                                   "equal_prefix[posnat]")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "r!1"
                                                                     "seq!1 o  #(x!3`seq(x!3`length - 1))"
                                                                     "p1!1")
                                                                    (("2"
                                                                      (rewrite
                                                                       "o_assoc")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           6
                                                                           "r!1"
                                                                           "seq!1"
                                                                           "q1!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -7
                                                                                1
                                                                                6))
                                                                              (("2"
                                                                                (case
                                                                                 "first(seq!1) = first(p1!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1
                                                                                    2))
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "first_compo")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         2)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "empty_0")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp)
                          (("3" (lemma "empty_0[posnat]")
                            (("3" (inst -1 "r!1")
                              (("3"
                                (assert)
                                (("3"
                                  (replace -1 -2)
                                  (("3"
                                    (rewrite "seq_o_empty")
                                    (("3"
                                      (hide -1 -3 1 3)
                                      (("3"
                                        (replaces -1)
                                        (("3"
                                          (expand
                                           "left_without_children")
                                          (("3"
                                            (skosimp)
                                            (("3"
                                              (lemma
                                               "add_last_delete[posnat]")
                                              (("3"
                                                (inst -1 "x!3")
                                                (("3"
                                                  (lemma
                                                   "empty_0[posnat]")
                                                  (("3"
                                                    (inst -1 "x!3")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "add_last_delete_is_o")
                                                        (("3"
                                                          (expand
                                                           "finseq_appl")
                                                          (("3"
                                                            (replace
                                                             -2
                                                             -1)
                                                            (("3"
                                                              (replace
                                                               -1
                                                               -4)
                                                              (("3"
                                                                (replace
                                                                 -3
                                                                 -4)
                                                                (("3"
                                                                  (lemma
                                                                   "equal_prefix[posnat]")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "r!2"
                                                                     "q1!1 o  #(x!3`seq(x!3`length - 1))"
                                                                     "p1!1")
                                                                    (("3"
                                                                      (rewrite
                                                                       "o_assoc")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (replace
                                                                           -1
                                                                           -6
                                                                           rl)
                                                                          (("3"
                                                                            (hide-all-but
                                                                             (-6
                                                                              3))
                                                                            (("3"
                                                                              (rewrite
                                                                               "first_compo")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "empty_0")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (inst -5 "p1!1")
                      (("2" (assert)
                        (("2" (hide-all-but (-1 -2 4))
                          (("2" (expand "child")
                            (("2" (skosimp)
                              (("2"
                                (inst 2 "add_last(p1!2, last(x!3))")
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but -1)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (lemma "empty_0[posnat]")
                                      (("2"
                                        (inst-cp -1 "x!3")
                                        (("2"
                                          (inst -1 "p1!2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand*
                                               "delete"
                                               "o"
                                               "add_last"
                                               "insert?"
                                               "finseq_appl")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (decompose-equality
                                                   -2)
                                                  (("2"
                                                    (decompose-equality
                                                     3)
                                                    (("1"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "x!4")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -2
                                                             "x!4")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide -1)
                                                            (("3"
                                                              (typepred
                                                               "x!4")
                                                              (("3"
                                                                (expand*
                                                                 "last"
                                                                 "finseq_appl")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand*
                                                             "add_last"
                                                             "insert?"
                                                             "finseq_appl")
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand*
                                                           "add_last"
                                                           "insert?"
                                                           "finseq_appl")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide - 2)
                                  (("2"
                                    (flatten)
                                    (("2" (rewrite "empty_0") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -4 -5 4)
                    (("3" (lemma "next_position_TCC19")
                      (("3" (inst -1 "x!1" "x!2" "x!3")
                        (("3" (assert)
                          (("3" (inst -1 "px3")
                            (("3" (assert)
                              (("3"
                                (inst
                                 -1
                                 "add_last(px3, 1 + last(x!3))")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1 1 rl)
                    (("2" (rewrite "delete_is_position")
                      (("1" (rewrite "delete_is_position")
                        (("1" (hide-all-but 1)
                          (("1" (lemma "empty_0[posnat]")
                            (("1" (inst -1 "x!3")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (lemma "empty_0[posnat]")
                          (("2" (inst -1 "x!3")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma "empty_0[posnat]")
                  (("2" (inst -1 "x!3") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("5" (hide -2 -3 -4 2)
              (("5"
                (name-replace "px3" "delete(x!3, length(x!3) - 1)"
                 :hide? nil)
                (("1" (typepred "q!1")
                  (("1" (hide -2)
                    (("1" (expand "left_without_children")
                      (("1" (skosimp)
                        (("1" (lemma "add_last_delete[posnat]")
                          (("1" (inst -1 "x!3")
                            (("1" (lemma "empty_0[posnat]")
                              (("1"
                                (inst -1 "x!3")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "add_last_delete_is_o")
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (replace -3 -1)
                                        (("1"
                                          (replace -1 -6)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (rewrite "empty_o_seq")
                                              (("1"
                                                (copy -6)
                                                (("1"
                                                  (expand "#" -1)
                                                  (("1"
                                                    (expand "o" -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (lemma
                                                           "empty_0[posnat]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "p1!1`length = 1 AND r!1`length = 0")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "empty_0[posnat]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "r!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           (-9
                                                                            -10))
                                                                          (("1"
                                                                            (rewrite
                                                                             "empty_o_seq")
                                                                            (("1"
                                                                              (rewrite
                                                                               "empty_o_seq")
                                                                              (("1"
                                                                                (replace
                                                                                 -9
                                                                                 -11
                                                                                 rl)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "seq_first_rest_1[posnat]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "q!1")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "empty_0[posnat]")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "q!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "pos_ax")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "#(first(q!1))"
                                                                                               "rest(q!1)"
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "add_last(empty_seq, 1 + last(x!3)) = #(1 + last(x!3))")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "first(p1!1) = last(x!3)")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         4
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-2
                                                                                                            -14
                                                                                                            4))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "subterms_acc_arity")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "first(q!1)"
                                                                                                               "1 + first(p1!1)"
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (-12
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (expand*
                                                                                                               "first"
                                                                                                               "last"
                                                                                                               "#"
                                                                                                               "finseq_appl")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand*
                                                                                                       "add_last"
                                                                                                       "insert?"
                                                                                                       "#")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "x!3")
                  (("2" (hide-all-but (-3 1))
                    (("2" (lemma "empty_0[posnat]")
                      (("2" (inst -1 "x!3") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (skosimp)
        (("2" (expand "child")
          (("2" (skosimp)
            (("2" (lemma "pos_subterm_ax")
              (("2" (inst -1 "p1!1" "p1!2" "y!2")
                (("2" (assert)
                  (("2" (lemma "not_var")
                    (("2" (lemma "seq_first_rest[posnat]")
                      (("2" (inst -1 "p1!2")
                        (("2" (lemma "empty_0[posnat]")
                          (("2" (inst -1 "p1!2")
                            (("2" (assert)
                              (("2"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skosimp)
        (("3" (lemma "app_term")
          (("3" (inst -1 "y!3" "p1!1" "y!1") (("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "next_position_TCC5")
        (("4" (inst -1 "x!1" "x!2" "x!3") (("4" (assert) nil nil))
          nil))
        nil))
      nil)
     ("5" (hide 1) (("5" (rewrite "empty_0") nil nil)) nil)
     ("6" (hide 2)
      (("6" (rewrite "subterm_is_app")
        (("6" (flatten) (("6" (rewrite "empty_0") nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite "delete_is_position")
        (("7" (flatten) (("7" (rewrite "empty_0") nil nil)) nil)) nil))
      nil)
     ("8" (hide 2)
      (("8" (lemma "empty_0[posnat]")
        (("8" (inst -1 "x!3") (("8" (assert) nil nil)) nil)) nil))
      nil)
     ("9" (hide 2)
      (("9" (lemma "next_position_TCC5")
        (("9" (inst -1 "y!1" "y!2" "y!3") (("9" (assert) nil nil))
          nil))
        nil))
      nil)
     ("10" (hide 1) (("10" (rewrite "empty_0") nil nil)) nil)
     ("11" (hide 2)
      (("11" (rewrite "subterm_is_app")
        (("11" (flatten) (("11" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (rewrite "delete_is_position")
        (("12" (flatten) (("12" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (lemma "empty_0[posnat]")
        (("13" (inst -1 "y!3") (("13" (assert) nil nil)) nil)) nil))
      nil)
     ("14" (hide-all-but 1)
      (("14" (skosimp)
        (("14" (expand "child")
          (("14" (skosimp)
            (("14" (lemma "pos_subterm_ax")
              (("14" (inst?)
                (("14" (inst?)
                  (("14" (assert)
                    (("14" (lemma "seq_first_rest[posnat]")
                      (("14" (inst -1 "p1!1")
                        (("14" (lemma "empty_0[posnat]")
                          (("14" (inst -1 "p1!1")
                            (("14" (assert)
                              (("14"
                                (lemma "not_var")
                                (("14"
                                  (inst?)
                                  (("14"
                                    (inst?)
                                    (("14" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide-all-but 1)
      (("15" (skosimp)
        (("15" (expand "child")
          (("15" (skosimp)
            (("15" (lemma "pos_subterm_ax")
              (("15" (inst?)
                (("15" (inst?)
                  (("15" (assert)
                    (("15" (lemma "seq_first_rest[posnat]")
                      (("15" (inst -1 "p1!1")
                        (("15" (lemma "empty_0[posnat]")
                          (("15" (inst -1 "p1!1")
                            (("15" (assert)
                              (("15"
                                (lemma "not_var")
                                (("15"
                                  (inst?)
                                  (("15"
                                    (inst?)
                                    (("15" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (hide-all-but 1)
      (("16" (skosimp)
        (("16" (expand "child")
          (("16" (skosimp)
            (("16" (lemma "pos_subterm_ax")
              (("16" (inst?)
                (("16" (inst?)
                  (("16" (assert)
                    (("16" (lemma "seq_first_rest[posnat]")
                      (("16" (inst -1 "p1!2")
                        (("16" (lemma "empty_0[posnat]")
                          (("16" (inst -1 "p1!2")
                            (("16" (assert)
                              (("16"
                                (lemma "not_var")
                                (("16"
                                  (inst?)
                                  (("16"
                                    (inst?)
                                    (("16" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide-all-but 1)
      (("17" (skosimp)
        (("17" (expand "child")
          (("17" (skosimp)
            (("17" (lemma "pos_subterm_ax")
              (("17" (inst?)
                (("17" (inst?)
                  (("17" (assert)
                    (("17" (lemma "seq_first_rest[posnat]")
                      (("17" (inst -1 "p1!2")
                        (("17" (lemma "empty_0[posnat]")
                          (("17" (inst -1 "p1!2")
                            (("17" (assert)
                              (("17"
                                (lemma "not_var")
                                (("17"
                                  (inst?)
                                  (("17"
                                    (inst?)
                                    (("17" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma "next_position_TCC5")
        (("18" (inst?)
          (("18" (inst?) (("18" (inst?) (("18" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (hide 1)
      (("19" (rewrite "empty_0") (("19" (assert) nil nil)) nil)) nil)
     ("20" (hide 2)
      (("20" (rewrite "subterm_is_app")
        (("20" (flatten) (("20" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("21" (hide 2)
      (("21" (rewrite "delete_is_position")
        (("21" (flatten) (("21" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("22" (hide 2)
      (("22" (lemma "empty_0[posnat]")
        (("22" (inst?) (("22" (assert) nil nil)) nil)) nil))
      nil)
     ("23" (hide 2)
      (("23" (lemma "next_position_TCC5")
        (("23" (inst?)
          (("23" (inst?) (("23" (inst?) (("23" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("24" (hide 1)
      (("24" (rewrite "empty_0") (("24" (assert) nil nil)) nil)) nil)
     ("25" (hide 2)
      (("25" (rewrite "subterm_is_app")
        (("25" (flatten) (("25" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("26" (hide 2)
      (("26" (rewrite "delete_is_position")
        (("26" (flatten) (("26" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("27" (hide 2)
      (("27" (lemma "empty_0[posnat]")
        (("27" (inst?) (("27" (assert) nil nil)) nil)) nil))
      nil)
     ("28" (hide -1 2)
      (("28" (skosimp)
        (("28" (expand "child")
          (("28" (skosimp)
            (("28" (lemma "pos_subterm_ax")
              (("28" (inst -1 "p1!1" "p1!2" "t!1")
                (("28" (assert)
                  (("28" (lemma "seq_first_rest[posnat]")
                    (("28" (inst -1 "p1!2")
                      (("28" (lemma "empty_0[posnat]")
                        (("28" (inst -1 "p1!2")
                          (("28" (assert)
                            (("28" (lemma "not_var")
                              (("28"
                                (inst
                                 -1
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(t!1, p1!1)")
                                (("28" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("29" (hide -1 2)
      (("29" (skosimp)
        (("29" (expand "child")
          (("29" (skosimp)
            (("29" (lemma "pos_subterm_ax")
              (("29" (inst -1 "p1!1" "p1!2" "s!1")
                (("29" (assert)
                  (("29" (lemma "seq_first_rest[posnat]")
                    (("29" (inst -1 "p1!2")
                      (("29" (lemma "empty_0[posnat]")
                        (("29" (inst -1 "p1!2")
                          (("29" (assert)
                            (("29" (lemma "not_var")
                              (("29"
                                (inst
                                 -1
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(s!1, p1!1)")
                                (("29" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("30" (hide 2)
      (("30" (lemma "next_position_TCC5")
        (("30" (inst -1 "s!1" "t!1" "p!1") (("30" (assert) nil nil))
          nil))
        nil))
      nil)
     ("31" (hide 1) (("31" (rewrite "empty_0") nil nil)) nil)
     ("32" (hide 2)
      (("32" (rewrite "subterm_is_app")
        (("32" (flatten) (("32" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("33" (hide 2)
      (("33" (rewrite "delete_is_position")
        (("33" (flatten) (("33" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("34" (hide 2)
      (("34" (lemma "empty_0[posnat]")
        (("34" (inst -1 "p!1") (("34" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((subterm_is_app formula-decl nil subterm nil)
    (app_term formula-decl nil subterm nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (not_var formula-decl nil positions nil)
    (o_length_o formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (pos_ax formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (subterms_acc_arity formula-decl nil positions nil)
    (delete_is_position formula-decl nil positions nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (pos_subterm formula-decl nil subterm nil)
    (lwc_add_last_delete formula-decl nil positions nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (add_last_delete_is_o formula-decl nil seq_extras structures)
    (nth_add_last formula-decl nil seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_o_seq formula-decl nil seq_extras structures)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (left_without_children const-decl "bool" positions nil)
    (child const-decl "bool" positions nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   nil)
  (next_pos_empty_equal_subterm-1 nil 3511874617
   (""
    (measure-induct+ "lex2(length(p),
                      arity(f(subtermOF(s,
                                     delete(p,length(p) - 1)))) - last(p))"
     ("s" "t" "p"))
    (("1" (skosimp)
      (("1" (expand "next_position" -2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (hide-all-but (-1 -3 1))
              (("1" (replaces -1)
                (("1" (inst -1 "empty_seq")
                  (("1" (assert)
                    (("1" (hide 1)
                      (("1" (expand "child")
                        (("1" (inst 1 "x!3")
                          (("1" (assert)
                            (("1" (rewrite "empty_o_seq") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (split)
                      (("1" (expand "positionsOF")
                        (("1" (lift-if)
                          (("1"
                            (expand* "only_empty_seq" "union" "member")
                            nil nil))
                          nil))
                        nil)
                       ("2" (expand "positionsOF")
                        (("2" (lift-if)
                          (("2"
                            (expand* "only_empty_seq" "union" "member")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but -1) (("2" (grind) nil nil)) nil)
             ("3"
              (name-replace "nx3"
               "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))"
               :hide? nil)
              (("1" (inst -6 "x!1" "x!2" "nx3")
                (("1" (prop)
                  (("1" (case "q!1 = nx3")
                    (("1" (assert) nil nil)
                     ("2" (case "child(q!1, nx3)")
                      (("1" (hide-all-but (-1 -4 2))
                        (("1" (expand "child")
                          (("1" (skosimp)
                            (("1" (replace -1 2)
                              (("1"
                                (rewrite "pos_subterm")
                                (("1"
                                  (rewrite "pos_subterm")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "left_without_children(nx3, q!1)")
                        (("1" (inst -2 "q!1") (("1" (assert) nil nil))
                          nil)
                         ("2" (hide-all-but (-2 -8 1 2 3))
                          (("2" (lemma "lwc_add_last_delete")
                            (("2" (inst -1 "x!3" "q!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (inst -7 "p1!1")
                      (("2" (assert)
                        (("2" (hide-all-but (-1 -2 2))
                          (("2" (expand "child")
                            (("2" (skosimp)
                              (("2"
                                (inst
                                 2
                                 "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)")
                                (("1"
                                  (split)
                                  (("1"
                                    (hide-all-but 1)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (case
                                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = delete(x!3, length(x!3) - 1) o #(1 + last(x!3))")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1) = delete(p1!2, length(p1!2) - 1) o #(last(p1!2) - 1)")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (lemma
                                               "add_last_delete[posnat]")
                                              (("1"
                                                (inst -1 "x!3")
                                                (("1"
                                                  (lemma
                                                   "empty_0[posnat]")
                                                  (("1"
                                                    (inst -1 "x!3")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "add_last_delete_is_o")
                                                        (("1"
                                                          (expand
                                                           "finseq_appl")
                                                          (("1"
                                                            (lemma
                                                             "add_last_delete[posnat]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p1!2")
                                                              (("1"
                                                                (lemma
                                                                 "empty_0[posnat]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p1!2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "add_last_delete_is_o")
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (rewrite
                                                                           "o_assoc")
                                                                          (("1"
                                                                            (expand*
                                                                             "last"
                                                                             "finseq_appl")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -3)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "o_assoc")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "pi1"
                                                                                     "delete(x!3, x!3`length - 1)"
                                                                                     :hide?
                                                                                     nil)
                                                                                    (("1"
                                                                                      (name-replace
                                                                                       "pi2"
                                                                                       "(p1!1 o delete(p1!2, p1!2`length - 1))"
                                                                                       :hide?
                                                                                       nil)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "o_equals_o[posnat]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "pi1"
                                                                                           "#(1 + x!3`seq(x!3`length - 1))"
                                                                                           "pi2"
                                                                                           "#(p1!2`seq(p1!2`length - 1))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "x!3`seq(x!3`length - 1) = p1!2`seq(p1!2`length - 1) - 1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "equal_prefix[posnat]")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "pi1"
                                                                                                     "#(1 + x!3`seq(x!3`length - 1))"
                                                                                                     "#(p1!2`seq(p1!2`length - 1))")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "#"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (decompose-equality
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "0")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "o")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "#")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 3))
                                            (("2"
                                              (lemma
                                               "nth_add_last[posnat]")
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (expand
                                                   "finseq_appl")
                                                  (("1"
                                                    (decompose-equality
                                                     1)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (typepred
                                                         "x!4")
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "x!4")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replaces
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "o")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "#")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "o")
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (hide
                                                                       2
                                                                       4)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2 3)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1)
                                                        (("2"
                                                          (lemma
                                                           "empty_0[posnat]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "p1!2")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -1)
                                                      (("3"
                                                        (lemma
                                                         "empty_0[posnat]")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "p1!2")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "empty_0[posnat]")
                                                    (("2"
                                                      (inst -1 "p1!2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (lemma
                                                     "empty_0[posnat]")
                                                    (("3"
                                                      (inst -1 "p1!2")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but (1 3))
                                            (("3"
                                              (lemma "empty_0[posnat]")
                                              (("3"
                                                (inst -1 "p1!2")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide-all-but (1 3))
                                            (("4"
                                              (lemma "empty_0[posnat]")
                                              (("4"
                                                (inst -1 "p1!2")
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (lemma
                                           "nth_add_last[posnat]")
                                          (("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (decompose-equality 1)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (decompose-equality 1)
                                                (("1"
                                                  (typepred "x!4")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (replaces -2)
                                                          (("1"
                                                            (expand
                                                             "o")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "#")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand
                                                             "o")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1
                                                                      3))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 3 4)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (lemma
                                                         "empty_0[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!3")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 3))
                                                  (("2"
                                                    (lemma
                                                     "empty_0[posnat]")
                                                    (("2"
                                                      (inst -1 "x!3")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (lemma
                                                   "empty_0[posnat]")
                                                  (("3"
                                                    (inst -1 "x!3")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (lemma "empty_0[posnat]")
                                          (("3"
                                            (inst -1 "x!3")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "empty_0[posnat]")
                                  (("2"
                                    (inst-cp -1 "p1!2")
                                    (("2"
                                      (inst -1 "x!3")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "last(p1!2) = 1 + last(x!3)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replaces -1)
                                            (("2"
                                              (hide 4)
                                              (("2"
                                                (expand*
                                                 "add_last"
                                                 "insert?"
                                                 "o"
                                                 "finseq_appl")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (decompose-equality
                                                     -2)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "length(delete(x!3, length(x!3) - 1))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "last"
                                                           1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but (1 2))
                                  (("3"
                                    (flatten)
                                    (("3" (rewrite "empty_0") nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide-all-but (1 2))
                                  (("4"
                                    (lemma "empty_0[posnat]")
                                    (("4"
                                      (inst -1 "p1!2")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -6 -7 2)
                    (("3" (lemma "next_position_TCC17")
                      (("3" (inst -1 "x!1" "x!2" "x!3")
                        (("3" (assert)
                          (("3"
                            (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert)
                              (("1"
                                (inst -1 "nx3")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 -3))
                                        (("1"
                                          (replaces -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (lemma "empty_0[posnat]")
                                (("2"
                                  (inst -1 "x!3")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (prop)
                    (("1" (lemma "next_position_TCC15")
                      (("1" (inst -1 "x!1" "x!2" "x!3")
                        (("1" (assert)
                          (("1"
                            (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert)
                              (("1"
                                (inst -1 "nx3")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (lemma "empty_0[posnat]")
                                (("2"
                                  (inst -1 "x!3")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -2))
                      (("2" (replaces -1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma "empty_0[posnat]")
                  (("2" (inst -1 "x!3") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("4"
              (name-replace "px3" "delete(x!3, length(x!3) - 1)" :hide?
               nil)
              (("1" (inst -4 "x!1" "x!2" "px3")
                (("1" (prop)
                  (("1" (hide-all-but (-2 -6 2))
                    (("1" (typepred "x!3" "q!1")
                      (("1" (hide -2 -5)
                        (("1" (flatten)
                          (("1" (lemma "lwc_more_left_not_pos")
                            (("1" (inst -1 "x!3" "q!1" "x!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (inst -5 "p1!1")
                      (("2" (assert)
                        (("2" (hide-all-but (-1 -2 4))
                          (("2" (expand "child")
                            (("2" (skosimp)
                              (("2"
                                (inst 2 "add_last(p1!2, last(x!3))")
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but -1)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (lemma "empty_0[posnat]")
                                      (("2"
                                        (inst-cp -1 "x!3")
                                        (("2"
                                          (inst -1 "p1!2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand*
                                               "delete"
                                               "o"
                                               "add_last"
                                               "insert?"
                                               "finseq_appl")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (decompose-equality
                                                   -2)
                                                  (("2"
                                                    (decompose-equality
                                                     3)
                                                    (("1"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "x!4")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -2
                                                             "x!4")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide -1)
                                                            (("3"
                                                              (typepred
                                                               "x!4")
                                                              (("3"
                                                                (expand*
                                                                 "last"
                                                                 "finseq_appl")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand*
                                                             "add_last"
                                                             "insert?"
                                                             "finseq_appl")
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand*
                                                           "add_last"
                                                           "insert?"
                                                           "finseq_appl")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide - 2)
                                  (("2"
                                    (flatten)
                                    (("2" (rewrite "empty_0") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -4 -5 4)
                    (("3" (lemma "next_position_TCC19")
                      (("3" (inst -1 "x!1" "x!2" "x!3")
                        (("3" (assert)
                          (("3" (inst -1 "px3")
                            (("3" (assert)
                              (("3"
                                (inst
                                 -1
                                 "add_last(px3, 1 + last(x!3))")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1 1 rl)
                    (("2" (rewrite "delete_is_position")
                      (("1" (rewrite "delete_is_position")
                        (("1" (hide-all-but 1)
                          (("1" (lemma "empty_0[posnat]")
                            (("1" (inst -1 "x!3")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (lemma "empty_0[posnat]")
                          (("2" (inst -1 "x!3")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma "empty_0[posnat]")
                  (("2" (inst -1 "x!3") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("5" (hide-all-but (-5 1))
              (("5" (typepred "x!3" "q!1")
                (("5" (hide -2 -5)
                  (("5" (flatten)
                    (("5" (lemma "lwc_more_left_not_pos")
                      (("5" (inst -1 "x!3" "q!1" "x!1")
                        (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (skosimp)
        (("2" (expand "child")
          (("2" (skosimp)
            (("2" (lemma "pos_subterm_ax")
              (("2" (inst -1 "p1!1" "p1!2" "y!2")
                (("2" (assert)
                  (("2" (lemma "not_var")
                    (("2" (lemma "seq_first_rest[posnat]")
                      (("2" (inst -1 "p1!2")
                        (("2" (lemma "empty_0[posnat]")
                          (("2" (inst -1 "p1!2")
                            (("2" (assert)
                              (("2"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skosimp)
        (("3" (expand "child")
          (("3" (skosimp)
            (("3" (lemma "pos_subterm_ax")
              (("3" (inst -1 "p1!1" "p1!2" "y!1")
                (("3" (assert)
                  (("3" (lemma "not_var")
                    (("3" (lemma "seq_first_rest[posnat]")
                      (("3" (inst -1 "p1!2")
                        (("3" (lemma "empty_0[posnat]")
                          (("3" (inst -1 "p1!2")
                            (("3" (assert)
                              (("3"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1, p1!1)")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "next_position_TCC5")
        (("4" (inst -1 "x!1" "x!2" "x!3") (("4" (assert) nil nil))
          nil))
        nil))
      nil)
     ("5" (hide 1) (("5" (rewrite "empty_0") nil nil)) nil)
     ("6" (hide 2)
      (("6" (rewrite "subterm_is_app")
        (("6" (flatten) (("6" (rewrite "empty_0") nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite "delete_is_position")
        (("7" (flatten) (("7" (rewrite "empty_0") nil nil)) nil)) nil))
      nil)
     ("8" (hide 2)
      (("8" (lemma "empty_0[posnat]")
        (("8" (inst -1 "x!3") (("8" (assert) nil nil)) nil)) nil))
      nil)
     ("9" (hide 2)
      (("9" (lemma "next_position_TCC5")
        (("9" (inst -1 "y!1" "y!2" "y!3") (("9" (assert) nil nil))
          nil))
        nil))
      nil)
     ("10" (hide 1) (("10" (rewrite "empty_0") nil nil)) nil)
     ("11" (hide 2)
      (("11" (rewrite "subterm_is_app")
        (("11" (flatten) (("11" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (rewrite "delete_is_position")
        (("12" (flatten) (("12" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (lemma "empty_0[posnat]")
        (("13" (inst -1 "y!3") (("13" (assert) nil nil)) nil)) nil))
      nil)
     ("14" (hide-all-but 1)
      (("14" (skosimp)
        (("14" (expand "child")
          (("14" (skosimp)
            (("14" (lemma "pos_subterm_ax")
              (("14" (inst?)
                (("14" (inst?)
                  (("14" (assert)
                    (("14" (lemma "seq_first_rest[posnat]")
                      (("14" (inst -1 "p1!1")
                        (("14" (lemma "empty_0[posnat]")
                          (("14" (inst -1 "p1!1")
                            (("14" (assert)
                              (("14"
                                (lemma "not_var")
                                (("14"
                                  (inst?)
                                  (("14"
                                    (inst?)
                                    (("14" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide-all-but 1)
      (("15" (skosimp)
        (("15" (expand "child")
          (("15" (skosimp)
            (("15" (lemma "pos_subterm_ax")
              (("15" (inst?)
                (("15" (inst?)
                  (("15" (assert)
                    (("15" (lemma "seq_first_rest[posnat]")
                      (("15" (inst -1 "p1!1")
                        (("15" (lemma "empty_0[posnat]")
                          (("15" (inst -1 "p1!1")
                            (("15" (assert)
                              (("15"
                                (lemma "not_var")
                                (("15"
                                  (inst?)
                                  (("15"
                                    (inst?)
                                    (("15" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (hide-all-but 1)
      (("16" (skosimp)
        (("16" (expand "child")
          (("16" (skosimp)
            (("16" (lemma "pos_subterm_ax")
              (("16" (inst?)
                (("16" (inst?)
                  (("16" (assert)
                    (("16" (lemma "seq_first_rest[posnat]")
                      (("16" (inst -1 "p1!2")
                        (("16" (lemma "empty_0[posnat]")
                          (("16" (inst -1 "p1!2")
                            (("16" (assert)
                              (("16"
                                (lemma "not_var")
                                (("16"
                                  (inst?)
                                  (("16"
                                    (inst?)
                                    (("16" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide-all-but 1)
      (("17" (skosimp)
        (("17" (expand "child")
          (("17" (skosimp)
            (("17" (lemma "pos_subterm_ax")
              (("17" (inst?)
                (("17" (inst?)
                  (("17" (assert)
                    (("17" (lemma "seq_first_rest[posnat]")
                      (("17" (inst -1 "p1!2")
                        (("17" (lemma "empty_0[posnat]")
                          (("17" (inst -1 "p1!2")
                            (("17" (assert)
                              (("17"
                                (lemma "not_var")
                                (("17"
                                  (inst?)
                                  (("17"
                                    (inst?)
                                    (("17" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma "next_position_TCC5")
        (("18" (inst?)
          (("18" (inst?) (("18" (inst?) (("18" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (hide 1)
      (("19" (rewrite "empty_0") (("19" (assert) nil nil)) nil)) nil)
     ("20" (hide 2)
      (("20" (rewrite "subterm_is_app")
        (("20" (flatten) (("20" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("21" (hide 2)
      (("21" (rewrite "delete_is_position")
        (("21" (flatten) (("21" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("22" (hide 2)
      (("22" (lemma "empty_0[posnat]")
        (("22" (inst?) (("22" (assert) nil nil)) nil)) nil))
      nil)
     ("23" (hide 2)
      (("23" (lemma "next_position_TCC5")
        (("23" (inst?)
          (("23" (inst?) (("23" (inst?) (("23" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("24" (hide 1)
      (("24" (rewrite "empty_0") (("24" (assert) nil nil)) nil)) nil)
     ("25" (hide 2)
      (("25" (rewrite "subterm_is_app")
        (("25" (flatten) (("25" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("26" (hide 2)
      (("26" (rewrite "delete_is_position")
        (("26" (flatten) (("26" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("27" (hide 2)
      (("27" (lemma "empty_0[posnat]")
        (("27" (inst?) (("27" (assert) nil nil)) nil)) nil))
      nil)
     ("28" (hide -1 2)
      (("28" (skosimp)
        (("28" (expand "child")
          (("28" (skosimp)
            (("28" (lemma "pos_subterm_ax")
              (("28" (inst -1 "p1!1" "p1!2" "t!1")
                (("28" (assert)
                  (("28" (lemma "seq_first_rest[posnat]")
                    (("28" (inst -1 "p1!2")
                      (("28" (lemma "empty_0[posnat]")
                        (("28" (inst -1 "p1!2")
                          (("28" (assert)
                            (("28" (lemma "not_var")
                              (("28"
                                (inst
                                 -1
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(t!1, p1!1)")
                                (("28" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("29" (hide -1 2)
      (("29" (skosimp)
        (("29" (expand "child")
          (("29" (skosimp)
            (("29" (lemma "pos_subterm_ax")
              (("29" (inst -1 "p1!1" "p1!2" "s!1")
                (("29" (assert)
                  (("29" (lemma "seq_first_rest[posnat]")
                    (("29" (inst -1 "p1!2")
                      (("29" (lemma "empty_0[posnat]")
                        (("29" (inst -1 "p1!2")
                          (("29" (assert)
                            (("29" (lemma "not_var")
                              (("29"
                                (inst
                                 -1
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(s!1, p1!1)")
                                (("29" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("30" (hide 2)
      (("30" (lemma "next_position_TCC5")
        (("30" (inst -1 "s!1" "t!1" "p!1") (("30" (assert) nil nil))
          nil))
        nil))
      nil)
     ("31" (hide 1) (("31" (rewrite "empty_0") nil nil)) nil)
     ("32" (hide 2)
      (("32" (rewrite "subterm_is_app")
        (("32" (flatten) (("32" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("33" (hide 2)
      (("33" (rewrite "delete_is_position")
        (("33" (flatten) (("33" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("34" (hide 2)
      (("34" (lemma "empty_0[posnat]")
        (("34" (inst -1 "p!1") (("34" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (position type-eq-decl nil positions nil)
    (child const-decl "bool" positions nil)
    (left_without_children const-decl "bool" positions nil)
    (only_empty_seq const-decl "positions" positions nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (lwc_add_last_delete formula-decl nil positions nil)
    (pos_subterm formula-decl nil subterm nil)
    (delete_is_position formula-decl nil positions nil)
    (not_var formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (subterm_is_app formula-decl nil subterm nil))
   shostak))
 (next_pos_equal_subterm_TCC1 0
  (next_pos_equal_subterm_TCC1-1 nil 3511984083
   (""
    (then (skosimp*) (expand "child") (skosimp)
     (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "s!1") (assert)
     (lemma "not_var") (lemma "seq_first_rest[posnat]")
     (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
     (assert)
     (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)")
     (assert))
    nil)
   ((child const-decl "bool" positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (not_var formula-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   nil
   (next_pos_equal_subterm subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_pos_equal_subterm_TCC2 0
  (next_pos_equal_subterm_TCC2-1 nil 3511984083
   (""
    (then (skosimp*) (expand "child") (skosimp)
     (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "t!1") (assert)
     (lemma "not_var") (lemma "seq_first_rest[posnat]")
     (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
     (assert)
     (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)")
     (assert))
    nil)
   ((child const-decl "bool" positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (not_var formula-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   nil
   (next_pos_equal_subterm subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_pos_equal_subterm 0
  (next_pos_equal_subterm-2 "" 3804372563
   (""
    (spread
     (measure-induct+
      "lex2(length(p), arity(f(subtermOF(s, delete(p,length(p) - 1)))) - last(p))"
      ("s" "t" "p"))
     ((then (typepred "x!3") (hide -1 -2) (flatten) (skosimp)
       (name-replace "np" "next_position(x!1, x!2, x!3)" :hide? nil)
       (expand "next_position" -1) (lift-if)
       (spread (prop)
        ((then (hide-all-but (-1 -3 1 2 3))
          (spread (inst -2 "np")
           ((then (assert) (hide 1) (expand "child")
             (spread (inst 2 "#(last(x!3))")
              ((then (lemma "add_last_delete[posnat]") (inst -1 "x!3")
                (lemma "empty_0[posnat]") (inst -1 "x!3") (assert)
                (rewrite "add_last_is_o") (replace -2) (assert)
                (flatten) (hide-all-but -3) (expand* "#" "empty_seq"))
               (then (flatten) (rewrite "empty_0")))))
            (then (hide 2 4) (replace -1 1 rl)
             (spread (rewrite "delete_is_position")
              ((then (rewrite "delete_is_position") (hide -1 2)
                (flatten) (rewrite "empty_0"))
               (then (hide -1 2) (flatten) (rewrite "empty_0"))))))))
         (then (replace -1) (hide -3 -4 -5 1)
          (spread (case "left_without_children(q!1, x!3)")
           ((then (inst -4 "q!1") (assert))
            (spread (case "x!3 <= q!1")
             ((then (expand "<=") (skosimp)
               (spread (case "p1!1 = empty_seq")
                ((then (replaces -1) (rewrite "seq_o_empty") (assert))
                 (then (hide -2 -3 -4 -6 2 4) (lemma "pos_subterm")
                  (inst-cp -1 "x!3" "p1!1" "x!2")
                  (inst -1 "x!3" "p1!1" "x!1") (assert)))))
              (then (hide-all-but (-1 -5 1 2 3))
               (lemma "lwc_add_last_delete1") (inst -1 "q!1" "x!3")
               (assert) (replace -2) (assert)
               (spread (prop)
                ((then (expand* "child" "<=") (skosimp)
                  (inst 2 "p1!1"))
                 (then (expand "<=") (inst 1 "empty_seq")
                  (rewrite "seq_o_empty"))))))))))
         (spread
          (name-replace "pi"
           "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))"
           :hide? nil)
          ((spread (inst -6 "x!1" "x!2" "pi")
            ((then (lemma "next_position_TCC17")
              (inst -1 "x!1" "x!2" "x!3") (assert)
              (spread (inst -1 "delete(x!3, length(x!3) - 1)")
               ((then (assert) (inst -1 "pi") (assert)
                 (spread (case "pi = empty_seq")
                  ((then (hide-all-but (-1 -3)) (replaces -1)
                    (expand* "add_last" "insert?" "empty_seq")
                    (flatten) (assert))
                   (then (assert) (hide -1) (replace -3)
                    (spread (prop)
                     ((then (inst -1 "q!1") (assert))
                      (then (hide -2 -3 -5 -7 -8 -9 4 5) (skosimp)
                       (inst -4 "p1!1") (assert) (hide 1)
                       (lemma "add_last_delete[posnat]")
                       (inst -1 "x!3") (lemma "empty_0[posnat]")
                       (inst -1 "x!3") (assert)
                       (rewrite "add_last_is_o")
                       (name-replace "dp"
                        "delete(x!3, length(x!3) - 1)")
                       (rewrite "add_last_is_o") (expand "child")
                       (skosimp)
                       (spread (case "length(p1!1) = length(dp)")
                        ((then (lemma "o_equals_o[posnat]")
                          (inst -1 "dp" "#(1 + last(x!3))" "p1!1"
                           "p1!2")
                          (assert) (inst 5 "#(last(x!3))") (assert)
                          (hide-all-but 5) (flatten)
                          (expand* "#" "empty_seq"))
                         (spread (case "length(p1!1) < length(dp)")
                          ((then (lemma "o_length_o[posnat]")
                            (inst -1 "p1!1" "p1!2" "dp"
                             "#(1 + last(x!3))")
                            (assert) (skosimp) (replace -1 -3)
                            (inst 6 "seq!1 o  #(last(x!3))")
                            (rewrite "o_assoc") (assert)
                            (hide-all-but 6) (flatten)
                            (expand* "o" "#" "empty_seq") (flatten)
                            (hide -2) (assert))
                           (then (hide -1 -4 5 7) (replaces -1)
                            (expand* "#" "o") (flatten) (hide -2)
                            (lemma "empty_0[posnat]") (inst -1 "p1!2")
                            (assert)))))))
                      (then (hide -2 -3 -5 -6 -9 4 5) (skosimp)
                       (spread (case "left_without_children(q!2, x!3)")
                        ((then (inst -5 "q!2") (assert))
                         (spread (case "x!3 <= q!2")
                          ((then (expand "<=") (skosimp)
                            (spread (case "p1!1 = empty_seq")
                             ((then (replaces -1)
                               (rewrite "seq_o_empty") (assert))
                              (then (replace -1 3)
                               (rewrite "pos_subterm")
                               (rewrite "pos_subterm")
                               (hide-all-but (-6 3)) (assert)))))
                           (then (hide-all-but (-1 -2 1 2 5))
                            (lemma "lwc_add_last_delete1")
                            (inst -1 "q!2" "x!3") (assert) (replace -3)
                            (assert)
                            (spread (prop)
                             ((then (expand* "child" "<=") (skosimp)
                               (inst 2 "p1!1"))
                              (then (expand "<=") (inst 1 "empty_seq")
                               (rewrite "seq_o_empty"))))))))))))))))
                (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
                 (inst -1 "x!3") (assert)))))
             (then (assert) (hide -2 -6 -7 -8 -9 4)
              (lemma "next_position_TCC15") (inst -1 "x!1" "x!2" "x!3")
              (assert)
              (spread (inst -1 "delete(x!3, length(x!3) - 1)")
               ((then (assert) (inst -1 "pi") (assert)
                 (hide-all-but (-2 1)) (flatten) (replaces -1)
                 (expand* "add_last" "insert?" "empty_seq") (flatten)
                 (hide -2) (assert))
                (then (hide-all-but (1 3)) (lemma "empty_0[posnat]")
                 (inst -1 "x!3") (assert)))))))
           (then (hide-all-but (1 2)) (lemma "empty_0[posnat]")
            (inst -1 "x!3") (assert))))
         (spread
          (name-replace "dp" "delete(x!3, length(x!3) - 1)" :hide? nil)
          ((then
            (name-replace "pi" "add_last(dp, 1 + last(x!3))" :hide?
             nil)
            (spread (inst -5 "x!1" "x!2" "dp")
             ((then (lemma "next_position_TCC19")
               (inst -1 "x!1" "x!2" "x!3") (assert) (inst -1 "dp")
               (assert) (inst -1 "pi") (assert) (hide -1) (replace -3)
               (spread (prop)
                ((then (inst -1 "q!1") (assert))
                 (then (skosimp) (hide-all-but (-1 -3 -6 1 2 4))
                  (inst -3 "p1!1") (assert) (hide 1) (expand "child")
                  (skosimp) (lemma "add_last_delete[posnat]")
                  (inst -1 "x!3") (lemma "empty_0[posnat]")
                  (inst -1 "x!3") (assert) (rewrite "add_last_is_o")
                  (replace -3) (replace -2 -1)
                  (inst 5 "p1!2 o  #(last(x!3))") (rewrite "o_assoc")
                  (assert) (hide-all-but 5) (flatten)
                  (expand* "#" "o" "empty_seq") (flatten) (hide -2)
                  (assert))
                 (then (hide-all-but (-2 -6 1 2 4)) (skosimp)
                  (inst -3 "q!2") (assert) (hide 1)
                  (expand "left_without_children") (skosimp)
                  (lemma "add_last_delete[posnat]") (inst -1 "x!3")
                  (lemma "empty_0[posnat]") (inst -1 "x!3") (assert)
                  (replace -5) (rewrite "add_last_is_o")
                  (replace -2 -1)
                  (inst 6 "r!1" "p1!1" "q1!1 o  #(last(x!3))")
                  (rewrite "o_assoc")
                  (spread (rewrite "first_compo")
                   ((then (assert) (hide-all-but 6) (flatten)
                     (expand* "#" "o" "empty_seq") (flatten) (hide -2)
                     (assert))
                    (then (hide-all-but (1 3)) (flatten)
                     (rewrite "empty_0")))))
                 (then (lemma "equal_term")
                  (spread
                   (inst -1 "subtermOF(x!1, dp)" "subtermOF(x!2, dp)"
                    "#(last(x!3))")
                   ((spread (ground)
                     ((then (skosimp) (typepred "q!2")
                       (hide-all-but (-1 -3 -4 -5 3 4 5))
                       (expand "left_without_children") (skosimp)
                       (rewrite "add_last_is_o") (replace -5 4 rl)
                       (spread (rewrite "pos_o_term")
                        ((then (hide-all-but (-6 1 3))
                          (replace -1 1 rl)
                          (rewrite "delete_is_position") (hide -1 2)
                          (flatten) (rewrite "empty_0"))
                         (spread (case "r!1 = empty_seq")
                          ((then (replaces -1) (rewrite "empty_o_seq")
                            (rewrite "empty_o_seq")
                            (lemma "seq_first_rest_1[posnat]")
                            (inst -1 "q1!1") (lemma "empty_0[posnat]")
                            (inst -1 "q1!1") (assert) (replace -1 -5)
                            (spread (rewrite "first_compo")
                             ((then (replaces -3) (expand "first" -4 2)
                               (expand "finseq_appl") (expand "#" -4)
                               (lemma "pos_ax")
                               (inst
                                -1
                                "#(first(q1!1))"
                                "rest(q1!1)"
                                "subtermOF(x!1, dp)")
                               (assert) (lemma "subterms_acc_arity")
                               (inst
                                -1
                                "first(q1!1)"
                                "1 + last(x!3)"
                                "subtermOF(x!1, dp)")
                               (assert) (hide-all-but (-4 -5 1))
                               (spread
                                (case "last(x!3) = first(p1!1)")
                                ((assert)
                                 (then
                                  (hide -2 2)
                                  (replace -1 1 rl)
                                  (hide -1)
                                  (expand* "first" "finseq_appl")
                                  (expand "#")
                                  (propax)))))
                              (then (hide-all-but 1) (flatten)
                               (expand "#") (assert)))))
                           (then (hide-all-but (-3 1 4))
                            (expand* "#" "o") (flatten) (hide -2)
                            (lemma "empty_0[posnat]")
                            (inst-cp -1 "r!1") (inst -1 "p1!1")
                            (assert)))))))
                      (then (skosimp)
                       (spread
                        (case "left_without_children(dp o q!2, x!3)")
                        ((spread (inst -8 "dp o q!2")
                          ((then (assert) (hide-all-but (-4 -8 1))
                            (typepred "q!2")
                            (spread (rewrite "pos_subterm")
                             ((then (rewrite "pos_subterm") (hide -4 2)
                               (rewrite "pos_o_term") (replace -3 1 rl)
                               (rewrite "delete_is_position") (flatten)
                               (rewrite "empty_0"))
                              (then (hide -4 2) (rewrite "pos_o_term")
                               (replace -3 1 rl)
                               (rewrite "delete_is_position") (flatten)
                               (rewrite "empty_0")))))
                           (then (hide-all-but (-4 1 6))
                            (typepred "q!2")
                            (spread (rewrite "pos_o_term")
                             ((then (rewrite "pos_o_term")
                               (replace -3 1 rl)
                               (rewrite "delete_is_position") (flatten)
                               (rewrite "empty_0"))
                              (then (replace -3 1 rl)
                               (rewrite "delete_is_position") (flatten)
                               (rewrite "empty_0")))))))
                         (then (hide-all-but (-1 -3 1 4 6))
                          (expand "left_without_children") (skosimp)
                          (spread (case "r!1 = empty_seq")
                           ((then (replaces -1) (rewrite "empty_o_seq")
                             (rewrite "empty_o_seq")
                             (inst 1 "dp" "p1!1" "q1!1")
                             (lemma "add_last_delete[posnat]")
                             (inst -1 "x!3") (lemma "empty_0[posnat]")
                             (inst -1 "x!3") (assert)
                             (rewrite "add_last_is_o") (replace -5)
                             (replace -2) (propax))
                            (then (hide-all-but (-1 1 3))
                             (expand* "#" "o") (flatten) (hide -2)
                             (lemma "empty_0[posnat]")
                             (inst-cp -1 "r!1") (inst -1 "q1!1")
                             (assert))))))))
                      (then (skosimp) (lemma "pos_subterm")
                       (inst-cp -1 "dp" "p1!1" "x!1")
                       (inst -1 "dp" "p1!1" "x!2")
                       (spread (split)
                        ((spread (split)
                          ((then (replace -1 1 rl) (replace -2 1 rl)
                            (hide -1 -2 -4 -6 -7 -9 -10 -11 2 4 6 7)
                            (spread (case "child(x!3, dp o p1!1)")
                             ((spread (inst -4 "dp o p1!1")
                               ((assert)
                                (then
                                 (hide -1 -2 2 3)
                                 (typepred "p1!1")
                                 (spread
                                  (rewrite "pos_o_term")
                                  ((then
                                    (rewrite "pos_o_term")
                                    (hide -1 -2 2)
                                    (replace -1 1 rl)
                                    (rewrite "delete_is_position")
                                    (hide -1 2)
                                    (flatten)
                                    (rewrite "empty_0"))
                                   (then
                                    (hide -1 -2 2)
                                    (replace -1 1 rl)
                                    (rewrite "delete_is_position")
                                    (hide -1 2)
                                    (flatten)
                                    (rewrite "empty_0")))))))
                              (then (hide -3 2) (expand "child")
                               (skosimp)
                               (spread
                                (case "p1!1 = empty_seq")
                                ((then
                                  (replaces -1)
                                  (rewrite "empty_o_seq")
                                  (rewrite "seq_o_empty")
                                  (inst 1 "p1!2")
                                  (assert)
                                  (lemma "add_last_delete[posnat]")
                                  (inst -1 "x!3")
                                  (lemma "empty_0[posnat]")
                                  (inst -1 "x!3")
                                  (assert)
                                  (replace -3)
                                  (rewrite "add_last_is_o")
                                  (assert))
                                 (then
                                  (hide-all-but (-1 1 3))
                                  (expand* "#" "o")
                                  (flatten)
                                  (hide -2)
                                  (lemma "empty_0[posnat]")
                                  (inst-cp -1 "p1!1")
                                  (inst -1 "p1!2")
                                  (assert))))))))
                           (then (hide-all-but (-4 1 6))
                            (typepred "p1!1") (hide -2)
                            (rewrite "pos_o_term") (replace -2 1 rl)
                            (rewrite "delete_is_position") (flatten)
                            (rewrite "empty_0"))))
                         (then (hide-all-but (-4 1 6))
                          (typepred "p1!1") (hide -1)
                          (rewrite "pos_o_term") (replace -2 1 rl)
                          (rewrite "delete_is_position") (flatten)
                          (rewrite "empty_0")))))
                      (then (hide-all-but (-2 -7 1 5))
                       (lemma "add_last_delete[posnat]")
                       (inst -1 "x!3") (lemma "empty_0[posnat]")
                       (inst -1 "x!3") (assert) (replace -2)
                       (rewrite "add_last_is_o") (lemma "pos_subterm")
                       (inst-cp -1 "dp" "#(last(x!3))" "x!2")
                       (inst -1 "dp" "#(last(x!3))" "x!1") (assert))
                      (then (hide-all-but -1)
                       (expand* "#" "empty_seq"))))
                    (then (hide-all-but (-2 1 5))
                     (lemma "add_last_delete[posnat]") (inst -1 "x!3")
                     (lemma "empty_0[posnat]") (inst -1 "x!3") (assert)
                     (replace -2) (rewrite "add_last_is_o")
                     (rewrite "pos_subterm_ax")
                     (rewrite "pos_subterm_ax"))))))))
              (then (hide-all-but (-2 1 2 4)) (assert)
               (replace -1 1 rl)
               (spread (rewrite "delete_is_position")
                ((then (rewrite "delete_is_position")
                  (hide-all-but (1 4)) (flatten) (rewrite "empty_0"))
                 (then (hide-all-but (1 4)) (flatten)
                  (rewrite "empty_0"))))))))
           (then (hide-all-but (1 4)) (lemma "empty_0[posnat]")
            (inst -1 "x!3") (assert))))
         (then (hide-all-but (-2 3)) (assert)))))
      (then (hide -1 2) (skosimp) (lemma "app_term")
       (inst -1 "y!3" "p1!1" "y!2") (assert))
      (then (hide -1 2) (skosimp) (lemma "app_term")
       (inst -1 "y!3" "p1!1" "y!1") (assert))
      (then (hide 2) (lemma "next_position_TCC5")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide 1) (rewrite "empty_0"))
      (then (hide 2) (lemma "next_position_TCC3")
       (inst -1 "x!1" "x!2" "x!3") (assert))
      (then (hide 2) (rewrite "delete_is_position") (hide 2) (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "x!3")
       (assert))
      (then (hide 2) (lemma "next_position_TCC5")
       (inst -1 "y!1" "y!2" "y!3") (assert))
      (then (hide 1) (rewrite "empty_0"))
      (then (hide 2) (lemma "app_term")
       (spread (inst -1 "y!3" "delete(y!3, length(y!3) - 1)" "y!1")
        ((then (assert) (hide 2)
          (spread (rewrite "delete_is_position")
           ((spread
             (name-replace "dp" "delete(y!3, length(y!3) - 1)" :hide?
              nil)
             ((then (lemma "add_last_delete[posnat]") (inst -1 "y!3")
               (lemma "empty_0[posnat]") (inst -1 "y!3") (assert)
               (replace -2) (rewrite "add_last_is_o") (expand "child")
               (inst 2 "#(last(y!3))") (assert) (flatten)
               (expand* "#" "empty_seq"))
              (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "y!3")
               (assert))))
            (then (hide 2) (flatten) (rewrite "empty_0")))))
         (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "y!3")
          (assert)))))
      (then (hide 2) (rewrite "delete_is_position") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "y!3")
       (assert))
      (then (hide -1 2) (skosimp) (lemma "app_term")
       (inst -1 "x!1`3" "p1!1" "x!1`2") (assert))
      (then (hide -1 2) (skosimp) (lemma "app_term")
       (inst -1 "x!1`3" "p1!1" "x!1`1") (assert))
      (then (hide -1 2) (skosimp) (lemma "app_term")
       (inst -1 "y!1`3" "p1!1" "y!1`2") (assert))
      (then (hide -1 2) (skosimp) (lemma "app_term")
       (inst -1 "y!1`3" "p1!1" "y!1`1") (assert))
      (then (hide 2) (lemma "next_position_TCC5")
       (inst -1 "x!1`1" "x!1`2" "x!1`3") (assert))
      (then (hide 1) (rewrite "empty_0") (assert))
      (then (hide 2)
       (spread
        (name-replace "dp" "delete(x!1`3, length(x!1`3) - 1)" :hide?
         nil)
        ((then (lemma "add_last_delete[posnat]") (inst -1 "x!1`3")
          (lemma "empty_0[posnat]") (inst -1 "x!1`3") (assert)
          (replace -2) (rewrite "add_last_is_o") (lemma "app_term")
          (inst -1 "x!1`3" "dp" "x!1`1") (assert)
          (spread (split)
           ((then (replace -2 1 rl) (rewrite "delete_is_position"))
            (then (hide 3) (expand "child") (inst 1 "#(last(x!1`3))")
             (assert) (flatten) (expand* "#" "empty_seq")))))
         (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "x!1`3")
          (assert)))))
      (then (hide 2) (rewrite "delete_is_position") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "x!1`3")
       (assert))
      (then (hide 2) (lemma "next_position_TCC5")
       (inst -1 "y!1`1" "y!1`2" "y!1`3") (assert))
      (then (hide 1) (rewrite "empty_0") (assert))
      (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "y!1`3")
       (assert)
       (name-replace "dp" "delete(y!1`3, length(y!1`3) - 1)" :hide?
        nil)
       (lemma "add_last_delete[posnat]") (inst -1 "y!1`3") (assert)
       (replace -2) (rewrite "add_last_is_o") (lemma "app_term")
       (inst -1 "y!1`3" "dp" "y!1`1") (assert)
       (spread (split)
        ((then (replace -2 1 rl) (rewrite "delete_is_position"))
         (then (hide 3) (expand "child") (inst 1 "#(last(y!1`3))")
          (assert) (flatten) (expand* "#" "empty_seq")))))
      (then (hide 2) (rewrite "delete_is_position") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "y!1`3")
       (assert))
      (then (hide 2) (lemma "app_term") (inst -1 "p!1" "p1!1" "t!1")
       (assert))
      (then (hide 2) (lemma "app_term") (inst -1 "p!1" "p1!1" "s!1")
       (assert))
      (then (hide 2) (lemma "next_position_TCC5")
       (inst -1 "s!1" "t!1" "p!1") (assert))
      (then (hide 1) (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "p!1") (assert)
       (name-replace "dp" "delete(p!1, length(p!1) - 1)" :hide? nil)
       (lemma "add_last_delete[posnat]") (inst -1 "p!1") (assert)
       (replace -2) (rewrite "add_last_is_o") (lemma "app_term")
       (inst -1 "p!1" "dp" "s!1") (assert)
       (spread (split)
        ((then (replace -2 1 rl) (rewrite "delete_is_position"))
         (then (hide 3) (expand "child") (inst 1 "#(last(p!1))")
          (assert) (flatten) (expand* "#" "empty_seq")))))
      (then (hide 2) (rewrite "delete_is_position") (flatten)
       (rewrite "empty_0"))
      (then (hide 2) (lemma "empty_0[posnat]") (inst -1 "p!1")
       (assert))))
    nil)
   nil shostak)
  (next_pos_equal_subterm-1 nil 3514113068
   (""
    (measure-induct+ "lex2(length(p),
                                arity(f(subtermOF(s,
                                               delete(p,length(p) - 1)))) - last(p))"
     ("s" "t" "p"))
    (("1" (typepred "x!3")
      (("1" (hide -1 -2)
        (("1" (flatten)
          (("1" (skosimp)
            (("1"
              (name-replace "np" "next_position(x!1, x!2, x!3)" :hide?
               nil)
              (("1" (expand "next_position" -1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but (-1 -3 1 2 3))
                      (("1" (inst -2 "np")
                        (("1" (assert)
                          (("1" (hide 1)
                            (("1" (expand "child")
                              (("1"
                                (inst 2 "#(last(x!3))")
                                (("1"
                                  (lemma "add_last_delete[posnat]")
                                  (("1"
                                    (inst -1 "x!3")
                                    (("1"
                                      (lemma "empty_0[posnat]")
                                      (("1"
                                        (inst -1 "x!3")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "add_last_is_o")
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide-all-but -3)
                                                    (("1"
                                                      (expand*
                                                       "#"
                                                       "empty_seq")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (rewrite "empty_0") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2 4)
                          (("2" (replace -1 1 rl)
                            (("2" (rewrite "delete_is_position")
                              (("1"
                                (rewrite "delete_is_position")
                                (("1"
                                  (hide -1 2)
                                  (("1"
                                    (flatten)
                                    (("1" (rewrite "empty_0") nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (flatten)
                                  (("2" (rewrite "empty_0") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (hide -3 -4 -5 1)
                        (("2" (case "left_without_children(q!1, x!3)")
                          (("1" (inst -4 "q!1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (case "x!3 <= q!1")
                            (("1" (expand "<=")
                              (("1"
                                (skosimp)
                                (("1"
                                  (case "p1!1 = empty_seq")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "seq_o_empty")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -2 -3 -4 -6 2 4)
                                    (("2"
                                      (lemma "pos_subterm")
                                      (("2"
                                        (inst-cp -1 "x!3" "p1!1" "x!2")
                                        (("2"
                                          (inst -1 "x!3" "p1!1" "x!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 -5 1 2 3))
                              (("2"
                                (lemma "lwc_add_last_delete1")
                                (("2"
                                  (inst -1 "q!1" "x!3")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand* "child" "<=")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst 2 "p1!1")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "<=")
                                            (("2"
                                              (inst 1 "empty_seq")
                                              (("2"
                                                (rewrite "seq_o_empty")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (name-replace "pi"
                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))"
                       :hide? nil)
                      (("1" (inst -6 "x!1" "x!2" "pi")
                        (("1" (lemma "next_position_TCC17")
                          (("1" (inst -1 "x!1" "x!2" "x!3")
                            (("1" (assert)
                              (("1"
                                (inst
                                 -1
                                 "delete(x!3, length(x!3) - 1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -1 "pi")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "pi = empty_seq")
                                        (("1"
                                          (hide-all-but (-1 -3))
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand*
                                               "add_last"
                                               "insert?"
                                               "empty_seq")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst -1 "q!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide
                                                   -2
                                                   -3
                                                   -5
                                                   -7
                                                   -8
                                                   -9
                                                   4
                                                   5)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst -4 "p1!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 1)
                                                          (("2"
                                                            (lemma
                                                             "add_last_delete[posnat]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x!3")
                                                              (("2"
                                                                (lemma
                                                                 "empty_0[posnat]")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!3")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "add_last_is_o")
                                                                      (("2"
                                                                        (name-replace
                                                                         "dp"
                                                                         "delete(x!3, length(x!3) - 1)")
                                                                        (("2"
                                                                          (rewrite
                                                                           "add_last_is_o")
                                                                          (("2"
                                                                            (expand
                                                                             "child")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (case
                                                                                 "length(p1!1) = length(dp)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "o_equals_o[posnat]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "dp"
                                                                                     "#(1 + last(x!3))"
                                                                                     "p1!1"
                                                                                     "p1!2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         5
                                                                                         "#(last(x!3))")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             5)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand*
                                                                                                 "#"
                                                                                                 "empty_seq")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "length(p1!1) < length(dp)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "o_length_o[posnat]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "p1!1"
                                                                                       "p1!2"
                                                                                       "dp"
                                                                                       "#(1 + last(x!3))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -3)
                                                                                            (("1"
                                                                                              (inst
                                                                                               6
                                                                                               "seq!1 o  #(last(x!3))")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "o_assoc")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     6)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand*
                                                                                                         "o"
                                                                                                         "#"
                                                                                                         "empty_seq")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -4
                                                                                     5
                                                                                     7)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand*
                                                                                         "#"
                                                                                         "o")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "empty_0[posnat]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "p1!2")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide
                                                   -2
                                                   -3
                                                   -5
                                                   -6
                                                   -9
                                                   4
                                                   5)
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (case
                                                       "left_without_children(q!2, x!3)")
                                                      (("1"
                                                        (inst -5 "q!2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "x!3 <= q!2")
                                                        (("1"
                                                          (expand "<=")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (case
                                                               "p1!1 = empty_seq")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "seq_o_empty")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1
                                                                 3)
                                                                (("2"
                                                                  (rewrite
                                                                   "pos_subterm")
                                                                  (("2"
                                                                    (rewrite
                                                                     "pos_subterm")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-6
                                                                        3))
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1
                                                            -2
                                                            1
                                                            2
                                                            5))
                                                          (("2"
                                                            (lemma
                                                             "lwc_add_last_delete1")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "q!2"
                                                               "x!3")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand*
                                                                         "child"
                                                                         "<=")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             2
                                                                             "p1!1")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "<=")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "empty_seq")
                                                                          (("2"
                                                                            (rewrite
                                                                             "seq_o_empty")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 2))
                                  (("2"
                                    (lemma "empty_0[posnat]")
                                    (("2"
                                      (inst -1 "x!3")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide -2 -6 -7 -8 -9 4)
                            (("2" (lemma "next_position_TCC15")
                              (("2"
                                (inst -1 "x!1" "x!2" "x!3")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -1
                                     "delete(x!3, length(x!3) - 1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -1 "pi")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-2 1))
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand*
                                                   "add_last"
                                                   "insert?"
                                                   "empty_seq")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 3))
                                      (("2"
                                        (lemma "empty_0[posnat]")
                                        (("2"
                                          (inst -1 "x!3")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 2))
                        (("2" (lemma "empty_0[posnat]")
                          (("2" (inst -1 "x!3")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4"
                      (name-replace "dp" "delete(x!3, length(x!3) - 1)"
                       :hide? nil)
                      (("1"
                        (name-replace "pi"
                         "add_last(dp, 1 + last(x!3))" :hide? nil)
                        (("1" (inst -5 "x!1" "x!2" "dp")
                          (("1" (lemma "next_position_TCC19")
                            (("1" (inst -1 "x!1" "x!2" "x!3")
                              (("1"
                                (assert)
                                (("1"
                                  (inst -1 "dp")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -1 "pi")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst -1 "q!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (hide-all-but
                                                   (-1 -3 -6 1 2 4))
                                                  (("2"
                                                    (inst -3 "p1!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 1)
                                                        (("2"
                                                          (expand
                                                           "child")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (lemma
                                                               "add_last_delete[posnat]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x!3")
                                                                (("2"
                                                                  (lemma
                                                                   "empty_0[posnat]")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "x!3")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "add_last_is_o")
                                                                        (("2"
                                                                          (replace
                                                                           -3)
                                                                          (("2"
                                                                            (replace
                                                                             -2
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               5
                                                                               "p1!2 o  #(last(x!3))")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "o_assoc")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     5)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand*
                                                                                         "#"
                                                                                         "o"
                                                                                         "empty_seq")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but
                                                 (-2 -6 1 2 4))
                                                (("3"
                                                  (skosimp)
                                                  (("3"
                                                    (inst -3 "q!2")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (hide 1)
                                                        (("3"
                                                          (expand
                                                           "left_without_children")
                                                          (("3"
                                                            (skosimp)
                                                            (("3"
                                                              (lemma
                                                               "add_last_delete[posnat]")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "x!3")
                                                                (("3"
                                                                  (lemma
                                                                   "empty_0[posnat]")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "x!3")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (replace
                                                                         -5)
                                                                        (("3"
                                                                          (rewrite
                                                                           "add_last_is_o")
                                                                          (("3"
                                                                            (replace
                                                                             -2
                                                                             -1)
                                                                            (("3"
                                                                              (inst
                                                                               6
                                                                               "r!1"
                                                                               "p1!1"
                                                                               "q1!1 o  #(last(x!3))")
                                                                              (("3"
                                                                                (rewrite
                                                                                 "o_assoc")
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "first_compo")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       6)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand*
                                                                                           "#"
                                                                                           "o"
                                                                                           "empty_seq")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      3))
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "empty_0")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (lemma "equal_term")
                                                (("4"
                                                  (inst
                                                   -1
                                                   "subtermOF(x!1, dp)"
                                                   "subtermOF(x!2, dp)"
                                                   "#(last(x!3))")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (typepred
                                                         "q!2")
                                                        (("1"
                                                          (hide-all-but
                                                           (-1
                                                            -3
                                                            -4
                                                            -5
                                                            3
                                                            4
                                                            5))
                                                          (("1"
                                                            (expand
                                                             "left_without_children")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (rewrite
                                                                 "add_last_is_o")
                                                                (("1"
                                                                  (replace
                                                                   -5
                                                                   4
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "pos_o_term")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-6
                                                                        1
                                                                        3))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           "delete_is_position")
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "empty_0")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "r!1 = empty_seq")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "empty_o_seq")
                                                                          (("1"
                                                                            (rewrite
                                                                             "empty_o_seq")
                                                                            (("1"
                                                                              (lemma
                                                                               "seq_first_rest_1[posnat]")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "q1!1")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "empty_0[posnat]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "q1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         -5)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "first_compo")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "first"
                                                                                               -4
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "finseq_appl")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "#"
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "pos_ax")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "#(first(q1!1))"
                                                                                                       "rest(q1!1)"
                                                                                                       "subtermOF(x!1, dp)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "subterms_acc_arity")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "first(q1!1)"
                                                                                                             "1 + last(x!3)"
                                                                                                             "subtermOF(x!1, dp)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-4
                                                                                                                  -5
                                                                                                                  1))
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "last(x!3) = first(p1!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     -2
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (expand*
                                                                                                                           "first"
                                                                                                                           "finseq_appl")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "#")
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "#")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-3
                                                                          1
                                                                          4))
                                                                        (("2"
                                                                          (expand*
                                                                           "#"
                                                                           "o")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "empty_0[posnat]")
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "r!1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "p1!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (case
                                                         "left_without_children(dp o q!2, x!3)")
                                                        (("1"
                                                          (inst
                                                           -8
                                                           "dp o q!2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide-all-but
                                                               (-4
                                                                -8
                                                                1))
                                                              (("1"
                                                                (typepred
                                                                 "q!2")
                                                                (("1"
                                                                  (rewrite
                                                                   "pos_subterm")
                                                                  (("1"
                                                                    (rewrite
                                                                     "pos_subterm")
                                                                    (("1"
                                                                      (hide
                                                                       -4
                                                                       2)
                                                                      (("1"
                                                                        (rewrite
                                                                         "pos_o_term")
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "delete_is_position")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "empty_0")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -4
                                                                     2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "pos_o_term")
                                                                      (("2"
                                                                        (replace
                                                                         -3
                                                                         1
                                                                         rl)
                                                                        (("2"
                                                                          (rewrite
                                                                           "delete_is_position")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (rewrite
                                                                               "empty_0")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-4 1 6))
                                                            (("2"
                                                              (typepred
                                                               "q!2")
                                                              (("2"
                                                                (rewrite
                                                                 "pos_o_term")
                                                                (("1"
                                                                  (rewrite
                                                                   "pos_o_term")
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "delete_is_position")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (rewrite
                                                                           "empty_0")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -3
                                                                   1
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "delete_is_position")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (rewrite
                                                                         "empty_0")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1
                                                            -3
                                                            1
                                                            4
                                                            6))
                                                          (("2"
                                                            (expand
                                                             "left_without_children")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (case
                                                                 "r!1 = empty_seq")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "empty_o_seq")
                                                                    (("1"
                                                                      (rewrite
                                                                       "empty_o_seq")
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "dp"
                                                                         "p1!1"
                                                                         "q1!1")
                                                                        (("1"
                                                                          (lemma
                                                                           "add_last_delete[posnat]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x!3")
                                                                            (("1"
                                                                              (lemma
                                                                               "empty_0[posnat]")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "x!3")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "add_last_is_o")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    3))
                                                                  (("2"
                                                                    (expand*
                                                                     "#"
                                                                     "o")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (lemma
                                                                           "empty_0[posnat]")
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             "r!1")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "q1!1")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (lemma
                                                         "pos_subterm")
                                                        (("3"
                                                          (inst-cp
                                                           -1
                                                           "dp"
                                                           "p1!1"
                                                           "x!1")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "dp"
                                                             "p1!1"
                                                             "x!2")
                                                            (("3"
                                                              (split)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -4
                                                                       -6
                                                                       -7
                                                                       -9
                                                                       -10
                                                                       -11
                                                                       2
                                                                       4
                                                                       6
                                                                       7)
                                                                      (("1"
                                                                        (case
                                                                         "child(x!3, dp o p1!1)")
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "dp o p1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (typepred
                                                                               "p1!1")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "pos_o_term")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "pos_o_term")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     2)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1
                                                                                       rl)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "delete_is_position")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           2)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "empty_0")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   2)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "delete_is_position")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         2)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "empty_0")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -3
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "child")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (case
                                                                                 "p1!1 = empty_seq")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "empty_o_seq")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "seq_o_empty")
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "p1!2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "add_last_delete[posnat]")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!3")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "empty_0[posnat]")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!3")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "add_last_is_o")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1
                                                                                    3))
                                                                                  (("2"
                                                                                    (expand*
                                                                                     "#"
                                                                                     "o")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "empty_0[posnat]")
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "p1!1")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "p1!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-4
                                                                    1
                                                                    6))
                                                                  (("2"
                                                                    (typepred
                                                                     "p1!1")
                                                                    (("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "pos_o_term")
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           1
                                                                           rl)
                                                                          (("2"
                                                                            (rewrite
                                                                             "delete_is_position")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "empty_0")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-4
                                                                  1
                                                                  6))
                                                                (("2"
                                                                  (typepred
                                                                   "p1!1")
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "pos_o_term")
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         1
                                                                         rl)
                                                                        (("2"
                                                                          (rewrite
                                                                           "delete_is_position")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (rewrite
                                                                               "empty_0")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide-all-but
                                                       (-2 -7 1 5))
                                                      (("4"
                                                        (lemma
                                                         "add_last_delete[posnat]")
                                                        (("4"
                                                          (inst
                                                           -1
                                                           "x!3")
                                                          (("4"
                                                            (lemma
                                                             "empty_0[posnat]")
                                                            (("4"
                                                              (inst
                                                               -1
                                                               "x!3")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (replace
                                                                   -2)
                                                                  (("4"
                                                                    (rewrite
                                                                     "add_last_is_o")
                                                                    (("4"
                                                                      (lemma
                                                                       "pos_subterm")
                                                                      (("4"
                                                                        (inst-cp
                                                                         -1
                                                                         "dp"
                                                                         "#(last(x!3))"
                                                                         "x!2")
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "dp"
                                                                           "#(last(x!3))"
                                                                           "x!1")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (hide-all-but -1)
                                                      (("5"
                                                        (expand*
                                                         "#"
                                                         "empty_seq")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 1 5))
                                                    (("2"
                                                      (lemma
                                                       "add_last_delete[posnat]")
                                                      (("2"
                                                        (inst -1 "x!3")
                                                        (("2"
                                                          (lemma
                                                           "empty_0[posnat]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x!3")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (rewrite
                                                                   "add_last_is_o")
                                                                  (("2"
                                                                    (rewrite
                                                                     "pos_subterm_ax")
                                                                    (("2"
                                                                      (rewrite
                                                                       "pos_subterm_ax")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-2 1 2 4))
                            (("2" (assert)
                              (("2"
                                (replace -1 1 rl)
                                (("2"
                                  (rewrite "delete_is_position")
                                  (("1"
                                    (rewrite "delete_is_position")
                                    (("1"
                                      (hide-all-but (1 4))
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite "empty_0")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (1 4))
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (rewrite "empty_0")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 4))
                        (("2" (lemma "empty_0[posnat]")
                          (("2" (inst -1 "x!3")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide-all-but (-2 3))
                      (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide -1 2)
      (("2" (skosimp)
        (("2" (lemma "app_term")
          (("2" (inst -1 "y!3" "p1!1" "y!2") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide -1 2)
      (("3" (skosimp)
        (("3" (lemma "app_term")
          (("3" (inst -1 "y!3" "p1!1" "y!1") (("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "next_position_TCC5")
        (("4" (inst -1 "x!1" "x!2" "x!3") (("4" (assert) nil nil))
          nil))
        nil))
      nil)
     ("5" (hide 1) (("5" (rewrite "empty_0") nil nil)) nil)
     ("6" (hide 2)
      (("6" (lemma "next_position_TCC3")
        (("6" (inst -1 "x!1" "x!2" "x!3") (("6" (assert) nil nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite "delete_is_position")
        (("7" (hide 2)
          (("7" (flatten) (("7" (rewrite "empty_0") nil nil)) nil))
          nil))
        nil))
      nil)
     ("8" (hide 2)
      (("8" (lemma "empty_0[posnat]")
        (("8" (inst -1 "x!3") (("8" (assert) nil nil)) nil)) nil))
      nil)
     ("9" (hide 2)
      (("9" (lemma "next_position_TCC5")
        (("9" (inst -1 "y!1" "y!2" "y!3") (("9" (assert) nil nil))
          nil))
        nil))
      nil)
     ("10" (hide 1) (("10" (rewrite "empty_0") nil nil)) nil)
     ("11" (hide 2)
      (("11" (lemma "app_term")
        (("11" (inst -1 "y!3" "delete(y!3, length(y!3) - 1)" "y!1")
          (("1" (assert)
            (("1" (hide 2)
              (("1" (rewrite "delete_is_position")
                (("1"
                  (name-replace "dp" "delete(y!3, length(y!3) - 1)"
                   :hide? nil)
                  (("1" (lemma "add_last_delete[posnat]")
                    (("1" (inst -1 "y!3")
                      (("1" (lemma "empty_0[posnat]")
                        (("1" (inst -1 "y!3")
                          (("1" (assert)
                            (("1" (replace -2)
                              (("1"
                                (rewrite "add_last_is_o")
                                (("1"
                                  (expand "child")
                                  (("1"
                                    (inst 2 "#(last(y!3))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand* "#" "empty_seq")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "empty_0[posnat]")
                      (("2" (inst -1 "y!3") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (flatten) (("2" (rewrite "empty_0") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "empty_0[posnat]")
              (("2" (inst -1 "y!3") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (rewrite "delete_is_position")
        (("12" (flatten) (("12" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (lemma "empty_0[posnat]")
        (("13" (inst -1 "y!3") (("13" (assert) nil nil)) nil)) nil))
      nil)
     ("14" (hide -1 2)
      (("14" (skosimp)
        (("14" (lemma "app_term")
          (("14" (inst -1 "x!1`3" "p11!1" "x!1`2")
            (("14" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("15" (hide -1 2)
      (("15" (skosimp)
        (("15" (lemma "app_term")
          (("15" (inst -1 "x!1`3" "p11!1" "x!1`1")
            (("15" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("16" (hide -1 2)
      (("16" (skosimp)
        (("16" (lemma "app_term")
          (("16" (inst -1 "y!1`3" "p1!1" "y!1`2")
            (("16" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("17" (hide -1 2)
      (("17" (skosimp)
        (("17" (lemma "app_term")
          (("17" (inst -1 "y!1`3" "p1!1" "y!1`1")
            (("17" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma "next_position_TCC5")
        (("18" (inst -1 "x!1`1" "x!1`2" "x!1`3")
          (("18" (assert) nil nil)) nil))
        nil))
      nil)
     ("19" (hide 1)
      (("19" (rewrite "empty_0") (("19" (assert) nil nil)) nil)) nil)
     ("20" (hide 2)
      (("20"
        (name-replace "dp" "delete(x!1`3, length(x!1`3) - 1)" :hide?
         nil)
        (("1" (lemma "add_last_delete[posnat]")
          (("1" (inst -1 "x!1`3")
            (("1" (lemma "empty_0[posnat]")
              (("1" (inst -1 "x!1`3")
                (("1" (assert)
                  (("1" (replace -2)
                    (("1" (rewrite "add_last_is_o")
                      (("1" (lemma "app_term")
                        (("1" (inst -1 "x!1`3" "dp" "x!1`1")
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (replace -2 1 rl)
                                (("1"
                                  (rewrite "delete_is_position")
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (expand "child")
                                  (("2"
                                    (inst 1 "#(last(x!1`3))")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand* "#" "empty_seq")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "empty_0[posnat]")
            (("2" (inst -1 "x!1`3") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (hide 2)
      (("21" (rewrite "delete_is_position")
        (("21" (flatten) (("21" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("22" (hide 2)
      (("22" (lemma "empty_0[posnat]")
        (("22" (inst -1 "x!1`3") (("22" (assert) nil nil)) nil)) nil))
      nil)
     ("23" (hide 2)
      (("23" (lemma "next_position_TCC5")
        (("23" (inst -1 "y!1`1" "y!1`2" "y!1`3")
          (("23" (assert) nil nil)) nil))
        nil))
      nil)
     ("24" (hide 1)
      (("24" (rewrite "empty_0") (("24" (assert) nil nil)) nil)) nil)
     ("25" (hide 2)
      (("25" (lemma "empty_0[posnat]")
        (("25" (inst -1 "y!1`3")
          (("25" (assert)
            (("25"
              (name-replace "dp" "delete(y!1`3, length(y!1`3) - 1)"
               :hide? nil)
              (("25" (lemma "add_last_delete[posnat]")
                (("25" (inst -1 "y!1`3")
                  (("25" (assert)
                    (("25" (replace -2)
                      (("25" (rewrite "add_last_is_o")
                        (("25" (lemma "app_term")
                          (("25" (inst -1 "y!1`3" "dp" "y!1`1")
                            (("25" (assert)
                              (("25"
                                (split)
                                (("1"
                                  (replace -2 1 rl)
                                  (("1"
                                    (rewrite "delete_is_position")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "child")
                                    (("2"
                                      (inst 1 "#(last(y!1`3))")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand* "#" "empty_seq")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("26" (hide 2)
      (("26" (rewrite "delete_is_position")
        (("26" (flatten) (("26" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("27" (hide 2)
      (("27" (lemma "empty_0[posnat]")
        (("27" (inst -1 "y!1`3") (("27" (assert) nil nil)) nil)) nil))
      nil)
     ("28" (hide 2)
      (("28" (lemma "app_term")
        (("28" (inst -1 "p!1" "p1!1" "t!1") (("28" (assert) nil nil))
          nil))
        nil))
      nil)
     ("29" (hide 2)
      (("29" (lemma "app_term")
        (("29" (inst -1 "p!1" "p1!1" "s!1") (("29" (assert) nil nil))
          nil))
        nil))
      nil)
     ("30" (hide 2)
      (("30" (lemma "next_position_TCC5")
        (("30" (inst -1 "s!1" "t!1" "p!1") (("30" (assert) nil nil))
          nil))
        nil))
      nil)
     ("31" (hide 1) (("31" (rewrite "empty_0") nil nil)) nil)
     ("32" (hide 2)
      (("32" (lemma "empty_0[posnat]")
        (("32" (inst -1 "p!1")
          (("32" (assert)
            (("32"
              (name-replace "dp" "delete(p!1, length(p!1) - 1)" :hide?
               nil)
              (("32" (lemma "add_last_delete[posnat]")
                (("32" (inst -1 "p!1")
                  (("32" (assert)
                    (("32" (replace -2)
                      (("32" (rewrite "add_last_is_o")
                        (("32" (lemma "app_term")
                          (("32" (inst -1 "p!1" "dp" "s!1")
                            (("32" (assert)
                              (("32"
                                (split)
                                (("1"
                                  (replace -2 1 rl)
                                  (("1"
                                    (rewrite "delete_is_position")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "child")
                                    (("2"
                                      (inst 1 "#(last(p!1))")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand* "#" "empty_seq")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("33" (hide 2)
      (("33" (rewrite "delete_is_position")
        (("33" (flatten) (("33" (rewrite "empty_0") nil nil)) nil))
        nil))
      nil)
     ("34" (hide 2)
      (("34" (lemma "empty_0[posnat]")
        (("34" (inst -1 "p!1") (("34" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((app_term formula-decl nil subterm nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (subterms_acc_arity formula-decl nil positions nil)
    (pos_ax formula-decl nil positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (empty_o_seq formula-decl nil seq_extras structures)
    (pos_o_term formula-decl nil subterm nil)
    (equal_term formula-decl nil subterm nil)
    (first_compo formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (o_length_o formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (lwc_add_last_delete1 formula-decl nil positions nil)
    (pos_subterm formula-decl nil subterm nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (<= const-decl "bool" positions nil)
    (delete_is_position formula-decl nil positions nil)
    (add_last_is_o formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (left_without_children const-decl "bool" positions nil)
    (child const-decl "bool" positions nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (fd_equal_subterm 0
  (fd_equal_subterm-2 "" 3790333763
   (""
    (then (measure-induct+ "length(first_diff(s, t))" ("s" "t"))
     (skosimp) (name-replace "fd" "first_diff(x!1, x!2)" :hide? nil)
     (expand "first_diff" -1) (lift-if)
     (spread (prop)
      ((then (hide-all-but (-2 -4)) (replace -1 -2 rl) (hide -1)
        (expand "left_without_children") (skosimp)
        (lemma "seq_empty[posnat]") (inst -1 "r!1" "q1!1") (assert)
        (flatten) (rewrite "empty_0" -2))
       (then (hide-all-but (-2 -4)) (replace -1 -2 rl) (hide -1)
        (expand "left_without_children") (skosimp)
        (lemma "seq_empty[posnat]") (inst -1 "r!1" "q1!1") (assert)
        (flatten) (rewrite "empty_0" -2))
       (then (hide-all-but (-2 -4)) (replace -1 -2 rl) (hide -1)
        (expand "left_without_children") (skosimp)
        (lemma "seq_empty[posnat]") (inst -1 "r!1" "q1!1") (assert)
        (flatten) (rewrite "empty_0" -2))
       (spread
        (name-replace "k1"
         "min({kk: below[length(args(x!2))] | subtermOF(x!1,  #(kk + 1)) /= subtermOF(x!2,  #(kk + 1))})"
         :hide? nil)
        ((then (assert) (expand "left_without_children") (skosimp)
          (spread (case "r!1 = empty_seq")
           ((then (hide -5) (replaces -1) (rewrite "empty_o_seq")
             (rewrite "empty_o_seq") (replace -4 (-6 4) rl)
             (replace -5 (-6 5) rl) (hide -4 -5)
             (rewrite "add_first_is_o") (replace -3 -4 rl)
             (spread (rewrite "first_compo")
              ((then (lemma "seq_first_rest_1[posnat]") (inst -1 "p!1")
                (lemma "empty_0[posnat]") (inst -1 "p!1") (assert)
                (replace -1 -5)
                (spread (rewrite "first_compo")
                 ((then (expand "first" -5 1) (expand "finseq_appl")
                   (expand "#" -5 1) (replace -1 7)
                   (rewrite "pos_subterm") (rewrite "pos_subterm")
                   (spread
                    (case "subtermOF(x!1,  #(first(p!1))) = subtermOF(x!2,  #(first(p!1)))")
                    ((assert)
                     (then (hide 8) (expand "first" -5 2)
                      (expand "finseq_appl") (expand "#" -5)
                      (name-replace "B" "length(args(x!2))" :hide? nil)
                      (lemma "min_def[below[B]]")
                      (spread
                       (inst -1 "k1"
                        "{kk: below[length(args(x!2))] | NOT subtermOF(x!1,  #(1 + kk)) = subtermOF(x!2,  #(1 + kk))}")
                       ((then (expand "minimum?")
                         (spread (prop)
                          ((spread (inst -2 "first(p!1) -1")
                            ((assert) (assert)))
                           (then (hide-all-but (-1 -3 1)) (skosimp*)
                            (typepred "k1") (typepred "x!3")
                            (replace -4 -1 rl) (inst -3 "x!3")
                            (assert)))))
                        (then (expand "nonempty?") (expand "empty?")
                         (spread (inst -1 "k1")
                          ((then (expand "member") (assert))
                           (then (typepred "k1") (replaces -3 -1)))))
                        (then (hide-all-but (-1 1)) (skosimp*)
                         (spread (prop) ((assert) (assert))))
                        (then (skosimp*) (lemma "positions_of_arg")
                         (inst -1 "x!2" "kk!1") (assert))
                        (then (skosimp*) (rewrite "positions_of_arg"))
                        (then (typepred "k1") (hide-all-but (-1 -3 2))
                         (assert))))))))
                  (then (hide-all-but (1 7))
                   (expand* "#" "first" "finseq_appl") (assert)))))
               (then (hide-all-but 1) (flatten) (expand "#")
                (assert)))))
            (then
             (inst -4 "subtermOF(x!1,  #(1 + k1))"
              "subtermOF(x!2,  #(1 + k1))")
             (replace -3 -4 rl) (expand "add_first" -4)
             (expand "insert?" -4)
             (spread (inst -4 "rest(p!1)")
              ((spread (split)
                ((then (lemma "seq_first_rest_1[posnat]")
                  (inst -1 "p!1")
                  (spread (split)
                   ((spread (case "first(p!1) = 1 + k1")
                     ((then (replace -1 -2) (replace -2 7)
                       (rewrite "pos_subterm") (rewrite "pos_subterm"))
                      (then (hide -1 -2 -3 -4 -8 3 4 5 8)
                       (replace -3 1)
                       (spread (rewrite "first_compo")
                        ((then (replace -2 -1)
                          (rewrite "add_first_is_o")
                          (expand* "first" "finseq_appl")
                          (expand "#" -1 1) (expand "o" -1) (flatten)
                          (decompose-equality -2)
                          (spread (inst -1 "0")
                           ((then (assert) (lemma "empty_0[posnat]")
                             (inst -1 "r!1") (assert))
                            (assert))))
                         (then (flatten) (rewrite "empty_0")))))))
                    (then (hide-all-but (-6 1 2 7)) (flatten)
                     (rewrite "empty_0") (replaces -1)
                     (lemma "seq_empty[posnat]") (inst -1 "r!1" "p1!1")
                     (assert) (flatten) (rewrite "empty_0")))))
                 (then (hide-all-but (-3 -4 -5 -6 1 2 6 7))
                  (lemma "seq_first_rest_1[posnat]") (inst -1 "r!1")
                  (lemma "empty_0[posnat]") (inst -1 "r!1") (assert)
                  (inst 2 "rest(r!1)" "p1!1" "q1!1") (assert)
                  (rewrite "add_first_is_o")
                  (lemma "o_equals_o[posnat]")
                  (inst -1 "#(1 + k1)"
                   "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                   "#(first(r!1))" "rest(r!1) o q1!1")
                  (rewrite "o_assoc") (assert)
                  (spread (split)
                   ((then (lemma "equal_prefix[posnat]")
                     (inst -1 "#(1 + k1)"
                      "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                      "rest(r!1) o q1!1")
                     (rewrite "o_assoc") (assert) (hide -1 -2 -4 -5 4)
                     (lemma "seq_first_rest_1[posnat]") (inst -1 "p!1")
                     (spread (split)
                      ((then (replace -1 -3) (replace -2 -3)
                        (hide -1 -2) (lemma "o_equals_o[posnat]")
                        (inst -1 "#(first(p!1))" "rest(p!1)"
                         "#(first(r!1))" "rest(r!1) o p1!1")
                        (rewrite "o_assoc") (assert)
                        (spread (split)
                         ((then (replaces -1)
                           (lemma "equal_prefix[posnat]")
                           (inst -1 "#(first(r!1))" "rest(p!1)"
                            "rest(r!1) o p1!1")
                           (assert) (rewrite "o_assoc"))
                          (then (hide-all-but 1)
                           (expand* "#" "first" "finseq_appl")))))
                       (then (hide-all-but (-2 1 4 5)) (flatten)
                        (rewrite "empty_0") (replaces -1)
                        (lemma "seq_empty[posnat]")
                        (inst -1 "r!1" "p1!1") (assert)))))
                    (then (hide-all-but 1)
                     (expand* "#" "first" "finseq_appl")))))))
               (spread (case "p!1 = #(1 + k1) o rest(p!1)")
                ((then (hide-all-but (-1 1)) (rewrite "pos_subterm_ax")
                  (rewrite "pos_subterm_ax"))
                 (then (hide -1 -2 -6 2 4 5 6 9)
                  (rewrite "add_first_is_o")
                  (lemma "seq_first_rest_1[posnat]") (inst -1 "r!1")
                  (lemma "empty_0[posnat]") (inst -1 "r!1") (assert)
                  (replace -1 (-3 -4)) (replace -3 -2) (hide -3)
                  (lemma "o_equals_o[posnat]")
                  (inst -1 "#(1 + k1)"
                   "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                   "#(first(r!1))" "rest(r!1) o q1!1")
                  (rewrite "o_assoc") (assert)
                  (spread (split)
                   ((then (replace -1 -4 rl) (hide -1 -2 -3 1)
                     (lemma "seq_first_rest_1[posnat]") (inst -1 "p!1")
                     (spread (split)
                      ((then (lemma "o_equals_o[posnat]")
                        (inst -1 "#(first(p!1))" "rest(p!1)"
                         "#(1 + k1)" "rest(r!1) o p1!1")
                        (rewrite "o_assoc") (assert) (hide-all-but 1)
                        (expand* "#" "first" "finseq_appl"))
                       (then (hide 2 3 4) (flatten) (rewrite "empty_0")
                        (replaces -1) (lemma "seq_empty[posnat]")
                        (inst -1 "#(1 + k1) o rest(r!1)" "p1!1")
                        (assert) (flatten) (rewrite "empty_0" -2)))))
                    (then (hide-all-but 1)
                     (expand* "#" "first" "finseq_appl")))))))))))))
         (then (hide-all-but (-1 1 2 3 4)) (lemma "first_diff_TCC3")
          (inst -1 "x!1" "x!2" "f(x!1)" "args(x!1)") (assert)
          (spread (case "x!1 = app(f(x!1), args(x!1))")
           ((then (assert) (inst -2 "f(x!2)" "args(x!2)")
             (spread (case "x!2 = app(f(x!2), args(x!2))")
              ((assert)
               (then (hide-all-but (1 3)) (decompose-equality)))))
            (then (hide-all-but (1 5)) (decompose-equality)))))
         (then (skosimp) (rewrite "positions_of_arg"))
         (then (hide -2 -3 -4 5) (skosimp) (rewrite "positions_of_arg")
          (typepred "kk!1") (typepred "args(x!2)") (assert))))
       (then (hide-all-but (-1 -3)) (replace -1 -2 rl) (hide -1)
        (expand "left_without_children") (skosimp)
        (lemma "seq_empty[posnat]") (inst -1 "r!1" "q1!1") (assert)
        (flatten) (rewrite "empty_0" -2)))))
    nil)
   ((seq_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (first_diff_TCC3 subtype-tcc nil robinsonunification nil)
    (add_first const-decl "finseq" seq_extras structures)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (insert? const-decl "finseq" seq_extras structures)
    (empty_o_seq formula-decl nil seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (positions_of_arg formula-decl nil positions nil)
    (pos_subterm formula-decl nil subterm nil)
    (first_compo formula-decl nil seq_extras structures)
    (add_first_is_o formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (left_without_children const-decl "bool" positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (first_diff def-decl "position" robinsonunification nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (fd_equal_subterm-1 nil 3516551572
   ("" (measure-induct+ "length(first_diff(s, t))" ("s" "t"))
    (("" (skosimp)
      (("" (name-replace "fd" "first_diff(x!1, x!2)" :hide? nil)
        (("" (expand "first_diff" -1)
          (("" (lift-if)
            (("" (prop)
              (("1" (hide-all-but (-2 -4))
                (("1" (replace -1 -2 rl)
                  (("1" (hide -1)
                    (("1" (expand "left_without_children")
                      (("1" (skosimp)
                        (("1" (lemma "seq_empty[posnat]")
                          (("1" (inst -1 "r!1" "q1!1")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -4))
                (("2" (replace -1 -2 rl)
                  (("2" (hide -1)
                    (("2" (expand "left_without_children")
                      (("2" (skosimp)
                        (("2" (lemma "seq_empty[posnat]")
                          (("2" (inst -1 "r!1" "q1!1")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but (-2 -4))
                (("3" (replace -1 -2 rl)
                  (("3" (hide -1)
                    (("3" (expand "left_without_children")
                      (("3" (skosimp)
                        (("3" (lemma "seq_empty[posnat]")
                          (("3" (inst -1 "r!1" "q1!1")
                            (("3" (assert)
                              (("3"
                                (flatten)
                                (("3" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4"
                (name-replace "k1" "min({kk: below[length(args(x!2))] |
                                                      subtermOF(x!1,  #(kk + 1)) /=
                                                       subtermOF(x!2,  #(kk + 1))})"
                 :hide? nil)
                (("1" (assert)
                  (("1" (expand "left_without_children")
                    (("1" (skosimp)
                      (("1" (case "r!1 = empty_seq")
                        (("1" (hide -5)
                          (("1" (replaces -1)
                            (("1" (rewrite "empty_o_seq")
                              (("1"
                                (rewrite "empty_o_seq")
                                (("1"
                                  (replace -4 (-6 4) rl)
                                  (("1"
                                    (replace -5 (-6 5) rl)
                                    (("1"
                                      (hide -4 -5)
                                      (("1"
                                        (rewrite "add_first_is_o")
                                        (("1"
                                          (replace -3 -4 rl)
                                          (("1"
                                            (rewrite "first_compo")
                                            (("1"
                                              (lemma
                                               "seq_first_rest_1[posnat]")
                                              (("1"
                                                (inst -1 "p!1")
                                                (("1"
                                                  (lemma
                                                   "empty_0[posnat]")
                                                  (("1"
                                                    (inst -1 "p!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1 -5)
                                                        (("1"
                                                          (rewrite
                                                           "first_compo")
                                                          (("1"
                                                            (expand
                                                             "first"
                                                             -5
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "finseq_appl")
                                                              (("1"
                                                                (expand
                                                                 "#"
                                                                 -5
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   7)
                                                                  (("1"
                                                                    (rewrite
                                                                     "pos_subterm")
                                                                    (("1"
                                                                      (rewrite
                                                                       "pos_subterm")
                                                                      (("1"
                                                                        (case
                                                                         "subtermOF(x!1,  #(first(p!1))) = subtermOF(x!2,  #(first(p!1)))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           8)
                                                                          (("2"
                                                                            (expand
                                                                             "first"
                                                                             -5
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("2"
                                                                                (expand
                                                                                 "#"
                                                                                 -5)
                                                                                (("2"
                                                                                  (name-replace
                                                                                   "B"
                                                                                   "length(args(x!2))"
                                                                                   :hide?
                                                                                   nil)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "min_def[below[B]]")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "k1"
                                                                                       "{kk: below[length(args(x!2))] |
             NOT subtermOF(x!1,  #(1 + kk)) = subtermOF(x!2,  #(1 + kk))}")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "minimum?")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -2
                                                                                             "first(p!1) -1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -3
                                                                                              1))
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "k1")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!3")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -4
                                                                                                     -1
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -3
                                                                                                       "x!3")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "k1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "k1")
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 -3
                                                                                                 -1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          1))
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (lemma
                                                                                           "positions_of_arg")
                                                                                          (("4"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!2"
                                                                                             "kk!1")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (skosimp*)
                                                                                        (("5"
                                                                                          (rewrite
                                                                                           "positions_of_arg")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("6"
                                                                                        (typepred
                                                                                         "k1")
                                                                                        (("6"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -3
                                                                                            2))
                                                                                          (("6"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 7))
                                                            (("2"
                                                              (expand*
                                                               "#"
                                                               "first"
                                                               "finseq_appl")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "#")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst -4 "subtermOF(x!1,  #(1 + k1))"
                           "subtermOF(x!2,  #(1 + k1))")
                          (("2" (replace -3 -4 rl)
                            (("2" (expand "add_first" -4)
                              (("2"
                                (expand "insert?" -4)
                                (("2"
                                  (inst -4 "rest(p!1)")
                                  (("1"
                                    (split)
                                    (("1"
                                      (lemma
                                       "seq_first_rest_1[posnat]")
                                      (("1"
                                        (inst -1 "p!1")
                                        (("1"
                                          (split)
                                          (("1"
                                            (case
                                             "first(p!1) = 1 + k1")
                                            (("1"
                                              (replace -1 -2)
                                              (("1"
                                                (replace -2 7)
                                                (("1"
                                                  (rewrite
                                                   "pos_subterm")
                                                  (("1"
                                                    (rewrite
                                                     "pos_subterm")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide
                                               -1
                                               -2
                                               -3
                                               -4
                                               -8
                                               3
                                               4
                                               5
                                               8)
                                              (("2"
                                                (replace -3 1)
                                                (("2"
                                                  (rewrite
                                                   "first_compo")
                                                  (("1"
                                                    (replace -2 -1)
                                                    (("1"
                                                      (rewrite
                                                       "add_first_is_o")
                                                      (("1"
                                                        (expand*
                                                         "first"
                                                         "finseq_appl")
                                                        (("1"
                                                          (expand
                                                           "#"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "o"
                                                             -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (decompose-equality
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "empty_0[posnat]")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "r!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "empty_0")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-6 1 2 7))
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (rewrite "empty_0")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (lemma
                                                     "seq_empty[posnat]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "r!1"
                                                       "p1!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (rewrite
                                                             "empty_0")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but
                                       (-3 -4 -5 -6 1 2 6 7))
                                      (("2"
                                        (lemma
                                         "seq_first_rest_1[posnat]")
                                        (("2"
                                          (inst -1 "r!1")
                                          (("2"
                                            (lemma "empty_0[posnat]")
                                            (("2"
                                              (inst -1 "r!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   2
                                                   "rest(r!1)"
                                                   "p1!1"
                                                   "q1!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "add_first_is_o")
                                                      (("2"
                                                        (lemma
                                                         "o_equals_o[posnat]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "#(1 + k1)"
                                                           "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                                                           "#(first(r!1))"
                                                           "rest(r!1) o q1!1")
                                                          (("2"
                                                            (rewrite
                                                             "o_assoc")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (lemma
                                                                   "equal_prefix[posnat]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "#(1 + k1)"
                                                                     "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                                                                     "rest(r!1) o q1!1")
                                                                    (("1"
                                                                      (rewrite
                                                                       "o_assoc")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -4
                                                                           -5
                                                                           4)
                                                                          (("1"
                                                                            (lemma
                                                                             "seq_first_rest_1[posnat]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p!1")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -3)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     -3)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "o_equals_o[posnat]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "#(first(p!1))"
                                                                                           "rest(p!1)"
                                                                                           "#(first(r!1))"
                                                                                           "rest(r!1) o p1!1")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "o_assoc")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "equal_prefix[posnat]")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "#(first(r!1))"
                                                                                                       "rest(p!1)"
                                                                                                       "rest(r!1) o p1!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "o_assoc")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     "#"
                                                                                                     "first"
                                                                                                     "finseq_appl")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-2
                                                                                    1
                                                                                    4
                                                                                    5))
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "empty_0")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "seq_empty[posnat]")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "r!1"
                                                                                             "p1!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand*
                                                                     "#"
                                                                     "first"
                                                                     "finseq_appl")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case
                                     "p!1 = #(1 + k1) o rest(p!1)")
                                    (("1"
                                      (hide-all-but (-1 1))
                                      (("1"
                                        (rewrite "pos_subterm_ax")
                                        (("1"
                                          (rewrite "pos_subterm_ax")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 -2 -6 2 4 5 6 9)
                                      (("2"
                                        (rewrite "add_first_is_o")
                                        (("2"
                                          (lemma
                                           "seq_first_rest_1[posnat]")
                                          (("2"
                                            (inst -1 "r!1")
                                            (("2"
                                              (lemma "empty_0[posnat]")
                                              (("2"
                                                (inst -1 "r!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     -1
                                                     (-3 -4))
                                                    (("2"
                                                      (replace -3 -2)
                                                      (("2"
                                                        (hide -3)
                                                        (("2"
                                                          (lemma
                                                           "o_equals_o[posnat]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "#(1 + k1)"
                                                             "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                                                             "#(first(r!1))"
                                                             "rest(r!1) o q1!1")
                                                            (("2"
                                                              (rewrite
                                                               "o_assoc")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -4
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "seq_first_rest_1[posnat]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "p!1")
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (lemma
                                                                               "o_equals_o[posnat]")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "#(first(p!1))"
                                                                                 "rest(p!1)"
                                                                                 "#(1 + k1)"
                                                                                 "rest(r!1) o p1!1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "o_assoc")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand*
                                                                                         "#"
                                                                                         "first"
                                                                                         "finseq_appl")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2
                                                                               3
                                                                               4)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "empty_0")
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "seq_empty[posnat]")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "#(1 + k1) o rest(r!1)"
                                                                                         "p1!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "empty_0"
                                                                                               -2)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (expand*
                                                                       "#"
                                                                       "first"
                                                                       "finseq_appl")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 1 2 3 4))
                  (("2" (lemma "first_diff_TCC3")
                    (("2" (inst -1 "x!1" "x!2" "f(x!1)" "args(x!1)")
                      (("2" (assert)
                        (("2" (case "x!1 = app(f(x!1), args(x!1))")
                          (("1" (assert)
                            (("1" (inst -2 "f(x!2)" "args(x!2)")
                              (("1"
                                (case "x!2 = app(f(x!2), args(x!2))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (lemma "first_diff_TCC7")
                                      (("1"
                                        (inst
                                         -1
                                         "x!1"
                                         "x!2"
                                         "f(x!1)"
                                         "args(x!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -1
                                             "f(x!2)"
                                             "args(x!2)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2" (decompose-equality) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 5))
                            (("2" (decompose-equality) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp)
                  (("3" (rewrite "positions_of_arg") nil nil)) nil)
                 ("4" (hide -2 -3 -4 5)
                  (("4" (skosimp)
                    (("4" (rewrite "positions_of_arg")
                      (("4" (typepred "kk!1")
                        (("4" (typepred "args(x!2)")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide-all-but (-1 -3))
                (("5" (replace -1 -2 rl)
                  (("5" (hide -1)
                    (("5" (expand "left_without_children")
                      (("5" (skosimp)
                        (("5" (lemma "seq_empty[posnat]")
                          (("5" (inst -1 "r!1" "q1!1")
                            (("5" (assert)
                              (("5"
                                (flatten)
                                (("5" (rewrite "empty_0" -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (first_diff_TCC3 subtype-tcc nil robinsonunification nil)
    (add_first const-decl "finseq" seq_extras structures)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (insert? const-decl "finseq" seq_extras structures)
    (empty_o_seq formula-decl nil seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (positions_of_arg formula-decl nil positions nil)
    (pos_subterm formula-decl nil subterm nil)
    (first_compo formula-decl nil seq_extras structures)
    (add_first_is_o formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (left_without_children const-decl "bool" positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (first_diff def-decl "position" robinsonunification nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (child_p_o_fd_TCC1 0
  (child_p_o_fd_TCC1-1 nil 3516271212
   (""
    (then (skosimp*) (assert) (lemma "app_term")
     (inst -1 "p!1" "q!1" "s!1") (assert))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (app_term formula-decl nil subterm nil))
   nil
   (child_p_o_fd subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.q)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (child_p_o_fd_TCC2 0
  (child_p_o_fd_TCC2-1 nil 3516271212
   (""
    (then (skosimp*) (lemma "app_term") (inst -1 "p!1" "q!1" "t!1")
     (assert))
    nil)
   ((app_term formula-decl nil subterm nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil))
   nil
   (child_p_o_fd subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.q)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (child_p_o_fd_TCC3 0
  (child_p_o_fd_TCC3-2 "" 3803841629
   (""
    (then (skosimp*) (lemma "app_term")
     (inst -1 "p!1 o fd!1" "q!1" "ext(sig!1)(s!1)") (assert)
     (hide -1 -3 2) (typepred "p!1") (hide -2 -3)
     (lemma "position_s_first_diff")
     (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd!1")
     (assert) (lemma "pos_o_term") (inst -1 "p!1" "fd!1" "s!1")
     (assert) (rewrite "ext_preserv_pos"))
    nil)
   ((app_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil))
   shostak
   (child_p_o_fd subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s), robinsonunificationEF.q)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))
  (child_p_o_fd_TCC3-1 nil 3516271212
   ("" (skosimp*)
    (("" (lemma "app_term")
      (("" (inst -1 "p!1 o fd!1" "q1!1" "ext(sig!1)(s!1)")
        (("" (assert)
          (("" (hide -1 -3 2)
            (("" (typepred "p!1")
              (("" (hide -2 -3)
                (("" (lemma "position_s_first_diff")
                  ((""
                    (inst -1 "subtermOF(s!1, p!1)"
                     "subtermOF(t!1, p!1)" "fd!1")
                    (("" (assert)
                      (("" (lemma "pos_o_term")
                        (("" (inst -1 "p!1" "fd!1" "s!1")
                          (("" (assert)
                            (("" (rewrite "ext_preserv_pos") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((app_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil))
   nil
   (child_p_o_fd subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s), robinsonunificationEF.q)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (child_p_o_fd_TCC4 0
  (child_p_o_fd_TCC4-2 "" 3803841660
   (""
    (then (skosimp*) (lemma "app_term")
     (inst -1 "p!1 o fd!1" "q!1" "ext(sig!1)(t!1)") (assert)
     (hide -1 -3 2) (typepred "p!1") (hide -1 -3)
     (lemma "position_t_first_diff")
     (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd!1")
     (assert) (lemma "pos_o_term") (inst -1 "p!1" "fd!1" "t!1")
     (assert) (rewrite "ext_preserv_pos"))
    nil)
   ((app_term formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil))
   shostak
   (child_p_o_fd subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t), robinsonunificationEF.q)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))
  (child_p_o_fd_TCC4-1 nil 3516271212
   ("" (skosimp*)
    (("" (lemma "app_term")
      (("" (inst -1 "p!1 o fd!1" "q1!1" "ext(sig!1)(t!1)")
        (("" (assert)
          (("" (hide -1 -3 2)
            (("" (typepred "p!1")
              (("" (hide -1 -3)
                (("" (lemma "position_t_first_diff")
                  ((""
                    (inst -1 "subtermOF(s!1, p!1)"
                     "subtermOF(t!1, p!1)" "fd!1")
                    (("" (assert)
                      (("" (lemma "pos_o_term")
                        (("" (inst -1 "p!1" "fd!1" "t!1")
                          (("" (assert)
                            (("" (rewrite "ext_preserv_pos") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((app_term formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil))
   nil
   (child_p_o_fd subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t), robinsonunificationEF.q)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (child_p_o_fd 0
  (child_p_o_fd-1 nil 3516287505
   (""
    (then (skosimp)
     (name-replace "sp" "subtermOF(s!1, p!1)" :hide? nil)
     (name-replace "tp" "subtermOF(t!1, p!1)" :hide? nil)
     (name-replace "fd" "first_diff(sp, tp)" :hide? nil) (assert)
     (prop) (skosimp)
     (spread (case "child(p!1, q!1)")
      ((spread (inst -5 "q!1")
        ((then (assert) (lemma "ext_preserve_symbol")
          (inst-cp -1 "t!1" "sig!1" "q!1")
          (inst -1 "s!1" "sig!1" "q!1") (lemma "app_term")
          (inst-cp -1 "p!1" "q!1" "t!1") (inst -1 "p!1" "q!1" "s!1")
          (assert)
          (spread (split -1)
           ((spread (split -2)
             ((assert)
              (then (hide-all-but (-4 1)) (expand "child") (skosimp)
               (lemma "pos_ax") (inst -1 "q!1" "p1!1" "t!1")
               (assert))))
            (then (hide-all-but (-4 1)) (expand "child") (skosimp)
             (lemma "pos_ax") (inst -1 "q!1" "p1!1" "s!1") (assert)))))
         (then (hide-all-but (-1 1)) (expand "child") (skosimp)
          (lemma "pos_ax") (inst-cp -1 "q!1" "p1!1" "t!1")
          (inst -1 "q!1" "p1!1" "s!1") (assert))))
       (then (hide -4) (lemma "fd_equal_symbol") (expand "child" -5)
        (skosimp)
        (spread (case "length(p!1) < length(q!1)")
         ((then (lemma "o_length_o[posnat]")
           (inst -1 "p!1" "fd" "q!1" "p1!1") (assert) (skosimp)
           (replace -1 -7) (lemma "equal_prefix[posnat]")
           (inst -1 "p!1" "fd" "seq!1 o  p1!1") (rewrite "o_assoc")
           (assert)
           (spread (inst -4 "sp" "tp" "seq!1")
            ((then (replace -5)
              (spread (split)
               ((then (replace -7 -1 rl) (replace -6 -1 rl)
                 (lemma "pos_subterm") (inst-cp -1 "p!1" "seq!1" "s!1")
                 (inst -1 "p!1" "seq!1" "t!1")
                 (spread (split)
                  ((spread (split)
                    ((then (replace -1 -3 rl) (replace -2 -3 rl)
                      (replace -5 -3 rl) (lemma "ext_preserve_symbol")
                      (inst-cp -1 "s!1" "sig!1" "q!1")
                      (inst -1 "t!1" "sig!1" "q!1")
                      (spread (split)
                       ((spread (split)
                         ((assert)
                          (then (hide-all-but (-6 -8 -9 -10 -11 1 3))
                           (replace -1 -5 rl) (hide -1)
                           (lemma "app_term")
                           (inst -1 "p!1 o fd" "q!1" "s!1") (assert)
                           (spread (prop)
                            ((then (hide -4 2 3) (typepred "p!1")
                              (hide -2 -3)
                              (lemma "position_s_first_diff")
                              (inst -1 "sp" "tp" "fd") (assert)
                              (lemma "pos_o_term")
                              (inst -1 "p!1" "fd" "s!1") (assert))
                             (then (hide 2) (typepred "p!1")
                              (hide -2 -3)
                              (lemma "position_s_first_diff")
                              (inst -1 "sp" "tp" "fd") (assert)
                              (lemma "pos_o_term")
                              (inst -1 "p!1" "fd" "s!1") (assert)
                              (lemma "pos_ax")
                              (inst -1 "q!1" "p1!1" "s!1") (assert))
                             (then (hide-all-but (-4 1 3))
                              (expand "child") (inst 1 "p1!1")
                              (assert)))))))
                        (then (hide-all-but (-6 -8 -9 -10 -11 1 3))
                         (replace -1 -5 rl) (hide -1)
                         (lemma "app_term")
                         (inst -1 "p!1 o fd" "q!1" "t!1") (assert)
                         (typepred "p!1") (hide -1 -3)
                         (lemma "position_t_first_diff")
                         (inst -1 "sp" "tp" "fd") (assert)
                         (lemma "pos_o_term")
                         (inst -1 "p!1" "fd" "t!1") (assert)
                         (lemma "pos_ax") (inst -1 "q!1" "p1!1" "t!1")
                         (assert) (hide-all-but (-8 1 3))
                         (expand "child") (inst 1 "p1!1") (assert)))))
                     (then (hide-all-but (-4 -6 -7 -8 -9 1))
                      (replace -1 (-5 1) rl) (hide -1) (typepred "p!1")
                      (hide -2 -3) (lemma "position_s_first_diff")
                      (inst -1 "sp" "tp" "fd") (assert)
                      (lemma "pos_o_term") (inst -1 "p!1" "fd" "s!1")
                      (assert) (replace -7 -1) (lemma "pos_ax")
                      (inst -1 "q!1" "p1!1" "s!1") (assert))))
                   (then (hide-all-but (-4 -6 -7 -8 -9 1))
                    (replace -1 (-5 1) rl) (hide -1) (typepred "p!1")
                    (hide -1 -3) (lemma "position_t_first_diff")
                    (inst -1 "sp" "tp" "fd") (assert)
                    (lemma "pos_o_term") (inst -1 "p!1" "fd" "t!1")
                    (assert) (replace -7 -1) (lemma "pos_ax")
                    (inst -1 "q!1" "p1!1" "t!1") (assert)))))
                (then (hide-all-but (-1 1 3)) (expand "child")
                 (inst 1 "p1!1") (assert)))))
             (then (replace -6 1 rl) (replace -5 1 rl)
              (spread (rewrite "pos_subterm_ax")
               ((then (rewrite "pos_subterm_ax")
                 (hide-all-but (-2 -4 -5 -6 -7 1))
                 (replace -1 (-5 1) rl) (typepred "p!1")
                 (hide -1 -3 -4) (lemma "position_t_first_diff")
                 (inst -1 "sp" "tp" "fd") (assert) (lemma "pos_o_term")
                 (inst -1 "p!1" "fd" "t!1") (assert) (replace -7 -1)
                 (lemma "pos_ax") (inst -1 "q!1" "p1!1" "t!1")
                 (assert))
                (then (hide-all-but (-2 -4 -5 -6 -7 1))
                 (replace -1 (-5 1) rl) (typepred "p!1")
                 (hide -2 -3 -4) (lemma "position_s_first_diff")
                 (inst -1 "sp" "tp" "fd") (assert) (lemma "pos_o_term")
                 (inst -1 "p!1" "fd" "s!1") (assert) (replace -7 -1)
                 (lemma "pos_ax") (inst -1 "q!1" "p1!1" "s!1")
                 (assert))))))))
          (spread (case "length(q!1) < length(p!1)")
           ((then (hide-all-but (-1 -6 1 2))
             (lemma "o_length_o[posnat]")
             (inst -1 "q!1" "p1!1" "p!1" "fd") (assert) (skosimp)
             (expand "child") (inst 2 "seq!1") (assert) (flatten)
             (replaces -3) (rewrite "seq_o_empty")
             (decompose-equality -1))
            (then (lemma "o_equals_o[posnat]")
             (inst -1 "q!1" "p1!1" "p!1" "fd") (assert)
             (spread (inst -2 "sp" "tp" "empty_seq")
              ((then (replace -3)
                (spread (split)
                 ((then (rewrite "subterm_empty_seq")
                   (rewrite "subterm_empty_seq") (replace -5 -1 rl)
                   (replace -4 -1 rl) (lemma "ext_preserve_symbol")
                   (inst-cp -1 "s!1" "sig!1" "p!1")
                   (inst -1 "t!1" "sig!1" "p!1")
                   (spread (split)
                    ((spread (split)
                      ((assert)
                       (spread (case "fd /= empty_seq")
                        ((then (lemma "app_term")
                          (inst -1 "p!1 o fd" "p!1" "s!1")
                          (lemma "pos_o_term")
                          (inst -1 "p!1" "fd" "s!1")
                          (lemma "position_s_first_diff")
                          (inst -1 "sp" "tp" "fd") (assert)
                          (expand "child" 1) (inst 1 "fd"))
                         (then (hide-all-but (-3 -7 1 6)) (replaces -1)
                          (flatten) (replaces -1)
                          (lemma "equal_prefix[posnat]")
                          (inst -1 "p!1" "empty_seq" "p1!1")
                          (assert))))))
                     (spread (case "fd /= empty_seq")
                      ((then (lemma "app_term")
                        (inst -1 "p!1 o fd" "p!1" "t!1")
                        (lemma "pos_o_term") (inst -1 "p!1" "fd" "t!1")
                        (lemma "position_t_first_diff")
                        (inst -1 "sp" "tp" "fd") (assert)
                        (expand "child" 1) (inst 1 "fd"))
                       (then (hide-all-but (-3 -7 1 6)) (replaces -1)
                        (flatten) (replaces -1)
                        (lemma "equal_prefix[posnat]")
                        (inst -1 "p!1" "empty_seq" "p1!1")
                        (assert)))))))
                  (spread (case "fd /= empty_seq")
                   ((then (hide-all-but (-1 1)) (expand "child")
                     (inst 1 "fd") (assert) (rewrite "empty_o_seq"))
                    (then (hide-all-but (-1 -5 1 6)) (replaces -1)
                     (flatten) (replaces -1)
                     (lemma "equal_prefix[posnat]")
                     (inst -1 "p!1" "empty_seq" "p1!1") (assert)))))))
               (then (hide-all-but 1)
                (spread (split)
                 ((then (expand "positionsOF") (lift-if)
                   (expand* "only_empty_seq" "union" "member"))
                  (then (expand "positionsOF") (lift-if)
                   (expand* "only_empty_seq" "union"
                    "member"))))))))))))))))
    nil)
   ((term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (first_diff def-decl "position" robinsonunification nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (child const-decl "bool" positions nil)
    (app_term formula-decl nil subterm nil)
    (pos_ax formula-decl nil positions nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (empty_o_seq formula-decl nil seq_extras structures)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (separation_lwc_pos 0
  (separation_lwc_pos-1 nil 3517238341
   (""
    (then (skosimp) (expand "left_without_children" -1) (skosimp)
     (spread (case "length(p!1) > length(r!1)")
      ((then (lemma "o_length_o[posnat]")
        (inst -1 "r!1" "q1!1" "p!1" "p1!1") (assert) (skosimp)
        (lemma "equal_prefix[posnat]")
        (inst -1 "r!1" "seq!1 o p1!1" "q1!1") (rewrite "o_assoc")
        (assert) (replace -1 -6 rl)
        (spread (rewrite "first_compo")
         ((then (expand "left_without_children" 3)
           (inst 3 "r!1" "p1!2" "seq!1") (assert) (flatten)
           (replace -7 -2) (rewrite "seq_o_empty")
           (decompose-equality -2))
          (then (flatten) (rewrite "empty_0" -1) (replace -1 -3)
           (rewrite "seq_o_empty") (decompose-equality -3)))))
       (spread (case "EXISTS (seq : position) : r!1 = p!1 o seq")
        ((then (skosimp) (inst 5 "seq!1 o p1!2") (rewrite "o_assoc")
          (assert) (lemma "equal_prefix[posnat]")
          (inst -1 "p!1" "p1!1" "seq!1 o q1!1") (rewrite "o_assoc")
          (assert) (expand "left_without_children" 5)
          (inst 5 "seq!1" "p1!2" "q1!1") (assert))
         (then (hide-all-but (-1 1 2)) (lemma "o_length_o[posnat]")
          (inst -1 "p!1" "p1!1" "r!1" "q1!1") (assert) (prop)
          (lemma "o_equals_o[posnat]")
          (inst -1 "p!1" "p1!1" "r!1" "q1!1") (assert)
          (inst 2 "empty_seq") (rewrite "seq_o_empty") (assert)))))))
    nil)
   ((left_without_children const-decl "bool" positions nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (first_compo formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (o_equals_o formula-decl nil seq_extras structures))
   shostak))
 (lwc_o_fd_empty_seq 0
  (lwc_o_fd_empty_seq-1 nil 3517238602
   (""
    (then (skosimp)
     (name-replace "fd" "first_diff(s!1, t!1)" :hide? nil) (assert)
     (prop) (name-replace "x1" "subtermOF(t!1, p1!1)" :hide? nil)
     (copy -3) (expand "left_without_children" -1) (skosimp)
     (spread (case "length(p1!1) > length(r!1)")
      ((then (lemma "o_length_o[posnat]")
        (inst -1 "r!1" "p1!2" "p1!1" "p2!1") (assert) (skosimp)
        (lemma "equal_prefix[posnat]")
        (inst -1 "r!1" "seq!1 o p2!1" "p1!2") (rewrite "o_assoc")
        (assert) (replace -1 -6 rl)
        (spread (rewrite "first_compo")
         ((then (lemma "fd_equal_subterm")
           (spread (inst -1 "s!1" "t!1" "p1!1")
            ((then (replace -9) (assert)
              (spread (split)
               ((then (replace -8) (hide-all-but (-1 -11 -12 -14 3))
                 (replaces -3) (lemma "pos_subterm_ax")
                 (inst -1 "p1!1" "p2!1" "s!1") (assert)
                 (expand "positionsOF" -1) (expand "only_empty_seq")
                 (propax))
                (then (hide-all-but (-2 -3 -4 -6 1 2))
                 (expand "left_without_children")
                 (inst 1 "r!1" "seq!1" "q1!1") (assert) (flatten)
                 (replaces -1) (rewrite "seq_o_empty")
                 (decompose-equality -1)))))
             (then (hide-all-but (-10 -11 1)) (lemma "pos_ax")
              (inst -1 "p1!1" "p2!1" "s!1") (assert)))))
          (then (hide-all-but (-2 -3 1)) (flatten) (rewrite "empty_0")
           (replaces -1) (rewrite "seq_o_empty")
           (decompose-equality -1)))))
       (spread (case "EXISTS(seq : position): r!1 = p1!1 o seq")
        ((then (skosimp) (replace -1 -2)
          (hide-all-but (-2 -5 -6 -11 2))
          (lemma "position_t_first_diff") (inst -1 "s!1" "t!1" "fd")
          (assert) (lemma "pos_subterm_ax")
          (inst -1 "p1!1" "seq!1 o q1!1" "t!1") (rewrite "o_assoc")
          (assert) (expand "positionsOF" -1) (expand "only_empty_seq")
          (lemma "seq_empty[posnat]") (inst -1 "seq!1" "q1!1") (assert)
          (flatten) (rewrite "empty_0" -2))
         (then (hide-all-but (-2 -8 1 2)) (replaces -1)
          (lemma "o_length_o[posnat]")
          (inst -1 "p1!1" "p2!1" "r!1" "p1!2") (assert) (prop)
          (lemma "o_equals_o[posnat]")
          (inst -1 "p1!1" "p2!1" "r!1" "p1!2") (assert)
          (inst 2 "empty_seq") (rewrite "seq_o_empty") (assert)))))))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (first_diff def-decl "position" robinsonunification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (seq_empty formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (pos_ax formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (only_empty_seq const-decl "positions" positions nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (left_without_children const-decl "bool" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil))
   shostak))
 (lwc_p_o_fd 0
  (lwc_p_o_fd-1 nil 3516916753
   (""
    (then (skosimp)
     (name-replace "sp" "subtermOF(s!1, p!1)" :hide? nil)
     (name-replace "tp" "subtermOF(t!1, p!1)" :hide? nil)
     (name-replace "fd" "first_diff(sp, tp)" :hide? nil) (assert)
     (prop) (skosimp)
     (spread (case "left_without_children(q!1, p!1)")
      ((then (lemma "positions_of_ext") (inst-cp -1 "sig!1" "s!1")
        (inst -1 "sig!1" "t!1") (decompose-equality -1)
        (decompose-equality -2) (inst -1 "q!1") (inst -2 "q!1")
        (assert) (expand* "union" "member")
        (spread (prop)
         ((spread (inst -7 "q!1")
           ((then (assert) (rewrite "subterm_ext_commute")
             (rewrite "subterm_ext_commute") (assert))
            (assert)))
          (then (skosimp) (expand "left_without_children" -6) (skosimp)
           (spread (case "length(p1!1) <= length(r!1)")
            ((then (hide-all-but (-1 -2 -3 -4 -7 -8 2 3))
              (typepred "p!1") (hide -1 -3)
              (lemma "o_equals_o[posnat]")
              (inst -1 "p1!1" "p2!1" "r!1" "p1!2") (assert)
              (spread (split)
               ((then (replace -1 -7 rl) (hide -1 -3 -4 -8)
                 (replace -4 -1) (lemma "pos_subterm_ax")
                 (inst -1 "p1!1" "q1!1" "t!1") (assert)
                 (expand "positionsOF" -1) (expand "only_empty_seq")
                 (propax))
                (then (lemma "o_length_o[posnat]")
                 (inst -1 "p1!1" "p2!1" "r!1" "p1!2") (assert)
                 (skosimp) (replace -1 -7) (hide -1 -3 -4 -8 1)
                 (replace -4 -1) (lemma "pos_subterm_ax")
                 (inst -1 "p1!1" "seq!1 o q1!1" "t!1")
                 (rewrite "o_assoc") (assert) (expand "positionsOF" -1)
                 (expand "only_empty_seq") (lemma "seq_empty[posnat]")
                 (inst -1 "seq!1" "q1!1") (assert) (flatten)
                 (rewrite "empty_0" -2)))))
             (spread (inst -12 "p1!1")
              ((spread (split)
                ((then (replace -2 5) (rewrite "pos_subterm")
                  (rewrite "pos_subterm") (lemma "subterm_ext_commute")
                  (inst-cp -1 "p1!1" "t!1" "sig!1")
                  (inst -1 "p1!1" "s!1" "sig!1") (assert)
                  (spread (split)
                   ((assert)
                    (then (hide-all-but (-3 -7 1)) (replaces -1)
                     (lemma "pos_ax") (inst -1 "p1!1" "p2!1" "s!1")
                     (assert)))))
                 (then (hide-all-but (-1 -6 -7 -8 1 2 4 5))
                  (lemma "o_length_o[posnat]")
                  (inst -1 "r!1" "p1!2" "p1!1" "p2!1") (assert)
                  (skosimp)
                  (spread (case "seq!1 = empty_seq")
                   ((then (hide-all-but (-1 -2 2)) (replaces -1)
                     (rewrite "seq_o_empty") (decompose-equality -1))
                    (then (replace -4 -2) (replace -1 -2)
                     (lemma "equal_prefix[posnat]")
                     (inst -1 "r!1" "p1!2" "seq!1 o p2!1")
                     (rewrite "o_assoc") (assert) (replace -1 -6)
                     (spread (rewrite "first_compo")
                      ((then (hide-all-but (-2 -4 -6 1 2 4))
                        (expand "left_without_children")
                        (inst 2 "r!1" "seq!1" "q1!1") (assert))
                       (then (hide-all-but (1 2)) (flatten)
                        (rewrite "empty_0"))))))))))
               (then (assert) (hide-all-but (-1 -5 1)) (replaces -1)
                (lemma "pos_ax") (inst -1 "p1!1" "p2!1" "s!1")
                (assert)))))))
          (then (skosimp) (expand "left_without_children" -6) (skosimp)
           (spread (case "length(p1!1) <= length(r!1)")
            ((then (hide-all-but (-1 -3 -4 -5 -7 -8 2 3))
              (typepred "p!1") (hide -2 -3)
              (lemma "o_equals_o[posnat]")
              (inst -1 "p1!1" "p2!1" "r!1" "p1!2") (assert)
              (spread (split)
               ((then (replace -1 -7 rl) (hide -1 -3 -4 -8)
                 (replace -4 -1) (lemma "pos_subterm_ax")
                 (inst -1 "p1!1" "q1!1" "s!1") (assert)
                 (expand "positionsOF" -1) (expand "only_empty_seq")
                 (propax))
                (then (lemma "o_length_o[posnat]")
                 (inst -1 "p1!1" "p2!1" "r!1" "p1!2") (assert)
                 (skosimp) (replace -1 -7) (hide -1 -3 -4 -8 1)
                 (replace -4 -1) (lemma "pos_subterm_ax")
                 (inst -1 "p1!1" "seq!1 o q1!1" "s!1")
                 (rewrite "o_assoc") (assert) (expand "positionsOF" -1)
                 (expand "only_empty_seq") (lemma "seq_empty[posnat]")
                 (inst -1 "seq!1" "q1!1") (assert) (flatten)
                 (rewrite "empty_0" -2)))))
             (spread (inst -12 "p1!1")
              ((spread (split)
                ((then (replace -3 5) (rewrite "pos_subterm")
                  (rewrite "pos_subterm") (lemma "subterm_ext_commute")
                  (inst-cp -1 "p1!1" "t!1" "sig!1")
                  (inst -1 "p1!1" "s!1" "sig!1") (assert)
                  (hide-all-but (-3 -4 1)) (replaces -2)
                  (lemma "pos_ax") (inst -1 "p1!1" "p2!1" "t!1")
                  (assert))
                 (then (hide-all-but (-2 -6 -7 -8 1 2 4 5))
                  (lemma "o_length_o[posnat]")
                  (inst -1 "r!1" "p1!2" "p1!1" "p2!1") (assert)
                  (skosimp)
                  (spread (case "seq!1 = empty_seq")
                   ((then (hide-all-but (-1 -2 2)) (replaces -1)
                     (rewrite "seq_o_empty") (decompose-equality -1))
                    (then (replace -4 -2) (replace -1 -2)
                     (lemma "equal_prefix[posnat]")
                     (inst -1 "r!1" "p1!2" "seq!1 o p2!1")
                     (rewrite "o_assoc") (assert) (replace -1 -6)
                     (spread (rewrite "first_compo")
                      ((then (hide-all-but (-2 -4 -6 1 2 4))
                        (expand "left_without_children")
                        (inst 2 "r!1" "seq!1" "q1!1") (assert))
                       (then (hide-all-but (1 2)) (flatten)
                        (rewrite "empty_0"))))))))))
               (then (assert) (hide-all-but (-1 -2 1)) (replaces -2)
                (lemma "pos_ax") (inst -1 "p1!1" "p2!1" "t!1")
                (assert)))))))
          (then (skosimp*) (expand "left_without_children" -9)
           (skosimp)
           (spread
            (case "length(p1!1) <= length(r!1) OR length(p1!2) <= length(r!1)")
            ((spread (split)
              ((then (hide-all-but (-1 -2 -3 -4 -10 -11 1 2))
                (typepred "p!1") (hide -1 -3)
                (lemma "o_equals_o[posnat]")
                (inst -1 "p1!1" "p2!1" "r!1" "p1!3") (assert)
                (spread (split)
                 ((then (replace -1 -7 rl) (hide -1 -3 -4 -8)
                   (replace -4 -1) (lemma "pos_subterm_ax")
                   (inst -1 "p1!1" "q1!1" "t!1") (assert)
                   (expand "positionsOF" -1) (expand "only_empty_seq")
                   (propax))
                  (then (lemma "o_length_o[posnat]")
                   (inst -1 "p1!1" "p2!1" "r!1" "p1!3") (assert)
                   (skosimp) (replace -1 -7) (hide -1 -3 -4 -8 1)
                   (replace -4 -1) (lemma "pos_subterm_ax")
                   (inst -1 "p1!1" "seq!1 o q1!1" "t!1")
                   (rewrite "o_assoc") (assert)
                   (expand "positionsOF" -1) (expand "only_empty_seq")
                   (lemma "seq_empty[posnat]") (inst -1 "seq!1" "q1!1")
                   (assert) (flatten) (rewrite "empty_0" -2)))))
               (then (hide-all-but (-1 -6 -7 -8 -10 -11 1 2))
                (typepred "p!1") (hide -2 -3)
                (lemma "o_equals_o[posnat]")
                (inst -1 "p1!2" "p2!2" "r!1" "p1!3") (assert)
                (spread (split)
                 ((then (replace -1 -7 rl) (hide -1 -3 -4 -8)
                   (replace -4 -1) (lemma "pos_subterm_ax")
                   (inst -1 "p1!2" "q1!1" "s!1") (assert)
                   (expand "positionsOF" -1) (expand "only_empty_seq")
                   (propax))
                  (then (lemma "o_length_o[posnat]")
                   (inst -1 "p1!2" "p2!2" "r!1" "p1!3") (assert)
                   (skosimp) (replace -1 -7) (hide -1 -3 -4 -8 1)
                   (replace -4 -1) (lemma "pos_subterm_ax")
                   (inst -1 "p1!2" "seq!1 o q1!1" "s!1")
                   (rewrite "o_assoc") (assert)
                   (expand "positionsOF" -1) (expand "only_empty_seq")
                   (lemma "seq_empty[posnat]") (inst -1 "seq!1" "q1!1")
                   (assert) (flatten) (rewrite "empty_0" -2)))))))
             (then (flatten)
              (spread (case "length(p1!1) <= length(p1!2)")
               ((then (lemma "o_equals_o[posnat]")
                 (inst -1 "p1!1" "p2!1" "p1!2" "p2!2") (assert)
                 (spread (split)
                  ((then (replaces -1) (inst -16 "p1!2")
                    (spread (split)
                     ((then (hide-all-but (-1 -3 -4 -6 -8 -10 5))
                       (replace -2) (rewrite "pos_subterm")
                       (rewrite "pos_subterm")
                       (lemma "subterm_ext_commute")
                       (inst-cp -1 "p1!2" "s!1" "sig!1")
                       (inst -1 "p1!2" "t!1" "sig!1") (assert))
                      (then (hide-all-but (-2 -10 -11 -12 1 2 4 5))
                       (lemma "o_length_o[posnat]")
                       (inst -1 "r!1" "p1!3" "p1!2" "p2!1") (assert)
                       (skosimp)
                       (spread (case "seq!1 = empty_seq")
                        ((then (hide-all-but (-1 -2 2)) (replaces -1)
                          (rewrite "seq_o_empty")
                          (decompose-equality -1))
                         (then (replace -4 -2) (replace -1 -2)
                          (lemma "equal_prefix[posnat]")
                          (inst -1 "r!1" "p1!3" "seq!1 o p2!1")
                          (rewrite "o_assoc") (assert) (replace -1 -6)
                          (spread (rewrite "first_compo")
                           ((then (hide-all-but (-2 -4 -6 1 2 4))
                             (expand "left_without_children")
                             (inst 2 "r!1" "seq!1" "q1!1") (assert))
                            (then (hide-all-but (1 2)) (flatten)
                             (rewrite "empty_0")))))))))))
                   (then (lemma "o_length_o[posnat]")
                    (inst -1 "p1!1" "p2!1" "p1!2" "p2!2") (assert)
                    (skosimp) (lemma "pos_ax")
                    (inst -1 "p1!1" "seq!1" "s!1") (assert)
                    (inst -18 "p1!1")
                    (spread (split)
                     ((then (hide-all-but (-1 -2 -5 -6 -8 -12 6))
                       (replace -3) (rewrite "pos_subterm")
                       (rewrite "pos_subterm")
                       (lemma "subterm_ext_commute")
                       (inst-cp -1 "p1!1" "s!1" "sig!1")
                       (inst -1 "p1!1" "t!1" "sig!1") (assert))
                      (then (hide-all-but (-4 -12 -13 -14 1 3 5 6))
                       (lemma "o_length_o[posnat]")
                       (inst -1 "r!1" "p1!3" "p1!1" "p2!1") (assert)
                       (skosimp)
                       (spread (case "seq!2 = empty_seq")
                        ((then (hide-all-but (-1 -2 2)) (replaces -1)
                          (rewrite "seq_o_empty")
                          (decompose-equality -1))
                         (then (replace -4 -2) (replace -1 -2)
                          (lemma "equal_prefix[posnat]")
                          (inst -1 "r!1" "p1!3" "seq!2 o p2!1")
                          (rewrite "o_assoc") (assert) (replace -1 -6)
                          (spread (rewrite "first_compo")
                           ((then (hide-all-but (-2 -4 -6 1 2 4))
                             (expand "left_without_children")
                             (inst 2 "r!1" "seq!2" "q1!1") (assert))
                            (then (hide-all-but (1 2)) (flatten)
                             (rewrite "empty_0"))))))))))))))
                (then (lemma "o_length_o[posnat]")
                 (inst -1 "p1!2" "p2!2" "p1!1" "p2!1") (assert)
                 (skosimp) (lemma "pos_ax")
                 (inst -1 "p1!2" "seq!1" "t!1") (assert)
                 (inst -17 "p1!2")
                 (spread (split)
                  ((then (hide-all-but (-1 -2 -7 -8 -9 -11 6))
                    (replace -4) (rewrite "pos_subterm")
                    (rewrite "pos_subterm")
                    (lemma "subterm_ext_commute")
                    (inst-cp -1 "p1!2" "s!1" "sig!1")
                    (inst -1 "p1!2" "t!1" "sig!1") (assert))
                   (then (hide-all-but (-7 -11 -12 -13 1 4 5 6))
                    (lemma "o_length_o[posnat]")
                    (inst -1 "r!1" "p1!3" "p1!2" "p2!2") (assert)
                    (skosimp)
                    (spread (case "seq!2 = empty_seq")
                     ((then (hide-all-but (-1 -2 2)) (replaces -1)
                       (rewrite "seq_o_empty") (decompose-equality -1))
                      (then (replace -4 -2) (replace -1 -2)
                       (lemma "equal_prefix[posnat]")
                       (inst -1 "r!1" "p1!3" "seq!2 o p2!2")
                       (rewrite "o_assoc") (assert) (replace -1 -6)
                       (spread (rewrite "first_compo")
                        ((then (hide-all-but (-2 -4 -6 1 2 4))
                          (expand "left_without_children")
                          (inst 2 "r!1" "seq!2" "q1!1") (assert))
                         (then (hide-all-but (1 2)) (flatten)
                          (rewrite "empty_0"))))))))))))))))))))
       (then (lemma "separation_lwc_pos") (inst -1 "p!1" "fd" "q!1")
        (assert) (skosimp) (hide -6) (lemma "fd_equal_subterm")
        (lemma "positions_of_ext") (replace -3 2)
        (rewrite "pos_subterm") (rewrite "pos_subterm")
        (rewrite "subterm_ext_commute") (lemma "subterm_ext_commute")
        (inst -1 "p!1" "t!1" "sig!1") (assert) (replace -1 2) (hide -1)
        (replace -7 2) (replace -6 2) (lemma "pos_subterm_ax")
        (inst-cp -1 "p!1" "q1!1" "ext(sig!1)(s!1)")
        (inst -1 "p!1" "q1!1" "ext(sig!1)(t!1)") (assert)
        (rewrite "subterm_ext_commute") (rewrite "subterm_ext_commute")
        (replace -8 -1) (replace -9 -2) (hide -5 -8 -9 -10 1)
        (inst-cp -3 "sig!1" "sp") (inst -3 "sig!1" "tp")
        (decompose-equality -3) (decompose-equality -4)
        (inst -1 "q1!1") (inst -2 "q1!1") (expand* "union" "member")
        (assert)
        (spread (prop)
         ((spread (inst -5 "sp" "tp" "q1!1")
           ((then (assert) (rewrite "subterm_ext_commute")
             (rewrite "subterm_ext_commute") (assert))
            (assert)))
          (then (skosimp)
           (spread (case "p2!1 = empty_seq")
            ((then (replace -1 -2) (rewrite "seq_o_empty")
              (spread (inst -9 "sp" "tp" "q1!1")
               ((assert)
                (then (rewrite "subterm_ext_commute")
                 (replace -2 -3 rl) (assert)))))
             (then (lemma "lwc_o_fd_empty_seq")
              (inst -1 "q1!1" "p1!1" "p2!1" "sp" "tp") (assert)
              (assert)))))
          (then (skosimp)
           (spread (case "p2!1 = empty_seq")
            ((then (replace -1 -3) (rewrite "seq_o_empty")
              (replace -3 -4 rl)
              (spread (inst -9 "sp" "tp" "q1!1") ((assert) (assert))))
             (then (lemma "lwc_o_fd_empty_seq")
              (inst -1 "q1!1" "p1!1" "p2!1" "tp" "sp") (assert)
              (lemma "commutative_first_diff") (inst -1 "sp" "tp" "fd")
              (assert)))))
          (then (skosimp*)
           (spread (case "length(p1!1) = length(p1!2)")
            ((then (lemma "o_equals_o[posnat]")
              (inst -1 "p1!1" "p2!1" "p1!2" "p2!2") (assert)
              (lemma "equal_prefix[posnat]")
              (inst -1 "p1!1" "p2!1" "p2!2") (assert) (replaces -1)
              (replaces -1) (expand "left_without_children" -12)
              (skosimp)
              (spread (case "EXISTS(seq:position) : r!1 = p1!2 o seq")
               ((then (skosimp) (hide-all-but (-1 -7 -8 -13 -16 1))
                 (lemma "position_s_first_diff")
                 (inst -1 "sp" "tp" "fd") (assert) (replace -5 -1)
                 (replace -2 -1) (lemma "pos_subterm_ax")
                 (inst -1 "p1!2" "seq!1 o q1!2" "sp")
                 (rewrite "o_assoc") (assert) (expand "positionsOF" -1)
                 (expand "only_empty_seq") (lemma "seq_empty[posnat]")
                 (inst -1 "seq!1" "q1!2") (assert) (flatten)
                 (rewrite "empty_0" -2))
                (then (lemma "o_length_o[posnat]")
                 (inst -1 "r!1" "p1!3" "p1!2" "p2!2") (assert)
                 (spread (split)
                  ((then (skosimp) (inst -12 "sp" "tp" "p1!2")
                    (spread (split)
                     ((then (replace -3 4) (rewrite "pos_subterm")
                       (rewrite "pos_subterm")
                       (rewrite "subterm_ext_commute")
                       (lemma "subterm_ext_commute")
                       (inst -1 "p1!2" "tp" "sig!1") (assert))
                      (then (replace -15)
                       (hide-all-but (-1 -2 -12 -13 -14 1 2 3 4))
                       (replace -1 -2) (replace -2 -4)
                       (lemma "equal_prefix[posnat]")
                       (inst -1 "r!1" "seq!1 o p2!2" "p1!3")
                       (rewrite "o_assoc") (assert) (replace -1 -6 rl)
                       (spread (rewrite "first_compo")
                        ((then (hide -1 -3 -5)
                          (expand "left_without_children")
                          (inst 1 "r!1" "seq!1" "q1!2") (assert)
                          (flatten) (replaces -1)
                          (rewrite "seq_o_empty") (inst 1 "empty_seq")
                          (rewrite "seq_o_empty") (assert))
                         (then (flatten) (rewrite "empty_0")
                          (hide-all-but (-1 -3 2)) (replaces -1)
                          (inst 1 "empty_seq") (rewrite "seq_o_empty")
                          (rewrite "seq_o_empty") (assert))))))))
                   (then (hide-all-but (-1 -13 1 2)) (replaces -1)
                    (lemma "o_length_o[posnat]")
                    (inst -1 "p1!2" "p2!2" "r!1" "p1!3") (assert)
                    (prop) (lemma "o_equals_o[posnat]")
                    (inst -1 "p1!2" "p2!2" "r!1" "p1!3") (assert)
                    (inst 3 "empty_seq") (rewrite "seq_o_empty")
                    (assert))))))))
             (then (lemma "o_length_o[posnat]")
              (inst -1 "p1!1" "p2!1" "p1!2" "p2!2") (assert)
              (spread (split)
               ((then (skosimp) (lemma "lwc_o_fd_empty_seq")
                 (inst -1 "p1!2" "p1!1" "seq!1" "sp" "tp")
                 (replace -15) (assert) (assert)
                 (spread (prop)
                  ((then (hide-all-but (-1 -2 1)) (replaces -1)
                    (rewrite "seq_o_empty") (decompose-equality -1))
                   (then (expand "left_without_children" -13) (skosimp)
                    (spread (case "length(p1!2) <= length(r!1)")
                     ((then (lemma "o_equals_o[posnat]")
                       (inst -1 "p1!2" "p2!2" "r!1" "p1!3") (assert)
                       (spread (split)
                        ((then (hide-all-but (-1 -3 -5 -6 -15 3))
                          (lemma "position_t_first_diff")
                          (inst -1 "sp" "tp" "fd") (assert)
                          (replace -6 -1) (replaces -2) (replaces -2)
                          (lemma "pos_subterm_ax")
                          (inst -1 "p1!1" "seq!1 o q1!2" "tp")
                          (rewrite "o_assoc") (assert)
                          (expand "positionsOF" -1)
                          (expand "only_empty_seq")
                          (lemma "seq_empty[posnat]")
                          (inst -1 "seq!1" "q1!2") (assert) (flatten)
                          (rewrite "empty_0" -2))
                         (then (lemma "o_length_o[posnat]")
                          (inst -1 "p1!2" "p2!2" "r!1" "p1!3") (assert)
                          (skosimp) (hide-all-but (-1 -3 -5 -6 -15 4))
                          (lemma "position_t_first_diff")
                          (inst -1 "sp" "tp" "fd") (assert)
                          (replace -6 -1) (replaces -2) (replaces -2)
                          (lemma "pos_subterm_ax")
                          (inst -1 "p1!1" "seq!1 o seq!2 o q1!2" "tp")
                          (rewrite "o_assoc") (rewrite "o_assoc")
                          (assert) (expand "positionsOF" -1)
                          (expand "only_empty_seq")
                          (lemma "seq_empty[posnat]")
                          (inst -1 "seq!1 o seq!2" "q1!2") (assert)
                          (flatten) (rewrite "empty_0" -2)))))
                      (then (lemma "o_length_o[posnat]")
                       (inst -1 "r!1" "p1!3" "p1!2" "p2!2") (assert)
                       (skosimp)
                       (hide-all-but (-1 -7 -14 -15 -16 1 2 4 5))
                       (expand "left_without_children")
                       (inst 2 "r!1" "seq!2" "q1!2") (assert)
                       (lemma "equal_prefix[posnat]")
                       (inst -1 "r!1" "seq!2 o p2!2" "p1!3")
                       (rewrite "o_assoc") (assert) (replace -1 -6 rl)
                       (spread (rewrite "first_compo")
                        ((then (assert) (flatten) (replaces -3)
                          (rewrite "seq_o_empty")
                          (decompose-equality -2))
                         (then (flatten) (rewrite "empty_0")
                          (replaces -1) (rewrite "seq_o_empty")
                          (decompose-equality -2)))))))))))
                (then (lemma "o_length_o[posnat]")
                 (inst -1 "p1!2" "p2!2" "p1!1" "p2!1") (assert)
                 (skosimp) (lemma "lwc_o_fd_empty_seq")
                 (inst -1 "p1!1" "p1!2" "seq!1" "tp" "sp")
                 (lemma "commutative_first_diff")
                 (inst -1 "sp" "tp" "fd") (assert) (assert)
                 (replace -1 -2 rl)
                 (spread (prop)
                  ((then (hide-all-but (-1 -3 2)) (replaces -1)
                    (rewrite "seq_o_empty") (decompose-equality -1))
                   (then (expand "left_without_children" -14) (skosimp)
                    (spread (case "length(p1!1) <= length(r!1)")
                     ((then (lemma "o_equals_o[posnat]")
                       (inst -1 "p1!1" "p2!1" "r!1" "p1!3") (assert)
                       (spread (split)
                        ((then (hide-all-but (-1 -4 -10 -11 -16 4))
                          (lemma "position_s_first_diff")
                          (inst -1 "sp" "tp" "fd") (assert)
                          (replace -6 -1) (replaces -2) (replaces -2)
                          (lemma "pos_subterm_ax")
                          (inst -1 "p1!2" "seq!1 o q1!2" "sp")
                          (rewrite "o_assoc") (assert)
                          (expand "positionsOF" -1)
                          (expand "only_empty_seq")
                          (lemma "seq_empty[posnat]")
                          (inst -1 "seq!1" "q1!2") (assert) (flatten)
                          (rewrite "empty_0" -2))
                         (then (lemma "o_length_o[posnat]")
                          (inst -1 "p1!1" "p2!1" "r!1" "p1!3") (assert)
                          (skosimp)
                          (hide-all-but (-1 -4 -10 -11 -16 5))
                          (lemma "position_s_first_diff")
                          (inst -1 "sp" "tp" "fd") (assert)
                          (replace -6 -1) (replaces -2) (replaces -2)
                          (lemma "pos_subterm_ax")
                          (inst -1 "p1!2" "seq!1 o seq!2 o q1!2" "sp")
                          (rewrite "o_assoc") (rewrite "o_assoc")
                          (assert) (expand "positionsOF" -1)
                          (expand "only_empty_seq")
                          (lemma "seq_empty[posnat]")
                          (inst -1 "seq!1 o seq!2" "q1!2") (assert)
                          (flatten) (rewrite "empty_0" -2)))))
                      (then (lemma "o_length_o[posnat]")
                       (inst -1 "r!1" "p1!3" "p1!1" "p2!1") (assert)
                       (skosimp)
                       (hide-all-but (-1 -4 -15 -16 -17 1 2 5 6))
                       (expand "left_without_children")
                       (inst 2 "r!1" "seq!2" "q1!2") (assert)
                       (lemma "equal_prefix[posnat]")
                       (inst -1 "r!1" "seq!2 o p2!1" "p1!3")
                       (rewrite "o_assoc") (assert) (replace -1 -6 rl)
                       (spread (rewrite "first_compo")
                        ((then (assert) (flatten) (replaces -3)
                          (rewrite "seq_o_empty")
                          (decompose-equality -2))
                         (then (flatten) (rewrite "empty_0")
                          (replaces -1) (rewrite "seq_o_empty")
                          (decompose-equality -2)))))))))))))))))))))))
    nil)
   ((term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (first_diff def-decl "position" robinsonunification nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (left_without_children const-decl "bool" positions nil)
    (union const-decl "set" sets nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_empty formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (only_empty_seq const-decl "positions" positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_ax formula-decl nil positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (equal_prefix formula-decl nil seq_extras structures)
    (member const-decl "bool" sets nil)
    (positions_of_ext formula-decl nil substitution nil)
    (commutative_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil))
   shostak))
 (np_p_o_fd_empty_unifiable_term_TCC1 0
  (np_p_o_fd_empty_unifiable_term_TCC1-1 nil 3512073554
   (""
    (then (skosimp*) (lemma "position_s_first_diff")
     (lemma "position_t_first_diff") (inst?) (inst?) (assert)
     (typepred "p!1") (hide -3) (lemma "pos_o_term")
     (inst-cp -1 "p!1" "fd!1" "t!1") (inst -1 "p!1" "fd!1" "s!1")
     (assert) (rewrite "ext_preserv_pos") (rewrite "ext_preserv_pos"))
    nil)
   ((position_s_first_diff formula-decl nil robinsonunification nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil))
   nil
   (np_p_o_fd_empty_unifiable_term subtype
    "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunificationEF.fd)"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}")))
 (np_p_o_fd_empty_unifiable_term 0
  (np_p_o_fd_empty_unifiable_term-1 nil 3514628084
   (""
    (then (skosimp)
     (name-replace "fd"
      "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
      nil)
     (name-replace "sig1"
      "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
      :hide? nil)
     (assert)
     (name-replace "np"
      "next_position(ext(sig1)(s!1), ext(sig1)(t!1), p!1 o fd)" :hide?
      nil)
     (prop) (lemma "child_p_o_fd") (inst -1 "sig1" "s!1" "t!1" "p!1")
     (replace -4) (assert) (ground) (hide -7) (lemma "lwc_p_o_fd")
     (inst -1 "sig1" "s!1" "t!1" "p!1") (replace -5) (assert) (ground)
     (hide -7) (lemma "next_pos_empty_equal_subterm")
     (spread (inst -1 "ext(sig1)(s!1)" "ext(sig1)(t!1)" "p!1 o fd")
      ((then (assert) (ground)
        (spread (case "NOT p!1 o fd = empty_seq")
         ((spread
           (case "subtermOF(ext(sig1)(s!1), p!1 o fd) = subtermOF(ext(sig1)(t!1), p!1 o fd)")
           ((then (lemma "equal_term")
             (inst -1 "ext(sig1)(s!1)" "ext(sig1)(t!1)" "p!1 o fd")
             (assert) (ground))
            (then (hide -1 -2 -3 -4 -7 4) (typepred "p!1")
             (lemma "position_s_first_diff")
             (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
             (lemma "position_t_first_diff")
             (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
             (assert) (lemma "pos_o_term")
             (inst-cp -1 "p!1" "fd" "s!1") (inst -1 "p!1" "fd" "t!1")
             (assert) (lemma "pos_subterm")
             (inst-cp -1 "p!1" "fd" "s!1") (inst -1 "p!1" "fd" "t!1")
             (assert) (rewrite "subterm_ext_commute")
             (rewrite "subterm_ext_commute") (replace -1) (replace -2)
             (name-replace "sp" "subtermOF(s!1, p!1)")
             (name-replace "tp" "subtermOF(t!1, p!1)") (copy -10)
             (expand "link_of_frst_diff" -1) (replace -12)
             (expand "member") (lift-if)
             (spread (ground)
              ((then (decompose-equality -1)
                (inst -1 "subtermOF(sp, fd)") (expand "ext" 3 1)
                (replace -1 3 rl) (lemma "idemp_sub_term_empty_inter")
                (inst -1 "subtermOF(tp, fd)" "sig1") (assert)
                (expand* "empty?" "intersection" "member") (skosimp)
                (lemma "dom_link_of_frst_diff_is")
                (inst -1 "fd" "sp" "tp") (replace -14)
                (expand* "restrict" "singleton")
                (decompose-equality -1) (inst -1 "x!1") (assert))
               (then (decompose-equality -1)
                (inst -1 "subtermOF(tp, fd)") (expand "ext" 4 2)
                (replace -1 4 rl) (lemma "idemp_sub_term_empty_inter")
                (inst -1 "subtermOF(sp, fd)" "sig1") (assert)
                (expand* "empty?" "intersection" "member") (skosimp)
                (lemma "dom_link_of_frst_diff_is")
                (inst -1 "fd" "sp" "tp")
                (expand* "restrict" "singleton") (replace -14)
                (decompose-equality -1) (inst -1 "x!1") (assert)))))
            (then (hide -1 -2 -3 -4 -5 -7 2 3 4) (typepred "p!1")
             (hide -3) (lemma "position_s_first_diff")
             (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
             (lemma "position_t_first_diff")
             (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
             (assert) (lemma "pos_o_term")
             (inst-cp -1 "p!1" "fd" "s!1") (inst -1 "p!1" "fd" "t!1")
             (assert) (rewrite "ext_preserv_pos"))
            (then (hide -1 -2 -3 -4 -5 -7 2 3 4) (typepred "p!1")
             (hide -2 -3) (lemma "position_s_first_diff")
             (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
             (lemma "pos_o_term") (inst -1 "p!1" "fd" "s!1") (assert)
             (assert) (rewrite "ext_preserv_pos"))))
          (then (hide -2 -3 -4 -5 -8) (lemma "seq_empty[posnat]")
           (inst -1 "p!1" "fd") (assert) (flatten)
           (rewrite "empty_0" -2) (hide -3) (rewrite "empty_0" -1)
           (replaces -1) (rewrite "subterm_empty_seq")
           (rewrite "subterm_empty_seq") (copy -2)
           (expand "link_of_frst_diff" -1) (replace -4) (replace -2)
           (rewrite "subterm_empty_seq") (rewrite "subterm_empty_seq")
           (lift-if)
           (spread (ground)
            ((then (decompose-equality -1) (inst -1 "s!1")
              (expand "ext" 3 1) (replace -1 3 rl)
              (lemma "idemp_sub_term_empty_inter")
              (inst -1 "t!1" "sig1") (assert)
              (expand* "empty?" "intersection" "member") (skosimp)
              (lemma "dom_link_of_frst_diff_is")
              (inst -1 "fd" "s!1" "t!1")
              (expand* "restrict" "singleton") (replace -6)
              (rewrite "subterm_empty_seq")
              (rewrite "subterm_empty_seq") (replace -7) (assert)
              (decompose-equality -1) (inst -1 "x!1") (assert))
             (then (decompose-equality -1) (inst -1 "t!1")
              (expand "ext" 4 2) (replace -1 4 rl)
              (lemma "idemp_sub_term_empty_inter")
              (inst -1 "s!1" "sig1") (assert)
              (expand* "empty?" "intersection" "member") (skosimp)
              (lemma "dom_link_of_frst_diff_is")
              (inst -1 "fd" "s!1" "t!1")
              (expand* "restrict" "singleton") (replace -6)
              (rewrite "subterm_empty_seq")
              (rewrite "subterm_empty_seq") (replace -7) (assert)
              (decompose-equality -1) (inst -1 "x!1") (assert))))))))
       (spread (prop)
        ((then (hide -1 -2 -3 -4 -6 2 3)
          (lemma "position_s_first_diff")
          (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
          (assert) (typepred "p!1") (hide -2 -3) (lemma "pos_o_term")
          (inst -1 "p!1" "fd" "s!1") (assert)
          (rewrite "ext_preserv_pos"))
         (then (hide -1 -2 -3 -4 -6 2 3)
          (lemma "position_t_first_diff")
          (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
          (assert) (typepred "p!1") (hide -1 -3) (lemma "pos_o_term")
          (inst -1 "p!1" "fd" "t!1") (assert)
          (rewrite "ext_preserv_pos"))
         (then (hide -2 -3 -4 -7) (lemma "seq_empty[posnat]")
          (inst -1 "p!1" "fd") (assert) (flatten)
          (rewrite "empty_0" -2) (hide -3) (rewrite "empty_0" -1)
          (replaces -1) (rewrite "subterm_empty_seq")
          (rewrite "subterm_empty_seq") (copy -2)
          (expand "link_of_frst_diff" -1) (replace -4) (replace -2)
          (rewrite "subterm_empty_seq") (rewrite "subterm_empty_seq")
          (lift-if)
          (spread (ground)
           ((then (decompose-equality -1) (inst -1 "s!1")
             (expand "ext" 3 1) (replace -1 3 rl)
             (lemma "idemp_sub_term_empty_inter")
             (inst -1 "t!1" "sig1") (assert)
             (expand* "empty?" "intersection" "member") (skosimp)
             (lemma "dom_link_of_frst_diff_is")
             (inst -1 "fd" "s!1" "t!1")
             (expand* "restrict" "singleton") (replace -6)
             (rewrite "subterm_empty_seq")
             (rewrite "subterm_empty_seq") (replace -7) (assert)
             (decompose-equality -1) (inst -1 "x!1") (assert))
            (then (decompose-equality -1) (inst -1 "t!1")
             (expand "ext" 4 2) (replace -1 4 rl)
             (lemma "idemp_sub_term_empty_inter")
             (inst -1 "s!1" "sig1") (assert)
             (expand* "empty?" "intersection" "member") (skosimp)
             (lemma "dom_link_of_frst_diff_is")
             (inst -1 "fd" "s!1" "t!1")
             (expand* "restrict" "singleton") (replace -6)
             (rewrite "subterm_empty_seq")
             (rewrite "subterm_empty_seq") (replace -7) (assert)
             (decompose-equality -1) (inst -1 "x!1") (assert))))))))))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (first_diff def-decl "position" robinsonunification nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_empty formula-decl nil seq_extras structures)
    (equal_term formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (idemp_sub_term_empty_inter formula-decl nil substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (np_p_o_fd_equal_subterm 0
  (np_p_o_fd_equal_subterm-1 nil 3516285690
   (""
    (then (skosimp)
     (name-replace "fd"
      "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
      nil)
     (name-replace "sig1"
      "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
      :hide? nil)
     (assert)
     (name-replace "np"
      "next_position(ext(sig1)(s!1), ext(sig1)(t!1), p!1 o fd)" :hide?
      nil)
     (prop) (lemma "child_p_o_fd") (inst -1 "sig1" "s!1" "t!1" "p!1")
     (replace -4) (assert) (ground) (hide -6) (lemma "lwc_p_o_fd")
     (inst -1 "sig1" "s!1" "t!1" "p!1") (replace -5) (assert) (ground)
     (hide -6)
     (spread
      (case "subtermOF(ext(sig1)(s!1), p!1 o fd) = subtermOF(ext(sig1)(t!1), p!1 o fd)")
      ((then (lemma "next_pos_equal_subterm")
        (spread (inst -1 "ext(sig1)(s!1)" "ext(sig1)(t!1)" "p!1 o fd")
         ((then (assert) (replace -5) (ground))
          (then (hide -2 -3 -4 3) (typepred "p!1")
           (lemma "position_s_first_diff")
           (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
           (lemma "position_t_first_diff")
           (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
           (assert) (lemma "pos_o_term") (inst-cp -1 "p!1" "fd" "s!1")
           (inst -1 "p!1" "fd" "t!1") (assert)
           (rewrite "ext_preserv_pos") (rewrite "ext_preserv_pos")
           (skosimp) (replace -7) (rewrite "subterm_empty_seq")
           (rewrite "subterm_empty_seq") (hide-all-but (-8 3))
           (assert)))))
       (then (hide -1 -2 -3 3 4) (lemma "position_s_first_diff")
        (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
        (lemma "position_t_first_diff")
        (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
        (assert) (lemma "pos_o_term") (inst-cp -1 "p!1" "fd" "s!1")
        (inst -1 "p!1" "fd" "t!1") (assert)
        (rewrite "subterm_ext_commute") (rewrite "subterm_ext_commute")
        (lemma "pos_subterm") (inst-cp -1 "p!1" "fd" "s!1")
        (inst -1 "p!1" "fd" "t!1") (assert) (replace -1) (replace -2)
        (name-replace "sp" "subtermOF(s!1, p!1)")
        (name-replace "tp" "subtermOF(t!1, p!1)") (copy -7)
        (expand "link_of_frst_diff" -1) (replace -9) (expand "member")
        (lift-if)
        (spread (ground)
         ((then (decompose-equality -1) (inst -1 "subtermOF(sp, fd)")
           (expand "ext" 2 1) (replace -1 2 rl)
           (lemma "idemp_sub_term_empty_inter")
           (inst -1 "subtermOF(tp, fd)" "sig1") (assert)
           (expand* "empty?" "intersection" "member") (skosimp)
           (lemma "dom_link_of_frst_diff_is") (inst -1 "fd" "sp" "tp")
           (expand* "restrict" "singleton") (replace -12)
           (decompose-equality -1) (inst -1 "x!1") (assert))
          (then (decompose-equality -1) (inst -1 "subtermOF(tp, fd)")
           (expand "ext" 3 2) (replace -1 3 rl)
           (lemma "idemp_sub_term_empty_inter")
           (inst -1 "subtermOF(sp, fd)" "sig1") (assert)
           (expand* "empty?" "intersection" "member") (skosimp)
           (lemma "dom_link_of_frst_diff_is") (inst -1 "fd" "sp" "tp")
           (expand* "restrict" "singleton") (replace -12)
           (decompose-equality -1) (inst -1 "x!1") (assert)))))
       (then (hide -1 -2 -3 -4 2 3 4) (lemma "position_t_first_diff")
        (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
        (assert) (typepred "p!1") (hide -1 -3) (lemma "pos_o_term")
        (inst -1 "p!1" "fd" "t!1") (assert)
        (rewrite "ext_preserv_pos"))
       (then (hide -1 -2 -3 -4 2 3 4) (lemma "position_s_first_diff")
        (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd")
        (assert) (typepred "p!1") (hide -2 -3) (lemma "pos_o_term")
        (inst -1 "p!1" "fd" "s!1") (assert)
        (rewrite "ext_preserv_pos")))))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (first_diff def-decl "position" robinsonunification nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (pos_subterm formula-decl nil subterm nil)
    (idemp_sub_term_empty_inter formula-decl nil substitution nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (robinson_unification_algorithm_aux_TCC1 0
  (robinson_unification_algorithm_aux_TCC1-1 nil 3496419653
   (""
    (then (skosimp)
     (spread (rewrite "finite_union")
      ((then (hide 2) (rewrite "vars_of_term_finite"))
       (then (hide 2) (rewrite "vars_of_term_finite")))))
    nil)
   ((finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.s), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.t))"
    "finite_set[(V[variable, symbol, arity])]")))
 (robinson_unification_algorithm_aux_TCC2 0
  (robinson_unification_algorithm_aux_TCC2-1 nil 3496419653
   (""
    (then (skosimp) (lemma "right_pos_subset") (inst -1 "s!1" "p!1")
     (lemma "finite_subset[position]")
     (spread (inst -1 "positionsOF(s!1)" "right_pos(s!1, p!1)")
      ((assert)
       (then (hide -1 2) (rewrite "positions_of_terms_finite")))))
    nil)
   ((finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p)"
    "finite_set[position[variable, symbol, arity]]")))
 (robinson_unification_algorithm_aux_TCC3 0
  (robinson_unification_algorithm_aux_TCC3-1 nil 3496419653
   (""
    (then (skosimp)
     (spread (rewrite "finite_union")
      ((then (hide 2) (rewrite "vars_of_term_finite"))
       (then (hide 2) (rewrite "vars_of_term_finite")))))
    nil)
   ((finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.z`1), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.z`2))"
    "finite_set[(V[variable, symbol, arity])]")))
 (robinson_unification_algorithm_aux_TCC4 0
  (robinson_unification_algorithm_aux_TCC4-1 nil 3496419653
   (""
    (then (skosimp) (lemma "right_pos_subset")
     (inst -1 "z!1`1" "z!1`3") (lemma "finite_subset[position]")
     (spread (inst -1 "positionsOF(z!1`1)" "right_pos(z!1`1, z!1`3)")
      ((assert)
       (then (hide -1 2) (rewrite "positions_of_terms_finite")))))
    nil)
   ((finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "robinsonunificationEF.right_pos(robinsonunificationEF.z`1, robinsonunificationEF.z`3)"
    "finite_set[position[variable, symbol, arity]]")))
 (robinson_unification_algorithm_aux_TCC5 0
  (robinson_unification_algorithm_aux_TCC5-1 nil 3496419653
   (""
    (then (skosimp)
     (spread (rewrite "finite_union")
      ((then (hide 2) (rewrite "vars_of_term_finite"))
       (then (hide 2) (rewrite "vars_of_term_finite")))))
    nil)
   ((finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.s), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.t))"
    "finite_set[(V[variable, symbol, arity])]")))
 (robinson_unification_algorithm_aux_TCC6 0
  (robinson_unification_algorithm_aux_TCC6-1 nil 3496419653
   ("" (then (skosimp*) (hide -) (rewrite "iden_subs")) nil)
   ((iden_subs formula-decl nil substitution nil)) nil
   (robinson_unification_algorithm_aux subtype
    "identity[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].identity"
    "Sub[variable, symbol, arity]")))
 (robinson_unification_algorithm_aux_TCC7 0
  (robinson_unification_algorithm_aux_TCC7-1 nil 3496419653
   (""
    (then (skosimp*) (lemma "next_position_is_position")
     (inst-cp -1 "s!1" "t!1" "p!1") (inst -1 "t!1" "s!1" "p!1")
     (lemma "next_position_commute") (inst -1 "s!1" "t!1" "p!1")
     (assert))
    nil)
   ((positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "robinsonunificationEF.pi"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")))
 (robinson_unification_algorithm_aux_TCC8 0
  (robinson_unification_algorithm_aux_TCC8-1 nil 3496419653
   (""
    (then (skosimp*) (rewrite "lex2_lt")
     (lemma "next_pos_to_the_right")
     (spread (inst -1 "s!1" "t!1" "p!1")
      ((assert) (then (expand "next_position" -2) (assert)))))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (union const-decl "set" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil
   (robinson_unification_algorithm_aux termination
    "robinsonunificationEF.robinson_unification_algorithm_aux(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi)"
    "nil")))
 (robinson_unification_algorithm_aux_TCC9 0
  (robinson_unification_algorithm_aux_TCC9-1 nil 3496419653
   ("" (then (skosimp) (skosimp)) nil) nil nil
   (robinson_unification_algorithm_aux subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)"
    "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p) /= t}")))
 (robinson_unification_algorithm_aux_TCC10 0
  (robinson_unification_algorithm_aux_TCC10-1 nil 3503934511
   (""
    (then (skosimp*)
     (name-replace "p!2"
      "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
      nil)
     (lemma "position_s_first_diff") (lemma "position_t_first_diff")
     (inst -2 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
     (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
     (assert) (typepred "p!1") (lemma "pos_o_term")
     (inst-cp -1 "p!1" "p!2" "s!1") (inst -1 "p!1" "p!2" "t!1")
     (assert) (rewrite "ext_preserv_pos") (rewrite "ext_preserv_pos"))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (first_diff def-decl "position" robinsonunification nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].first_diff(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)))"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}")))
 (robinson_unification_algorithm_aux_TCC11 0
  (robinson_unification_algorithm_aux_TCC11-1 nil 3503934511
   (""
    (then (skosimp*)
     (name-replace "q!1"
      "p!1 o first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
      :hide? nil)
     (lemma "next_position_is_position")
     (inst-cp -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "q!1")
     (spread (inst -1 "ext(sig!1)(t!1)" "ext(sig!1)(s!1)" "q!1")
      ((then (lemma "next_position_commute")
        (inst -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "q!1") (assert))
       (then (lemma "robinson_unification_algorithm_aux_TCC10")
        (inst -1 "s!1" "t!1" "p!1") (replace -3 -1) (assert)
        (inst -1 "sig!1") (assert) (flatten) (assert)))))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (first_diff def-decl "position" robinsonunification nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "robinsonunificationEF.pi"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}")))
 (robinson_unification_algorithm_aux_TCC12 0
  (robinson_unification_algorithm_aux_TCC12-1 nil 3503934511
   (""
    (then (skosimp*) (rewrite "lex2_lt") (flatten) (hide 5)
     (lemma "termination_lemma_subterm")
     (spread (inst -1 "s!1" "t!1" "p!1")
      ((then (assert) (assert))
       (then (hide-all-but (1 2)) (flatten)))))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (union const-decl "set" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil))
   nil
   (robinson_unification_algorithm_aux termination
    "robinsonunificationEF.robinson_unification_algorithm_aux(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s), substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t), robinsonunificationEF.pi)"
    "nil")))
 (robinson_unification_algorithm_aux_TCC13 0
  (robinson_unification_algorithm_aux_TCC13-1 nil 3503934511
   ("" (then (skosimp*) (hide-all-but 5) (rewrite "subs_o")) nil)
   ((Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (subs_o formula-decl nil substitution nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].comp(robinsonunificationEF.sigma, robinsonunificationEF.sig)"
    "Sub[variable, symbol, arity]")))
 (robinson_unification_algorithm_aux_TCC14 0
  (robinson_unification_algorithm_aux_TCC14-1 nil 3516702576
   ("" (subtype-tcc) nil)
   ((term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)"
    "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p) /= t}")))
 (robinson_unification_algorithm_EF_TCC1 0
  (robinson_unification_algorithm_EF_TCC1-1 nil 3495978980
   (""
    (then (skosimp*)
     (spread (split)
      ((then (expand "positionsOF") (lift-if)
        (expand* "union" "IUnion" "member" "only_empty_seq"))
       (then (expand "positionsOF") (lift-if)
        (expand* "union" "IUnion" "member" "only_empty_seq")))))
    nil)
   ((only_empty_seq const-decl "positions" positions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (positionsOF def-decl "positions" positions nil))
   nil
   (robinson_unification_algorithm_EF subtype
    "finite_sequences[posnat].empty_seq"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")))
 (unifiable_implies_not_fail1 0
  (unifiable_implies_not_fail1-1 nil 3510532128
   (""
    (then (skosimp) (assert)
     (name "sig!1"
           "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
     (prop) (expand "link_of_frst_diff" -3) (lift-if)
     (spread (prop)
      ((then
        (name "p!2"
              "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
        (replace -1) (decompose-equality -2)
        (spread (case "xx = subtermOF(subtermOF(s!1, p!1), p!2)")
         ((then (inst -2 "xx") (assert) (expand "fail" -2)
           (replace -1 1 rl) (replace -2 1) (hide-all-but 1)
           (expand* "member" "Vars")
           (spread (inst 1 "#(1)")
            ((then (expand "subtermOF" 1) (rewrite "empty_0") (lift-if)
              (spread (prop)
               ((then (hide-all-but -1) (grind))
                (then (expand "finseq_appl")
                 (spread (case "#(xx)`seq(first( #(1)) - 1) = xx")
                  ((then (replace -1 2)
                    (spread (case "rest( #(1)) = empty_seq")
                     ((then (replace -1 2) (hide-all-but 2)
                       (expand "subtermOF") (rewrite "empty_0"))
                      (then (hide-all-but 1)
                       (lemma "length_rest_0[posnat]") (inst -1 "#(1)")
                       (spread (prop)
                        ((then (hide-all-but (-1 2))
                          (rewrite "empty_0"))
                         (then (expand "#" -1) (assert))
                         (then (expand "#" 1) (propax))))))))
                   (then (hide-all-but 1) (expand "#") (propax))
                   (assert)))))))
             (then (expand "positionsOF") (assert)
              (expand* "union" "IUnion" "member")
              (spread (prop)
               ((then (expand "#") (assert))
                (then (hide 1 2)
                 (spread (inst 1 "1")
                  ((then (expand "catenate") (expand "finseq_appl")
                    (inst 1 "empty_seq")
                    (spread (split)
                     ((then (expand "member") (expand "positionsOF")
                       (lift-if)
                       (spread (prop)
                        ((then (expand "only_empty_seq") (propax))
                         (then (expand "only_empty_seq") (propax))
                         (expand* "union" "IUnion" "member"
                          "only_empty_seq"))))
                      (grind))))
                   (grind))))))))))
          (then (inst -1 "subtermOF(subtermOF(s!1, p!1), p!2)")
           (expand "fail") (assert) (expand "id") (hide 1 2)
           (lemma "first_diff_has_diff_argument")
           (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
           (assert)))))
       (then (lemma "var_term_unifiable_not_var_in_term")
        (name "p!2"
              "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
        (replace -1) (hide -1)
        (inst -1 "subtermOF(subtermOF(s!1, p!1), p!2)"
         "subtermOF(subtermOF(t!1, p!1), p!2)")
        (assert) (hide -1 -2)
        (spread (split)
         ((then (reveal -4) (lemma "position_s_first_diff")
           (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
           (assert) (lemma "position_t_first_diff")
           (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
           (assert) (lemma "pos_o_term") (inst -1 "p!1" "p!2" "s!1")
           (lemma "pos_o_term") (inst -1 "p!1" "p!2" "t!1") (assert)
           (lemma "pos_subterm") (inst -1 "p!1" "p!2" "s!1")
           (lemma "pos_subterm") (inst -1 "p!1" "p!2" "t!1") (assert)
           (replace -1 1 rl) (replace -2 1 rl) (hide-all-but (-9 1))
           (lemma "unifiable_terms_unifiable_args")
           (expand "unifiable") (skosimp) (inst 1 "sigma!1")
           (inst -1 "sigma!1" "s!1" "t!1" "p!1 o p!2")
           (expand* "member" "U") (assert))
          (then (hide-all-but 1) (reveal -6)
           (lemma "first_diff_has_diff_argument") (inst?) (assert)))))
       (then (decompose-equality -1)
        (name "p!2"
              "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
        (replace -1)
        (spread (case "xx = subtermOF(subtermOF(t!1, p!1), p!2)")
         ((then (inst -3 "subtermOF(subtermOF(t!1, p!1), p!2)")
           (expand "fail") (assert) (replace -1 1 rl) (replace -3 1)
           (hide-all-but 1) (expand* "member" "Vars")
           (spread (inst 1 "#(1)")
            ((then (expand "subtermOF" 1) (rewrite "empty_0") (lift-if)
              (spread (prop)
               ((then (hide-all-but -1) (grind))
                (then (expand "finseq_appl")
                 (spread (case "#(xx)`seq(first( #(1)) - 1) = xx")
                  ((then (replace -1 2)
                    (spread (case "rest( #(1)) = empty_seq")
                     ((then (replace -1 2) (hide-all-but 2)
                       (expand "subtermOF") (rewrite "empty_0"))
                      (then (hide-all-but 1)
                       (lemma "length_rest_0[posnat]") (inst -1 "#(1)")
                       (spread (prop)
                        ((then (hide-all-but (-1 2))
                          (rewrite "empty_0"))
                         (then (expand "#" -1) (assert))
                         (then (expand "#" 1) (propax))))))))
                   (then (hide-all-but 1) (expand "#") (propax))
                   (assert)))))))
             (then (expand "positionsOF") (assert)
              (expand* "union" "IUnion" "member")
              (spread (prop)
               ((then (hide 1) (grind))
                (then (hide 1 2)
                 (spread (inst 1 "1")
                  ((then (expand "catenate") (expand "finseq_appl")
                    (inst 1 "empty_seq")
                    (spread (split)
                     ((then (expand "member") (expand "positionsOF")
                       (lift-if)
                       (spread (prop)
                        ((then (expand "only_empty_seq") (propax))
                         (then (expand "only_empty_seq") (propax))
                         (expand* "union" "IUnion" "member"
                          "only_empty_seq"))))
                      (grind))))
                   (grind))))))))))
          (then (inst -2 "subtermOF(subtermOF(t!1, p!1), p!2)")
           (expand "fail") (assert) (expand "id") (hide 1 2 3 -3 -4)
           (lemma "first_diff_has_diff_argument")
           (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
           (assert)))))
       (then (lemma "var_term_unifiable_not_var_in_term")
        (name-replace "p!2"
         "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
         nil)
        (inst -2 "subtermOF(subtermOF(t!1, p!1), p!2)"
         "subtermOF(subtermOF(s!1, p!1), p!2)")
        (assert) (hide (-2 -3 -4 2)) (lemma "position_s_first_diff")
        (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
        (assert) (lemma "position_t_first_diff")
        (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
        (assert) (lemma "pos_o_term") (inst -1 "p!1" "p!2" "s!1")
        (lemma "pos_o_term") (inst -1 "p!1" "p!2" "t!1") (assert)
        (lemma "pos_subterm") (inst -1 "p!1" "p!2" "s!1")
        (lemma "pos_subterm") (inst -1 "p!1" "p!2" "t!1") (assert)
        (replace -1 1 rl) (replace -2 1 rl) (hide-all-but (-8 1))
        (lemma "unifiable_terms_unifiable_args") (expand "unifiable")
        (skosimp) (inst 1 "sigma!1")
        (inst -1 "sigma!1" "s!1" "t!1" "p!1 o p!2")
        (expand* "member" "U") (assert) (hide -2) (expand "unifier")
        (assert))
       (then
        (name-replace "p!2"
         "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
         nil)
        (lemma "first_diff_unifiable_vars")
        (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
        (assert) (hide-all-but (-3 1))
        (lemma "unifiable_terms_unifiable_args") (expand "unifiable")
        (skosimp) (inst 1 "sigma!1")
        (inst -1 "sigma!1" "s!1" "t!1" "p!1") (expand* "member" "U")
        (assert)))))
    nil)
   ((first_diff_unifiable_vars formula-decl nil robinsonunification
     nil)
    (unifier const-decl "bool" unification nil)
    (var_term_unifiable_not_var_in_term formula-decl nil unification
     nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (pos_subterm formula-decl nil subterm nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (O const-decl "finseq" finite_sequences nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (unifiable const-decl "bool" unification nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (first_diff def-decl "position" robinsonunification nil)
    (fail const-decl "Sub" robinsonunification nil)
    (first_diff_has_diff_argument formula-decl nil robinsonunification
     nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (catenate const-decl "positions" positions nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (only_empty_seq const-decl "positions" positions nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length_rest_0 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (ff const-decl "{f: symbol | arity(f) = 1}" robinsonunification
     nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (xx const-decl "(V)" robinsonunification nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil))
   shostak))
 (preserving_generality1 0
  (preserving_generality1-1 nil 3510536726
   (""
    (then (skosimp) (assert) (inst 1 "rho!1")
     (name-replace "sig!1"
      "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
      :hide? nil)
     (decompose-equality 1) (copy -1) (expand "link_of_frst_diff" -1)
     (lift-if)
     (spread (prop)
      ((then
        (name-replace "p!2"
         "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
         nil)
        (decompose-equality -2) (inst -1 "x!1") (lift-if)
        (spread (prop)
         ((then (expand "comp" 2) (replace -2 2 rl) (replace -1 2)
           (lemma "unifiable_terms_unifiable_args")
           (inst -1 "rho!1" "s!1" "t!1" "p!1") (assert)
           (lemma "unifiable_terms_unifiable_args")
           (spread
            (inst -1 "rho!1" "subtermOF(s!1, p!1)"
             "subtermOF(t!1, p!1)" "p!2")
            ((then (assert) (hide-all-but (-1 -5 2))
              (expand* "member" "U" "unifier") (expand "ext" -1 1)
              (propax))
             (then (hide-all-but (-4 1))
              (lemma "position_t_first_diff")
              (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
               "p!2")
              (lemma "position_s_first_diff")
              (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
               "p!2")
              (assert)))))
          (then (expand "comp" 3) (replace -1 3 rl) (hide-all-but 3)
           (typepred "x!1") (expand "V") (expand "ext") (assert)))))
       (then (hide -1 -3 1) (lemma "unifiable_implies_not_fail1")
        (inst?) (replaces -3) (assert)
        (spread (prop)
         ((assert)
          (then (expand* "member" "U" "unifiable") (inst 1 "rho!1")))))
       (then
        (name-replace "p!2"
         "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
         nil)
        (decompose-equality -2) (inst -1 "x!1") (lift-if)
        (spread (prop)
         ((then (expand "comp" 3) (replace -2 3 rl) (replace -1 3)
           (lemma "unifiable_terms_unifiable_args")
           (inst -1 "rho!1" "s!1" "t!1" "p!1") (assert)
           (lemma "unifiable_terms_unifiable_args")
           (spread
            (inst -1 "rho!1" "subtermOF(s!1, p!1)"
             "subtermOF(t!1, p!1)" "p!2")
            ((then (assert) (hide-all-but (-1 -6 3))
              (expand* "member" "U" "unifier") (expand "ext" -1 2)
              (assert))
             (then (hide-all-but (-4 1))
              (lemma "position_t_first_diff")
              (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
               "p!2")
              (lemma "position_s_first_diff")
              (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
               "p!2")
              (assert)))))
          (then (expand "comp" 4) (replace -1 4 rl) (hide-all-but 4)
           (typepred "x!1") (expand "V") (expand "ext") (assert)))))
       (then (hide -1 -3 1 2) (lemma "unifiable_implies_not_fail1")
        (inst?) (replaces -3) (assert)
        (spread (prop)
         ((assert)
          (then (expand* "member" "U" "unifiable") (inst 1 "rho!1")))))
       (then (hide-all-but (-3 1 2))
        (lemma "first_diff_unifiable_vars")
        (name-replace "p!2"
         "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
         nil)
        (inst -2 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
        (assert) (hide (-1 2 3))
        (lemma "unifiable_terms_unifiable_args")
        (inst -1 "rho!1" "s!1" "t!1" "p!1") (assert)
        (expand* "member" "U" "unifiable") (inst 1 "rho!1")))))
    nil)
   ((link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (first_diff_unifiable_vars formula-decl nil robinsonunification
     nil)
    (unifiable const-decl "bool" unification nil)
    (first_diff def-decl "position" robinsonunification nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (ext def-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (unifier const-decl "bool" unification nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (comp const-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil))
   shostak))
 (unifiable_preserves_unifiability1 0
  (unifiable_preserves_unifiability1-1 nil 3510434111
   (""
    (then (skosimp) (assert) (prop)
     (name-replace "sig!1"
      "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
     (lemma "preserving_generality") (expand "unifiable" -2) (skosimp)
     (inst -1 "sigma!1" "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)")
     (lemma "unifiable_terms_unifiable_args") (inst?)
     (expand* "member" "U") (assert) (skosimp) (expand "unifiable")
     (reveal -3) (replaces -1) (inst 1 "theta!1") (hide -1)
     (expand "unifier") (replaces -1) (rewrite "ext_o") (expand "o")
     (propax))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (unifiable const-decl "bool" unification nil)
    (ext_o formula-decl nil substitution nil)
    (unifier const-decl "bool" unification nil)
    (member const-decl "bool" sets nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (preserving_generality formula-decl nil robinsonunification nil))
   shostak))
 (dom_ruaEF_subset_union_vars_aux 0
  (dom_ruaEF_subset_union_vars_aux-2 "" 3803848142
   (""
    (spread
     (measure-induct+
      "lex2(Card(union(Vars(s), Vars(t))), Card(right_pos(s,p)))"
      ("s" "t" "p"))
     ((spread (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
       ((then (expand "robinson_unification_algorithm_aux" 1) (assert)
         (lift-if)
         (spread (prop)
          ((then (hide -3) (expand* "subset?" "union" "member")
            (skosimp) (hide-all-but -2) (expand "Dom") (flatten)
            (expand "identity") (propax))
           (then (inst -2 "x!1" "x!2" "next_position(x!1, x!2, x!3)")
            (lemma "robinson_unification_algorithm_aux_TCC8")
            (inst -1 "x!1" "x!2" "x!3" "next_position(x!1, x!2, x!3)")
            (assert)))))
        (then (expand "robinson_unification_algorithm_aux" 2) (assert)
         (name-replace "p!1"
          "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :hide?
          nil)
         (name-replace "sig!1"
          "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))"
          :hide? nil)
         (spread
          (name-replace "np"
           "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)"
           :hide? nil)
          ((then (lift-if)
            (spread (prop)
             ((then (hide-all-but (-1 -3 -6 2))
               (lemma "unifiable_implies_not_fail1")
               (inst -1 "x!1" "x!2" "x!3") (replace -3) (assert))
              (then (hide-all-but (-3 -4 1 2 3))
               (lemma "dom_link_of_frst_diff_is")
               (inst -1 "p!1" "subtermOF(x!1, x!3)"
                "subtermOF(x!2, x!3)")
               (assert) (replace -2) (replace -3) (assert)
               (spread (prop)
                ((then (replaces -2) (expand "subset?") (skosimp*)
                  (expand "member") (expand* "restrict" "union")
                  (expand "member") (flatten) (hide 2)
                  (expand "singleton") (expand "Vars")
                  (lemma "pos_subterm") (inst?) (lemma "pos_o_term")
                  (inst?) (lemma "position_s_first_diff")
                  (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                   "p!1")
                  (assert) (replace -3 -5 rl) (hide-all-but (-2 -5 1))
                  (inst 1 "x!3 o p!1") (assert))
                 (then (replaces -1) (expand "subset?") (skosimp*)
                  (expand "member") (expand* "restrict" "union")
                  (expand "member") (flatten) (hide (1 2))
                  (expand "singleton") (expand "Vars")
                  (lemma "pos_subterm") (inst?) (lemma "pos_o_term")
                  (inst?) (lemma "position_t_first_diff")
                  (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                   "p!1")
                  (assert) (replace -3 -4 rl) (hide-all-but (-2 -4 1))
                  (inst 1 "x!3 o p!1") (assert)))))
              (then (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
               (lemma "robinson_unification_algorithm_aux_TCC12")
               (inst -1 "x!1" "x!2" "x!3") (assert) (inst -1 "sig!1")
               (assert) (replace -5 -1) (inst -1 "np") (assert)
               (hide -1) (replaces -1)
               (lemma "unifiable_preserves_unifiability1") (inst?)
               (replace -3) (assert)
               (spread
                (case "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))), union(Vars(x!1), Vars(x!2)))")
                ((then (hide-all-but (-1 -6 1)) (expand "subset?")
                  (skosimp) (inst -1 "x!4") (inst -3 "x!4") (assert))
                 (then (lemma "vars_ext_link_s_subset")
                  (inst -1 "x!1" "x!2" "x!3") (replace -4) (assert)
                  (lemma "vars_ext_link_t_subset")
                  (inst -1 "x!1" "x!2" "x!3") (replace -5) (assert)
                  (hide-all-but (-1 -2 1)) (expand "subset?") (skosimp)
                  (inst -1 "x!4") (inst -2 "x!4") (assert) (hide 3)
                  (expand* "union" "member") (assert)))))
              (then (inst -4 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
               (lemma "robinson_unification_algorithm_aux_TCC12")
               (inst -1 "x!1" "x!2" "x!3") (assert) (inst -1 "sig!1")
               (assert) (replace -4 -1) (inst -1 "np") (assert)
               (hide -1) (lemma "unifiable_preserves_unifiability1")
               (inst?) (replace -3) (assert)
               (spread
                (case "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))),union(Vars(x!1), Vars(x!2)))")
                ((spread
                  (case "subset?(Dom(sig!1), union(Vars(x!1), Vars(x!2)))")
                  ((then (hide-all-but (-1 -2 -7 2))
                    (name-replace "RU"
                     "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)")
                    (spread
                     (case "subset?(union(Dom(RU),Dom(sig!1)), union(Vars(x!1), Vars(x!2)))")
                     ((then (hide (-2 -3 -4)) (lemma "dom_o") (inst?)
                       (expand* "subset?" "member") (skosimp*)
                       (inst -1 "x!4") (inst -2 "x!4") (assert))
                      (then (hide 2) (expand* "subset?" "member")
                       (skosimp*) (inst -2 "x!4") (inst -3 "x!4")
                       (inst -4 "x!4") (assert) (hide (1 3))
                       (expand* "union" "member")))))
                   (then (hide (-1 -2 -6 -7 2 3))
                    (lemma "dom_link_of_frst_diff_is")
                    (inst -1 "p!1" "subtermOF(x!1, x!3)"
                     "subtermOF(x!2, x!3)")
                    (replace -3) (assert)
                    (spread (prop)
                     ((then (decompose-equality -2)
                       (expand* "subset?" "member") (skosimp)
                       (inst -1 "x!4") (iff) (prop) (hide (-1 -4))
                       (expand* "restrict" "singleton")
                       (lemma "position_s_first_diff") (inst?)
                       (inst -1 "p!1") (assert) (lemma "pos_o_term")
                       (inst?) (assert) (lemma "pos_subterm") (inst?)
                       (assert) (replace -1 (-4 -5) rl)
                       (hide-all-but (-4 -5 1))
                       (expand* "union" "member") (flatten)
                       (expand "Vars" 1) (inst 1 "x!3 o p!1") (assert))
                      (then (decompose-equality -1)
                       (expand* "subset?" "member") (skosimp)
                       (inst -1 "x!4") (iff) (prop) (hide (-1 -3))
                       (expand* "restrict" "singleton")
                       (lemma "position_t_first_diff") (inst?)
                       (inst -1 "p!1") (assert) (lemma "pos_o_term")
                       (inst?) (assert) (lemma "pos_subterm") (inst?)
                       (assert) (replace -1 -4 rl)
                       (hide-all-but (-4 2)) (expand* "union" "member")
                       (flatten) (expand "Vars" 2) (inst 2 "x!3 o p!1")
                       (assert)))))))
                 (then (hide (-1 -5 -6 2 3))
                  (lemma "vars_ext_link_s_subset") (inst?) (replace -3)
                  (assert) (lemma "vars_ext_link_t_subset") (inst?)
                  (replace -4) (assert) (hide-all-but (-1 -2 1))
                  (expand* "subset?" "member") (skosimp)
                  (inst -1 "x!4") (inst -2 "x!4") (assert) (hide 3)
                  (expand* "union" "member"))))))))
           (then (hide (-3 -4 3)) (lemma "position_s_first_diff")
            (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1")
            (assert) (lemma "pos_o_term") (inst -1 "x!3" "p!1" "x!1")
            (assert) (lemma "position_t_first_diff")
            (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1")
            (assert) (lemma "pos_o_term") (inst -1 "x!3" "p!1" "x!2")
            (assert) (hide-all-but (-1 -3 1)) (lemma "ext_preserv_pos")
            (inst -1 "x!3 o p!1" "x!1" "sig!1")
            (lemma "ext_preserv_pos")
            (inst -1 "x!3 o p!1" "x!2" "sig!1") (assert)))))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_sets[position].finite_subset") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((rewrite "vars_of_term_finite")
         (rewrite "vars_of_term_finite"))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_sets[position].finite_subset") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((rewrite "vars_of_term_finite")
         (rewrite "vars_of_term_finite"))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_sets[position].finite_subset") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((rewrite "vars_of_term_finite")
         (rewrite "vars_of_term_finite"))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_sets[position].finite_subset") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((rewrite "vars_of_term_finite")
         (rewrite "vars_of_term_finite"))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_sets[position].finite_subset") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((rewrite "vars_of_term_finite")
         (rewrite "vars_of_term_finite"))))))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (singleton? const-decl "bool" sets nil)
    (dom_o formula-decl nil substitution nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (ext def-decl "term" substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (first_diff def-decl "position" robinsonunification nil)
    (unifiable const-decl "bool" unification nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (dom_ruaEF_subset_union_vars_aux-1 nil 3510458363
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                          Card(right_pos(s,p)))" ("s" "t" "p"))
    (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
      (("1" (expand "robinson_unification_algorithm_aux" 1)
        (("1" (assert)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide -3)
                (("1" (expand* "subset?" "union" "member")
                  (("1" (skosimp)
                    (("1" (hide-all-but -2)
                      (("1" (expand "Dom")
                        (("1" (flatten)
                          (("1" (expand "identity")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (inst -2 "x!1" "x!2" "next_position(x!1, x!2, x!3)")
                (("2" (lemma "robinson_unification_algorithm_aux_TCC8")
                  (("2" (inst -1 "x!1" "x!2" "x!3")
                    (("2" (assert)
                      (("2" (inst -1 "next_position(x!1, x!2, x!3)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "robinson_unification_algorithm_aux" 2)
        (("2" (assert)
          (("2"
            (name-replace "p!1"
             "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))"
             :hide? nil)
            (("2"
              (name-replace "sig!1"
               "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))"
               :hide? nil)
              (("2"
                (name-replace "np"
                 "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)"
                 :hide? nil)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but (-1 -3 -6 2))
                      (("1" (lemma "unifiable_implies_not_fail1")
                        (("1" (inst -1 "x!1" "x!2" "x!3")
                          (("1" (replace -3) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-3 -4 1 2 3))
                      (("2" (lemma "dom_link_of_frst_diff_is")
                        (("2"
                          (inst -1 "p!1" "subtermOF(x!1, x!3)"
                           "subtermOF(x!2, x!3)")
                          (("2" (assert)
                            (("2" (replace -2)
                              (("2"
                                (replace -3)
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (replaces -2)
                                      (("1"
                                        (expand "subset?")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (expand*
                                               "restrict"
                                               "union")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "singleton")
                                                      (("1"
                                                        (expand "Vars")
                                                        (("1"
                                                          (lemma
                                                           "pos_subterm")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (lemma
                                                               "pos_o_term")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (lemma
                                                                   "position_s_first_diff")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "subtermOF(x!1, x!3)"
                                                                     "subtermOF(x!2, x!3)"
                                                                     "p!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -3
                                                                         -5
                                                                         rl)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-2
                                                                            -5
                                                                            1))
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "x!3 o p!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (expand*
                                               "restrict"
                                               "union")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide (1 2))
                                                    (("2"
                                                      (expand
                                                       "singleton")
                                                      (("2"
                                                        (expand "Vars")
                                                        (("2"
                                                          (lemma
                                                           "pos_subterm")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (lemma
                                                               "pos_o_term")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (lemma
                                                                   "position_t_first_diff")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "subtermOF(x!1, x!3)"
                                                                     "subtermOF(x!2, x!3)"
                                                                     "p!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -3
                                                                         -4
                                                                         rl)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-2
                                                                            -4
                                                                            1))
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "x!3 o p!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                       "np")
                      (("3"
                        (lemma
                         "robinson_unification_algorithm_aux_TCC12")
                        (("3" (inst -1 "x!1" "x!2" "x!3")
                          (("3" (assert)
                            (("3" (inst -1 "sig!1")
                              (("3"
                                (assert)
                                (("3"
                                  (replace -5 -1)
                                  (("3"
                                    (inst -1 "np")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (replaces -1)
                                          (("3"
                                            (lemma
                                             "unifiable_preserves_unifiability1")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (replace -3)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (case
                                                     "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))), union(Vars(x!1), Vars(x!2)))")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -6 1))
                                                      (("1"
                                                        (expand
                                                         "subset?")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x!4")
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "x!4")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "vars_ext_link_s_subset")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "x!1"
                                                         "x!2"
                                                         "x!3")
                                                        (("2"
                                                          (replace -4)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "vars_ext_link_t_subset")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x!1"
                                                                 "x!2"
                                                                 "x!3")
                                                                (("2"
                                                                  (replace
                                                                   -5)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -2
                                                                        1))
                                                                      (("2"
                                                                        (expand
                                                                         "subset?")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x!4")
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               "x!4")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   3)
                                                                                  (("2"
                                                                                    (expand*
                                                                                     "union"
                                                                                     "member")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4"
                      (inst -4 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                       "np")
                      (("4"
                        (lemma
                         "robinson_unification_algorithm_aux_TCC12")
                        (("4" (inst -1 "x!1" "x!2" "x!3")
                          (("4" (assert)
                            (("4" (inst -1 "sig!1")
                              (("4"
                                (assert)
                                (("4"
                                  (replace -4 -1)
                                  (("4"
                                    (inst -1 "np")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (hide -1)
                                        (("4"
                                          (lemma
                                           "unifiable_preserves_unifiability1")
                                          (("4"
                                            (inst?)
                                            (("4"
                                              (replace -3)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (case
                                                   "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))),union(Vars(x!1), Vars(x!2)))")
                                                  (("1"
                                                    (case
                                                     "subset?(Dom(sig!1), union(Vars(x!1), Vars(x!2)))")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -2 -7 2))
                                                      (("1"
                                                        (name-replace
                                                         "RU"
                                                         "robinson_unification_algorithm_aux(ext(sig!1)(x!1),
                                                                                      ext(sig!1)(x!2),
                                                                                      np)")
                                                        (("1"
                                                          (case
                                                           "subset?(union(Dom(RU),Dom(sig!1)), union(Vars(x!1), Vars(x!2)))")
                                                          (("1"
                                                            (hide
                                                             (-2
                                                              -3
                                                              -4))
                                                            (("1"
                                                              (lemma
                                                               "dom_o")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (expand*
                                                                   "subset?"
                                                                   "member")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x!4")
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "x!4")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand*
                                                               "subset?"
                                                               "member")
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "x!4")
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "x!4")
                                                                    (("2"
                                                                      (inst
                                                                       -4
                                                                       "x!4")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           (1
                                                                            3))
                                                                          (("2"
                                                                            (expand*
                                                                             "union"
                                                                             "member")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide
                                                       (-1
                                                        -2
                                                        -6
                                                        -7
                                                        2
                                                        3))
                                                      (("2"
                                                        (lemma
                                                         "dom_link_of_frst_diff_is")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "p!1"
                                                           "subtermOF(x!1, x!3)"
                                                           "subtermOF(x!2, x!3)")
                                                          (("2"
                                                            (replace
                                                             -3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("1"
                                                                    (expand*
                                                                     "subset?"
                                                                     "member")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x!4")
                                                                        (("1"
                                                                          (iff)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide
                                                                               (-1
                                                                                -4))
                                                                              (("1"
                                                                                (expand*
                                                                                 "restrict"
                                                                                 "singleton")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "position_s_first_diff")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "p!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "pos_o_term")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "pos_subterm")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       (-4
                                                                                                        -5)
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-4
                                                                                                          -5
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (expand*
                                                                                                           "union"
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "Vars"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "x!3 o p!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (decompose-equality
                                                                   -1)
                                                                  (("2"
                                                                    (expand*
                                                                     "subset?"
                                                                     "member")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x!4")
                                                                        (("2"
                                                                          (iff)
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (hide
                                                                               (-1
                                                                                -3))
                                                                              (("2"
                                                                                (expand*
                                                                                 "restrict"
                                                                                 "singleton")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "position_t_first_diff")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "p!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "pos_o_term")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "pos_subterm")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       -4
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-4
                                                                                                          2))
                                                                                                        (("2"
                                                                                                          (expand*
                                                                                                           "union"
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "Vars"
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "x!3 o p!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide
                                                     (-1 -5 -6 2 3))
                                                    (("2"
                                                      (lemma
                                                       "vars_ext_link_s_subset")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "vars_ext_link_t_subset")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (replace
                                                                   -4)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -2
                                                                        1))
                                                                      (("2"
                                                                        (expand*
                                                                         "subset?"
                                                                         "member")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x!4")
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               "x!4")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   3)
                                                                                  (("2"
                                                                                    (expand*
                                                                                     "union"
                                                                                     "member")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-3 -4 3))
                  (("2" (lemma "position_s_first_diff")
                    (("2"
                      (inst -1 "subtermOF(x!1, x!3)"
                       "subtermOF(x!2, x!3)" "p!1")
                      (("2" (assert)
                        (("2" (lemma "pos_o_term")
                          (("2" (inst -1 "x!3" "p!1" "x!1")
                            (("2" (assert)
                              (("2"
                                (lemma "position_t_first_diff")
                                (("2"
                                  (inst
                                   -1
                                   "subtermOF(x!1, x!3)"
                                   "subtermOF(x!2, x!3)"
                                   "p!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "pos_o_term")
                                      (("2"
                                        (inst -1 "x!3" "p!1" "x!2")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (-1 -3 1))
                                            (("2"
                                              (lemma "ext_preserv_pos")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x!3 o p!1"
                                                 "x!1"
                                                 "sig!1")
                                                (("2"
                                                  (lemma
                                                   "ext_preserv_pos")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "x!3 o p!1"
                                                     "x!2"
                                                     "sig!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "right_pos_subset")
        (("2" (inst?)
          (("2" (lemma "positions_of_terms_finite")
            (("2" (inst?)
              (("2" (lemma "finite_sets[position].finite_subset")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "right_pos_subset")
        (("4" (inst?)
          (("4" (lemma "positions_of_terms_finite")
            (("4" (inst?)
              (("4" (lemma "finite_sets[position].finite_subset")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma "right_pos_subset")
        (("6" (inst?)
          (("6" (lemma "positions_of_terms_finite")
            (("6" (inst?)
              (("6" (lemma "finite_sets[position].finite_subset")
                (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("8" (hide 2)
      (("8" (lemma "right_pos_subset")
        (("8" (inst?)
          (("8" (lemma "positions_of_terms_finite")
            (("8" (inst?)
              (("8" (lemma "finite_sets[position].finite_subset")
                (("8" (inst?) (("8" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide 2)
      (("9" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("10" (hide 2)
      (("10" (lemma "right_pos_subset")
        (("10" (inst?)
          (("10" (lemma "positions_of_terms_finite")
            (("10" (inst?)
              (("10" (lemma "finite_sets[position].finite_subset")
                (("10" (inst?) (("10" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide 2)
      (("11" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (singleton? const-decl "bool" sets nil)
    (dom_o formula-decl nil substitution nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (ext def-decl "term" substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (first_diff def-decl "position" robinsonunification nil)
    (unifiable const-decl "bool" unification nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (dom_ruaEF_subset_union_vars 0
  (dom_ruaEF_subset_union_vars-1 nil 3510458932
   (""
    (then (skosimp) (assert)
     (expand "robinson_unification_algorithm_EF")
     (lemma "dom_ruaEF_subset_union_vars_aux")
     (inst -1 "s!1" "t!1" "empty_seq") (assert))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil))
   shostak))
 (vran_ruaEF_subset_union_aux_TCC1 0
  (vran_ruaEF_subset_union_aux_TCC1-1 nil 3510540476
   (""
    (then (skosimp*) (typepred "p!1") (lemma "position_s_first_diff")
     (inst?) (assert) (lemma "position_t_first_diff") (inst?) (assert)
     (lemma "pos_o_term") (inst -1 "p!1" "pi!1" "s!1")
     (lemma "pos_o_term") (inst -1 "p!1" "pi!1" "t!1") (assert)
     (hide-all-but (-1 -2 1)) (lemma "ext_preserv_pos")
     (inst -1 "p!1 o pi!1" "s!1" "sig1!1") (lemma "ext_preserv_pos")
     (inst -1 "p!1 o pi!1" "t!1" "sig1!1") (assert))
    nil)
   ((subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil))
   nil
   (vran_ruaEF_subset_union_aux subtype
    "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunificationEF.pi)"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.t))(p))}")))
 (vran_ruaEF_subset_union_aux_TCC2 0
  (vran_ruaEF_subset_union_aux_TCC2-1 nil 3510618083
   (""
    (then (skosimp*) (lemma "next_position_is_position")
     (inst -1 "ext(sig1!1)(s!1)" "ext(sig1!1)(t!1)" "p!1 o pi!1")
     (replace -4 -1 rl) (assert) (lemma "next_position_is_position")
     (spread
      (inst -1 "ext(sig1!1)(t!1)" "ext(sig1!1)(s!1)" "p!1 o pi!1")
      ((then (lemma "next_position_commute") (inst?) (assert))
       (then (hide 2) (lemma "vran_ruaEF_subset_union_aux_TCC1")
        (inst?) (assert) (inst -1 "sig1!1") (assert) (prop)))))
    nil)
   ((subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil))
   nil
   (vran_ruaEF_subset_union_aux subtype "robinsonunificationEF.np"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.t))(p))}")))
 (vran_ruaEF_subset_union_aux 0
  (vran_ruaEF_subset_union_aux-1 nil 3510540476
   (""
    (then (skosimp)
     (name-replace "sig!1"
      "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
      :hide? nil)
     (name-replace "pi!1"
      "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
      nil)
     (spread
      (name-replace "np!1"
       "next_position(ext(sig!1)(s!1), ext(sig!1)(t!1), p!1 o pi!1)"
       :hide? nil)
      ((spread
        (name-replace "sig!2"
         "robinson_unification_algorithm_aux(ext(sig!1)(s!1), ext(sig!1)(t!1), np!1)"
         :hide? nil)
        ((then (assert) (replace -2) (replace -1) (prop)
          (expand* "subset?" "union" "difference" "member") (skosimp)
          (spread (split)
           ((then (expand* "VRan" "IUnion") (skosimp) (expand "comp")
             (lemma "dom_o") (inst -1 "sig!2" "sig!1")
             (expand* "subset?" "union" "member") (inst -1 "i!1")
             (assert)
             (spread (split)
              ((spread (case "Dom(sig!1)(i!1)")
                ((then (lemma "dom_ruaEF_subset_union_vars_aux")
                  (inst -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "np!1")
                  (assert) (replace -4)
                  (lemma "unifiable_preserves_unifiability1")
                  (inst -1 "s!1" "t!1" "p!1") (replace -8) (assert)
                  (expand "subset?") (inst -2 "i!1")
                  (expand* "union" "member")
                  (spread (split)
                   ((then (lemma "ext_link_remove_x")
                     (inst -1 "i!1" "s!1" "t!1" "p!1") (replace -9)
                     (assert) (lemma "unifiable_implies_not_fail1")
                     (inst -1 "s!1" "t!1" "p!1") (replace -10) (assert)
                     (expand "member") (propax))
                    (then (lemma "ext_link_remove_x")
                     (inst -1 "i!1" "s!1" "t!1" "p!1") (replace -9)
                     (assert) (lemma "unifiable_implies_not_fail1")
                     (inst -1 "s!1" "t!1" "p!1") (replace -10) (assert)
                     (expand "member") (propax)))))
                 (then (expand "Dom" 1) (flatten) (replace -1)
                  (typepred "i!1") (expand "V") (assert)
                  (hide-all-but (-4 -10 2)) (inst 1 "i!1")
                  (expand "ext") (propax))))
               (spread (case "NOT member(x!1, Vars(sig!1(i!1)))")
                ((then (lemma "var_ext_term_exists_var_term")
                  (inst -1 "sig!1(i!1)" "sig!2" "x!1")
                  (expand "member") (skosimp) (typepred "y!1")
                  (spread (case "Dom(sig!2)(y!1)")
                   ((inst 3 "y!1")
                    (then (expand "Dom" 1) (flatten) (replace -1)
                     (expand "Vars" -4) (skosimp)
                     (spread (case "p!2 = empty_seq")
                      ((then (replace -1) (expand " subtermOF" -5)
                        (rewrite "empty_0" -5) (replace -5 -4)
                        (propax))
                       (then (typepred "p!2")
                        (spread
                         (case "positionsOF(y!1) = only_empty_seq")
                         ((then (replace -1 -2)
                           (expand "only_empty_seq") (propax))
                          (then (hide-all-but (-3 1))
                           (expand* "V" "positionsOF")
                           (assert)))))))))))
                 (then (inst 1 "i!1") (expand "member") (propax)))))))
            (then (expand* "VRan" "IUnion") (skosimp) (lemma "dom_o")
             (inst -1 "sig!2" "sig!1")
             (expand* "subset?" "union" "member") (inst -1 "i!1")
             (assert)
             (spread (split)
              ((spread (case "NOT Dom(sig!1)(i!1)")
                ((then (expand "Dom" 1) (flatten) (expand "comp")
                  (replace -1) (hide-all-but (-2 -9 1))
                  (typepred "i!1") (hide -2) (expand* "V" "ext")
                  (assert) (inst 1 "i!1"))
                 (then (lemma "dom_ruaEF_subset_union_vars_aux")
                  (inst -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "np!1")
                  (assert) (replace -5)
                  (lemma "unifiable_preserves_unifiability1")
                  (inst -1 "s!1" "t!1" "p!1") (replace -9) (assert)
                  (expand* "subset?" "union" "member") (inst -2 "i!1")
                  (assert) (lemma "ext_link_remove_x")
                  (inst -1 "i!1" "s!1" "t!1" "p!1") (replace -10)
                  (assert) (lemma "unifiable_implies_not_fail1")
                  (inst -1 "s!1" "t!1" "p!1") (replace -11) (assert)
                  (expand "member") (prop))))
               (then (lemma "var_ext_term_exists_var_term")
                (expand "comp" -9) (inst -1 "sig!1(i!1)" "sig!2" "x!1")
                (expand "member") (assert) (skosimp)
                (spread (case "Dom(sig!2)(y!1)")
                 ((inst 1 "y!1")
                  (then (expand "Dom" 1) (flatten) (replace -1 -3)
                   (expand "Vars" -3) (skosimp)
                   (spread (case "p!2 = empty_seq")
                    ((then (replace -1 -4) (expand "subtermOF" -4)
                      (rewrite "empty_0" -4) (expand "Dom" -6)
                      (assert))
                     (then (typepred "p!2")
                      (spread
                       (case "positionsOF(y!1) = only_empty_seq")
                       ((then (replace -1) (expand "only_empty_seq")
                         (propax))
                        (then (hide-all-but 1) (typepred "y!1")
                         (expand* "V" "positionsOF")
                         (assert)))))))))))))))))
         (then (assert) (flatten) (hide 2)
          (lemma "robinson_unification_algorithm_aux_TCC11") (inst?)
          (assert) (inst -1 "sig!1")
          (lemma "unifiable_implies_not_fail1") (inst?) (assert)
          (inst -1 "np!1") (assert)
          (spread (prop)
           ((then (replace -1 1) (hide-all-but 1)
             (expand "positionsOF") (lift-if)
             (spread (prop)
              ((then (expand "only_empty_seq") (propax))
               (then (expand "only_empty_seq") (propax))
               (then (expand "union") (flatten) (hide (1 3 4))
                (expand* "member" "only_empty_seq")))))
            (then (replace -1 1) (hide-all-but 1)
             (expand "positionsOF") (lift-if)
             (spread (prop)
              ((then (expand "only_empty_seq") (propax))
               (then (expand "only_empty_seq") (propax))
               (then (expand "union") (flatten) (hide-all-but 2)
                (expand* "member" "only_empty_seq"))))))))))
       (then (assert) (flatten) (hide 2)
        (lemma "robinson_unification_algorithm_aux_TCC10") (inst?)
        (assert) (inst -1 "sig!1")
        (lemma "unifiable_implies_not_fail1") (inst?) (assert)
        (replaces -2)))))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (ext def-decl "term" substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (dom_o formula-decl nil substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (only_empty_seq const-decl "positions" positions nil)
    (var_ext_term_exists_var_term formula-decl nil robinsonunification
     nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (comp const-decl "term" substitution nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (first_diff def-decl "position" robinsonunification nil))
   shostak))
 (dom_ran_ruaEF_disjoint 0
  (dom_ran_ruaEF_disjoint-2 "" 3803849894
   (""
    (spread
     (measure-induct+
      "lex2(Card(union(Vars(s), Vars(t))), Card(right_pos(s,p)))"
      ("s" "t" "p"))
     ((spread (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
       ((then (expand "robinson_unification_algorithm_aux" 1) (assert)
         (lift-if)
         (spread (prop)
          ((then (hide -3) (expand "subset?") (skosimp)
            (hide-all-but -2) (expand* "member" "VRan" "IUnion")
            (skosimp) (typepred "i!1") (hide (-1 -3))
            (expand* "Dom" "identity"))
           (then (inst -2 "x!1" "x!2" "next_position(x!1, x!2, x!3)")
            (lemma "robinson_unification_algorithm_aux_TCC8")
            (inst -1 "x!1" "x!2" "x!3" "next_position(x!1, x!2, x!3)")
            (assert)))))
        (then (expand "robinson_unification_algorithm_aux" 2) (assert)
         (name-replace "p!1"
          "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :hide?
          nil)
         (name-replace "sig!1"
          "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))"
          :hide? nil)
         (spread
          (name-replace "np"
           "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)"
           :hide? nil)
          ((then (lift-if)
            (spread (prop)
             ((then (hide-all-but (-1 -3 -6 2))
               (lemma "unifiable_implies_not_fail1")
               (inst -1 "x!1" "x!2" "x!3") (replace -3) (assert))
              (then (hide-all-but (-3 -4 1 2 3)) (expand "subset?")
               (skosimp*) (expand "member")
               (expand* "VRan" "difference") (expand "member")
               (expand "IUnion") (skosimp*) (expand "union")
               (expand "member")
               (spread (prop)
                ((then (expand "Vars") (skosimp*)
                  (expand "link_of_frst_diff") (replace -3) (lift-if)
                  (spread (prop)
                   ((then (decompose-equality -1) (inst -1 "i!1")
                     (lift-if)
                     (spread (prop)
                      ((then (typepred "p!2") (replace -3 - rl)
                        (lemma "position_t_first_diff")
                        (inst -1 "subtermOF(x!1, x!3)"
                         "subtermOF(x!2, x!3)" "p!1")
                        (replace -7) (hide-all-but (-1 -2 -6 3))
                        (lemma "pos_o_term")
                        (inst -1 "p!1" "p!2" "subtermOF(x!2, x!3)")
                        (assert) (lemma "pos_o_term")
                        (inst -1 "x!3" "p!1 o p!2" "x!2") (assert)
                        (lemma "pos_subterm")
                        (inst -1 "p!1" "p!2" "subtermOF(x!2, x!3)")
                        (assert) (lemma "pos_subterm")
                        (inst -1 "x!3" "p!1 o p!2" "x!2") (assert)
                        (replace -1 -2 rl) (replace -2 -7 rl)
                        (hide-all-but (-7 1))
                        (inst 1 "x!3 o (p!1 o p!2)"))
                       (then (hide-all-but -1) (typepred "i!1")
                        (expand "Dom") (assert)))))
                    (assert)
                    (then (decompose-equality -1) (inst -1 "i!1")
                     (lift-if)
                     (spread (prop)
                      ((then (typepred "p!2") (replace -3 - rl)
                        (lemma "position_s_first_diff")
                        (inst -1 "subtermOF(x!1, x!3)"
                         "subtermOF(x!2, x!3)" "p!1")
                        (assert) (hide-all-but (-1 -2 -6 3))
                        (lemma "pos_o_term")
                        (inst -1 "p!1" "p!2" "subtermOF(x!1, x!3)")
                        (assert) (lemma "pos_o_term")
                        (inst -1 "x!3" "p!1 o p!2" "x!1") (assert)
                        (lemma "pos_subterm")
                        (inst -1 "p!1" "p!2" "subtermOF(x!1, x!3)")
                        (assert) (lemma "pos_subterm")
                        (inst -1 "x!3" "p!1 o p!2" "x!1") (assert)
                        (replace -1 -2 rl) (replace -2 -7 rl)
                        (hide-all-but (-7 1))
                        (inst 1 "x!3 o (p!1 o p!2)"))
                       (then (hide-all-but -1) (typepred "i!1")
                        (expand "Dom") (assert)))))
                    (assert) (assert))))
                 (then (typepred "x!4") (expand "V") (copy -4)
                  (expand "link_of_frst_diff" -1) (replace -6)
                  (lift-if)
                  (spread (prop)
                   ((then (decompose-equality -1) (inst -1 "x!4")
                     (lift-if)
                     (spread (prop)
                      ((then (expand "member") (replace -2 1)
                        (replace -1 1 rl) (typepred "i!1")
                        (lemma "dom_link_of_frst_diff_is")
                        (inst -1 "p!1" "subtermOF(x!1, x!3)"
                         "subtermOF(x!2, x!3)")
                        (replace -10 -1) (assert) (assert)
                        (decompose-equality -1) (inst -1 "i!1")
                        (expand* "restrict" "singleton") (assert))
                       (then (expand "Dom") (assert)))))
                    (assert)
                    (then (decompose-equality -1) (inst -1 "x!4")
                     (lift-if)
                     (spread (prop)
                      ((then (expand "member") (hide -3)
                        (lemma "dom_link_of_frst_diff_is")
                        (inst -1 "p!1" "subtermOF(x!1, x!3)"
                         "subtermOF(x!2, x!3)")
                        (replace -7 -1) (replace -8 -1) (assert)
                        (assert) (decompose-equality -1)
                        (inst -1 "i!1")
                        (expand* "restrict" "singleton") (assert))
                       (then (expand "Dom") (assert)))))
                    (assert) (assert)))))))
              (then (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
               (replace -1)
               (lemma "robinson_unification_algorithm_aux_TCC12")
               (inst -1 "x!1" "x!2" "x!3") (assert) (inst -1 "sig!1")
               (assert) (replace -5 -1) (inst -1 "np") (assert)
               (hide -1) (hide -1)
               (lemma "unifiable_preserves_unifiability1") (inst?)
               (replace -3) (assert)
               (expand* "subset?" "difference" "union" "member")
               (skosimp) (inst -6 "x!4") (assert)
               (spread (prop)
                ((then (lemma "vars_ext_link_s_subset") (inst?)
                  (replace -6) (assert) (expand* "subset?" "member")
                  (inst -1 "x!4") (assert) (hide-all-but (-1 1 2))
                  (expand* "union" "member"))
                 (then (lemma "vars_ext_link_t_subset") (inst?)
                  (replace -6) (assert) (expand* "subset?" "member")
                  (inst -1 "x!4") (assert) (hide-all-but (-1 1 2))
                  (expand* "union" "member")))))
              (then
               (name-replace "sig!2"
                "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                :hide? nil)
               (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
               (lemma "robinson_unification_algorithm_aux_TCC12")
               (inst -1 "x!1" "x!2" "x!3") (assert) (inst -1 "sig!1")
               (assert) (replace -5) (inst -1 "np") (assert) (hide -1)
               (replace -1) (lemma "unifiable_preserves_unifiability1")
               (inst -1 "x!1" "x!2" "x!3") (replace -4) (assert)
               (expand* "subset?" "difference" "union" "member")
               (skosimp) (lemma "vran_ruaEF_subset_union_aux")
               (inst -1 "x!1" "x!2" "x!3") (replace -7) (replace -6)
               (assert) (replace -5) (replace -3) (expand "subset?")
               (inst -1 "x!4") (expand* "difference" "union" "member")
               (spread (prop)
                ((then (inst -8 "x!4") (assert)
                  (spread (prop)
                   ((then (hide-all-but (-1 -7 1 5))
                     (lemma "vars_ext_link_s_subset")
                     (inst -1 "x!1" "x!2" "x!3") (replace -3) (assert)
                     (expand "subset?") (inst -1 "x!4")
                     (expand* "union" "member"))
                    (then (hide-all-but (-1 -7 2 5))
                     (lemma "vars_ext_link_t_subset")
                     (inst -1 "x!1" "x!2" "x!3") (replace -3) (assert)
                     (expand "subset?") (inst -1 "x!4")
                     (expand* "union" "member")))))
                 (then (inst -9 "x!4") (assert)
                  (spread (prop)
                   ((then (lemma "dom_o") (inst -1 "sig!2" "sig!1")
                     (expand "subset?") (inst -1 "x!4")
                     (expand* "union" "member") (assert)
                     (lemma "ext_link_remove_x")
                     (inst -1 "x!4" "x!1" "x!2" "x!3") (replace -10)
                     (assert) (expand "member") (propax))
                    (then (lemma "dom_o") (inst -1 "sig!2" "sig!1")
                     (expand "subset?") (inst -1 "x!4")
                     (expand* "union" "member") (assert)
                     (lemma "ext_link_remove_x")
                     (inst -1 "x!4" "x!1" "x!2" "x!3") (replace -10)
                     (assert) (expand "member") (propax)))))
                 (then (lemma "dom_link_of_frst_diff_is")
                  (inst -1 "p!1" "subtermOF(x!1, x!3)"
                   "subtermOF(x!2, x!3)")
                  (assert) (replace -7)
                  (expand* "restrict" "singleton") (expand "VRan" -2)
                  (expand "IUnion") (skosimp)
                  (spread (prop)
                   ((then (decompose-equality -2) (inst -1 "i!1")
                     (assert) (replace -8 -3 rl)
                     (expand "link_of_frst_diff" -3) (replace -9)
                     (spread (prop)
                      ((then (expand "Vars" (-1 3)) (skosimp)
                        (typepred "p!2")
                        (lemma "position_t_first_diff")
                        (inst -1 "subtermOF(x!1, x!3)"
                         "subtermOF(x!2, x!3)" "p!1")
                        (replace -11) (hide-all-but (-1 -2 -3 3))
                        (lemma "pos_o_term")
                        (inst -1 "p!1" "p!2" "subtermOF(x!2, x!3)")
                        (assert) (lemma "pos_o_term")
                        (inst -1 "x!3" "p!1 o p!2" "x!2") (assert)
                        (lemma "pos_subterm")
                        (inst -1 "p!1" "p!2" "subtermOF(x!2, x!3)")
                        (assert) (lemma "pos_subterm")
                        (inst -1 "x!3" "p!1 o p!2" "x!2") (assert)
                        (replace -1 -2 rl) (replace -2 -7 rl)
                        (hide-all-but (-7 1))
                        (inst 1 "x!3 o (p!1 o p!2)"))
                       (then (expand "link_of_frst_diff" -9)
                        (assert)))))
                    (spread (decompose-equality -1)
                     ((then (inst -1 "i!1") (assert) (replace -7 -2 rl)
                       (expand "link_of_frst_diff" -2) (replace -8)
                       (spread
                        (case "vars?(subtermOF(subtermOF(x!2, x!3), p!1))")
                        ((then (assert)
                          (spread (prop)
                           ((then (expand "Vars" (-1 3)) (skosimp)
                             (typepred "p!2")
                             (lemma "position_s_first_diff")
                             (inst -1 "subtermOF(x!1, x!3)"
                              "subtermOF(x!2, x!3)" "p!1")
                             (assert) (hide-all-but (-1 -2 -3 3))
                             (lemma "pos_o_term")
                             (inst -1 "p!1" "p!2"
                              "subtermOF(x!1, x!3)")
                             (assert) (lemma "pos_o_term")
                             (inst -1 "x!3" "p!1 o p!2" "x!1") (assert)
                             (lemma "pos_subterm")
                             (inst -1 "p!1" "p!2"
                              "subtermOF(x!1, x!3)")
                             (assert) (lemma "pos_subterm")
                             (inst -1 "x!3" "p!1 o p!2" "x!1") (assert)
                             (replace -1 -2 rl) (replace -2 -7 rl)
                             (hide-all-but (-7 1))
                             (inst 1 "x!3 o (p!1 o p!2)"))
                            (then (expand "link_of_frst_diff" -9)
                             (assert)))))
                         (then (hide-all-but (-8 -10 1 2))
                          (lemma "first_diff_unifiable_vars")
                          (inst -1 "subtermOF(x!1, x!3)"
                           "subtermOF(x!2, x!3)" "p!1")
                          (assert) (hide-all-but (-2 1))
                          (expand "unifiable") (skosimp*)
                          (inst 1 "sigma!1")
                          (lemma "unifiable_terms_unifiable_args")
                          (inst -1 "sigma!1" "x!1" "x!2" "x!3")
                          (expand* "member" "U") (assert)))))
                      (then (hide-all-but (-10 1))
                       (lemma "position_t_first_diff")
                       (inst -1 "subtermOF(x!1, x!3)"
                        "subtermOF(x!2, x!3)" "p!1")
                       (assert)))))))
                 (then (lemma "dom_o") (inst -1 "sig!2" "sig!1")
                  (expand "subset?") (inst -1 "x!4") (expand "member")
                  (assert) (expand* "union" "member")
                  (hide-all-but (-1 -3 -8 3 4))
                  (lemma "dom_ran_link_disjoint")
                  (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)")
                  (replace -4) (assert) (expand* "VRan" "IUnion")
                  (skosimp)
                  (spread (inst -1 "x!4" "sig!1(i!1)")
                   ((then (hide-all-but (-2 1)) (expand "member")
                     (propax))
                    (then (expand* "member" "Ran") (inst 1 "i!1")
                     (typepred "i!1") (expand "member") (propax))
                    (then (expand "member") (propax)))))))))))
           (then (hide (-3 3)) (lemma "position_s_first_diff")
            (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1")
            (assert) (lemma "pos_o_term") (inst -1 "x!3" "p!1" "x!1")
            (assert) (rewrite "ext_preserv_pos")
            (lemma "position_t_first_diff")
            (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1")
            (assert) (lemma "pos_o_term") (inst -1 "x!3" "p!1" "x!2")
            (assert) (rewrite "ext_preserv_pos")))))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_sets[position].finite_subset") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((rewrite "vars_of_term_finite")
         (rewrite "vars_of_term_finite"))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_sets[position].finite_subset") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((rewrite "vars_of_term_finite")
         (rewrite "vars_of_term_finite"))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_sets[position].finite_subset") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((rewrite "vars_of_term_finite")
         (rewrite "vars_of_term_finite"))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_sets[position].finite_subset") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((rewrite "vars_of_term_finite")
         (rewrite "vars_of_term_finite"))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_sets[position].finite_subset") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((rewrite "vars_of_term_finite")
         (rewrite "vars_of_term_finite"))))))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (member const-decl "bool" sets nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (dom_o formula-decl nil substitution nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (first_diff_unifiable_vars formula-decl nil robinsonunification
     nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (Ran const-decl "set[term[variable, symbol, arity]]" substitution
     nil)
    (dom_ran_link_disjoint formula-decl nil robinsonunification nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "term" substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (first_diff def-decl "position" robinsonunification nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (difference const-decl "set" sets nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (subset? const-decl "bool" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (dom_ran_ruaEF_disjoint-1 nil 3510565835
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                            Card(right_pos(s,p)))" ("s" "t" "p"))
    (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
      (("1" (expand "robinson_unification_algorithm_aux" 1)
        (("1" (assert)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide -3)
                (("1" (expand "subset?")
                  (("1" (skosimp)
                    (("1" (hide-all-but -2)
                      (("1" (expand* "member" "VRan" "IUnion")
                        (("1" (skosimp)
                          (("1" (typepred "i!1")
                            (("1" (hide (-1 -3))
                              (("1"
                                (expand* "Dom" "identity")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (inst -2 "x!1" "x!2" "next_position(x!1, x!2, x!3)")
                (("2" (lemma "robinson_unification_algorithm_aux_TCC8")
                  (("2" (inst -1 "x!1" "x!2" "x!3")
                    (("2" (assert)
                      (("2" (inst -1 "next_position(x!1, x!2, x!3)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "robinson_unification_algorithm_aux" 2)
        (("2" (assert)
          (("2"
            (name-replace "p!1"
             "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))"
             :hide? nil)
            (("2"
              (name-replace "sig!1"
               "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))"
               :hide? nil)
              (("2"
                (name-replace "np"
                 "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)"
                 :hide? nil)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but (-1 -3 -6 2))
                      (("1" (lemma "unifiable_implies_not_fail1")
                        (("1" (inst -1 "x!1" "x!2" "x!3")
                          (("1" (replace -3) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-3 -4 1 2 3))
                      (("2" (expand "subset?")
                        (("2" (skosimp*)
                          (("2" (expand "member")
                            (("2" (expand* "VRan" "difference")
                              (("2"
                                (expand "member")
                                (("2"
                                  (expand "IUnion")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (expand "union")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "Vars")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (expand
                                                 "link_of_frst_diff")
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "i!1")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (typepred
                                                                 "p!2")
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -
                                                                   rl)
                                                                  (("1"
                                                                    (lemma
                                                                     "position_t_first_diff")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "subtermOF(x!1, x!3)"
                                                                       "subtermOF(x!2, x!3)"
                                                                       "p!1")
                                                                      (("1"
                                                                        (replace
                                                                         -7)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2
                                                                            -6
                                                                            3))
                                                                          (("1"
                                                                            (lemma
                                                                             "pos_o_term")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p!1"
                                                                               "p!2"
                                                                               "subtermOF(x!2, x!3)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "pos_o_term")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x!3"
                                                                                     "p!1 o p!2"
                                                                                     "x!2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "pos_subterm")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "p!1"
                                                                                           "p!2"
                                                                                           "subtermOF(x!2, x!3)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "pos_subterm")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "p!1 o p!2"
                                                                                                 "x!2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     -2
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -7
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-7
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "x!3 o (p!1 o p!2)")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 -1)
                                                                (("2"
                                                                  (typepred
                                                                   "i!1")
                                                                  (("2"
                                                                    (expand
                                                                     "Dom")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (decompose-equality
                                                         -1)
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "i!1")
                                                          (("3"
                                                            (lift-if)
                                                            (("3"
                                                              (prop)
                                                              (("1"
                                                                (typepred
                                                                 "p!2")
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -
                                                                   rl)
                                                                  (("1"
                                                                    (lemma
                                                                     "position_s_first_diff")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "subtermOF(x!1, x!3)"
                                                                       "subtermOF(x!2, x!3)"
                                                                       "p!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2
                                                                            -6
                                                                            3))
                                                                          (("1"
                                                                            (lemma
                                                                             "pos_o_term")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p!1"
                                                                               "p!2"
                                                                               "subtermOF(x!1, x!3)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "pos_o_term")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x!3"
                                                                                     "p!1 o p!2"
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "pos_subterm")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "p!1"
                                                                                           "p!2"
                                                                                           "subtermOF(x!1, x!3)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "pos_subterm")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "p!1 o p!2"
                                                                                                 "x!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     -2
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -7
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-7
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "x!3 o (p!1 o p!2)")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 -1)
                                                                (("2"
                                                                  (typepred
                                                                   "i!1")
                                                                  (("2"
                                                                    (expand
                                                                     "Dom")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("5"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "x!4")
                                            (("2"
                                              (expand "V")
                                              (("2"
                                                (copy -4)
                                                (("2"
                                                  (expand
                                                   "link_of_frst_diff"
                                                   -1)
                                                  (("2"
                                                    (replace -6)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (decompose-equality
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x!4")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       rl)
                                                                      (("1"
                                                                        (typepred
                                                                         "i!1")
                                                                        (("1"
                                                                          (lemma
                                                                           "dom_link_of_frst_diff_is")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p!1"
                                                                             "subtermOF(x!1, x!3)"
                                                                             "subtermOF(x!2, x!3)")
                                                                            (("1"
                                                                              (replace
                                                                               -10
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (expand*
                                                                                         "restrict"
                                                                                         "singleton")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "Dom")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (decompose-equality
                                                           -1)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "x!4")
                                                            (("3"
                                                              (lift-if)
                                                              (("3"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (hide
                                                                     -3)
                                                                    (("1"
                                                                      (lemma
                                                                       "dom_link_of_frst_diff_is")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p!1"
                                                                         "subtermOF(x!1, x!3)"
                                                                         "subtermOF(x!2, x!3)")
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -8
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "i!1")
                                                                                    (("1"
                                                                                      (expand*
                                                                                       "restrict"
                                                                                       "singleton")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "Dom")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                       "np")
                      (("3" (replace -1)
                        (("3"
                          (lemma
                           "robinson_unification_algorithm_aux_TCC12")
                          (("3" (inst -1 "x!1" "x!2" "x!3")
                            (("3" (assert)
                              (("3"
                                (inst -1 "sig!1")
                                (("3"
                                  (assert)
                                  (("3"
                                    (replace -5 -1)
                                    (("3"
                                      (inst -1 "np")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide -1)
                                          (("3"
                                            (hide -1)
                                            (("3"
                                              (lemma
                                               "unifiable_preserves_unifiability1")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (replace -3)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand*
                                                       "subset?"
                                                       "difference"
                                                       "union"
                                                       "member")
                                                      (("3"
                                                        (skosimp)
                                                        (("3"
                                                          (inst
                                                           -6
                                                           "x!4")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (prop)
                                                              (("1"
                                                                (lemma
                                                                 "vars_ext_link_s_subset")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replace
                                                                     -6)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand*
                                                                         "subset?"
                                                                         "member")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "x!4")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1
                                                                                2))
                                                                              (("1"
                                                                                (expand*
                                                                                 "union"
                                                                                 "member")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "vars_ext_link_t_subset")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (replace
                                                                     -6)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand*
                                                                         "subset?"
                                                                         "member")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "x!4")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1
                                                                                2))
                                                                              (("2"
                                                                                (expand*
                                                                                 "union"
                                                                                 "member")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4"
                      (name-replace "sig!2"
                       "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                       :hide? nil)
                      (("4"
                        (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                         "np")
                        (("4"
                          (lemma
                           "robinson_unification_algorithm_aux_TCC12")
                          (("4" (inst -1 "x!1" "x!2" "x!3")
                            (("4" (assert)
                              (("4"
                                (inst -1 "sig!1")
                                (("4"
                                  (assert)
                                  (("4"
                                    (replace -5)
                                    (("4"
                                      (inst -1 "np")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (hide -1)
                                          (("4"
                                            (replace -1)
                                            (("4"
                                              (lemma
                                               "unifiable_preserves_unifiability1")
                                              (("4"
                                                (inst
                                                 -1
                                                 "x!1"
                                                 "x!2"
                                                 "x!3")
                                                (("4"
                                                  (replace -4)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (expand*
                                                       "subset?"
                                                       "difference"
                                                       "union"
                                                       "member")
                                                      (("4"
                                                        (skosimp)
                                                        (("4"
                                                          (lemma
                                                           "vran_ruaEF_subset_union_aux")
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "x!2"
                                                             "x!3")
                                                            (("4"
                                                              (replace
                                                               -7)
                                                              (("4"
                                                                (replace
                                                                 -6)
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (replace
                                                                     -5)
                                                                    (("4"
                                                                      (replace
                                                                       -3)
                                                                      (("4"
                                                                        (expand
                                                                         "subset?")
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "x!4")
                                                                          (("4"
                                                                            (expand*
                                                                             "difference"
                                                                             "union"
                                                                             "member")
                                                                            (("4"
                                                                              (prop)
                                                                              (("1"
                                                                                (inst
                                                                                 -8
                                                                                 "x!4")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -7
                                                                                        1
                                                                                        5))
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "vars_ext_link_s_subset")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!1"
                                                                                           "x!2"
                                                                                           "x!3")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "subset?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!4")
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     "union"
                                                                                                     "member")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -7
                                                                                        2
                                                                                        5))
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "vars_ext_link_t_subset")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!1"
                                                                                           "x!2"
                                                                                           "x!3")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subset?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!4")
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     "union"
                                                                                                     "member")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -9
                                                                                 "x!4")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "dom_o")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "sig!2"
                                                                                         "sig!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!4")
                                                                                            (("1"
                                                                                              (expand*
                                                                                               "union"
                                                                                               "member")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "ext_link_remove_x")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x!4"
                                                                                                     "x!1"
                                                                                                     "x!2"
                                                                                                     "x!3")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -10)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "dom_o")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "sig!2"
                                                                                         "sig!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!4")
                                                                                            (("2"
                                                                                              (expand*
                                                                                               "union"
                                                                                               "member")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "ext_link_remove_x")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x!4"
                                                                                                     "x!1"
                                                                                                     "x!2"
                                                                                                     "x!3")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -10)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (lemma
                                                                                 "dom_link_of_frst_diff_is")
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "p!1"
                                                                                   "subtermOF(x!1, x!3)"
                                                                                   "subtermOF(x!2, x!3)")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (replace
                                                                                       -7)
                                                                                      (("3"
                                                                                        (expand*
                                                                                         "restrict"
                                                                                         "singleton")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "VRan"
                                                                                           -2)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "IUnion")
                                                                                            (("3"
                                                                                              (skosimp)
                                                                                              (("3"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -8
                                                                                                         -3
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "link_of_frst_diff"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -9)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "Vars"
                                                                                                                 (-1
                                                                                                                  3))
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "p!2")
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "position_t_first_diff")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "subtermOF(x!1, x!3)"
                                                                                                                         "subtermOF(x!2, x!3)"
                                                                                                                         "p!1")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -11)
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (-1
                                                                                                                              -2
                                                                                                                              -3
                                                                                                                              3))
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "pos_o_term")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "p!1"
                                                                                                                                 "p!2"
                                                                                                                                 "subtermOF(x!2, x!3)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "pos_o_term")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "x!3"
                                                                                                                                       "p!1 o p!2"
                                                                                                                                       "x!2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "pos_subterm")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "p!1"
                                                                                                                                             "p!2"
                                                                                                                                             "subtermOF(x!2, x!3)")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "pos_subterm")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "x!3"
                                                                                                                                                   "p!1 o p!2"
                                                                                                                                                   "x!2")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       -2
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2
                                                                                                                                                         -7
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           (-7
                                                                                                                                                            1))
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             1
                                                                                                                                                             "x!3 o (p!1 o p!2)")
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "link_of_frst_diff"
                                                                                                                 -9)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (decompose-equality
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -7
                                                                                                         -2
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "link_of_frst_diff"
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -8)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "vars?(subtermOF(subtermOF(x!2, x!3), p!1))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "Vars"
                                                                                                                     (-1
                                                                                                                      3))
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "p!2")
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "position_s_first_diff")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "subtermOF(x!1, x!3)"
                                                                                                                             "subtermOF(x!2, x!3)"
                                                                                                                             "p!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -3
                                                                                                                                  3))
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "pos_o_term")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "p!1"
                                                                                                                                     "p!2"
                                                                                                                                     "subtermOF(x!1, x!3)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "pos_o_term")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "x!3"
                                                                                                                                           "p!1 o p!2"
                                                                                                                                           "x!1")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "pos_subterm")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "p!1"
                                                                                                                                                 "p!2"
                                                                                                                                                 "subtermOF(x!1, x!3)")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "pos_subterm")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x!3"
                                                                                                                                                       "p!1 o p!2"
                                                                                                                                                       "x!1")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           -2
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -2
                                                                                                                                                             -7
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               (-7
                                                                                                                                                                1))
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 1
                                                                                                                                                                 "x!3 o (p!1 o p!2)")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "link_of_frst_diff"
                                                                                                                     -9)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 (-8
                                                                                                                  -10
                                                                                                                  1
                                                                                                                  2))
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "first_diff_unifiable_vars")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "subtermOF(x!1, x!3)"
                                                                                                                     "subtermOF(x!2, x!3)"
                                                                                                                     "p!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-2
                                                                                                                          1))
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "unifiable")
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "sigma!1")
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "unifiable_terms_unifiable_args")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "sigma!1"
                                                                                                                                   "x!1"
                                                                                                                                   "x!2"
                                                                                                                                   "x!3")
                                                                                                                                  (("2"
                                                                                                                                    (expand*
                                                                                                                                     "member"
                                                                                                                                     "U")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-10
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "position_t_first_diff")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "subtermOF(x!1, x!3)"
                                                                                                         "subtermOF(x!2, x!3)"
                                                                                                         "p!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (lemma
                                                                                 "dom_o")
                                                                                (("4"
                                                                                  (inst
                                                                                   -1
                                                                                   "sig!2"
                                                                                   "sig!1")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "subset?")
                                                                                    (("4"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!4")
                                                                                      (("4"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (expand*
                                                                                             "union"
                                                                                             "member")
                                                                                            (("4"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -3
                                                                                                -8
                                                                                                3
                                                                                                4))
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 "dom_ran_link_disjoint")
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "subtermOF(x!1, x!3)"
                                                                                                   "subtermOF(x!2, x!3)")
                                                                                                  (("4"
                                                                                                    (replace
                                                                                                     -4)
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      (("4"
                                                                                                        (expand*
                                                                                                         "VRan"
                                                                                                         "IUnion")
                                                                                                        (("4"
                                                                                                          (skosimp)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x!4"
                                                                                                             "sig!1(i!1)")
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (-2
                                                                                                                1))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "member")
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand*
                                                                                                               "member"
                                                                                                               "Ran")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "i!1")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "i!1")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-3 3))
                  (("2" (lemma "position_s_first_diff")
                    (("2"
                      (inst -1 "subtermOF(x!1, x!3)"
                       "subtermOF(x!2, x!3)" "p!1")
                      (("2" (assert)
                        (("2" (lemma "pos_o_term")
                          (("2" (inst -1 "x!3" "p!1" "x!1")
                            (("2" (assert)
                              (("2"
                                (rewrite "ext_preserv_pos")
                                (("2"
                                  (lemma "position_t_first_diff")
                                  (("2"
                                    (inst
                                     -1
                                     "subtermOF(x!1, x!3)"
                                     "subtermOF(x!2, x!3)"
                                     "p!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "pos_o_term")
                                        (("2"
                                          (inst -1 "x!3" "p!1" "x!2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite
                                               "ext_preserv_pos")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "right_pos_subset")
        (("2" (inst?)
          (("2" (lemma "positions_of_terms_finite")
            (("2" (inst?)
              (("2" (lemma "finite_sets[position].finite_subset")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "right_pos_subset")
        (("4" (inst?)
          (("4" (lemma "positions_of_terms_finite")
            (("4" (inst?)
              (("4" (lemma "finite_sets[position].finite_subset")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma "right_pos_subset")
        (("6" (inst?)
          (("6" (lemma "positions_of_terms_finite")
            (("6" (inst?)
              (("6" (lemma "finite_sets[position].finite_subset")
                (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("8" (hide 2)
      (("8" (lemma "right_pos_subset")
        (("8" (inst?)
          (("8" (lemma "positions_of_terms_finite")
            (("8" (inst?)
              (("8" (lemma "finite_sets[position].finite_subset")
                (("8" (inst?) (("8" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide 2)
      (("9" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil)
     ("10" (hide 2)
      (("10" (lemma "right_pos_subset")
        (("10" (inst?)
          (("10" (lemma "positions_of_terms_finite")
            (("10" (inst?)
              (("10" (lemma "finite_sets[position].finite_subset")
                (("10" (inst?) (("10" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide 2)
      (("11" (rewrite "finite_union")
        (("1" (rewrite "vars_of_term_finite") nil nil)
         ("2" (rewrite "vars_of_term_finite") nil nil))
        nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (member const-decl "bool" sets nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (dom_o formula-decl nil substitution nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (first_diff_unifiable_vars formula-decl nil robinsonunification
     nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (Ran const-decl "set[term[variable, symbol, arity]]" substitution
     nil)
    (dom_ran_link_disjoint formula-decl nil robinsonunification nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "term" substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (first_diff def-decl "position" robinsonunification nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (difference const-decl "set" sets nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (subset? const-decl "bool" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak))
 (ruaEF_fails_iff_non_unifiable_aux_TCC1 0
  (ruaEF_fails_iff_non_unifiable_aux_TCC1-1 nil 3514128796
   (""
    (then (skosimp*) (hide -1) (lemma "app_term")
     (inst -1 "p!1" "p1!1" "s!1") (assert))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (app_term formula-decl nil subterm nil))
   nil
   (ruaEF_fails_iff_non_unifiable_aux subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (ruaEF_fails_iff_non_unifiable_aux_TCC2 0
  (ruaEF_fails_iff_non_unifiable_aux_TCC2-1 nil 3514128796
   (""
    (then (skosimp*) (hide -1) (lemma "app_term")
     (inst -1 "p!1" "p1!1" "t!1") (assert))
    nil)
   ((position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (app_term formula-decl nil subterm nil))
   nil
   (ruaEF_fails_iff_non_unifiable_aux subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (ruaEF_fails_iff_non_unifiable_aux 0
  (ruaEF_fails_iff_non_unifiable_aux-3 "" 3803852443
   (""
    (spread
     (measure-induct+
      "lex2(Card(union(Vars(s), Vars(t))), Card(right_pos(s,p)))"
      ("s" "t" "p"))
     ((spread (split)
       ((then (prop) (expand "robinson_unification_algorithm_aux" 2)
         (spread (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
          ((then (assert) (lift-if)
            (spread (prop)
             ((spread (case "x!3 = empty_seq")
               ((then (hide -2 -4 -5 -6 1) (replaces -1)
                 (expand "subtermOF") (rewrite "empty_0")
                 (expand* "unifiable" "unifier")
                 (spread (inst 1 "identity")
                  ((assert) (rewrite "iden_subs"))))
                (then (hide -3) (lemma "next_pos_empty_equal_subterm")
                 (spread (inst -1 "x!1" "x!2" "x!3")
                  ((then (assert)
                    (spread (split)
                     ((then (lemma "equal_term")
                       (inst -1 "x!1" "x!2" "x!3") (ground)
                       (hide-all-but (-1 3))
                       (expand* "unifiable" "unifier")
                       (inst 1 "identity") (rewrite "iden_subs"))
                      (propax))))
                   (assert))))))
              (then
               (name-replace "np" "next_position(x!1, x!2, x!3)" :hide?
                nil)
               (inst -3 "x!1" "x!2" "np")
               (lemma "robinson_unification_algorithm_aux_TCC8")
               (inst -1 "x!1" "x!2" "x!3" "np") (assert) (hide -1)
               (spread (split)
                ((then (skosimp) (lemma "next_pos_equal_subterm")
                  (spread (inst -1 "x!1" "x!2" "x!3")
                   ((then (assert) (replace -3) (prop) (inst -1 "q!1")
                     (assert))
                    (then (hide-all-but (-2 1 3)) (flatten)
                     (replaces -1) (expand "next_position")
                     (assert)))))
                 (then (skosimp) (lemma "child_np_child_p")
                  (inst -1 "x!1" "x!2" "x!3" "p1!1") (replace -3)
                  (inst -6 "p1!1") (assert))))))))
           (then (assert)
            (name-replace "sig!1"
             "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
             :hide? nil)
            (name-replace "fd"
             "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
             :hide? nil)
            (spread
             (name-replace "np"
              "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
              :hide? nil)
             ((spread
               (name-replace "sig!2"
                "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                :hide? nil)
               ((then (lift-if)
                 (spread (prop)
                  ((then (hide -6)
                    (lemma "np_p_o_fd_empty_unifiable_term")
                    (inst -1 "x!1" "x!2" "x!3") (replace -5)
                    (replace -6) (assert) (assert)
                    (spread (split)
                     ((then (hide-all-but (-1 3))
                       (expand* "unifiable" "unifier")
                       (inst 1 "sig!1"))
                      (propax) (propax))))
                   (then
                    (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
                    (lemma "robinson_unification_algorithm_aux_TCC12")
                    (inst -1 "x!1" "x!2" "x!3") (replace -2) (assert)
                    (replace -5) (replace -4) (inst -1 "sig!1")
                    (assert) (replace -3) (inst -1 "np") (assert)
                    (hide -1)
                    (spread (prop)
                     ((then (hide-all-but (-1 6))
                       (expand* "unifiable" "unifier") (skosimp)
                       (spread (inst 1 "comp(sigma!1, sig!1)")
                        ((then (rewrite "ext_o") (expand "o") (propax))
                         (rewrite "subs_o"))))
                      (then (lemma "np_p_o_fd_equal_subterm")
                       (inst -1 "x!1" "x!2" "x!3") (replace -5)
                       (replace -4) (assert) (ground) (replace -3)
                       (propax))
                      (then (hide -1 -5 2 3) (skosimp)
                       (lemma "child_np_child_p")
                       (inst -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                        "x!3 o fd" "p1!1")
                       (replace -3) (assert)
                       (spread (case "x!3 <= p1!1")
                        ((then (lemma "fd_equal_symbol")
                          (inst -1 "subtermOF(x!1, x!3)"
                           "subtermOF(x!2, x!3)")
                          (replace -6) (assert) (expand "<=") (skosimp)
                          (spread (inst -1 "p1!2")
                           ((spread (split)
                             ((then (lemma "pos_subterm")
                               (inst -1 "x!3" "p1!2" "x!1")
                               (lemma "pos_o_term")
                               (inst -1 "x!3" "p1!2" "x!1") (assert)
                               (spread
                                (split -1)
                                ((then
                                  (assert)
                                  (replace -2 -3 rl)
                                  (replace -4 -3 rl)
                                  (lemma "pos_subterm")
                                  (inst -1 "x!3" "p1!2" "x!2")
                                  (lemma "pos_o_term")
                                  (inst -1 "x!3" "p1!2" "x!2")
                                  (assert)
                                  (spread
                                   (split -1)
                                   ((then
                                     (assert)
                                     (replace -2 -5 rl)
                                     (replace -6 -5 rl)
                                     (lemma "ext_preserve_symbol")
                                     (inst-cp -1 "x!1" "sig!1" "p1!1")
                                     (inst -1 "x!2" "sig!1" "p1!1")
                                     (spread
                                      (split -1)
                                      ((spread
                                        (split -2)
                                        ((assert)
                                         (then
                                          (hide-all-but (-8 -11 1 5))
                                          (expand "child")
                                          (skosimp)
                                          (typepred "x!3")
                                          (hide -2)
                                          (lemma
                                           "position_s_first_diff")
                                          (inst
                                           -1
                                           "subtermOF(x!1, x!3)"
                                           "subtermOF(x!2, x!3)"
                                           "fd")
                                          (assert)
                                          (lemma "pos_o_term")
                                          (inst -1 "x!3" "fd" "x!1")
                                          (assert)
                                          (name-replace
                                           "p!1"
                                           "x!3 o fd")
                                          (hide -5)
                                          (lemma "not_var")
                                          (lemma
                                           "seq_first_rest[posnat]")
                                          (lemma "pos_subterm_ax")
                                          (inst -1 "p1!1" "p1!3" "x!1")
                                          (inst -2 "p1!3")
                                          (spread
                                           (inst
                                            -3
                                            "first(p1!3)"
                                            "p1!3"
                                            "rest(p1!3)"
                                            "subtermOF(x!1, p1!1)")
                                           ((then
                                             (lemma "empty_0[posnat]")
                                             (inst -1 "p1!3")
                                             (assert))
                                            (then
                                             (hide-all-but (1 3))
                                             (flatten)
                                             (rewrite "empty_0")))))))
                                       (then
                                        (hide-all-but (-8 -11 1 5))
                                        (expand "child")
                                        (skosimp)
                                        (typepred "x!3")
                                        (hide -1)
                                        (lemma "position_t_first_diff")
                                        (inst
                                         -1
                                         "subtermOF(x!1, x!3)"
                                         "subtermOF(x!2, x!3)"
                                         "fd")
                                        (assert)
                                        (lemma "pos_o_term")
                                        (inst -1 "x!3" "fd" "x!2")
                                        (assert)
                                        (name-replace "p!1" "x!3 o fd")
                                        (hide -5)
                                        (lemma "pos_subterm_ax")
                                        (inst -1 "p1!1" "p1!3" "x!2")
                                        (assert)
                                        (lemma "not_var")
                                        (lemma
                                         "seq_first_rest[posnat]")
                                        (inst -1 "p1!3")
                                        (lemma "empty_0[posnat]")
                                        (inst -1 "p1!3")
                                        (assert)
                                        (inst
                                         -2
                                         "first(p1!3)"
                                         "p1!3"
                                         "rest(p1!3)"
                                         "subtermOF(x!2, p1!1)")
                                        (assert)))))
                                    (then
                                     (hide-all-but (-5 -6 -9 1 5))
                                     (lemma "position_t_first_diff")
                                     (inst
                                      -1
                                      "subtermOF(x!1, x!3)"
                                      "subtermOF(x!2, x!3)"
                                      "fd")
                                     (assert)
                                     (typepred "x!3")
                                     (hide -1)
                                     (lemma "pos_o_term")
                                     (inst -1 "x!3" "fd" "x!2")
                                     (assert)
                                     (name-replace "p!1" "x!3 o fd")
                                     (expand "child")
                                     (skosimp)
                                     (replace -4 -5)
                                     (lemma "pos_subterm_ax")
                                     (inst
                                      -1
                                      "x!3"
                                      "p1!2 o p1!3"
                                      "x!2")
                                     (rewrite "o_assoc")
                                     (assert)
                                     (hide-all-but (-1 1 2))
                                     (lemma "pos_ax")
                                     (inst?)
                                     (assert)))))
                                 (then
                                  (hide-all-but (-3 -4 -7 1 5))
                                  (lemma "position_s_first_diff")
                                  (inst
                                   -1
                                   "subtermOF(x!1, x!3)"
                                   "subtermOF(x!2, x!3)"
                                   "fd")
                                  (assert)
                                  (typepred "x!3")
                                  (hide -2)
                                  (lemma "pos_o_term")
                                  (inst -1 "x!3" "fd" "x!1")
                                  (assert)
                                  (name-replace "p!1" "x!3 o fd")
                                  (hide -2 -3 -6 2)
                                  (expand "child")
                                  (skosimp)
                                  (replaces -2)
                                  (lemma "pos_subterm_ax")
                                  (inst -1 "x!3" "p1!2 o p1!3" "x!1")
                                  (rewrite "o_assoc")
                                  (assert)
                                  (lemma "pos_ax")
                                  (inst?)
                                  (assert)))))
                              (then (hide-all-but (-1 -2 1))
                               (expand "child") (skosimp)
                               (replace -1 -2)
                               (lemma "equal_prefix[posnat]")
                               (inst -1 "x!3" "fd" "p1!2 o p1!3")
                               (rewrite "o_assoc") (assert)
                               (hide -2 -3) (inst 1 "p1!3") (assert))))
                            (then (hide-all-but (-1 -2 -5 1 5))
                             (lemma "position_s_first_diff")
                             (lemma "position_t_first_diff")
                             (inst -1 "subtermOF(x!1, x!3)"
                              "subtermOF(x!2, x!3)" "fd")
                             (inst -2 "subtermOF(x!1, x!3)"
                              "subtermOF(x!2, x!3)" "fd")
                             (typepred "x!3") (lemma "pos_o_term")
                             (inst-cp -1 "x!3" "fd" "x!1")
                             (inst -1 "x!3" "fd" "x!2") (assert)
                             (assert) (name-replace "p!1" "x!3 o fd")
                             (hide-all-but (-1 -2 -7 -8 1))
                             (expand "child") (skosimp) (replaces -3)
                             (lemma "pos_subterm_ax")
                             (inst-cp -1 "x!3" "p1!2 o p1!3" "x!1")
                             (inst -1 "x!3" "p1!2 o p1!3" "x!2")
                             (rewrite "o_assoc") (assert)
                             (lemma "pos_ax") (inst?) (assert)
                             (hide -1 -2 -4 -5 -6 2) (lemma "pos_ax")
                             (inst?) (assert)))))
                         (spread (inst -6 "p1!1")
                          ((spread (split)
                            ((then (lemma "ext_preserve_symbol")
                              (inst-cp -1 "x!1" "sig!1" "p1!1")
                              (inst -1 "x!2" "sig!1" "p1!1")
                              (spread (split)
                               ((spread
                                 (split)
                                 ((assert)
                                  (then
                                   (hide-all-but (-3 -6 1 6))
                                   (typepred "x!3")
                                   (hide -2)
                                   (lemma "position_s_first_diff")
                                   (inst
                                    -1
                                    "subtermOF(x!1, x!3)"
                                    "subtermOF(x!2, x!3)"
                                    "fd")
                                   (assert)
                                   (lemma "pos_o_term")
                                   (inst -1 "x!3" "fd" "x!1")
                                   (assert)
                                   (name-replace "p!1" "x!3 o fd")
                                   (hide-all-but (-1 -4 1))
                                   (expand "child")
                                   (skosimp)
                                   (lemma "pos_subterm_ax")
                                   (inst -1 "p1!1" "p1!2" "x!1")
                                   (assert)
                                   (lemma "not_var")
                                   (lemma "seq_first_rest[posnat]")
                                   (inst -1 "p1!2")
                                   (lemma "empty_0[posnat]")
                                   (inst -1 "p1!2")
                                   (assert)
                                   (inst
                                    -2
                                    "first(p1!2)"
                                    "p1!2"
                                    "rest(p1!2)"
                                    "subtermOF(x!1, p1!1)")
                                   (assert))))
                                (then
                                 (hide-all-but (-3 -6 1 6))
                                 (typepred "x!3")
                                 (hide -1)
                                 (lemma "position_t_first_diff")
                                 (inst
                                  -1
                                  "subtermOF(x!1, x!3)"
                                  "subtermOF(x!2, x!3)"
                                  "fd")
                                 (assert)
                                 (lemma "pos_o_term")
                                 (inst -1 "x!3" "fd" "x!2")
                                 (assert)
                                 (name-replace "p!1" "x!3 o fd")
                                 (hide-all-but (-1 -4 1))
                                 (expand "child")
                                 (skosimp)
                                 (lemma "pos_subterm_ax")
                                 (inst -1 "p1!1" "p1!2" "x!2")
                                 (assert)
                                 (lemma "not_var")
                                 (lemma "seq_first_rest[posnat]")
                                 (inst -1 "p1!2")
                                 (lemma "empty_0[posnat]")
                                 (inst -1 "p1!2")
                                 (assert)
                                 (inst
                                  -2
                                  "first(p1!2)"
                                  "p1!2"
                                  "rest(p1!2)"
                                  "subtermOF(x!2, p1!1)")
                                 (assert)))))
                             (then (hide-all-but (-1 1 2))
                              (expand "child" -1) (skosimp)
                              (spread (case "x!3 = p1!1")
                               ((then
                                 (hide-all-but (-1 2))
                                 (expand "<=")
                                 (inst 1 "empty_seq")
                                 (rewrite "seq_o_empty")
                                 (assert))
                                (spread
                                 (case "length(x!3) < length(p1!1)")
                                 ((then
                                   (lemma "o_length_o[posnat]")
                                   (inst?)
                                   (assert)
                                   (skosimp)
                                   (expand "<=")
                                   (inst 3 "seq!1"))
                                  (then
                                   (lemma "o_length_o[posnat]")
                                   (inst -1 "p1!1" "p1!2" "x!3" "fd")
                                   (assert)
                                   (lemma "o_equals_o[posnat]")
                                   (inst?)
                                   (assert)
                                   (skosimp)
                                   (expand "child")
                                   (inst 4 "seq!1")
                                   (assert)
                                   (flatten)
                                   (replace -2 -1)
                                   (rewrite "seq_o_empty")))))))))
                           (then (hide-all-but (-1 -4 1 2 6))
                            (typepred "x!3")
                            (lemma "position_s_first_diff")
                            (lemma "position_t_first_diff")
                            (inst -2 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" "fd")
                            (inst -1 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" "fd")
                            (assert) (lemma "pos_o_term")
                            (inst-cp -1 "x!3" "fd" "x!1")
                            (inst -1 "x!3" "fd" "x!2") (assert)
                            (name-replace "p!1" "x!3 o fd")
                            (hide -3 -4 -5 -6 -8 3) (expand "child")
                            (skosimp) (hide 2 3) (lemma "pos_ax")
                            (inst-cp -1 "p1!1" "p1!2" "x!1")
                            (inst -1 "p1!1" "p1!2" "x!2")
                            (assert)))))))))))))
                (then (hide -4 -5 -6 4)
                 (lemma "next_position_is_position")
                 (inst-cp -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                  "x!3 o fd")
                 (spread
                  (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                   "x!3 o fd")
                  ((then (lemma "next_position_commute")
                    (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                     "x!3 o fd")
                    (replace -1 -2) (hide -1) (replace -3) (assert))
                   (then (hide -1 2) (lemma "position_s_first_diff")
                    (lemma "position_t_first_diff")
                    (inst -2 "subtermOF(x!1, x!3)"
                     "subtermOF(x!2, x!3)" "fd")
                    (inst -1 "subtermOF(x!1, x!3)"
                     "subtermOF(x!2, x!3)" "fd")
                    (typepred "x!3") (lemma "pos_o_term")
                    (inst-cp -1 "x!3" "fd" "x!1")
                    (inst -1 "x!3" "fd" "x!2") (assert) (assert)
                    (rewrite "ext_preserv_pos")
                    (rewrite "ext_preserv_pos")))))))
              (then (hide -3 -4 -5 4) (lemma "position_s_first_diff")
               (lemma "position_t_first_diff")
               (inst -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                "fd")
               (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                "fd")
               (typepred "x!3") (lemma "pos_o_term")
               (inst-cp -1 "x!3" "fd" "x!1") (inst -1 "x!3" "fd" "x!2")
               (assert) (assert) (rewrite "ext_preserv_pos")
               (rewrite "ext_preserv_pos"))))))))
        (then (hide -) (prop) (lemma "dom_ran_ruaEF_disjoint")
         (inst -1 "x!1" "x!2" "x!3") (assert)
         (name-replace "sig!1"
          "robinson_unification_algorithm_aux(x!1, x!2, x!3)")
         (expand* "subset?" "difference" "union" "member")
         (decompose-equality -2) (inst -2 "xx") (inst -1 "xx")
         (spread (prop)
          ((then (expand "fail") (expand "Dom") (flatten) (hide -1 -4)
            (replaces -1) (typepred "xx") (expand "V") (assert))
           (then (expand "fail") (expand "Dom") (flatten) (hide -1 -4)
            (replaces -1) (typepred "xx") (expand "V") (assert))
           (then (expand "VRan") (expand "IUnion")
            (spread (inst 1 "xx")
             ((then (expand "fail") (hide -2) (expand "Vars")
               (spread (inst 1 "#(1)")
                ((then (expand "subtermOF") (lift-if)
                  (spread (prop)
                   ((then (hide -2 1) (expand "#") (assert))
                    (then (expand "finseq_appl") (replaces -1) (hide 1)
                     (spread
                      (case "args(app(ff,  #(xx)))`seq(first( #(1)) - 1) = xx")
                      ((then (replaces -1)
                        (spread (case "rest( #(1)) = empty_seq")
                         ((then (replaces -1) (expand "subtermOF")
                           (rewrite "empty_0"))
                          (then (hide 2) (expand "rest") (expand "#")
                           (expand "^") (propax)))))
                       (then (hide 2) (expand "#") (propax))
                       (then (hide 2) (expand "first")
                        (expand "finseq_appl")
                        (spread (prop)
                         ((assert)
                          (then (expand "#") (assert)))))))))))
                 (then (expand "positionsOF") (lift-if)
                  (spread (prop)
                   ((assert)
                    (then (decompose-equality -2) (hide -1 -2 +)
                     (expand "#") (assert))
                    (then (hide -1 1)
                     (expand* "union" "IUnion" "member"
                      "only_empty_seq")
                     (flatten) (hide 1)
                     (spread (inst 1 "1")
                      ((then (expand "catenate") (inst 1 "empty_seq")
                        (expand "member")
                        (spread (prop)
                         ((then (expand "finseq_appl")
                           (expand "positionsOF") (lift-if)
                           (expand* "union" "IUnion" "member"
                            "only_empty_seq"))
                          (then (hide 2)
                           (expand* "#" "add_first" "insert?")
                           (lemma "empty_0[posnat]")
                           (inst -1 "empty_seq") (assert)))))
                       (then (reveal -1) (decompose-equality -1)
                        (hide -1 -2) (expand "#")
                        (decompose-equality -1) (assert)))))))))))
              (then (hide -2) (expand "Dom") (expand "fail") (flatten)
               (replaces -1) (typepred "xx") (expand "V")
               (assert))))))))))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!2") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!2, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!1") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!1, p1!1)")
       (assert))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "x!1`2")
       (assert) (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(x!1`2, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "x!1`1")
       (assert) (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(x!1`1, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!1`2")
       (assert) (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!1`2, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!1`1")
       (assert) (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!1`1, p1!1)")
       (assert))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "t!1") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(t!1, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "s!1") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(s!1, p1!1)")
       (assert))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (first_diff def-decl "position" robinsonunification nil)
    (comp const-decl "term" substitution nil)
    (ext_o formula-decl nil substitution nil)
    (subs_o formula-decl nil substitution nil)
    (o_length_o formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (not_var formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (pos_ax formula-decl nil positions nil)
    (<= const-decl "bool" positions nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (O const-decl "finseq" finite_sequences nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (equal_term formula-decl nil subterm nil)
    (unifier const-decl "bool" unification nil)
    (iden_subs formula-decl nil substitution nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (empty_0 formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (^ const-decl "finseq" finite_sequences nil)
    (ff const-decl "{f: symbol | arity(f) = 1}" robinsonunification
     nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (catenate const-decl "positions" positions nil)
    (only_empty_seq const-decl "positions" positions nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (xx const-decl "(V)" robinsonunification nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (fail const-decl "Sub" robinsonunification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (child const-decl "bool" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (left_without_children const-decl "bool" positions nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (ruaEF_fails_iff_non_unifiable_aux-2 nil 3512383964
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                                               Card(right_pos(s,p)))"
     ("s" "t" "p"))
    (("1" (split)
      (("1" (prop)
        (("1" (expand "robinson_unification_algorithm_aux" 2)
          (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
            (("1" (assert)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (case "x!3 = empty_seq")
                    (("1" (hide -2 -4 -5 -6 1)
                      (("1" (replaces -1)
                        (("1" (expand "subtermOF")
                          (("1" (rewrite "empty_0")
                            (("1" (expand* "unifiable" "unifier")
                              (("1"
                                (inst 1 "identity")
                                (("1" (assert) nil nil)
                                 ("2" (rewrite "iden_subs") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -3)
                      (("2" (lemma "next_pos_empty_equal_subterm")
                        (("2" (inst -1 "x!1" "x!2" "x!3")
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (lemma "equal_term")
                                (("1"
                                  (inst -1 "x!1" "x!2" "x!3")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (hide-all-but (-1 3))
                                      (("1"
                                        (expand* "unifiable" "unifier")
                                        (("1"
                                          (inst 1 "identity")
                                          (("1"
                                            (rewrite "iden_subs")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (name-replace "np" "next_position(x!1, x!2, x!3)"
                     :hide? nil)
                    (("2" (inst -3 "x!1" "x!2" "np")
                      (("2"
                        (lemma
                         "robinson_unification_algorithm_aux_TCC8")
                        (("2" (inst -1 "x!1" "x!2" "x!3")
                          (("2" (assert)
                            (("2" (inst -1 "np")
                              (("2"
                                (assert)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (split)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (lemma
                                         "next_pos_equal_subterm")
                                        (("1"
                                          (inst -1 "x!1" "x!2" "x!3")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst -1 "q!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-2 1 3))
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (expand
                                                   "next_position")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (lemma "child_np_child_p")
                                        (("2"
                                          (inst
                                           -1
                                           "x!1"
                                           "x!2"
                                           "x!3"
                                           "p1!1")
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (inst -6 "p1!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (name-replace "sig!1"
                 "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
                 :hide? nil)
                (("2"
                  (name-replace "fd"
                   "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
                   :hide? nil)
                  (("2"
                    (name-replace "np"
                     "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
                     :hide? nil)
                    (("1"
                      (name-replace "sig!2"
                       "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                       :hide? nil)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (hide -6)
                            (("1"
                              (lemma "np_p_o_fd_empty_unifiable_term")
                              (("1"
                                (inst -1 "x!1" "x!2" "x!3")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -6)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (hide-all-but (-1 3))
                                            (("1"
                                              (expand*
                                               "unifiable"
                                               "unifier")
                                              (("1"
                                                (inst 1 "sig!1")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst -5 "ext(sig!1)(x!1)"
                             "ext(sig!1)(x!2)" "np")
                            (("2"
                              (lemma
                               "robinson_unification_algorithm_aux_TCC12")
                              (("2"
                                (inst -1 "x!1" "x!2" "x!3")
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -5)
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (inst -1 "sig!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (inst -1 "np")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 6))
                                                        (("1"
                                                          (expand*
                                                           "unifiable"
                                                           "unifier")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "comp(sigma!1, sig!1)")
                                                              (("1"
                                                                (rewrite
                                                                 "ext_o")
                                                                (("1"
                                                                  (expand
                                                                   "o")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "subs_o")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "np_p_o_fd_equal_subterm")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "x!2"
                                                           "x!3")
                                                          (("2"
                                                            (replace
                                                             -5)
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide
                                                         -1
                                                         -5
                                                         2
                                                         3)
                                                        (("3"
                                                          (skosimp)
                                                          (("3"
                                                            (lemma
                                                             "child_np_child_p")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "ext(sig!1)(x!1)"
                                                               "ext(sig!1)(x!2)"
                                                               "x!3 o fd"
                                                               "p1!1")
                                                              (("3"
                                                                (replace
                                                                 -3)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (case
                                                                     "x!3 <= p1!1")
                                                                    (("1"
                                                                      (lemma
                                                                       "fd_equal_symbol")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "subtermOF(x!1, x!3)"
                                                                         "subtermOF(x!2, x!3)")
                                                                        (("1"
                                                                          (replace
                                                                           -6)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "<=")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "p1!2")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "pos_subterm")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!3"
                                                                                         "p1!2"
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "pos_o_term")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!3"
                                                                                             "p1!2"
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     -3
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -4
                                                                                                       -3
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "pos_subterm")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x!3"
                                                                                                           "p1!2"
                                                                                                           "x!2")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "pos_o_term")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "x!3"
                                                                                                               "p1!2"
                                                                                                               "x!2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2
                                                                                                                       -5
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -6
                                                                                                                         -5
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "ext_preserve_symbol")
                                                                                                                          (("1"
                                                                                                                            (inst-cp
                                                                                                                             -1
                                                                                                                             "x!1"
                                                                                                                             "sig!1"
                                                                                                                             "p1!1")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "x!2"
                                                                                                                               "sig!1"
                                                                                                                               "p1!1")
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-8
                                                                                                                                      -11
                                                                                                                                      1
                                                                                                                                      5))
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "child")
                                                                                                                                      (("2"
                                                                                                                                        (skosimp)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "x!3")
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "position_s_first_diff")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "subtermOF(x!1, x!3)"
                                                                                                                                                 "subtermOF(x!2, x!3)"
                                                                                                                                                 "fd")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "pos_o_term")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x!3"
                                                                                                                                                       "fd"
                                                                                                                                                       "x!1")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (name-replace
                                                                                                                                                           "p!1"
                                                                                                                                                           "x!3 o fd")
                                                                                                                                                          (("2"
                                                                                                                                                            (hide
                                                                                                                                                             -5)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "not_var")
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "seq_first_rest[posnat]")
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "pos_subterm_ax")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "p1!1"
                                                                                                                                                                     "p1!3"
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -2
                                                                                                                                                                       "p1!3")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -3
                                                                                                                                                                         "first(p1!3)"
                                                                                                                                                                         "p1!3"
                                                                                                                                                                         "rest(p1!3)"
                                                                                                                                                                         "subtermOF(x!1, p1!1)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "empty_0[posnat]")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "p1!3")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           (1
                                                                                                                                                                            3))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "empty_0")
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   (-8
                                                                                                                                    -11
                                                                                                                                    1
                                                                                                                                    5))
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "child")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!3")
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "position_t_first_diff")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "subtermOF(x!1, x!3)"
                                                                                                                                               "subtermOF(x!2, x!3)"
                                                                                                                                               "fd")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "pos_o_term")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "x!3"
                                                                                                                                                     "fd"
                                                                                                                                                     "x!2")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (name-replace
                                                                                                                                                         "p!1"
                                                                                                                                                         "x!3 o fd")
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           -5)
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "pos_subterm_ax")
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               "p1!1"
                                                                                                                                                               "p1!3"
                                                                                                                                                               "x!2")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "not_var")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "seq_first_rest[posnat]")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "p1!3")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "empty_0[posnat]")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -1
                                                                                                                                                                           "p1!3")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -2
                                                                                                                                                                               "first(p1!3)"
                                                                                                                                                                               "p1!3"
                                                                                                                                                                               "rest(p1!3)"
                                                                                                                                                                               "subtermOF(x!2, p1!1)")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-5
                                                                                                                      -6
                                                                                                                      -9
                                                                                                                      1
                                                                                                                      5))
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "position_t_first_diff")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "subtermOF(x!1, x!3)"
                                                                                                                         "subtermOF(x!2, x!3)"
                                                                                                                         "fd")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "x!3")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "pos_o_term")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "x!3"
                                                                                                                                   "fd"
                                                                                                                                   "x!2")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (name-replace
                                                                                                                                       "p!1"
                                                                                                                                       "x!3 o fd")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "child")
                                                                                                                                        (("2"
                                                                                                                                          (skosimp)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -4
                                                                                                                                             -5)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "pos_subterm_ax")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "x!3"
                                                                                                                                                 "p1!2 o p1!3"
                                                                                                                                                 "x!2")
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "o_assoc")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       (-1
                                                                                                                                                        1
                                                                                                                                                        2))
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "pos_ax")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-3
                                                                                                    -4
                                                                                                    -7
                                                                                                    1
                                                                                                    5))
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "position_s_first_diff")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "subtermOF(x!1, x!3)"
                                                                                                       "subtermOF(x!2, x!3)"
                                                                                                       "fd")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "x!3")
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "pos_o_term")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "x!3"
                                                                                                                 "fd"
                                                                                                                 "x!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (name-replace
                                                                                                                     "p!1"
                                                                                                                     "x!3 o fd")
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2
                                                                                                                       -3
                                                                                                                       -6
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "child")
                                                                                                                        (("2"
                                                                                                                          (skosimp)
                                                                                                                          (("2"
                                                                                                                            (replaces
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "pos_subterm_ax")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "x!3"
                                                                                                                                 "p1!2 o p1!3"
                                                                                                                                 "x!1")
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "o_assoc")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "pos_ax")
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -2
                                                                                        1))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "child")
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             -2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "equal_prefix[posnat]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "fd"
                                                                                                 "p1!2 o p1!3")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "o_assoc")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "p1!3")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      -5
                                                                                      1
                                                                                      5))
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "position_s_first_diff")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "position_t_first_diff")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "subtermOF(x!1, x!3)"
                                                                                           "subtermOF(x!2, x!3)"
                                                                                           "fd")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -2
                                                                                             "subtermOF(x!1, x!3)"
                                                                                             "subtermOF(x!2, x!3)"
                                                                                             "fd")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "x!3")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "pos_o_term")
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "x!3"
                                                                                                   "fd"
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x!3"
                                                                                                     "fd"
                                                                                                     "x!2")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (name-replace
                                                                                                           "p!1"
                                                                                                           "x!3 o fd")
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              -2
                                                                                                              -7
                                                                                                              -8
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "child")
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -3)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "pos_subterm_ax")
                                                                                                                    (("2"
                                                                                                                      (inst-cp
                                                                                                                       -1
                                                                                                                       "x!3"
                                                                                                                       "p1!2 o p1!3"
                                                                                                                       "x!1")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "x!3"
                                                                                                                         "p1!2 o p1!3"
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "o_assoc")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "pos_ax")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1
                                                                                                                                     -2
                                                                                                                                     -4
                                                                                                                                     -5
                                                                                                                                     -6
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "pos_ax")
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -6
                                                                       "p1!1")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (lemma
                                                                           "ext_preserve_symbol")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             "x!1"
                                                                             "sig!1"
                                                                             "p1!1")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!2"
                                                                               "sig!1"
                                                                               "p1!1")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-3
                                                                                      -6
                                                                                      1
                                                                                      6))
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "x!3")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "position_s_first_diff")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "subtermOF(x!1, x!3)"
                                                                                             "subtermOF(x!2, x!3)"
                                                                                             "fd")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "pos_o_term")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!3"
                                                                                                   "fd"
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (name-replace
                                                                                                       "p!1"
                                                                                                       "x!3 o fd")
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          -4
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "child")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "pos_subterm_ax")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "p1!1"
                                                                                                                 "p1!2"
                                                                                                                 "x!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "not_var")
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "seq_first_rest[posnat]")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "p1!2")
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "empty_0[posnat]")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "p1!2")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -2
                                                                                                                                 "first(p1!2)"
                                                                                                                                 "p1!2"
                                                                                                                                 "rest(p1!2)"
                                                                                                                                 "subtermOF(x!1, p1!1)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-3
                                                                                    -6
                                                                                    1
                                                                                    6))
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "x!3")
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "position_t_first_diff")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "subtermOF(x!1, x!3)"
                                                                                           "subtermOF(x!2, x!3)"
                                                                                           "fd")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "pos_o_term")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "fd"
                                                                                                 "x!2")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "p!1"
                                                                                                     "x!3 o fd")
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -4
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "child")
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "pos_subterm_ax")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "p1!1"
                                                                                                               "p1!2"
                                                                                                               "x!2")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "not_var")
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "seq_first_rest[posnat]")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "p1!2")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "empty_0[posnat]")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "p1!2")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "first(p1!2)"
                                                                                                                               "p1!2"
                                                                                                                               "rest(p1!2)"
                                                                                                                               "subtermOF(x!2, p1!1)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1
                                                                            2))
                                                                          (("2"
                                                                            (expand
                                                                             "child"
                                                                             -1)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (case
                                                                                 "x!3 = p1!1")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    2))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "<=")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "empty_seq")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "seq_o_empty")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "length(x!3) < length(p1!1)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "o_length_o[posnat]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "<=")
                                                                                            (("1"
                                                                                              (inst
                                                                                               3
                                                                                               "seq!1")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "o_length_o[posnat]")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "p1!1"
                                                                                       "p1!2"
                                                                                       "x!3"
                                                                                       "fd")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "o_equals_o[posnat]")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "child")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     4
                                                                                                     "seq!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "seq_o_empty")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -4
                                                                          1
                                                                          2
                                                                          6))
                                                                        (("2"
                                                                          (typepred
                                                                           "x!3")
                                                                          (("2"
                                                                            (lemma
                                                                             "position_s_first_diff")
                                                                            (("2"
                                                                              (lemma
                                                                               "position_t_first_diff")
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "subtermOF(x!1, x!3)"
                                                                                 "subtermOF(x!2, x!3)"
                                                                                 "fd")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "subtermOF(x!1, x!3)"
                                                                                   "subtermOF(x!2, x!3)"
                                                                                   "fd")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "pos_o_term")
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "x!3"
                                                                                         "fd"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!3"
                                                                                           "fd"
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (name-replace
                                                                                               "p!1"
                                                                                               "x!3 o fd")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -3
                                                                                                 -4
                                                                                                 -5
                                                                                                 -6
                                                                                                 -8
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "child")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       2
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "pos_ax")
                                                                                                        (("2"
                                                                                                          (inst-cp
                                                                                                           -1
                                                                                                           "p1!1"
                                                                                                           "p1!2"
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "p1!1"
                                                                                                             "p1!2"
                                                                                                             "x!2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 -5 -6 4)
                        (("2" (lemma "next_position_is_position")
                          (("2"
                            (inst-cp -1 "ext(sig!1)(x!1)"
                             "ext(sig!1)(x!2)" "x!3 o fd")
                            (("2"
                              (inst -1 "ext(sig!1)(x!2)"
                               "ext(sig!1)(x!1)" "x!3 o fd")
                              (("1"
                                (lemma "next_position_commute")
                                (("1"
                                  (inst
                                   -1
                                   "ext(sig!1)(x!2)"
                                   "ext(sig!1)(x!1)"
                                   "x!3 o fd")
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (replace -3)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (lemma "position_s_first_diff")
                                  (("2"
                                    (lemma "position_t_first_diff")
                                    (("2"
                                      (inst
                                       -2
                                       "subtermOF(x!1, x!3)"
                                       "subtermOF(x!2, x!3)"
                                       "fd")
                                      (("2"
                                        (inst
                                         -1
                                         "subtermOF(x!1, x!3)"
                                         "subtermOF(x!2, x!3)"
                                         "fd")
                                        (("2"
                                          (typepred "x!3")
                                          (("2"
                                            (lemma "pos_o_term")
                                            (("2"
                                              (inst-cp
                                               -1
                                               "x!3"
                                               "fd"
                                               "x!1")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x!3"
                                                 "fd"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "ext_preserv_pos")
                                                      (("2"
                                                        (rewrite
                                                         "ext_preserv_pos")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -3 -4 -5 4)
                      (("2" (lemma "position_s_first_diff")
                        (("2" (lemma "position_t_first_diff")
                          (("2"
                            (inst -2 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" "fd")
                            (("2"
                              (inst -1 "subtermOF(x!1, x!3)"
                               "subtermOF(x!2, x!3)" "fd")
                              (("2"
                                (typepred "x!3")
                                (("2"
                                  (lemma "pos_o_term")
                                  (("2"
                                    (inst-cp -1 "x!3" "fd" "x!1")
                                    (("2"
                                      (inst -1 "x!3" "fd" "x!2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "ext_preserv_pos")
                                            (("2"
                                              (rewrite
                                               "ext_preserv_pos")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -)
        (("2" (prop)
          (("2" (lemma "dom_ran_ruaEF_disjoint")
            (("2" (inst -1 "x!1" "x!2" "x!3")
              (("2" (assert)
                (("2"
                  (name-replace "sig!1"
                   "robinson_unification_algorithm_aux(x!1, x!2, x!3)")
                  (("2"
                    (expand* "subset?" "difference" "union" "member")
                    (("2" (decompose-equality -2)
                      (("2" (inst -2 "xx")
                        (("2" (inst -1 "xx")
                          (("2" (prop)
                            (("1" (expand "fail")
                              (("1"
                                (expand "Dom")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -1 -4)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (typepred "xx")
                                        (("1"
                                          (expand "V")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "fail")
                              (("2"
                                (expand "Dom")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -1 -4)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (typepred "xx")
                                        (("2"
                                          (expand "V")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "VRan")
                              (("3"
                                (expand "IUnion")
                                (("3"
                                  (inst 1 "xx")
                                  (("1"
                                    (expand "fail")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (expand "Vars")
                                        (("1"
                                          (inst 1 "#(1)")
                                          (("1"
                                            (expand "subtermOF")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -2 1)
                                                  (("1"
                                                    (expand "#")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (hide 1)
                                                      (("2"
                                                        (case
                                                         "args(app(ff,  #(xx)))`seq(first( #(1)) - 1) = xx")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (case
                                                             "rest( #(1)) = empty_seq")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "subtermOF")
                                                                (("1"
                                                                  (rewrite
                                                                   "empty_0")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "rest")
                                                                (("2"
                                                                  (expand
                                                                   "#")
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "#")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (expand
                                                             "first")
                                                            (("3"
                                                              (expand
                                                               "finseq_appl")
                                                              (("3"
                                                                (prop)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "#")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "positionsOF")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (decompose-equality
                                                   -2)
                                                  (("2"
                                                    (hide -1 -2 +)
                                                    (("2"
                                                      (expand "#")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1 1)
                                                  (("3"
                                                    (expand*
                                                     "union"
                                                     "IUnion"
                                                     "member"
                                                     "only_empty_seq")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (hide 1)
                                                        (("3"
                                                          (inst 1 "1")
                                                          (("1"
                                                            (expand
                                                             "catenate")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "empty_seq")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (expand
                                                                       "positionsOF")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (expand*
                                                                           "union"
                                                                           "IUnion"
                                                                           "member"
                                                                           "only_empty_seq")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (expand*
                                                                       "#"
                                                                       "add_first"
                                                                       "insert?")
                                                                      (("2"
                                                                        (lemma
                                                                         "empty_0[posnat]")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "empty_seq")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (reveal -1)
                                                            (("2"
                                                              (decompose-equality
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (expand
                                                                   "#")
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -2)
                                    (("2"
                                      (expand "Dom")
                                      (("2"
                                        (expand "fail")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (typepred "xx")
                                              (("2"
                                                (expand "V")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide - 2)
      (("2" (skosimp)
        (("2" (expand "child")
          (("2" (skosimp)
            (("2" (lemma "pos_subterm_ax")
              (("2" (inst -1 "p1!1" "p1!2" "y!2")
                (("2" (assert)
                  (("2" (lemma "not_var")
                    (("2" (lemma "seq_first_rest[posnat]")
                      (("2" (inst -1 "p1!2")
                        (("2" (lemma "empty_0[posnat]")
                          (("2" (inst -1 "p1!2")
                            (("2" (assert)
                              (("2"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide - 2)
      (("3" (skosimp)
        (("3" (expand "child")
          (("3" (skosimp)
            (("3" (lemma "pos_subterm_ax")
              (("3" (inst -1 "p1!1" "p1!2" "y!1")
                (("3" (assert)
                  (("3" (lemma "not_var")
                    (("3" (lemma "seq_first_rest[posnat]")
                      (("3" (inst -1 "p1!2")
                        (("3" (lemma "empty_0[posnat]")
                          (("3" (inst -1 "p1!2")
                            (("3" (assert)
                              (("3"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1, p1!1)")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "right_pos_subset")
        (("4" (inst?)
          (("4" (lemma "positions_of_terms_finite")
            (("4" (inst?)
              (("4" (lemma "finite_subset[position]")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma "right_pos_subset")
        (("6" (inst?)
          (("6" (lemma "positions_of_terms_finite")
            (("6" (inst?)
              (("6" (lemma "finite_subset[position]")
                (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("8" (hide - 2)
      (("8" (skosimp)
        (("8" (expand "child")
          (("8" (skosimp)
            (("8" (lemma "pos_subterm_ax")
              (("8" (inst -1 "p11!1" "p1!1" "x!1`2")
                (("8" (assert)
                  (("8" (lemma "not_var")
                    (("8" (lemma "seq_first_rest[posnat]")
                      (("8" (inst -1 "p1!1")
                        (("8" (lemma "empty_0[posnat]")
                          (("8" (inst -1 "p1!1")
                            (("8" (assert)
                              (("8"
                                (inst
                                 -2
                                 "first(p1!1)"
                                 "p1!1"
                                 "rest(p1!1)"
                                 "subtermOF(x!1`2, p11!1)")
                                (("8" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide - 2)
      (("9" (skosimp)
        (("9" (expand "child")
          (("9" (skosimp)
            (("9" (lemma "pos_subterm_ax")
              (("9" (inst -1 "p11!1" "p1!1" "x!1`1")
                (("9" (assert)
                  (("9" (lemma "not_var")
                    (("9" (lemma "seq_first_rest[posnat]")
                      (("9" (inst -1 "p1!1")
                        (("9" (lemma "empty_0[posnat]")
                          (("9" (inst -1 "p1!1")
                            (("9" (assert)
                              (("9"
                                (inst
                                 -2
                                 "first(p1!1)"
                                 "p1!1"
                                 "rest(p1!1)"
                                 "subtermOF(x!1`1, p11!1)")
                                (("9" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide - 2)
      (("10" (skosimp)
        (("10" (expand "child")
          (("10" (skosimp)
            (("10" (lemma "pos_subterm_ax")
              (("10" (inst -1 "p1!1" "p1!2" "y!1`2")
                (("10" (assert)
                  (("10" (lemma "not_var")
                    (("10" (lemma "seq_first_rest[posnat]")
                      (("10" (inst -1 "p1!2")
                        (("10" (lemma "empty_0[posnat]")
                          (("10" (inst -1 "p1!2")
                            (("10" (assert)
                              (("10"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1`2, p1!1)")
                                (("10" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide - 2)
      (("11" (skosimp)
        (("11" (expand "child")
          (("11" (skosimp)
            (("11" (lemma "pos_subterm_ax")
              (("11" (inst -1 "p1!1" "p1!2" "y!1`1")
                (("11" (assert)
                  (("11" (lemma "not_var")
                    (("11" (lemma "seq_first_rest[posnat]")
                      (("11" (inst -1 "p1!2")
                        (("11" (lemma "empty_0[posnat]")
                          (("11" (inst -1 "p1!2")
                            (("11" (assert)
                              (("11"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1`1, p1!1)")
                                (("11" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (lemma "right_pos_subset")
        (("12" (inst?)
          (("12" (lemma "positions_of_terms_finite")
            (("12" (inst?)
              (("12" (lemma "finite_subset[position]")
                (("12" (inst?) (("12" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (lemma "right_pos_subset")
        (("14" (inst?)
          (("14" (lemma "positions_of_terms_finite")
            (("14" (inst?)
              (("14" (lemma "finite_subset[position]")
                (("14" (inst?) (("14" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("16" (hide - 2)
      (("16" (skosimp)
        (("16" (expand "child")
          (("16" (skosimp)
            (("16" (lemma "pos_subterm_ax")
              (("16" (inst -1 "p1!1" "p1!2" "t!1")
                (("16" (assert)
                  (("16" (lemma "not_var")
                    (("16" (lemma "seq_first_rest[posnat]")
                      (("16" (inst -1 "p1!2")
                        (("16" (lemma "empty_0[posnat]")
                          (("16" (inst -1 "p1!2")
                            (("16" (assert)
                              (("16"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(t!1, p1!1)")
                                (("16" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide - 2)
      (("17" (skosimp)
        (("17" (expand "child")
          (("17" (skosimp)
            (("17" (lemma "pos_subterm_ax")
              (("17" (inst -1 "p1!1" "p1!2" "s!1")
                (("17" (assert)
                  (("17" (lemma "not_var")
                    (("17" (lemma "seq_first_rest[posnat]")
                      (("17" (inst -1 "p1!2")
                        (("17" (lemma "empty_0[posnat]")
                          (("17" (inst -1 "p1!2")
                            (("17" (assert)
                              (("17"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(s!1, p1!1)")
                                (("17" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma "right_pos_subset")
        (("18" (inst?)
          (("18" (lemma "positions_of_terms_finite")
            (("18" (inst?)
              (("18" (lemma "finite_subset[position]")
                (("18" (inst?) (("18" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (hide 2)
      (("19" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (first_diff def-decl "position" robinsonunification nil)
    (comp const-decl "term" substitution nil)
    (ext_o formula-decl nil substitution nil)
    (subs_o formula-decl nil substitution nil)
    (o_length_o formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (not_var formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (pos_ax formula-decl nil positions nil)
    (<= const-decl "bool" positions nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (O const-decl "finseq" finite_sequences nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (equal_term formula-decl nil subterm nil)
    (unifier const-decl "bool" unification nil)
    (iden_subs formula-decl nil substitution nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (empty_0 formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (^ const-decl "finseq" finite_sequences nil)
    (ff const-decl "{f: symbol | arity(f) = 1}" robinsonunification
     nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (catenate const-decl "positions" positions nil)
    (only_empty_seq const-decl "positions" positions nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (xx const-decl "(V)" robinsonunification nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (fail const-decl "Sub" robinsonunification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (child const-decl "bool" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (left_without_children const-decl "bool" positions nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   nil)
  (ruaEF_fails_iff_non_unifiable_aux-1 nil 3510658166
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                                         Card(right_pos(s,p)))"
     ("s" "t" "p"))
    (("1" (split)
      (("1" (prop)
        (("1" (expand "robinson_unification_algorithm_aux" 2)
          (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
            (("1" (assert)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (case "x!3 = empty_seq")
                    (("1" (hide -2 -4 -5 -6 1)
                      (("1" (replaces -1)
                        (("1" (expand "subtermOF")
                          (("1" (rewrite "empty_0")
                            (("1" (expand* "unifiable" "unifier")
                              (("1"
                                (inst 1 "identity")
                                (("1" (assert) nil nil)
                                 ("2" (rewrite "iden_subs") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -3)
                      (("2" (lemma "next_pos_empty_equal_subterm")
                        (("2" (inst -1 "x!1" "x!2" "x!3")
                          (("2" (assert)
                            (("2" (split)
                              (("1"
                                (lemma "equal_term")
                                (("1"
                                  (inst -1 "x!1" "x!2" "x!3")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (hide-all-but (-1 3))
                                      (("1"
                                        (expand* "unifiable" "unifier")
                                        (("1"
                                          (inst 1 "identity")
                                          (("1"
                                            (rewrite "iden_subs")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (name-replace "np" "next_position(x!1, x!2, x!3)"
                     :hide? nil)
                    (("2" (inst -3 "x!1" "x!2" "np")
                      (("2"
                        (lemma
                         "robinson_unification_algorithm_aux_TCC8")
                        (("2" (inst -1 "x!1" "x!2" "x!3")
                          (("2" (assert)
                            (("2" (inst -1 "np")
                              (("2"
                                (assert)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (split)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (lemma
                                         "next_pos_equal_subterm")
                                        (("1"
                                          (inst -1 "x!1" "x!2" "x!3")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst -1 "q!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 -4 4))
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (expand*
                                                       "subtermOF"
                                                       "unifiable"
                                                       "unifier")
                                                      (("2"
                                                        (rewrite
                                                         "empty_0")
                                                        (("2"
                                                          (inst
                                                           1
                                                           "identity")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "iden_subs")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (lemma "child_np_child_p")
                                        (("2"
                                          (inst
                                           -1
                                           "x!1"
                                           "x!2"
                                           "x!3"
                                           "p1!1")
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (inst -6 "p1!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (name-replace "sig!1"
                 "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
                 :hide? nil)
                (("2"
                  (name-replace "fd"
                   "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
                   :hide? nil)
                  (("2"
                    (name-replace "np"
                     "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
                     :hide? nil)
                    (("1"
                      (name-replace "sig!2"
                       "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                       :hide? nil)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (hide -6)
                            (("1"
                              (lemma "np_p_o_fd_empty_unifiable_term")
                              (("1"
                                (inst -1 "x!1" "x!2" "x!3")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -6)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (hide-all-but (-1 3))
                                            (("1"
                                              (expand*
                                               "unifiable"
                                               "unifier")
                                              (("1"
                                                (inst 1 "sig!1")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst -5 "ext(sig!1)(x!1)"
                             "ext(sig!1)(x!2)" "np")
                            (("2"
                              (lemma
                               "robinson_unification_algorithm_aux_TCC12")
                              (("2"
                                (inst -1 "x!1" "x!2" "x!3")
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -5)
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (inst -1 "sig!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (inst -1 "np")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 6))
                                                        (("1"
                                                          (expand*
                                                           "unifiable"
                                                           "unifier")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "comp(sigma!1, sig!1)")
                                                              (("1"
                                                                (rewrite
                                                                 "ext_o")
                                                                (("1"
                                                                  (expand
                                                                   "o")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "subs_o")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "np_p_o_fd_equal_subterm")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "x!2"
                                                           "x!3")
                                                          (("2"
                                                            (replace
                                                             -5)
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide
                                                         -1
                                                         -5
                                                         2
                                                         3)
                                                        (("3"
                                                          (skosimp)
                                                          (("3"
                                                            (lemma
                                                             "child_np_child_p")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "ext(sig!1)(x!1)"
                                                               "ext(sig!1)(x!2)"
                                                               "x!3 o fd"
                                                               "p1!1")
                                                              (("3"
                                                                (replace
                                                                 -3)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (case
                                                                     "x!3 <= p1!1")
                                                                    (("1"
                                                                      (lemma
                                                                       "fd_equal_symbol")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "subtermOF(x!1, x!3)"
                                                                         "subtermOF(x!2, x!3)")
                                                                        (("1"
                                                                          (replace
                                                                           -6)
                                                                          (("1"
                                                                            (replace
                                                                             -7)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "<=")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "p1!2")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "pos_subterm")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!3"
                                                                                           "p1!2"
                                                                                           "x!1")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "pos_o_term")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!3"
                                                                                               "p1!2"
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -3
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -4
                                                                                                         -3
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "pos_subterm")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x!3"
                                                                                                             "p1!2"
                                                                                                             "x!2")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "pos_o_term")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "x!3"
                                                                                                                 "p1!2"
                                                                                                                 "x!2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         -5
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -6
                                                                                                                           -5
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "ext_preserve_symbol")
                                                                                                                            (("1"
                                                                                                                              (inst-cp
                                                                                                                               -1
                                                                                                                               "x!1"
                                                                                                                               "sig!1"
                                                                                                                               "p1!1")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "x!2"
                                                                                                                                 "sig!1"
                                                                                                                                 "p1!1")
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-8
                                                                                                                                        -11
                                                                                                                                        1
                                                                                                                                        5))
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "child")
                                                                                                                                        (("2"
                                                                                                                                          (skosimp)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "x!3")
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               -2)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "position_s_first_diff")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "subtermOF(x!1, x!3)"
                                                                                                                                                   "subtermOF(x!2, x!3)"
                                                                                                                                                   "fd")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "pos_o_term")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "x!3"
                                                                                                                                                         "fd"
                                                                                                                                                         "x!1")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (name-replace
                                                                                                                                                             "p!1"
                                                                                                                                                             "x!3 o fd")
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               -5)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "not_var")
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "seq_first_rest[posnat]")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "pos_subterm_ax")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "p1!1"
                                                                                                                                                                       "p1!3"
                                                                                                                                                                       "x!1")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -2
                                                                                                                                                                         "p1!3")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -3
                                                                                                                                                                           "first(p1!3)"
                                                                                                                                                                           "p1!3"
                                                                                                                                                                           "rest(p1!3)"
                                                                                                                                                                           "subtermOF(x!1, p1!1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "empty_0[posnat]")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "p1!3")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (hide-all-but
                                                                                                                                                                             (1
                                                                                                                                                                              3))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "empty_0")
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-8
                                                                                                                                      -11
                                                                                                                                      1
                                                                                                                                      5))
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "child")
                                                                                                                                      (("2"
                                                                                                                                        (skosimp)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "x!3")
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "position_t_first_diff")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "subtermOF(x!1, x!3)"
                                                                                                                                                 "subtermOF(x!2, x!3)"
                                                                                                                                                 "fd")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "pos_o_term")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x!3"
                                                                                                                                                       "fd"
                                                                                                                                                       "x!2")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (name-replace
                                                                                                                                                           "p!1"
                                                                                                                                                           "x!3 o fd")
                                                                                                                                                          (("2"
                                                                                                                                                            (hide
                                                                                                                                                             -5)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "pos_subterm_ax")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "p1!1"
                                                                                                                                                                 "p1!3"
                                                                                                                                                                 "x!2")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "not_var")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "seq_first_rest[posnat]")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "p1!3")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "empty_0[posnat]")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "p1!3")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -2
                                                                                                                                                                                 "first(p1!3)"
                                                                                                                                                                                 "p1!3"
                                                                                                                                                                                 "rest(p1!3)"
                                                                                                                                                                                 "subtermOF(x!2, p1!1)")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-5
                                                                                                                        -6
                                                                                                                        -9
                                                                                                                        1
                                                                                                                        5))
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "position_t_first_diff")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "subtermOF(x!1, x!3)"
                                                                                                                           "subtermOF(x!2, x!3)"
                                                                                                                           "fd")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "x!3")
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "pos_o_term")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "x!3"
                                                                                                                                     "fd"
                                                                                                                                     "x!2")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (name-replace
                                                                                                                                         "p!1"
                                                                                                                                         "x!3 o fd")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "child")
                                                                                                                                          (("2"
                                                                                                                                            (skosimp)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -4
                                                                                                                                               -5)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "pos_subterm_ax")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "x!3"
                                                                                                                                                   "p1!2 o p1!3"
                                                                                                                                                   "x!2")
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     "o_assoc")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (-1
                                                                                                                                                          1
                                                                                                                                                          2))
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "pos_o_pos")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst?)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-3
                                                                                                      -4
                                                                                                      -7
                                                                                                      1
                                                                                                      5))
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "position_s_first_diff")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "subtermOF(x!1, x!3)"
                                                                                                         "subtermOF(x!2, x!3)"
                                                                                                         "fd")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "x!3")
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "pos_o_term")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "x!3"
                                                                                                                   "fd"
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (name-replace
                                                                                                                       "p!1"
                                                                                                                       "x!3 o fd")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -6
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "child")
                                                                                                                          (("2"
                                                                                                                            (skosimp)
                                                                                                                            (("2"
                                                                                                                              (replaces
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "pos_subterm_ax")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "x!3"
                                                                                                                                   "p1!2 o p1!3"
                                                                                                                                   "x!1")
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "o_assoc")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "pos_o_pos")
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          1))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "child")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               -2)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "equal_prefix[posnat]")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!3"
                                                                                                   "fd"
                                                                                                   "p1!2 o p1!3")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "o_assoc")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "p1!3")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -2
                                                                                        -5
                                                                                        1
                                                                                        5))
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "position_s_first_diff")
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "position_t_first_diff")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "subtermOF(x!1, x!3)"
                                                                                             "subtermOF(x!2, x!3)"
                                                                                             "fd")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -2
                                                                                               "subtermOF(x!1, x!3)"
                                                                                               "subtermOF(x!2, x!3)"
                                                                                               "fd")
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "x!3")
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "pos_o_term")
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -1
                                                                                                     "x!3"
                                                                                                     "fd"
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x!3"
                                                                                                       "fd"
                                                                                                       "x!2")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (name-replace
                                                                                                             "p!1"
                                                                                                             "x!3 o fd")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-1
                                                                                                                -2
                                                                                                                -7
                                                                                                                -8
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "child")
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "pos_subterm_ax")
                                                                                                                      (("2"
                                                                                                                        (inst-cp
                                                                                                                         -1
                                                                                                                         "x!3"
                                                                                                                         "p1!2 o p1!3"
                                                                                                                         "x!1")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "x!3"
                                                                                                                           "p1!2 o p1!3"
                                                                                                                           "x!2")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "o_assoc")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "pos_o_pos")
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -1
                                                                                                                                       -2
                                                                                                                                       -4
                                                                                                                                       -5
                                                                                                                                       -6
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "pos_o_pos")
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -6
                                                                       "p1!1")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (lemma
                                                                           "ext_preserve_symbol")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             "x!1"
                                                                             "sig!1"
                                                                             "p1!1")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!2"
                                                                               "sig!1"
                                                                               "p1!1")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-3
                                                                                      -6
                                                                                      1
                                                                                      6))
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "x!3")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "position_s_first_diff")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "subtermOF(x!1, x!3)"
                                                                                             "subtermOF(x!2, x!3)"
                                                                                             "fd")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "pos_o_term")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!3"
                                                                                                   "fd"
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (name-replace
                                                                                                       "p!1"
                                                                                                       "x!3 o fd")
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          -4
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "child")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "pos_subterm_ax")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "p1!1"
                                                                                                                 "p1!2"
                                                                                                                 "x!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "not_var")
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "seq_first_rest[posnat]")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "p1!2")
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "empty_0[posnat]")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "p1!2")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -2
                                                                                                                                 "first(p1!2)"
                                                                                                                                 "p1!2"
                                                                                                                                 "rest(p1!2)"
                                                                                                                                 "subtermOF(x!1, p1!1)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-3
                                                                                    -6
                                                                                    1
                                                                                    6))
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "x!3")
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "position_t_first_diff")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "subtermOF(x!1, x!3)"
                                                                                           "subtermOF(x!2, x!3)"
                                                                                           "fd")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "pos_o_term")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "fd"
                                                                                                 "x!2")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "p!1"
                                                                                                     "x!3 o fd")
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -4
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "child")
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "pos_subterm_ax")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "p1!1"
                                                                                                               "p1!2"
                                                                                                               "x!2")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "not_var")
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "seq_first_rest[posnat]")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "p1!2")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "empty_0[posnat]")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "p1!2")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "first(p1!2)"
                                                                                                                               "p1!2"
                                                                                                                               "rest(p1!2)"
                                                                                                                               "subtermOF(x!2, p1!1)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1
                                                                            2))
                                                                          (("2"
                                                                            (expand
                                                                             "child"
                                                                             -1)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (case
                                                                                 "x!3 = p1!1")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    2))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "<=")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "empty_seq")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "seq_o_empty")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "length(x!3) < length(p1!1)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "o_length_o[posnat]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "<=")
                                                                                            (("1"
                                                                                              (inst
                                                                                               3
                                                                                               "seq!1")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "o_length_o[posnat]")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "p1!1"
                                                                                       "p1!2"
                                                                                       "x!3"
                                                                                       "fd")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "o_equals_o[posnat]")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "child")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     4
                                                                                                     "seq!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "seq_o_empty")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -4
                                                                          1
                                                                          2
                                                                          6))
                                                                        (("2"
                                                                          (typepred
                                                                           "x!3")
                                                                          (("2"
                                                                            (lemma
                                                                             "position_s_first_diff")
                                                                            (("2"
                                                                              (lemma
                                                                               "position_t_first_diff")
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "subtermOF(x!1, x!3)"
                                                                                 "subtermOF(x!2, x!3)"
                                                                                 "fd")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "subtermOF(x!1, x!3)"
                                                                                   "subtermOF(x!2, x!3)"
                                                                                   "fd")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "pos_o_term")
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "x!3"
                                                                                         "fd"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!3"
                                                                                           "fd"
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (name-replace
                                                                                               "p!1"
                                                                                               "x!3 o fd")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -3
                                                                                                 -4
                                                                                                 -5
                                                                                                 -6
                                                                                                 -8
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "child")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       2
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "pos_o_pos")
                                                                                                        (("2"
                                                                                                          (inst-cp
                                                                                                           -1
                                                                                                           "p1!1"
                                                                                                           "p1!2"
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "p1!1"
                                                                                                             "p1!2"
                                                                                                             "x!2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 -5 -6 4)
                        (("2" (lemma "next_position_is_position")
                          (("2"
                            (inst-cp -1 "ext(sig!1)(x!1)"
                             "ext(sig!1)(x!2)" "x!3 o fd")
                            (("2"
                              (inst -1 "ext(sig!1)(x!2)"
                               "ext(sig!1)(x!1)" "x!3 o fd")
                              (("1"
                                (lemma "next_position_commute")
                                (("1"
                                  (inst
                                   -1
                                   "ext(sig!1)(x!2)"
                                   "ext(sig!1)(x!1)"
                                   "x!3 o fd")
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (replace -3)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (lemma "position_s_first_diff")
                                  (("2"
                                    (lemma "position_t_first_diff")
                                    (("2"
                                      (inst
                                       -2
                                       "subtermOF(x!1, x!3)"
                                       "subtermOF(x!2, x!3)"
                                       "fd")
                                      (("2"
                                        (inst
                                         -1
                                         "subtermOF(x!1, x!3)"
                                         "subtermOF(x!2, x!3)"
                                         "fd")
                                        (("2"
                                          (typepred "x!3")
                                          (("2"
                                            (lemma "pos_o_term")
                                            (("2"
                                              (inst-cp
                                               -1
                                               "x!3"
                                               "fd"
                                               "x!1")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x!3"
                                                 "fd"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "ext_preserv_pos")
                                                      (("2"
                                                        (rewrite
                                                         "ext_preserv_pos")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -3 -4 -5 4)
                      (("2" (lemma "position_s_first_diff")
                        (("2" (lemma "position_t_first_diff")
                          (("2"
                            (inst -2 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" "fd")
                            (("2"
                              (inst -1 "subtermOF(x!1, x!3)"
                               "subtermOF(x!2, x!3)" "fd")
                              (("2"
                                (typepred "x!3")
                                (("2"
                                  (lemma "pos_o_term")
                                  (("2"
                                    (inst-cp -1 "x!3" "fd" "x!1")
                                    (("2"
                                      (inst -1 "x!3" "fd" "x!2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "ext_preserv_pos")
                                            (("2"
                                              (rewrite
                                               "ext_preserv_pos")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -)
        (("2" (prop)
          (("2" (lemma "dom_ran_ruaEF_disjoint")
            (("2" (inst -1 "x!1" "x!2" "x!3")
              (("2" (assert)
                (("2"
                  (name-replace "sig!1"
                   "robinson_unification_algorithm_aux(x!1, x!2, x!3)")
                  (("2"
                    (expand* "subset?" "difference" "union" "member")
                    (("2" (decompose-equality -2)
                      (("2" (inst -2 "xx")
                        (("2" (inst -1 "xx")
                          (("2" (prop)
                            (("1" (expand "fail")
                              (("1"
                                (expand "Dom")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -1 -4)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (typepred "xx")
                                        (("1"
                                          (expand "V")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "fail")
                              (("2"
                                (expand "Dom")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -1 -4)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (typepred "xx")
                                        (("2"
                                          (expand "V")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "VRan")
                              (("3"
                                (expand "IUnion")
                                (("3"
                                  (inst 1 "xx")
                                  (("1"
                                    (expand "fail")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (expand "Vars")
                                        (("1"
                                          (inst 1 "#(1)")
                                          (("1"
                                            (expand "subtermOF")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -2 1)
                                                  (("1"
                                                    (expand "#")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (hide 1)
                                                      (("2"
                                                        (case
                                                         "args(app(ff,  #(xx)))`seq(first( #(1)) - 1) = xx")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (case
                                                             "rest( #(1)) = empty_seq")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "subtermOF")
                                                                (("1"
                                                                  (rewrite
                                                                   "empty_0")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "rest")
                                                                (("2"
                                                                  (expand
                                                                   "#")
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "#")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (expand
                                                             "first")
                                                            (("3"
                                                              (expand
                                                               "finseq_appl")
                                                              (("3"
                                                                (prop)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "#")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "positionsOF")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (decompose-equality
                                                   -2)
                                                  (("2"
                                                    (hide -1 -2 +)
                                                    (("2"
                                                      (expand "#")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1 1)
                                                  (("3"
                                                    (expand*
                                                     "union"
                                                     "IUnion"
                                                     "member"
                                                     "only_empty_seq")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (hide 1)
                                                        (("3"
                                                          (inst 1 "1")
                                                          (("1"
                                                            (expand
                                                             "catenate")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "empty_seq")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (expand
                                                                       "positionsOF")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (expand*
                                                                           "union"
                                                                           "IUnion"
                                                                           "member"
                                                                           "only_empty_seq")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (expand*
                                                                       "#"
                                                                       "add_first"
                                                                       "insert?")
                                                                      (("2"
                                                                        (lemma
                                                                         "empty_0[posnat]")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "empty_seq")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (reveal -1)
                                                            (("2"
                                                              (decompose-equality
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (expand
                                                                   "#")
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -2)
                                    (("2"
                                      (expand "Dom")
                                      (("2"
                                        (expand "fail")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (typepred "xx")
                                              (("2"
                                                (expand "V")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide - 2)
      (("2" (skosimp)
        (("2" (expand "child")
          (("2" (skosimp)
            (("2" (lemma "pos_subterm_ax")
              (("2" (inst -1 "p1!1" "p1!2" "y!2")
                (("2" (assert)
                  (("2" (lemma "not_var")
                    (("2" (lemma "seq_first_rest[posnat]")
                      (("2" (inst -1 "p1!2")
                        (("2" (lemma "empty_0[posnat]")
                          (("2" (inst -1 "p1!2")
                            (("2" (assert)
                              (("2"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide - 2)
      (("3" (skosimp)
        (("3" (expand "child")
          (("3" (skosimp)
            (("3" (lemma "pos_subterm_ax")
              (("3" (inst -1 "p1!1" "p1!2" "y!1")
                (("3" (assert)
                  (("3" (lemma "not_var")
                    (("3" (lemma "seq_first_rest[posnat]")
                      (("3" (inst -1 "p1!2")
                        (("3" (lemma "empty_0[posnat]")
                          (("3" (inst -1 "p1!2")
                            (("3" (assert)
                              (("3"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1, p1!1)")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "right_pos_subset")
        (("4" (inst?)
          (("4" (lemma "positions_of_terms_finite")
            (("4" (inst?)
              (("4" (lemma "finite_subset[position]")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma "right_pos_subset")
        (("6" (inst?)
          (("6" (lemma "positions_of_terms_finite")
            (("6" (inst?)
              (("6" (lemma "finite_subset[position]")
                (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("8" (hide - 2)
      (("8" (skosimp)
        (("8" (expand "child")
          (("8" (skosimp)
            (("8" (lemma "pos_subterm_ax")
              (("8" (inst -1 "p11!1" "p1!1" "x!1`2")
                (("8" (assert)
                  (("8" (lemma "not_var")
                    (("8" (lemma "seq_first_rest[posnat]")
                      (("8" (inst -1 "p1!1")
                        (("8" (lemma "empty_0[posnat]")
                          (("8" (inst -1 "p1!1")
                            (("8" (assert)
                              (("8"
                                (inst
                                 -2
                                 "first(p1!1)"
                                 "p1!1"
                                 "rest(p1!1)"
                                 "subtermOF(x!1`2, p11!1)")
                                (("8" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide - 2)
      (("9" (skosimp)
        (("9" (expand "child")
          (("9" (skosimp)
            (("9" (lemma "pos_subterm_ax")
              (("9" (inst -1 "p11!1" "p1!1" "x!1`1")
                (("9" (assert)
                  (("9" (lemma "not_var")
                    (("9" (lemma "seq_first_rest[posnat]")
                      (("9" (inst -1 "p1!1")
                        (("9" (lemma "empty_0[posnat]")
                          (("9" (inst -1 "p1!1")
                            (("9" (assert)
                              (("9"
                                (inst
                                 -2
                                 "first(p1!1)"
                                 "p1!1"
                                 "rest(p1!1)"
                                 "subtermOF(x!1`1, p11!1)")
                                (("9" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide - 2)
      (("10" (skosimp)
        (("10" (expand "child")
          (("10" (skosimp)
            (("10" (lemma "pos_subterm_ax")
              (("10" (inst -1 "p1!1" "p1!2" "y!1`2")
                (("10" (assert)
                  (("10" (lemma "not_var")
                    (("10" (lemma "seq_first_rest[posnat]")
                      (("10" (inst -1 "p1!2")
                        (("10" (lemma "empty_0[posnat]")
                          (("10" (inst -1 "p1!2")
                            (("10" (assert)
                              (("10"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1`2, p1!1)")
                                (("10" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide - 2)
      (("11" (skosimp)
        (("11" (expand "child")
          (("11" (skosimp)
            (("11" (lemma "pos_subterm_ax")
              (("11" (inst -1 "p1!1" "p1!2" "y!1`1")
                (("11" (assert)
                  (("11" (lemma "not_var")
                    (("11" (lemma "seq_first_rest[posnat]")
                      (("11" (inst -1 "p1!2")
                        (("11" (lemma "empty_0[posnat]")
                          (("11" (inst -1 "p1!2")
                            (("11" (assert)
                              (("11"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1`1, p1!1)")
                                (("11" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (lemma "right_pos_subset")
        (("12" (inst?)
          (("12" (lemma "positions_of_terms_finite")
            (("12" (inst?)
              (("12" (lemma "finite_subset[position]")
                (("12" (inst?) (("12" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (lemma "right_pos_subset")
        (("14" (inst?)
          (("14" (lemma "positions_of_terms_finite")
            (("14" (inst?)
              (("14" (lemma "finite_subset[position]")
                (("14" (inst?) (("14" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("16" (hide - 2)
      (("16" (skosimp)
        (("16" (expand "child")
          (("16" (skosimp)
            (("16" (lemma "pos_subterm_ax")
              (("16" (inst -1 "p1!1" "p1!2" "t!1")
                (("16" (assert)
                  (("16" (lemma "not_var")
                    (("16" (lemma "seq_first_rest[posnat]")
                      (("16" (inst -1 "p1!2")
                        (("16" (lemma "empty_0[posnat]")
                          (("16" (inst -1 "p1!2")
                            (("16" (assert)
                              (("16"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(t!1, p1!1)")
                                (("16" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide - 2)
      (("17" (skosimp)
        (("17" (expand "child")
          (("17" (skosimp)
            (("17" (lemma "pos_subterm_ax")
              (("17" (inst -1 "p1!1" "p1!2" "s!1")
                (("17" (assert)
                  (("17" (lemma "not_var")
                    (("17" (lemma "seq_first_rest[posnat]")
                      (("17" (inst -1 "p1!2")
                        (("17" (lemma "empty_0[posnat]")
                          (("17" (inst -1 "p1!2")
                            (("17" (assert)
                              (("17"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(s!1, p1!1)")
                                (("17" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma "right_pos_subset")
        (("18" (inst?)
          (("18" (lemma "positions_of_terms_finite")
            (("18" (inst?)
              (("18" (lemma "finite_subset[position]")
                (("18" (inst?) (("18" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (hide 2)
      (("19" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (union const-decl "set" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (left_without_children const-decl "bool" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (child const-decl "bool" positions nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (unifiable const-decl "bool" unification nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (fail const-decl "Sub" robinsonunification nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (xx const-decl "(V)" robinsonunification nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (only_empty_seq const-decl "positions" positions nil)
    (catenate const-decl "positions" positions nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (ff const-decl "{f: symbol | arity(f) = 1}" robinsonunification
     nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (iden_subs formula-decl nil substitution nil)
    (unifier const-decl "bool" unification nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (O const-decl "finseq" finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (<= const-decl "bool" positions nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (not_var formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (subs_o formula-decl nil substitution nil)
    (ext_o formula-decl nil substitution nil)
    (comp const-decl "term" substitution nil)
    (first_diff def-decl "position" robinsonunification nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   shostak))
 (ruaEF_gives_unifier_aux 0
  (ruaEF_gives_unifier_aux-2 "" 3803854026
   (""
    (spread
     (measure-induct+
      "lex2(Card(union(Vars(s), Vars(t))), Card(right_pos(s,p)))"
      ("s" "t" "p"))
     ((spread (prop)
       ((spread (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
         ((spread (case "x!3 = empty_seq")
           ((then (hide -4 -5 -6)
             (expand "robinson_unification_algorithm_aux") (assert)
             (replaces -1) (expand "next_position" 1 1) (hide -2)
             (rewrite "subterm_empty_seq")
             (rewrite "subterm_empty_seq")
             (expand* "member" "U" "unifier") (assert))
            (then (expand "robinson_unification_algorithm_aux" 2)
             (assert) (lift-if)
             (spread (prop)
              ((then (hide -4) (lemma "next_pos_empty_equal_subterm")
                (inst -1 "x!1" "x!2" "x!3") (assert) (ground)
                (lemma "equal_term") (inst -1 "x!1" "x!2" "x!3")
                (ground) (hide-all-but (-1 1))
                (expand* "member" "U" "unifier") (assert))
               (then
                (inst -3 "x!1" "x!2" "next_position(x!1, x!2, x!3)")
                (lemma "robinson_unification_algorithm_aux_TCC8")
                (inst -1 "x!1" "x!2" "x!3"
                 "next_position(x!1, x!2, x!3)")
                (assert) (hide -1 2)
                (spread (prop)
                 ((then (skosimp) (lemma "next_pos_equal_subterm")
                   (inst -1 "x!1" "x!2" "x!3") (assert) (ground)
                   (inst -1 "q!1") (assert))
                  (then (skosimp) (lemma "child_np_child_p")
                   (inst -1 "x!1" "x!2" "x!3" "p1!1") (assert)
                   (inst -6 "p1!1") (assert))))))))))
          (then (expand "robinson_unification_algorithm_aux" 2)
           (assert)
           (name-replace "sig!1"
            "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
            :hide? nil)
           (name-replace "fd"
            "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
            :hide? nil)
           (spread
            (name-replace "np"
             "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
             :hide? nil)
            ((spread
              (name-replace "sig!2"
               "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
               :hide? nil)
              ((then (lift-if)
                (spread (prop)
                 ((then (hide-all-but (-1 -5 -6 2))
                   (lemma "unifiable_implies_not_fail1")
                   (inst -1 "x!1" "x!2" "x!3") (replace -3) (assert))
                  (then (hide -7)
                   (lemma "np_p_o_fd_empty_unifiable_term")
                   (inst -1 "x!1" "x!2" "x!3") (replace -6)
                   (replace -5) (assert) (assert) (ground)
                   (hide-all-but (-1 1))
                   (expand* "member" "U" "unifier"))
                  (then (hide -7)
                   (lemma "ruaEF_fails_iff_non_unifiable_aux")
                   (inst -1 "x!1" "x!2" "x!3") (assert) (ground)
                   (expand "robinson_unification_algorithm_aux" 1)
                   (propax))
                  (then
                   (inst -6 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
                   (replace -1)
                   (lemma "robinson_unification_algorithm_aux_TCC12")
                   (inst -1 "x!1" "x!2" "x!3") (replace -5) (assert)
                   (replace -4) (inst -1 "sig!1") (assert) (replace -3)
                   (inst -1 "np") (assert) (hide -1)
                   (spread (split)
                    ((spread (prop)
                      ((then (hide-all-but (-2 2)) (lemma "unifier_o")
                        (inst -1 "x!1" "sig!2" "x!2" "sig!1") (assert))
                       (then (hide-all-but (-4 -5 2 7))
                        (lemma "unifiable_preserves_unifiability1")
                        (inst -1 "x!1" "x!2" "x!3") (replace -2)
                        (assert))))
                     (then (skosimp) (lemma "np_p_o_fd_equal_subterm")
                      (inst -1 "x!1" "x!2" "x!3") (replace -5)
                      (replace -6) (assert) (ground) (replace -4)
                      (inst -1 "q!1") (assert))
                     (then (skosimp) (lemma "child_np_child_p")
                      (inst -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                       "x!3 o fd" "p1!1")
                      (assert)
                      (spread (case "x!3 <= p1!1")
                       ((then (lemma "fd_equal_symbol")
                         (inst -1 "subtermOF(x!1, x!3)"
                          "subtermOF(x!2, x!3)")
                         (replace -7) (assert) (expand "<=") (skosimp)
                         (spread (inst -1 "p1!2")
                          ((spread (split)
                            ((then (lemma "pos_subterm")
                              (inst-cp -1 "x!3" "p1!2" "x!1")
                              (inst -1 "x!3" "p1!2" "x!2")
                              (spread (split)
                               ((spread
                                 (split)
                                 ((then
                                   (replace -1 -3 rl)
                                   (replace -2 -3 rl)
                                   (hide -1 -2)
                                   (replace -2 -1 rl)
                                   (lemma "ext_preserve_symbol")
                                   (inst-cp -1 "x!1" "sig!1" "p1!1")
                                   (inst -1 "x!2" "sig!1" "p1!1")
                                   (spread
                                    (split)
                                    ((spread
                                      (split)
                                      ((assert)
                                       (then
                                        (hide-all-but (-3 -4 -8 1 7))
                                        (lemma "position_s_first_diff")
                                        (inst
                                         -1
                                         "subtermOF(x!1, x!3)"
                                         "subtermOF(x!2, x!3)"
                                         "fd")
                                        (assert)
                                        (typepred "x!3")
                                        (hide -2)
                                        (lemma "pos_o_term")
                                        (inst -1 "x!3" "fd" "x!1")
                                        (assert)
                                        (name-replace "q!1" "x!3 o fd")
                                        (hide-all-but (-1 -5 1))
                                        (expand "child")
                                        (skosimp)
                                        (lemma "not_var")
                                        (lemma
                                         "seq_first_rest[posnat]")
                                        (inst -1 "p1!3")
                                        (lemma "empty_0[posnat]")
                                        (inst -1 "p1!3")
                                        (assert)
                                        (inst
                                         -2
                                         "first(p1!3)"
                                         "p1!3"
                                         "rest(p1!3)"
                                         "subtermOF(x!1, p1!1)")
                                        (lemma "pos_subterm_ax")
                                        (inst -1 "p1!1" "p1!3" "x!1")
                                        (assert))))
                                     (then
                                      (hide-all-but (-3 -4 -8 1 7))
                                      (lemma "position_t_first_diff")
                                      (inst
                                       -1
                                       "subtermOF(x!1, x!3)"
                                       "subtermOF(x!2, x!3)"
                                       "fd")
                                      (assert)
                                      (typepred "x!3")
                                      (hide -1)
                                      (lemma "pos_o_term")
                                      (inst -1 "x!3" "fd" "x!2")
                                      (assert)
                                      (name-replace "q!1" "x!3 o fd")
                                      (hide-all-but (-1 -5 1))
                                      (expand "child")
                                      (skosimp)
                                      (lemma "not_var")
                                      (lemma "seq_first_rest[posnat]")
                                      (inst -1 "p1!3")
                                      (lemma "empty_0[posnat]")
                                      (inst -1 "p1!3")
                                      (assert)
                                      (inst
                                       -2
                                       "first(p1!3)"
                                       "p1!3"
                                       "rest(p1!3)"
                                       "subtermOF(x!2, p1!1)")
                                      (assert)
                                      (lemma "pos_subterm_ax")
                                      (inst -1 "p1!1" "p1!3" "x!2")
                                      (assert)))))
                                  (then
                                   (hide-all-but (-3 -4 -8 1 7))
                                   (lemma "position_s_first_diff")
                                   (inst
                                    -1
                                    "subtermOF(x!1, x!3)"
                                    "subtermOF(x!2, x!3)"
                                    "fd")
                                   (assert)
                                   (typepred "x!3")
                                   (hide -2)
                                   (lemma "pos_o_term")
                                   (inst -1 "x!3" "fd" "x!1")
                                   (assert)
                                   (name-replace "q!1" "x!3 o fd")
                                   (hide -2 -3 -6 2)
                                   (expand "child")
                                   (skosimp)
                                   (replace -2 1 rl)
                                   (hide -2)
                                   (lemma "pos_ax")
                                   (inst -1 "p1!1" "p1!3" "x!1")
                                   (assert))))
                                (then
                                 (hide-all-but (-3 -4 -8 1 7))
                                 (replace -1 1 rl)
                                 (hide -1)
                                 (lemma "position_t_first_diff")
                                 (inst
                                  -1
                                  "subtermOF(x!1, x!3)"
                                  "subtermOF(x!2, x!3)"
                                  "fd")
                                 (assert)
                                 (typepred "x!3")
                                 (hide -1)
                                 (lemma "pos_o_term")
                                 (inst -1 "x!3" "fd" "x!2")
                                 (assert)
                                 (name-replace "q!1" "x!3 o fd")
                                 (hide -2 -3 -5 2)
                                 (expand "child")
                                 (skosimp)
                                 (lemma "pos_ax")
                                 (inst -1 "p1!1" "p1!3" "x!2")
                                 (assert)))))
                             (then (hide-all-but (-1 -2 1))
                              (replaces -1) (expand "child") (skosimp)
                              (lemma "equal_prefix[posnat]")
                              (inst -1 "x!3" "fd" "p1!2 o p1!3")
                              (rewrite "o_assoc") (assert) (hide -2)
                              (inst 1 "p1!3") (assert))))
                           (then (hide-all-but (-1 -2 -6 1 7))
                            (lemma "position_s_first_diff")
                            (lemma "position_t_first_diff")
                            (inst -2 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" "fd")
                            (inst -1 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" "fd")
                            (assert) (typepred "x!3")
                            (lemma "pos_o_term")
                            (inst-cp -1 "x!3" "fd" "x!2")
                            (inst -1 "x!3" "fd" "x!1") (assert)
                            (name-replace "q!1" "x!3 o fd")
                            (hide-all-but (-1 -2 -7 -8 1))
                            (replaces -3) (expand "child") (skosimp)
                            (lemma "pos_subterm_ax")
                            (inst-cp -1 "x!3" "p1!2 o p1!3" "x!2")
                            (inst -1 "x!3" "p1!2 o p1!3" "x!1")
                            (rewrite "o_assoc") (assert)
                            (hide -3 -4 -5 2) (lemma "pos_ax")
                            (inst-cp -1 "p1!2" "p1!3"
                             "subtermOF(x!2, x!3)")
                            (inst -1 "p1!2" "p1!3"
                             "subtermOF(x!1, x!3)")
                            (assert)))))
                        (spread (inst -9 "p1!1")
                         ((then (lemma "ext_preserve_symbol")
                           (spread (inst-cp -1 "x!1" "sig!1" "p1!1")
                            ((spread (inst -1 "x!2" "sig!1" "p1!1")
                              ((spread
                                (split -11)
                                ((spread
                                  (split -2)
                                  ((spread
                                    (split -3)
                                    ((assert)
                                     (then
                                      (hide-all-but (-3 -7 1 8))
                                      (lemma "position_s_first_diff")
                                      (inst
                                       -1
                                       "subtermOF(x!1, x!3)"
                                       "subtermOF(x!2, x!3)"
                                       "fd")
                                      (assert)
                                      (typepred "x!3")
                                      (hide -2)
                                      (lemma "pos_o_term")
                                      (inst -1 "x!3" "fd" "x!1")
                                      (assert)
                                      (name-replace "q!1" "x!3 o fd")
                                      (hide -2 -3 -5 2)
                                      (expand "child")
                                      (skosimp)
                                      (lemma "not_var")
                                      (lemma "seq_first_rest[posnat]")
                                      (inst -1 "p1!2")
                                      (lemma "empty_0[posnat]")
                                      (inst -1 "p1!2")
                                      (assert)
                                      (inst
                                       -2
                                       "first(p1!2)"
                                       "p1!2"
                                       "rest(p1!2)"
                                       "subtermOF(x!1, p1!1)")
                                      (assert)
                                      (lemma "pos_subterm_ax")
                                      (inst -1 "p1!1" "p1!2" "x!1")
                                      (assert))))
                                   (then
                                    (hide-all-but (-3 -7 1 8))
                                    (lemma "position_t_first_diff")
                                    (inst
                                     -1
                                     "subtermOF(x!1, x!3)"
                                     "subtermOF(x!2, x!3)"
                                     "fd")
                                    (assert)
                                    (typepred "x!3")
                                    (hide -1)
                                    (lemma "pos_o_term")
                                    (inst -1 "x!3" "fd" "x!2")
                                    (assert)
                                    (name-replace "q!1" "x!3 o fd")
                                    (hide -2 -3 -5 2)
                                    (expand "child")
                                    (skosimp)
                                    (lemma "not_var")
                                    (lemma "seq_first_rest[posnat]")
                                    (inst -1 "p1!2")
                                    (lemma "empty_0[posnat]")
                                    (inst -1 "p1!2")
                                    (assert)
                                    (inst
                                     -2
                                     "first(p1!2)"
                                     "p1!2"
                                     "rest(p1!2)"
                                     "subtermOF(x!2, p1!1)")
                                    (assert)
                                    (lemma "pos_subterm_ax")
                                    (inst -1 "p1!1" "p1!2" "x!2")
                                    (assert))))
                                 (then
                                  (hide-all-but (-3 1 2))
                                  (expand "child")
                                  (skosimp)
                                  (expand "<=")
                                  (spread
                                   (case "length(x!3) < length(p1!1)")
                                   ((then
                                     (lemma "o_length_o[posnat]")
                                     (inst?)
                                     (assert))
                                    (spread
                                     (case
                                      "length(p1!1) < length(x!3)")
                                     ((then
                                       (lemma "o_length_o[posnat]")
                                       (inst
                                        -1
                                        "p1!1"
                                        "p1!2"
                                        "x!3"
                                        "fd")
                                       (assert)
                                       (skosimp)
                                       (inst 2 "seq!1")
                                       (assert)
                                       (flatten)
                                       (inst 2 "seq!1")
                                       (replaces -3)
                                       (rewrite "seq_o_empty")
                                       (rewrite "seq_o_empty")
                                       (assert))
                                      (then
                                       (lemma "o_equals_o[posnat]")
                                       (inst
                                        -1
                                        "x!3"
                                        "fd"
                                        "p1!1"
                                        "p1!2")
                                       (assert)
                                       (inst 4 "empty_seq")
                                       (rewrite "seq_o_empty")
                                       (assert)))))))))
                               (then
                                (hide-all-but (-2 -6 1 8))
                                (lemma "position_t_first_diff")
                                (inst
                                 -1
                                 "subtermOF(x!1, x!3)"
                                 "subtermOF(x!2, x!3)"
                                 "fd")
                                (assert)
                                (typepred "x!3")
                                (hide -1)
                                (lemma "pos_o_term")
                                (inst -1 "x!3" "fd" "x!2")
                                (assert)
                                (name-replace "q!1" "x!3 o fd")
                                (hide -2 -3 -5 2)
                                (expand "child")
                                (skosimp)
                                (lemma "pos_ax")
                                (inst -1 "p1!1" "p1!2" "x!2")
                                (assert))))
                             (then (hide-all-but (-1 -5 1 8))
                              (lemma "position_s_first_diff")
                              (inst -1 "subtermOF(x!1, x!3)"
                               "subtermOF(x!2, x!3)" "fd")
                              (assert) (typepred "x!3") (hide -2)
                              (lemma "pos_o_term")
                              (inst -1 "x!3" "fd" "x!1") (assert)
                              (name-replace "q!1" "x!3 o fd")
                              (hide -2 -3 -5 2) (expand "child")
                              (skosimp) (lemma "pos_ax")
                              (inst -1 "p1!1" "p1!2" "x!1")
                              (assert)))))
                          (then (hide-all-but (-1 -5 1 8))
                           (lemma "position_t_first_diff")
                           (lemma "position_s_first_diff")
                           (inst -2 "subtermOF(x!1, x!3)"
                            "subtermOF(x!2, x!3)" "fd")
                           (inst -1 "subtermOF(x!1, x!3)"
                            "subtermOF(x!2, x!3)" "fd")
                           (assert) (typepred "x!3")
                           (lemma "pos_o_term")
                           (inst-cp -1 "x!3" "fd" "x!2")
                           (inst -1 "x!3" "fd" "x!1") (assert)
                           (name-replace "q!1" "x!3 o fd")
                           (hide -3 -4 -5 -6 -8 2) (expand "child")
                           (skosimp) (lemma "pos_ax")
                           (inst-cp -1 "p1!1" "p1!2" "x!2")
                           (inst -1 "p1!1" "p1!2" "x!1")
                           (assert)))))))))))))
               (then (hide-all-but (-1 -2 1))
                (lemma "next_position_is_position")
                (inst-cp -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                 "x!3 o fd")
                (spread
                 (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                  "x!3 o fd")
                 ((then (lemma "next_position_commute")
                   (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                    "x!3 o fd")
                   (replace -4) (replace -1) (assert))
                  (then (hide -1 -2 2) (lemma "position_t_first_diff")
                   (lemma "position_s_first_diff")
                   (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                    "fd")
                   (inst -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                    "fd")
                   (assert) (typepred "x!3") (lemma "pos_o_term")
                   (inst-cp -1 "x!3" "fd" "x!2")
                   (inst -1 "x!3" "fd" "x!1") (assert)
                   (hide-all-but (-1 -2 1)) (rewrite "ext_preserv_pos")
                   (rewrite "ext_preserv_pos")))))))
             (then (hide-all-but (-1 1))
              (lemma "position_t_first_diff")
              (lemma "position_s_first_diff")
              (inst -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
               "fd")
              (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
               "fd")
              (assert) (typepred "x!3") (lemma "pos_o_term")
              (inst-cp -1 "x!3" "fd" "x!2") (inst -1 "x!3" "fd" "x!1")
              (assert) (hide-all-but (-1 -2 1))
              (rewrite "ext_preserv_pos")
              (rewrite "ext_preserv_pos")))))))
        (then (hide -2 -3 -4)
         (name-replace "sig1"
          "robinson_unification_algorithm_aux(x!1, x!2, x!3)")
         (expand* "member" "U" "unifiable" "unifier")
         (inst 1 "sig1"))))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!2") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!2, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!1") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!1, p1!1)")
       (assert))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "x!1`2")
       (assert) (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(x!1`2, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "x!1`1")
       (assert) (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(x!1`1, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!1`2")
       (assert) (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!1`2, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!1`1")
       (assert) (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!1`1, p1!1)")
       (assert))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "finite_subset[position]")
       (spread (inst?)
        ((assert)
         (then (hide 2) (hide - 2) (lemma "pos_subterm_ax") (assert)
          (lemma "not_var") (lemma "seq_first_rest[posnat]")
          (lemma "empty_0[posnat]") (assert) (hide - 2)
          (lemma "pos_subterm_ax") (lemma "not_var")
          (lemma "seq_first_rest[posnat]") (lemma "empty_0[posnat]")
          (lemma "right_pos_subset") (inst?)
          (lemma "positions_of_terms_finite") (inst?)))))
      (then (lemma "finite_subset[position]") (assert) (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "t!1") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(t!1, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "s!1") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(s!1, p1!1)")
       (assert))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (O const-decl "finseq" finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (<= const-decl "bool" positions nil)
    (pos_ax formula-decl nil positions nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (not_var formula-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (pos_o_term formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (o_length_o formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (unifier_o formula-decl nil unification nil)
    (first_diff def-decl "position" robinsonunification nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (unifier const-decl "bool" unification nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (equal_term formula-decl nil subterm nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (member const-decl "bool" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (child const-decl "bool" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (left_without_children const-decl "bool" positions nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (ruaEF_gives_unifier_aux-1 nil 3512386375
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                                                 Card(right_pos(s,p)))"
     ("s" "t" "p"))
    (("1" (prop)
      (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
        (("1" (case "x!3 = empty_seq")
          (("1" (hide -4 -5 -6)
            (("1" (expand "robinson_unification_algorithm_aux")
              (("1" (assert)
                (("1" (replaces -1)
                  (("1" (expand "next_position" 1 1)
                    (("1" (hide -2)
                      (("1" (rewrite "subterm_empty_seq")
                        (("1" (rewrite "subterm_empty_seq")
                          (("1" (expand* "member" "U" "unifier")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "robinson_unification_algorithm_aux" 2)
            (("2" (assert)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide -4)
                    (("1" (lemma "next_pos_empty_equal_subterm")
                      (("1" (inst -1 "x!1" "x!2" "x!3")
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (lemma "equal_term")
                              (("1"
                                (inst -1 "x!1" "x!2" "x!3")
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1"
                                      (expand* "member" "U" "unifier")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (inst -3 "x!1" "x!2"
                     "next_position(x!1, x!2, x!3)")
                    (("2"
                      (lemma "robinson_unification_algorithm_aux_TCC8")
                      (("2" (inst -1 "x!1" "x!2" "x!3")
                        (("2" (assert)
                          (("2"
                            (inst -1 "next_position(x!1, x!2, x!3)")
                            (("2" (assert)
                              (("2"
                                (hide -1 2)
                                (("2"
                                  (prop)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (lemma "next_pos_equal_subterm")
                                      (("1"
                                        (inst -1 "x!1" "x!2" "x!3")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst -1 "q!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (lemma "child_np_child_p")
                                      (("2"
                                        (inst
                                         -1
                                         "x!1"
                                         "x!2"
                                         "x!3"
                                         "p1!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -6 "p1!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "robinson_unification_algorithm_aux" 2)
          (("2" (assert)
            (("2"
              (name-replace "sig!1"
               "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
               :hide? nil)
              (("2"
                (name-replace "fd"
                 "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
                 :hide? nil)
                (("2"
                  (name-replace "np"
                   "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
                   :hide? nil)
                  (("1"
                    (name-replace "sig!2"
                     "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                     :hide? nil)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but (-1 -5 -6 2))
                          (("1" (lemma "unifiable_implies_not_fail1")
                            (("1" (inst -1 "x!1" "x!2" "x!3")
                              (("1"
                                (replace -3)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -7)
                          (("2"
                            (lemma "np_p_o_fd_empty_unifiable_term")
                            (("2" (inst -1 "x!1" "x!2" "x!3")
                              (("2"
                                (replace -6)
                                (("2"
                                  (replace -5)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (ground)
                                        (("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (expand*
                                             "member"
                                             "U"
                                             "unifier")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -7)
                          (("3"
                            (lemma "ruaEF_fails_iff_non_unifiable_aux")
                            (("3" (inst -1 "x!1" "x!2" "x!3")
                              (("3"
                                (assert)
                                (("3"
                                  (ground)
                                  (("3"
                                    (expand
                                     "robinson_unification_algorithm_aux"
                                     1)
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4"
                          (inst -6 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                           "np")
                          (("4" (replace -1)
                            (("4"
                              (lemma
                               "robinson_unification_algorithm_aux_TCC12")
                              (("4"
                                (inst -1 "x!1" "x!2" "x!3")
                                (("4"
                                  (replace -5)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (inst -1 "sig!1")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (replace -3)
                                            (("4"
                                              (inst -1 "np")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (hide -1)
                                                  (("4"
                                                    (split)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but
                                                         (-2 2))
                                                        (("1"
                                                          (lemma
                                                           "unifier_o")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "sig!2"
                                                             "x!2"
                                                             "sig!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-4 -5 2 7))
                                                        (("2"
                                                          (lemma
                                                           "unifiable_preserves_unifiability1")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "x!2"
                                                             "x!3")
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (lemma
                                                         "np_p_o_fd_equal_subterm")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "x!2"
                                                           "x!3")
                                                          (("2"
                                                            (replace
                                                             -5)
                                                            (("2"
                                                              (replace
                                                               -6)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "q!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (lemma
                                                         "child_np_child_p")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "ext(sig!1)(x!1)"
                                                           "ext(sig!1)(x!2)"
                                                           "x!3 o fd"
                                                           "p1!1")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (case
                                                               "x!3 <= p1!1")
                                                              (("1"
                                                                (lemma
                                                                 "fd_equal_symbol")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "subtermOF(x!1, x!3)"
                                                                   "subtermOF(x!2, x!3)")
                                                                  (("1"
                                                                    (replace
                                                                     -7)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "<=")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p1!2")
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (lemma
                                                                                 "pos_subterm")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "x!3"
                                                                                   "p1!2"
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x!3"
                                                                                     "p1!2"
                                                                                     "x!2")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -3
                                                                                           rl)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             -3
                                                                                             rl)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 -1
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "ext_preserve_symbol")
                                                                                                  (("1"
                                                                                                    (inst-cp
                                                                                                     -1
                                                                                                     "x!1"
                                                                                                     "sig!1"
                                                                                                     "p1!1")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x!2"
                                                                                                       "sig!1"
                                                                                                       "p1!1")
                                                                                                      (("1"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-3
                                                                                                              -4
                                                                                                              -8
                                                                                                              1
                                                                                                              7))
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "position_s_first_diff")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "subtermOF(x!1, x!3)"
                                                                                                                 "subtermOF(x!2, x!3)"
                                                                                                                 "fd")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "x!3")
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "pos_o_term")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "x!3"
                                                                                                                           "fd"
                                                                                                                           "x!1")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (name-replace
                                                                                                                               "q!1"
                                                                                                                               "x!3 o fd")
                                                                                                                              (("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -5
                                                                                                                                  1))
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "child")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "not_var")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "seq_first_rest[posnat]")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "p1!3")
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "empty_0[posnat]")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "p1!3")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -2
                                                                                                                                                   "first(p1!3)"
                                                                                                                                                   "p1!3"
                                                                                                                                                   "rest(p1!3)"
                                                                                                                                                   "subtermOF(x!1, p1!1)")
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "pos_subterm_ax")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "p1!1"
                                                                                                                                                       "p1!3"
                                                                                                                                                       "x!1")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (-3
                                                                                                            -4
                                                                                                            -8
                                                                                                            1
                                                                                                            7))
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "position_t_first_diff")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "subtermOF(x!1, x!3)"
                                                                                                               "subtermOF(x!2, x!3)"
                                                                                                               "fd")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "x!3")
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "pos_o_term")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "x!3"
                                                                                                                         "fd"
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (name-replace
                                                                                                                             "q!1"
                                                                                                                             "x!3 o fd")
                                                                                                                            (("2"
                                                                                                                              (hide-all-but
                                                                                                                               (-1
                                                                                                                                -5
                                                                                                                                1))
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "child")
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "not_var")
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "seq_first_rest[posnat]")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "p1!3")
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "empty_0[posnat]")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "p1!3")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -2
                                                                                                                                                 "first(p1!3)"
                                                                                                                                                 "p1!3"
                                                                                                                                                 "rest(p1!3)"
                                                                                                                                                 "subtermOF(x!2, p1!1)")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "pos_subterm_ax")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "p1!1"
                                                                                                                                                       "p1!3"
                                                                                                                                                       "x!2")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-3
                                                                                            -4
                                                                                            -8
                                                                                            1
                                                                                            7))
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "position_s_first_diff")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "subtermOF(x!1, x!3)"
                                                                                               "subtermOF(x!2, x!3)"
                                                                                               "fd")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!3")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "pos_o_term")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "x!3"
                                                                                                         "fd"
                                                                                                         "x!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (name-replace
                                                                                                             "q!1"
                                                                                                             "x!3 o fd")
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2
                                                                                                               -3
                                                                                                               -6
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "child")
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     1
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "pos_ax")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "p1!1"
                                                                                                                           "p1!3"
                                                                                                                           "x!1")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-3
                                                                                          -4
                                                                                          -8
                                                                                          1
                                                                                          7))
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "position_t_first_diff")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "subtermOF(x!1, x!3)"
                                                                                                 "subtermOF(x!2, x!3)"
                                                                                                 "fd")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "x!3")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "pos_o_term")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x!3"
                                                                                                           "fd"
                                                                                                           "x!2")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (name-replace
                                                                                                               "q!1"
                                                                                                               "x!3 o fd")
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -2
                                                                                                                 -3
                                                                                                                 -5
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "child")
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "pos_ax")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "p1!1"
                                                                                                                         "p1!3"
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  1))
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "child")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "equal_prefix[posnat]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!3"
                                                                                           "fd"
                                                                                           "p1!2 o p1!3")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "o_assoc")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "p1!3")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6
                                                                                1
                                                                                7))
                                                                              (("2"
                                                                                (lemma
                                                                                 "position_s_first_diff")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "position_t_first_diff")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "subtermOF(x!1, x!3)"
                                                                                     "subtermOF(x!2, x!3)"
                                                                                     "fd")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "subtermOF(x!1, x!3)"
                                                                                       "subtermOF(x!2, x!3)"
                                                                                       "fd")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x!3")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "pos_o_term")
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "x!3"
                                                                                               "fd"
                                                                                               "x!2")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "fd"
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "q!1"
                                                                                                     "x!3 o fd")
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -2
                                                                                                        -7
                                                                                                        -8
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "child")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "pos_subterm_ax")
                                                                                                              (("2"
                                                                                                                (inst-cp
                                                                                                                 -1
                                                                                                                 "x!3"
                                                                                                                 "p1!2 o p1!3"
                                                                                                                 "x!2")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "x!3"
                                                                                                                   "p1!2 o p1!3"
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "o_assoc")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "pos_ax")
                                                                                                                          (("2"
                                                                                                                            (inst-cp
                                                                                                                             -1
                                                                                                                             "p1!2"
                                                                                                                             "p1!3"
                                                                                                                             "subtermOF(x!2, x!3)")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "p1!2"
                                                                                                                               "p1!3"
                                                                                                                               "subtermOF(x!1, x!3)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -9
                                                                 "p1!1")
                                                                (("1"
                                                                  (lemma
                                                                   "ext_preserve_symbol")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "x!1"
                                                                     "sig!1"
                                                                     "p1!1")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x!2"
                                                                       "sig!1"
                                                                       "p1!1")
                                                                      (("1"
                                                                        (split
                                                                         -11)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (split
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-3
                                                                                -7
                                                                                1
                                                                                8))
                                                                              (("2"
                                                                                (lemma
                                                                                 "position_s_first_diff")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "subtermOF(x!1, x!3)"
                                                                                   "subtermOF(x!2, x!3)"
                                                                                   "fd")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "x!3")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "pos_o_term")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!3"
                                                                                             "fd"
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (name-replace
                                                                                                 "q!1"
                                                                                                 "x!3 o fd")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -2
                                                                                                   -3
                                                                                                   -5
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "child")
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "not_var")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "seq_first_rest[posnat]")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "p1!2")
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "empty_0[posnat]")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "p1!2")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "first(p1!2)"
                                                                                                                     "p1!2"
                                                                                                                     "rest(p1!2)"
                                                                                                                     "subtermOF(x!1, p1!1)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "pos_subterm_ax")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "p1!1"
                                                                                                                           "p1!2"
                                                                                                                           "x!1")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              -7
                                                                              1
                                                                              8))
                                                                            (("2"
                                                                              (lemma
                                                                               "position_t_first_diff")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "subtermOF(x!1, x!3)"
                                                                                 "subtermOF(x!2, x!3)"
                                                                                 "fd")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "x!3")
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "pos_o_term")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!3"
                                                                                           "fd"
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (name-replace
                                                                                               "q!1"
                                                                                               "x!3 o fd")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -2
                                                                                                 -3
                                                                                                 -5
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "child")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "not_var")
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "seq_first_rest[posnat]")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "p1!2")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "empty_0[posnat]")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "p1!2")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "first(p1!2)"
                                                                                                                   "p1!2"
                                                                                                                   "rest(p1!2)"
                                                                                                                   "subtermOF(x!2, p1!1)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "pos_subterm_ax")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "p1!1"
                                                                                                                         "p1!2"
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-3
                                                                            1
                                                                            2))
                                                                          (("2"
                                                                            (expand
                                                                             "child")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (expand
                                                                                 "<=")
                                                                                (("2"
                                                                                  (case
                                                                                   "length(x!3) < length(p1!1)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "o_length_o[posnat]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "length(p1!1) < length(x!3)")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "o_length_o[posnat]")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "p1!1"
                                                                                         "p1!2"
                                                                                         "x!3"
                                                                                         "fd")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               2
                                                                                               "seq!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     2
                                                                                                     "seq!1")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "seq_o_empty")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "seq_o_empty")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "o_equals_o[posnat]")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!3"
                                                                                         "fd"
                                                                                         "p1!1"
                                                                                         "p1!2")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             4
                                                                                             "empty_seq")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "seq_o_empty")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-2
                                                                          -6
                                                                          1
                                                                          8))
                                                                        (("2"
                                                                          (lemma
                                                                           "position_t_first_diff")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "subtermOF(x!1, x!3)"
                                                                             "subtermOF(x!2, x!3)"
                                                                             "fd")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "x!3")
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "pos_o_term")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!3"
                                                                                       "fd"
                                                                                       "x!2")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (name-replace
                                                                                           "q!1"
                                                                                           "x!3 o fd")
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2
                                                                                             -3
                                                                                             -5
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "child")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "pos_ax")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "p1!1"
                                                                                                     "p1!2"
                                                                                                     "x!2")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -5
                                                                        1
                                                                        8))
                                                                      (("2"
                                                                        (lemma
                                                                         "position_s_first_diff")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "subtermOF(x!1, x!3)"
                                                                           "subtermOF(x!2, x!3)"
                                                                           "fd")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               "x!3")
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "pos_o_term")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "x!3"
                                                                                     "fd"
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "q!1"
                                                                                         "x!3 o fd")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -2
                                                                                           -3
                                                                                           -5
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "child")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "pos_ax")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p1!1"
                                                                                                   "p1!2"
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -5
                                                                    1
                                                                    8))
                                                                  (("2"
                                                                    (lemma
                                                                     "position_t_first_diff")
                                                                    (("2"
                                                                      (lemma
                                                                       "position_s_first_diff")
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "subtermOF(x!1, x!3)"
                                                                         "subtermOF(x!2, x!3)"
                                                                         "fd")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "subtermOF(x!1, x!3)"
                                                                           "subtermOF(x!2, x!3)"
                                                                           "fd")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               "x!3")
                                                                              (("2"
                                                                                (lemma
                                                                                 "pos_o_term")
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "x!3"
                                                                                   "fd"
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "x!3"
                                                                                     "fd"
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "q!1"
                                                                                         "x!3 o fd")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -3
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -8
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "child")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "pos_ax")
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "p1!1"
                                                                                                   "p1!2"
                                                                                                   "x!2")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "p1!1"
                                                                                                     "p1!2"
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -2 1))
                      (("2" (lemma "next_position_is_position")
                        (("2"
                          (inst-cp -1 "ext(sig!1)(x!1)"
                           "ext(sig!1)(x!2)" "x!3 o fd")
                          (("2"
                            (inst -1 "ext(sig!1)(x!2)"
                             "ext(sig!1)(x!1)" "x!3 o fd")
                            (("1" (lemma "next_position_commute")
                              (("1"
                                (inst
                                 -1
                                 "ext(sig!1)(x!2)"
                                 "ext(sig!1)(x!1)"
                                 "x!3 o fd")
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (replace -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 2)
                              (("2"
                                (lemma "position_t_first_diff")
                                (("2"
                                  (lemma "position_s_first_diff")
                                  (("2"
                                    (inst
                                     -1
                                     "subtermOF(x!1, x!3)"
                                     "subtermOF(x!2, x!3)"
                                     "fd")
                                    (("2"
                                      (inst
                                       -2
                                       "subtermOF(x!1, x!3)"
                                       "subtermOF(x!2, x!3)"
                                       "fd")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "x!3")
                                          (("2"
                                            (lemma "pos_o_term")
                                            (("2"
                                              (inst-cp
                                               -1
                                               "x!3"
                                               "fd"
                                               "x!2")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x!3"
                                                 "fd"
                                                 "x!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 -2 1))
                                                    (("2"
                                                      (rewrite
                                                       "ext_preserv_pos")
                                                      (("2"
                                                        (rewrite
                                                         "ext_preserv_pos")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1))
                    (("2" (lemma "position_t_first_diff")
                      (("2" (lemma "position_s_first_diff")
                        (("2"
                          (inst -2 "subtermOF(x!1, x!3)"
                           "subtermOF(x!2, x!3)" "fd")
                          (("2"
                            (inst -1 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" "fd")
                            (("2" (assert)
                              (("2"
                                (typepred "x!3")
                                (("2"
                                  (lemma "pos_o_term")
                                  (("2"
                                    (inst-cp -1 "x!3" "fd" "x!2")
                                    (("2"
                                      (inst -1 "x!3" "fd" "x!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but (-1 -2 1))
                                          (("2"
                                            (rewrite "ext_preserv_pos")
                                            (("2"
                                              (rewrite
                                               "ext_preserv_pos")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -2 -3 -4)
        (("2"
          (name-replace "sig1"
           "robinson_unification_algorithm_aux(x!1, x!2, x!3)")
          (("2" (expand* "member" "U" "unifiable" "unifier")
            (("2" (inst 1 "sig1") nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide - 2)
      (("2" (skosimp)
        (("2" (expand "child")
          (("2" (skosimp)
            (("2" (lemma "pos_subterm_ax")
              (("2" (inst -1 "p1!1" "p1!2" "y!2")
                (("2" (assert)
                  (("2" (lemma "not_var")
                    (("2" (lemma "seq_first_rest[posnat]")
                      (("2" (inst -1 "p1!2")
                        (("2" (lemma "empty_0[posnat]")
                          (("2" (inst -1 "p1!2")
                            (("2" (assert)
                              (("2"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide - 2)
      (("3" (skosimp)
        (("3" (expand "child")
          (("3" (skosimp)
            (("3" (lemma "pos_subterm_ax")
              (("3" (inst -1 "p1!1" "p1!2" "y!1")
                (("3" (assert)
                  (("3" (lemma "not_var")
                    (("3" (lemma "seq_first_rest[posnat]")
                      (("3" (inst -1 "p1!2")
                        (("3" (lemma "empty_0[posnat]")
                          (("3" (inst -1 "p1!2")
                            (("3" (assert)
                              (("3"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1, p1!1)")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "right_pos_subset")
        (("4" (inst?)
          (("4" (lemma "positions_of_terms_finite")
            (("4" (inst?)
              (("4" (lemma "finite_subset[position]")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma "right_pos_subset")
        (("6" (inst?)
          (("6" (lemma "positions_of_terms_finite")
            (("6" (inst?)
              (("6" (lemma "finite_subset[position]")
                (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("8" (hide - 2)
      (("8" (skosimp)
        (("8" (expand "child")
          (("8" (skosimp)
            (("8" (lemma "pos_subterm_ax")
              (("8" (inst -1 "p11!1" "p1!1" "x!1`2")
                (("8" (assert)
                  (("8" (lemma "not_var")
                    (("8" (lemma "seq_first_rest[posnat]")
                      (("8" (inst -1 "p1!1")
                        (("8" (lemma "empty_0[posnat]")
                          (("8" (inst -1 "p1!1")
                            (("8" (assert)
                              (("8"
                                (inst
                                 -2
                                 "first(p1!1)"
                                 "p1!1"
                                 "rest(p1!1)"
                                 "subtermOF(x!1`2, p11!1)")
                                (("8" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide - 2)
      (("9" (skosimp)
        (("9" (expand "child")
          (("9" (skosimp)
            (("9" (lemma "pos_subterm_ax")
              (("9" (inst -1 "p11!1" "p1!1" "x!1`1")
                (("9" (assert)
                  (("9" (lemma "not_var")
                    (("9" (lemma "seq_first_rest[posnat]")
                      (("9" (inst -1 "p1!1")
                        (("9" (lemma "empty_0[posnat]")
                          (("9" (inst -1 "p1!1")
                            (("9" (assert)
                              (("9"
                                (inst
                                 -2
                                 "first(p1!1)"
                                 "p1!1"
                                 "rest(p1!1)"
                                 "subtermOF(x!1`1, p11!1)")
                                (("9" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide - 2)
      (("10" (skosimp)
        (("10" (expand "child")
          (("10" (skosimp)
            (("10" (lemma "pos_subterm_ax")
              (("10" (inst -1 "p1!1" "p1!2" "y!1`2")
                (("10" (assert)
                  (("10" (lemma "not_var")
                    (("10" (lemma "seq_first_rest[posnat]")
                      (("10" (inst -1 "p1!2")
                        (("10" (lemma "empty_0[posnat]")
                          (("10" (inst -1 "p1!2")
                            (("10" (assert)
                              (("10"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1`2, p1!1)")
                                (("10" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide - 2)
      (("11" (skosimp)
        (("11" (expand "child")
          (("11" (skosimp)
            (("11" (lemma "pos_subterm_ax")
              (("11" (inst -1 "p1!1" "p1!2" "y!1`1")
                (("11" (assert)
                  (("11" (lemma "not_var")
                    (("11" (lemma "seq_first_rest[posnat]")
                      (("11" (inst -1 "p1!2")
                        (("11" (lemma "empty_0[posnat]")
                          (("11" (inst -1 "p1!2")
                            (("11" (assert)
                              (("11"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1`1, p1!1)")
                                (("11" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (lemma "right_pos_subset")
        (("12" (inst?)
          (("12" (lemma "positions_of_terms_finite")
            (("12" (inst?)
              (("12" (lemma "finite_subset[position]")
                (("12" (inst?) (("12" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (lemma "right_pos_subset")
        (("14" (inst?)
          (("14" (lemma "finite_subset[position]")
            (("14" (inst?)
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (hide - 2)
                  (("2" (lemma "pos_subterm_ax")
                    (("2" (assert)
                      (("2" (lemma "not_var")
                        (("2" (lemma "seq_first_rest[posnat]")
                          (("2" (lemma "empty_0[posnat]")
                            (("2" (assert)
                              (("2"
                                (hide - 2)
                                (("2"
                                  (lemma "pos_subterm_ax")
                                  (("2"
                                    (lemma "not_var")
                                    (("2"
                                      (lemma "seq_first_rest[posnat]")
                                      (("2"
                                        (lemma "empty_0[posnat]")
                                        (("2"
                                          (lemma "right_pos_subset")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (lemma
                                               "positions_of_terms_finite")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (lemma "finite_subset[position]")
      (("15" (assert)
        (("15" (hide 2)
          (("15" (rewrite "finite_union")
            (("1" (hide 2)
              (("1" (rewrite "vars_of_term_finite") nil nil)) nil)
             ("2" (hide 2)
              (("2" (rewrite "vars_of_term_finite") nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (hide - 2)
      (("16" (skosimp)
        (("16" (expand "child")
          (("16" (skosimp)
            (("16" (lemma "pos_subterm_ax")
              (("16" (inst -1 "p1!1" "p1!2" "t!1")
                (("16" (assert)
                  (("16" (lemma "not_var")
                    (("16" (lemma "seq_first_rest[posnat]")
                      (("16" (inst -1 "p1!2")
                        (("16" (lemma "empty_0[posnat]")
                          (("16" (inst -1 "p1!2")
                            (("16" (assert)
                              (("16"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(t!1, p1!1)")
                                (("16" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide - 2)
      (("17" (skosimp)
        (("17" (expand "child")
          (("17" (skosimp)
            (("17" (lemma "pos_subterm_ax")
              (("17" (inst -1 "p1!1" "p1!2" "s!1")
                (("17" (assert)
                  (("17" (lemma "not_var")
                    (("17" (lemma "seq_first_rest[posnat]")
                      (("17" (inst -1 "p1!2")
                        (("17" (lemma "empty_0[posnat]")
                          (("17" (inst -1 "p1!2")
                            (("17" (assert)
                              (("17"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(s!1, p1!1)")
                                (("17" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma "right_pos_subset")
        (("18" (inst?)
          (("18" (lemma "positions_of_terms_finite")
            (("18" (inst?)
              (("18" (lemma "finite_subset[position]")
                (("18" (inst?) (("18" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (hide 2)
      (("19" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (union const-decl "set" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (left_without_children const-decl "bool" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (child const-decl "bool" positions nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (unifiable const-decl "bool" unification nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (member const-decl "bool" sets nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (equal_term formula-decl nil subterm nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (unifier const-decl "bool" unification nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (first_diff def-decl "position" robinsonunification nil)
    (unifier_o formula-decl nil unification nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (not_var formula-decl nil positions nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (pos_ax formula-decl nil positions nil)
    (<= const-decl "bool" positions nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (O const-decl "finseq" finite_sequences nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   shostak))
 (ruaEF_gives_mg_subs_aux 0
  (ruaEF_gives_mg_subs_aux-2 "" 3803854535
   (""
    (spread
     (measure-induct+
      "lex2(Card(union(Vars(s), Vars(t))), Card(right_pos(s,p)))"
      ("s" "t" "p"))
     ((then (skosimp)
       (spread (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
        ((spread (case "x!3 = empty_seq")
          ((then (hide -3 -4 -5)
            (expand "robinson_unification_algorithm_aux") (assert)
            (replaces -1) (expand "next_position" 1 1) (hide -)
            (expand "<=") (inst 1 "rho!1") (decompose-equality)
            (expand "comp") (expand "identity") (typepred "x!4")
            (expand* "V" "ext") (assert))
           (then (expand "robinson_unification_algorithm_aux" 2)
            (assert) (lift-if)
            (spread (prop)
             ((then (hide-all-but 1) (expand "<=") (inst 1 "rho!1")
               (decompose-equality) (typepred "x!4")
               (expand* "V" "comp" "ext" "identity") (assert))
              (then
               (name-replace "np" "next_position(x!1, x!2, x!3)" :hide?
                nil)
               (name-replace "sig!1"
                "robinson_unification_algorithm_aux(x!1, x!2, np)"
                :hide? nil)
               (inst -4 "x!1" "x!2" "np") (inst -4 "rho!1") (assert)
               (lemma "robinson_unification_algorithm_aux_TCC8")
               (inst -1 "x!1" "x!2" "x!3" "np") (assert) (hide -1)
               (spread (prop)
                ((then (skosimp) (lemma "next_pos_equal_subterm")
                  (inst -1 "x!1" "x!2" "x!3") (ground) (replace -4)
                  (inst -1 "q!1") (assert))
                 (then (skosimp) (lemma "child_np_child_p")
                  (inst -1 "x!1" "x!2" "x!3" "p1!1") (replace -4)
                  (assert) (inst -7 "p1!1") (assert))))))))))
         (then (expand "robinson_unification_algorithm_aux" 2) (assert)
          (name-replace "sig!1"
           "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
           :hide? nil)
          (name-replace "fd"
           "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
           :hide? nil)
          (spread
           (name-replace "np"
            "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
            :hide? nil)
           ((spread
             (name-replace "sig!2"
              "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
              :hide? nil)
             ((then (lift-if)
               (spread (prop)
                ((then (hide-all-but (-1 -5 -9))
                  (lemma "unifiable_implies_not_fail1")
                  (inst -1 "x!1" "x!2" "x!3") (replace -3) (assert)
                  (assert) (hide -1 -2)
                  (expand* "member" "U" "unifiable" "unifier")
                  (inst 1 "rho!1"))
                 (then (hide-all-but (-5 -9 1 3))
                  (lemma "preserving_generality1")
                  (inst -1 "rho!1" "x!1" "x!2" "x!3") (replace -2)
                  (assert) (skosimp) (expand "<=") (inst 1 "theta!1"))
                 (then (hide -6)
                  (lemma "ruaEF_fails_iff_non_unifiable_aux")
                  (inst -1 "x!1" "x!2" "x!3")
                  (spread (ground)
                   ((then (hide-all-but (-9 1))
                     (expand* "member" "U" "unifiable" "unifier")
                     (inst 1 "rho!1"))
                    (then
                     (expand "robinson_unification_algorithm_aux" 1)
                     (propax)))))
                 (then
                  (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
                  (lemma "preserving_generality1")
                  (inst -1 "rho!1" "x!1" "x!2" "x!3") (assert)
                  (replace -5) (skosimp) (inst -6 "theta!1")
                  (lemma "robinson_unification_algorithm_aux_TCC12")
                  (inst -1 "x!1" "x!2" "x!3") (assert)
                  (inst -1 "sig!1") (assert) (replace -5) (replace -4)
                  (inst -1 "np") (assert) (hide -1) (replace -2)
                  (spread (ground)
                   ((then (hide-all-but (-1 -2 2)) (expand "<=")
                     (skosimp) (replaces -1) (inst 1 "tau!1")
                     (rewrite "o_ass"))
                    (then (hide-all-but (-1 -8 1))
                     (expand* "member" "U" "unifier") (replaces -1)
                     (rewrite "ext_o") (expand "o") (propax))
                    (then (skosimp) (lemma "np_p_o_fd_equal_subterm")
                     (inst -1 "x!1" "x!2" "x!3") (replace -6)
                     (replace -7) (assert) (replace -5) (ground))
                    (then (skosimp) (lemma "child_np_child_p")
                     (inst -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                      "x!3 o fd" "p1!1")
                     (replace -5) (assert)
                     (spread (case "x!3 <= p1!1")
                      ((then (hide -3 -4 -5 -6 -9 -10 -11 2 3 4)
                        (lemma "fd_equal_symbol")
                        (inst -1 "subtermOF(x!1, x!3)"
                         "subtermOF(x!2, x!3)")
                        (replace -4) (assert) (expand "<=") (skosimp)
                        (spread (inst -1 "p1!2")
                         ((spread (split)
                           ((then (lemma "pos_subterm")
                             (inst-cp -1 "x!3" "p1!2" "x!1")
                             (inst -1 "x!3" "p1!2" "x!2")
                             (spread (split)
                              ((spread
                                (split)
                                ((then
                                  (replace -1 -3 rl)
                                  (replace -2 -3 rl)
                                  (hide -1 -2)
                                  (replace -2 -1 rl)
                                  (lemma "ext_preserve_symbol")
                                  (inst-cp -1 "x!1" "sig!1" "p1!1")
                                  (inst -1 "x!2" "sig!1" "p1!1")
                                  (spread
                                   (split)
                                   ((spread
                                     (split)
                                     ((assert)
                                      (then
                                       (hide-all-but (-3 -4 -5 1 4))
                                       (lemma "position_s_first_diff")
                                       (inst
                                        -1
                                        "subtermOF(x!1, x!3)"
                                        "subtermOF(x!2, x!3)"
                                        "fd")
                                       (assert)
                                       (typepred "x!3")
                                       (hide -2)
                                       (lemma "pos_o_term")
                                       (inst -1 "x!3" "fd" "x!1")
                                       (assert)
                                       (name-replace "q!1" "x!3 o fd")
                                       (hide-all-but (-1 -5 1))
                                       (expand "child")
                                       (skosimp)
                                       (lemma "not_var")
                                       (lemma "seq_first_rest[posnat]")
                                       (inst -1 "p1!3")
                                       (lemma "empty_0[posnat]")
                                       (inst -1 "p1!3")
                                       (assert)
                                       (inst
                                        -2
                                        "first(p1!3)"
                                        "p1!3"
                                        "rest(p1!3)"
                                        "subtermOF(x!1, p1!1)")
                                       (lemma "pos_subterm_ax")
                                       (inst -1 "p1!1" "p1!3" "x!1")
                                       (assert))))
                                    (then
                                     (hide-all-but (-3 -4 -5 1 4))
                                     (lemma "position_t_first_diff")
                                     (inst
                                      -1
                                      "subtermOF(x!1, x!3)"
                                      "subtermOF(x!2, x!3)"
                                      "fd")
                                     (assert)
                                     (typepred "x!3")
                                     (hide -1)
                                     (lemma "pos_o_term")
                                     (inst -1 "x!3" "fd" "x!2")
                                     (assert)
                                     (name-replace "q!1" "x!3 o fd")
                                     (hide-all-but (-1 -5 1))
                                     (expand "child")
                                     (skosimp)
                                     (lemma "not_var")
                                     (lemma "seq_first_rest[posnat]")
                                     (inst -1 "p1!3")
                                     (lemma "empty_0[posnat]")
                                     (inst -1 "p1!3")
                                     (assert)
                                     (inst
                                      -2
                                      "first(p1!3)"
                                      "p1!3"
                                      "rest(p1!3)"
                                      "subtermOF(x!2, p1!1)")
                                     (assert)
                                     (lemma "pos_subterm_ax")
                                     (inst -1 "p1!1" "p1!3" "x!2")
                                     (assert)))))
                                 (then
                                  (hide-all-but (-3 -4 -5 1 4))
                                  (lemma "position_s_first_diff")
                                  (inst
                                   -1
                                   "subtermOF(x!1, x!3)"
                                   "subtermOF(x!2, x!3)"
                                   "fd")
                                  (assert)
                                  (typepred "x!3")
                                  (hide -2)
                                  (lemma "pos_o_term")
                                  (inst -1 "x!3" "fd" "x!1")
                                  (assert)
                                  (name-replace "q!1" "x!3 o fd")
                                  (hide -2 -3 -6 2)
                                  (expand "child")
                                  (skosimp)
                                  (replace -2 1 rl)
                                  (hide -2)
                                  (lemma "pos_ax")
                                  (inst -1 "p1!1" "p1!3" "x!1")
                                  (assert))))
                               (then
                                (hide-all-but (-3 -4 -5 1 4))
                                (replace -1 1 rl)
                                (hide -1)
                                (lemma "position_t_first_diff")
                                (inst
                                 -1
                                 "subtermOF(x!1, x!3)"
                                 "subtermOF(x!2, x!3)"
                                 "fd")
                                (assert)
                                (typepred "x!3")
                                (hide -1)
                                (lemma "pos_o_term")
                                (inst -1 "x!3" "fd" "x!2")
                                (assert)
                                (name-replace "q!1" "x!3 o fd")
                                (hide -2 -3 -5 2)
                                (expand "child")
                                (skosimp)
                                (lemma "pos_ax")
                                (inst -1 "p1!1" "p1!3" "x!2")
                                (assert)))))
                            (then (hide-all-but (-1 -2 1))
                             (replaces -1) (expand "child") (skosimp)
                             (lemma "equal_prefix[posnat]")
                             (inst -1 "x!3" "fd" "p1!2 o p1!3")
                             (rewrite "o_assoc") (assert) (hide -2)
                             (inst 1 "p1!3") (assert))))
                          (then (hide-all-but (-1 -2 -3 1 4))
                           (lemma "position_s_first_diff")
                           (lemma "position_t_first_diff")
                           (inst -2 "subtermOF(x!1, x!3)"
                            "subtermOF(x!2, x!3)" "fd")
                           (inst -1 "subtermOF(x!1, x!3)"
                            "subtermOF(x!2, x!3)" "fd")
                           (assert) (typepred "x!3")
                           (lemma "pos_o_term")
                           (inst-cp -1 "x!3" "fd" "x!2")
                           (inst -1 "x!3" "fd" "x!1") (assert)
                           (name-replace "q!1" "x!3 o fd")
                           (hide-all-but (-1 -2 -7 -8 1)) (replaces -3)
                           (expand "child") (skosimp)
                           (lemma "pos_subterm_ax")
                           (inst-cp -1 "x!3" "p1!2 o p1!3" "x!2")
                           (inst -1 "x!3" "p1!2 o p1!3" "x!1")
                           (rewrite "o_assoc") (assert)
                           (hide -3 -4 -5 2) (lemma "pos_ax")
                           (inst-cp -1 "p1!2" "p1!3"
                            "subtermOF(x!2, x!3)")
                           (inst -1 "p1!2" "p1!3"
                            "subtermOF(x!1, x!3)")
                           (assert)))))
                       (spread (inst -9 "p1!1")
                        ((then (lemma "ext_preserve_symbol")
                          (spread (inst-cp -1 "x!1" "sig!1" "p1!1")
                           ((spread (inst -1 "x!2" "sig!1" "p1!1")
                             ((spread (split -11)
                               ((spread
                                 (split -2)
                                 ((spread
                                   (split -3)
                                   ((assert)
                                    (then
                                     (hide-all-but (-3 -8 1 8))
                                     (lemma "position_s_first_diff")
                                     (inst
                                      -1
                                      "subtermOF(x!1, x!3)"
                                      "subtermOF(x!2, x!3)"
                                      "fd")
                                     (assert)
                                     (typepred "x!3")
                                     (hide -2)
                                     (lemma "pos_o_term")
                                     (inst -1 "x!3" "fd" "x!1")
                                     (assert)
                                     (name-replace "q!1" "x!3 o fd")
                                     (hide -2 -3 -5 2)
                                     (expand "child")
                                     (skosimp)
                                     (lemma "not_var")
                                     (lemma "seq_first_rest[posnat]")
                                     (inst -1 "p1!2")
                                     (lemma "empty_0[posnat]")
                                     (inst -1 "p1!2")
                                     (assert)
                                     (inst
                                      -2
                                      "first(p1!2)"
                                      "p1!2"
                                      "rest(p1!2)"
                                      "subtermOF(x!1, p1!1)")
                                     (assert)
                                     (lemma "pos_subterm_ax")
                                     (inst -1 "p1!1" "p1!2" "x!1")
                                     (assert))))
                                  (then
                                   (hide-all-but (-3 -8 1 8))
                                   (lemma "position_t_first_diff")
                                   (inst
                                    -1
                                    "subtermOF(x!1, x!3)"
                                    "subtermOF(x!2, x!3)"
                                    "fd")
                                   (assert)
                                   (typepred "x!3")
                                   (hide -1)
                                   (lemma "pos_o_term")
                                   (inst -1 "x!3" "fd" "x!2")
                                   (assert)
                                   (name-replace "q!1" "x!3 o fd")
                                   (hide -2 -3 -5 2)
                                   (expand "child")
                                   (skosimp)
                                   (lemma "not_var")
                                   (lemma "seq_first_rest[posnat]")
                                   (inst -1 "p1!2")
                                   (lemma "empty_0[posnat]")
                                   (inst -1 "p1!2")
                                   (assert)
                                   (inst
                                    -2
                                    "first(p1!2)"
                                    "p1!2"
                                    "rest(p1!2)"
                                    "subtermOF(x!2, p1!1)")
                                   (assert)
                                   (lemma "pos_subterm_ax")
                                   (inst -1 "p1!1" "p1!2" "x!2")
                                   (assert))))
                                (then
                                 (hide-all-but (-3 1 2))
                                 (expand "child")
                                 (skosimp)
                                 (expand "<=")
                                 (spread
                                  (case "length(x!3) < length(p1!1)")
                                  ((then
                                    (lemma "o_length_o[posnat]")
                                    (inst?)
                                    (assert))
                                   (spread
                                    (case "length(p1!1) < length(x!3)")
                                    ((then
                                      (lemma "o_length_o[posnat]")
                                      (inst
                                       -1
                                       "p1!1"
                                       "p1!2"
                                       "x!3"
                                       "fd")
                                      (assert)
                                      (skosimp)
                                      (inst 2 "seq!1")
                                      (assert)
                                      (flatten)
                                      (inst 2 "seq!1")
                                      (replaces -3)
                                      (rewrite "seq_o_empty")
                                      (rewrite "seq_o_empty")
                                      (assert))
                                     (then
                                      (lemma "o_equals_o[posnat]")
                                      (inst
                                       -1
                                       "x!3"
                                       "fd"
                                       "p1!1"
                                       "p1!2")
                                      (assert)
                                      (inst 4 "empty_seq")
                                      (rewrite "seq_o_empty")
                                      (assert)))))))))
                              (then (hide-all-but (-2 -7 1 8))
                               (lemma "position_t_first_diff")
                               (inst
                                -1
                                "subtermOF(x!1, x!3)"
                                "subtermOF(x!2, x!3)"
                                "fd")
                               (assert) (typepred "x!3") (hide -1)
                               (lemma "pos_o_term")
                               (inst -1 "x!3" "fd" "x!2") (assert)
                               (name-replace "q!1" "x!3 o fd")
                               (hide -2 -3 -5 2) (expand "child")
                               (skosimp) (lemma "pos_ax")
                               (inst -1 "p1!1" "p1!2" "x!2")
                               (assert))))
                            (then (hide-all-but (-1 -6 1 8))
                             (lemma "position_s_first_diff")
                             (inst -1 "subtermOF(x!1, x!3)"
                              "subtermOF(x!2, x!3)" "fd")
                             (assert) (typepred "x!3") (hide -2)
                             (lemma "pos_o_term")
                             (inst -1 "x!3" "fd" "x!1") (assert)
                             (name-replace "q!1" "x!3 o fd")
                             (hide -2 -3 -5 2) (expand "child")
                             (skosimp) (lemma "pos_ax")
                             (inst -1 "p1!1" "p1!2" "x!1") (assert)))))
                         (then (hide-all-but (-1 -6 1 8))
                          (lemma "position_t_first_diff")
                          (lemma "position_s_first_diff")
                          (inst -2 "subtermOF(x!1, x!3)"
                           "subtermOF(x!2, x!3)" "fd")
                          (inst -1 "subtermOF(x!1, x!3)"
                           "subtermOF(x!2, x!3)" "fd")
                          (assert) (typepred "x!3")
                          (lemma "pos_o_term")
                          (inst-cp -1 "x!3" "fd" "x!2")
                          (inst -1 "x!3" "fd" "x!1") (assert)
                          (name-replace "q!1" "x!3 o fd")
                          (hide -3 -4 -5 -6 -8 2) (expand "child")
                          (skosimp) (lemma "pos_ax")
                          (inst-cp -1 "p1!1" "p1!2" "x!2")
                          (inst -1 "p1!1" "p1!2" "x!1")
                          (assert)))))))))))))
              (then (hide-all-but (-1 -2 1))
               (lemma "next_position_is_position")
               (inst-cp -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                "x!3 o fd")
               (spread
                (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                 "x!3 o fd")
                ((then (lemma "next_position_commute")
                  (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                   "x!3 o fd")
                  (replace -4) (replace -1) (assert))
                 (then (hide -1 -2 2) (lemma "position_t_first_diff")
                  (lemma "position_s_first_diff")
                  (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                   "fd")
                  (inst -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                   "fd")
                  (assert) (typepred "x!3") (lemma "pos_o_term")
                  (inst-cp -1 "x!3" "fd" "x!2")
                  (inst -1 "x!3" "fd" "x!1") (assert)
                  (hide-all-but (-1 -2 1)) (rewrite "ext_preserv_pos")
                  (rewrite "ext_preserv_pos")))))))
            (then (hide-all-but (-1 1)) (lemma "position_t_first_diff")
             (lemma "position_s_first_diff")
             (inst -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd")
             (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd")
             (assert) (typepred "x!3") (lemma "pos_o_term")
             (inst-cp -1 "x!3" "fd" "x!2") (inst -1 "x!3" "fd" "x!1")
             (assert) (hide-all-but (-1 -2 1))
             (rewrite "ext_preserv_pos")
             (rewrite "ext_preserv_pos"))))))))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!2") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!2, p1!1)")
       (assert))
      (then (hide - 2) (skosimp) (expand "child") (skosimp)
       (lemma "pos_subterm_ax") (inst -1 "p1!1" "p1!2" "y!1") (assert)
       (lemma "not_var") (lemma "seq_first_rest[posnat]")
       (inst -1 "p1!2") (lemma "empty_0[posnat]") (inst -1 "p1!2")
       (assert)
       (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
        "subtermOF(y!1, p1!1)")
       (assert))
      (then (hide - 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 1 3) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide -1 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide 1 3)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide-all-but 1) (skosimp) (lemma "app_term")
       (inst -1 "y!3" "p1!1" "y!2") (assert))
      (then (hide-all-but 1) (skosimp) (lemma "app_term")
       (inst -1 "y!3" "p1!1" "y!1") (assert))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide-all-but 1) (lemma "app_term") (skosimp)
       (inst -1 "x!1`3" "p1!1" "x!1`2") (assert))
      (then (hide-all-but 1) (skosimp) (lemma "app_term")
       (inst -1 "x!1`3" "p1!1" "x!1`1") (assert))
      (then (hide-all-but 1) (skosimp) (lemma "app_term")
       (inst -1 "y!1`3" "p1!1" "y!1`2") (assert))
      (then (hide-all-but 1) (skosimp) (lemma "app_term")
       (inst -1 "y!1`3" "p1!1" "y!1`1") (assert))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide 2) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide 2)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))
      (then (hide -1 2) (skosimp) (lemma "app_term")
       (inst -1 "p!1" "p1!1" "t!1") (assert))
      (then (hide -1 2) (skosimp) (lemma "app_term")
       (inst -1 "p!1" "p1!1" "s!1") (assert))
      (then (hide - 2 3) (lemma "right_pos_subset") (inst?)
       (lemma "positions_of_terms_finite") (inst?)
       (lemma "finite_subset[position]") (inst?) (assert))
      (then (hide - 2 3)
       (spread (rewrite "finite_union")
        ((then (hide 2) (rewrite "vars_of_term_finite"))
         (then (hide 2) (rewrite "vars_of_term_finite")))))))
    nil)
   ((app_term formula-decl nil subterm nil)
    (vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (O const-decl "finseq" finite_sequences nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (o_ass formula-decl nil substitution nil)
    (ext_o formula-decl nil substitution nil)
    (<= const-decl "bool" positions nil)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (not_var formula-decl nil positions nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (pos_ax formula-decl nil positions nil)
    (o_length_o formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (unifiable const-decl "bool" unification nil)
    (unifier const-decl "bool" unification nil)
    (first_diff def-decl "position" robinsonunification nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (comp const-decl "term" substitution nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (<= const-decl "bool" unification nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (member const-decl "bool" sets nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (child const-decl "bool" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (left_without_children const-decl "bool" positions nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)
  (ruaEF_gives_mg_subs_aux-1 nil 3512504975
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                                                   Card(right_pos(s,p)))"
     ("s" "t" "p"))
    (("1" (skosimp)
      (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
        (("1" (case "x!3 = empty_seq")
          (("1" (hide -3 -4 -5)
            (("1" (expand "robinson_unification_algorithm_aux")
              (("1" (assert)
                (("1" (replaces -1)
                  (("1" (expand "next_position" 1 1)
                    (("1" (hide -)
                      (("1" (expand "<=")
                        (("1" (inst 1 "rho!1")
                          (("1" (decompose-equality)
                            (("1" (expand "comp")
                              (("1"
                                (expand "identity")
                                (("1"
                                  (typepred "x!4")
                                  (("1"
                                    (expand* "V" "ext")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "robinson_unification_algorithm_aux" 2)
            (("2" (assert)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide-all-but 1)
                    (("1" (expand "<=")
                      (("1" (inst 1 "rho!1")
                        (("1" (decompose-equality)
                          (("1" (typepred "x!4")
                            (("1" (expand* "V" "comp" "ext" "identity")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (name-replace "np" "next_position(x!1, x!2, x!3)"
                     :hide? nil)
                    (("2"
                      (name-replace "sig!1"
                       "robinson_unification_algorithm_aux(x!1, x!2, np)"
                       :hide? nil)
                      (("2" (inst -4 "x!1" "x!2" "np")
                        (("2" (inst -4 "rho!1")
                          (("2" (assert)
                            (("2"
                              (lemma
                               "robinson_unification_algorithm_aux_TCC8")
                              (("2"
                                (inst -1 "x!1" "x!2" "x!3")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "np")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (lemma
                                               "next_pos_equal_subterm")
                                              (("1"
                                                (inst
                                                 -1
                                                 "x!1"
                                                 "x!2"
                                                 "x!3")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (replace -4)
                                                    (("1"
                                                      (inst -1 "q!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (lemma
                                               "child_np_child_p")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x!1"
                                                 "x!2"
                                                 "x!3"
                                                 "p1!1")
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst -7 "p1!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "robinson_unification_algorithm_aux" 2)
          (("2" (assert)
            (("2"
              (name-replace "sig!1"
               "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
               :hide? nil)
              (("2"
                (name-replace "fd"
                 "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
                 :hide? nil)
                (("2"
                  (name-replace "np"
                   "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
                   :hide? nil)
                  (("1"
                    (name-replace "sig!2"
                     "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                     :hide? nil)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but (-1 -5 -9))
                          (("1" (lemma "unifiable_implies_not_fail1")
                            (("1" (inst -1 "x!1" "x!2" "x!3")
                              (("1"
                                (replace -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (expand*
                                         "member"
                                         "U"
                                         "unifiable"
                                         "unifier")
                                        (("1"
                                          (inst 1 "rho!1")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-5 -9 1 3))
                          (("2" (lemma "preserving_generality1")
                            (("2" (inst -1 "rho!1" "x!1" "x!2" "x!3")
                              (("2"
                                (replace -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "<=")
                                      (("2"
                                        (inst 1 "theta!1")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -6)
                          (("3"
                            (lemma "ruaEF_fails_iff_non_unifiable_aux")
                            (("3" (inst -1 "x!1" "x!2" "x!3")
                              (("3"
                                (ground)
                                (("1"
                                  (hide-all-but (-9 1))
                                  (("1"
                                    (expand*
                                     "member"
                                     "U"
                                     "unifiable"
                                     "unifier")
                                    (("1" (inst 1 "rho!1") nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand
                                   "robinson_unification_algorithm_aux"
                                   1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4"
                          (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                           "np")
                          (("4" (lemma "preserving_generality1")
                            (("4" (inst -1 "rho!1" "x!1" "x!2" "x!3")
                              (("4"
                                (assert)
                                (("4"
                                  (replace -5)
                                  (("4"
                                    (skosimp)
                                    (("4"
                                      (inst -6 "theta!1")
                                      (("4"
                                        (lemma
                                         "robinson_unification_algorithm_aux_TCC12")
                                        (("4"
                                          (inst -1 "x!1" "x!2" "x!3")
                                          (("4"
                                            (assert)
                                            (("4"
                                              (inst -1 "sig!1")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (replace -5)
                                                  (("4"
                                                    (replace -4)
                                                    (("4"
                                                      (inst -1 "np")
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (hide -1)
                                                          (("4"
                                                            (replace
                                                             -2)
                                                            (("4"
                                                              (ground)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -2
                                                                  2))
                                                                (("1"
                                                                  (expand
                                                                   "<=")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "tau!1")
                                                                        (("1"
                                                                          (rewrite
                                                                           "o_ass")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -8
                                                                  1))
                                                                (("2"
                                                                  (expand*
                                                                   "member"
                                                                   "U"
                                                                   "unifier")
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "ext_o")
                                                                      (("2"
                                                                        (expand
                                                                         "o")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (lemma
                                                                   "np_p_o_fd_equal_subterm")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "x!1"
                                                                     "x!2"
                                                                     "x!3")
                                                                    (("3"
                                                                      (replace
                                                                       -6)
                                                                      (("3"
                                                                        (replace
                                                                         -7)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (replace
                                                                             -5)
                                                                            (("3"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skosimp)
                                                                (("4"
                                                                  (lemma
                                                                   "child_np_child_p")
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "ext(sig!1)(x!1)"
                                                                     "ext(sig!1)(x!2)"
                                                                     "x!3 o fd"
                                                                     "p1!1")
                                                                    (("4"
                                                                      (replace
                                                                       -5)
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (case
                                                                           "x!3 <= p1!1")
                                                                          (("1"
                                                                            (hide
                                                                             -3
                                                                             -4
                                                                             -5
                                                                             -6
                                                                             -9
                                                                             -10
                                                                             -11
                                                                             2
                                                                             3
                                                                             4)
                                                                            (("1"
                                                                              (lemma
                                                                               "fd_equal_symbol")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "subtermOF(x!1, x!3)"
                                                                                 "subtermOF(x!2, x!3)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -4)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "<=")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "p1!2")
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "pos_subterm")
                                                                                              (("1"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "p1!2"
                                                                                                 "x!1")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!3"
                                                                                                   "p1!2"
                                                                                                   "x!2")
                                                                                                  (("1"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         -3
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -3
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2
                                                                                                               -1
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "ext_preserve_symbol")
                                                                                                                (("1"
                                                                                                                  (inst-cp
                                                                                                                   -1
                                                                                                                   "x!1"
                                                                                                                   "sig!1"
                                                                                                                   "p1!1")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x!2"
                                                                                                                     "sig!1"
                                                                                                                     "p1!1")
                                                                                                                    (("1"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           (-3
                                                                                                                            -4
                                                                                                                            -5
                                                                                                                            1
                                                                                                                            4))
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "position_s_first_diff")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "subtermOF(x!1, x!3)"
                                                                                                                               "subtermOF(x!2, x!3)"
                                                                                                                               "fd")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "x!3")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "pos_o_term")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "x!3"
                                                                                                                                         "fd"
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (name-replace
                                                                                                                                             "q!1"
                                                                                                                                             "x!3 o fd")
                                                                                                                                            (("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                -5
                                                                                                                                                1))
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "child")
                                                                                                                                                (("2"
                                                                                                                                                  (skosimp)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "not_var")
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "seq_first_rest[posnat]")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "p1!3")
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "empty_0[posnat]")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "p1!3")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -2
                                                                                                                                                                 "first(p1!3)"
                                                                                                                                                                 "p1!3"
                                                                                                                                                                 "rest(p1!3)"
                                                                                                                                                                 "subtermOF(x!1, p1!1)")
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "pos_subterm_ax")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "p1!1"
                                                                                                                                                                     "p1!3"
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-3
                                                                                                                          -4
                                                                                                                          -5
                                                                                                                          1
                                                                                                                          4))
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "position_t_first_diff")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "subtermOF(x!1, x!3)"
                                                                                                                             "subtermOF(x!2, x!3)"
                                                                                                                             "fd")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "x!3")
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "pos_o_term")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "x!3"
                                                                                                                                       "fd"
                                                                                                                                       "x!2")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (name-replace
                                                                                                                                           "q!1"
                                                                                                                                           "x!3 o fd")
                                                                                                                                          (("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             (-1
                                                                                                                                              -5
                                                                                                                                              1))
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "child")
                                                                                                                                              (("2"
                                                                                                                                                (skosimp)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "not_var")
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "seq_first_rest[posnat]")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "p1!3")
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "empty_0[posnat]")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "p1!3")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -2
                                                                                                                                                               "first(p1!3)"
                                                                                                                                                               "p1!3"
                                                                                                                                                               "rest(p1!3)"
                                                                                                                                                               "subtermOF(x!2, p1!1)")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "pos_subterm_ax")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "p1!1"
                                                                                                                                                                     "p1!3"
                                                                                                                                                                     "x!2")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (-3
                                                                                                          -4
                                                                                                          -5
                                                                                                          1
                                                                                                          4))
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "position_s_first_diff")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "subtermOF(x!1, x!3)"
                                                                                                             "subtermOF(x!2, x!3)"
                                                                                                             "fd")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "x!3")
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "pos_o_term")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "x!3"
                                                                                                                       "fd"
                                                                                                                       "x!1")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (name-replace
                                                                                                                           "q!1"
                                                                                                                           "x!3 o fd")
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -2
                                                                                                                             -3
                                                                                                                             -6
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "child")
                                                                                                                              (("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -2
                                                                                                                                   1
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "pos_ax")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "p1!1"
                                                                                                                                         "p1!3"
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       (-3
                                                                                                        -4
                                                                                                        -5
                                                                                                        1
                                                                                                        4))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "position_t_first_diff")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "subtermOF(x!1, x!3)"
                                                                                                               "subtermOF(x!2, x!3)"
                                                                                                               "fd")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "x!3")
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "pos_o_term")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "x!3"
                                                                                                                         "fd"
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (name-replace
                                                                                                                             "q!1"
                                                                                                                             "x!3 o fd")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -2
                                                                                                                               -3
                                                                                                                               -5
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "child")
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "pos_ax")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "p1!1"
                                                                                                                                       "p1!3"
                                                                                                                                       "x!2")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -2
                                                                                                1))
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "child")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "equal_prefix[posnat]")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "x!3"
                                                                                                         "fd"
                                                                                                         "p1!2 o p1!3")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "o_assoc")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "p1!3")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -2
                                                                                              -3
                                                                                              1
                                                                                              4))
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "position_s_first_diff")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "position_t_first_diff")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "subtermOF(x!1, x!3)"
                                                                                                   "subtermOF(x!2, x!3)"
                                                                                                   "fd")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "subtermOF(x!1, x!3)"
                                                                                                     "subtermOF(x!2, x!3)"
                                                                                                     "fd")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "x!3")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "pos_o_term")
                                                                                                          (("2"
                                                                                                            (inst-cp
                                                                                                             -1
                                                                                                             "x!3"
                                                                                                             "fd"
                                                                                                             "x!2")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "x!3"
                                                                                                               "fd"
                                                                                                               "x!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (name-replace
                                                                                                                   "q!1"
                                                                                                                   "x!3 o fd")
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      -7
                                                                                                                      -8
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (replaces
                                                                                                                       -3)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "child")
                                                                                                                        (("2"
                                                                                                                          (skosimp)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "pos_subterm_ax")
                                                                                                                            (("2"
                                                                                                                              (inst-cp
                                                                                                                               -1
                                                                                                                               "x!3"
                                                                                                                               "p1!2 o p1!3"
                                                                                                                               "x!2")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "x!3"
                                                                                                                                 "p1!2 o p1!3"
                                                                                                                                 "x!1")
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "o_assoc")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -3
                                                                                                                                       -4
                                                                                                                                       -5
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "pos_ax")
                                                                                                                                        (("2"
                                                                                                                                          (inst-cp
                                                                                                                                           -1
                                                                                                                                           "p1!2"
                                                                                                                                           "p1!3"
                                                                                                                                           "subtermOF(x!2, x!3)")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "p1!2"
                                                                                                                                             "p1!3"
                                                                                                                                             "subtermOF(x!1, x!3)")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -9
                                                                             "p1!1")
                                                                            (("1"
                                                                              (lemma
                                                                               "ext_preserve_symbol")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "x!1"
                                                                                 "sig!1"
                                                                                 "p1!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x!2"
                                                                                   "sig!1"
                                                                                   "p1!1")
                                                                                  (("1"
                                                                                    (split
                                                                                     -11)
                                                                                    (("1"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (split
                                                                                         -3)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-3
                                                                                            -8
                                                                                            1
                                                                                            8))
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "position_s_first_diff")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "subtermOF(x!1, x!3)"
                                                                                               "subtermOF(x!2, x!3)"
                                                                                               "fd")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!3")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "pos_o_term")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "x!3"
                                                                                                         "fd"
                                                                                                         "x!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (name-replace
                                                                                                             "q!1"
                                                                                                             "x!3 o fd")
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2
                                                                                                               -3
                                                                                                               -5
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "child")
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "not_var")
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "seq_first_rest[posnat]")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "p1!2")
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "empty_0[posnat]")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "p1!2")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -2
                                                                                                                                 "first(p1!2)"
                                                                                                                                 "p1!2"
                                                                                                                                 "rest(p1!2)"
                                                                                                                                 "subtermOF(x!1, p1!1)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "pos_subterm_ax")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "p1!1"
                                                                                                                                       "p1!2"
                                                                                                                                       "x!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-3
                                                                                          -8
                                                                                          1
                                                                                          8))
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "position_t_first_diff")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "subtermOF(x!1, x!3)"
                                                                                             "subtermOF(x!2, x!3)"
                                                                                             "fd")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "x!3")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "pos_o_term")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x!3"
                                                                                                       "fd"
                                                                                                       "x!2")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (name-replace
                                                                                                           "q!1"
                                                                                                           "x!3 o fd")
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -2
                                                                                                             -3
                                                                                                             -5
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "child")
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "not_var")
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "seq_first_rest[posnat]")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "p1!2")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "empty_0[posnat]")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "p1!2")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "first(p1!2)"
                                                                                                                               "p1!2"
                                                                                                                               "rest(p1!2)"
                                                                                                                               "subtermOF(x!2, p1!1)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "pos_subterm_ax")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "p1!1"
                                                                                                                                     "p1!2"
                                                                                                                                     "x!2")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-3
                                                                                        1
                                                                                        2))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "child")
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<=")
                                                                                            (("2"
                                                                                              (case
                                                                                               "length(x!3) < length(p1!1)")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "o_length_o[posnat]")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "length(p1!1) < length(x!3)")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "o_length_o[posnat]")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "p1!1"
                                                                                                     "p1!2"
                                                                                                     "x!3"
                                                                                                     "fd")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           2
                                                                                                           "seq!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "seq!1")
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "seq_o_empty")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "seq_o_empty")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "o_equals_o[posnat]")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x!3"
                                                                                                     "fd"
                                                                                                     "p1!1"
                                                                                                     "p1!2")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         4
                                                                                                         "empty_seq")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "seq_o_empty")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -7
                                                                                      1
                                                                                      8))
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "position_t_first_diff")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "subtermOF(x!1, x!3)"
                                                                                         "subtermOF(x!2, x!3)"
                                                                                         "fd")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "x!3")
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "pos_o_term")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!3"
                                                                                                   "fd"
                                                                                                   "x!2")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (name-replace
                                                                                                       "q!1"
                                                                                                       "x!3 o fd")
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2
                                                                                                         -3
                                                                                                         -5
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "child")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "pos_ax")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "p1!1"
                                                                                                                 "p1!2"
                                                                                                                 "x!2")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -6
                                                                                    1
                                                                                    8))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "position_s_first_diff")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "subtermOF(x!1, x!3)"
                                                                                       "subtermOF(x!2, x!3)"
                                                                                       "fd")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x!3")
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "pos_o_term")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "fd"
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "q!1"
                                                                                                     "x!3 o fd")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3
                                                                                                       -5
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "child")
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "pos_ax")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "p1!1"
                                                                                                               "p1!2"
                                                                                                               "x!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -6
                                                                                1
                                                                                8))
                                                                              (("2"
                                                                                (lemma
                                                                                 "position_t_first_diff")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "position_s_first_diff")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "subtermOF(x!1, x!3)"
                                                                                     "subtermOF(x!2, x!3)"
                                                                                     "fd")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "subtermOF(x!1, x!3)"
                                                                                       "subtermOF(x!2, x!3)"
                                                                                       "fd")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x!3")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "pos_o_term")
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "x!3"
                                                                                               "fd"
                                                                                               "x!2")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "fd"
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "q!1"
                                                                                                     "x!3 o fd")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5
                                                                                                       -6
                                                                                                       -8
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "child")
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "pos_ax")
                                                                                                            (("2"
                                                                                                              (inst-cp
                                                                                                               -1
                                                                                                               "p1!1"
                                                                                                               "p1!2"
                                                                                                               "x!2")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "p1!1"
                                                                                                                 "p1!2"
                                                                                                                 "x!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -2 1))
                      (("2" (lemma "next_position_is_position")
                        (("2"
                          (inst-cp -1 "ext(sig!1)(x!1)"
                           "ext(sig!1)(x!2)" "x!3 o fd")
                          (("2"
                            (inst -1 "ext(sig!1)(x!2)"
                             "ext(sig!1)(x!1)" "x!3 o fd")
                            (("1" (lemma "next_position_commute")
                              (("1"
                                (inst
                                 -1
                                 "ext(sig!1)(x!2)"
                                 "ext(sig!1)(x!1)"
                                 "x!3 o fd")
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (replace -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 2)
                              (("2"
                                (lemma "position_t_first_diff")
                                (("2"
                                  (lemma "position_s_first_diff")
                                  (("2"
                                    (inst
                                     -1
                                     "subtermOF(x!1, x!3)"
                                     "subtermOF(x!2, x!3)"
                                     "fd")
                                    (("2"
                                      (inst
                                       -2
                                       "subtermOF(x!1, x!3)"
                                       "subtermOF(x!2, x!3)"
                                       "fd")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "x!3")
                                          (("2"
                                            (lemma "pos_o_term")
                                            (("2"
                                              (inst-cp
                                               -1
                                               "x!3"
                                               "fd"
                                               "x!2")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x!3"
                                                 "fd"
                                                 "x!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 -2 1))
                                                    (("2"
                                                      (rewrite
                                                       "ext_preserv_pos")
                                                      (("2"
                                                        (rewrite
                                                         "ext_preserv_pos")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1))
                    (("2" (lemma "position_t_first_diff")
                      (("2" (lemma "position_s_first_diff")
                        (("2"
                          (inst -2 "subtermOF(x!1, x!3)"
                           "subtermOF(x!2, x!3)" "fd")
                          (("2"
                            (inst -1 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" "fd")
                            (("2" (assert)
                              (("2"
                                (typepred "x!3")
                                (("2"
                                  (lemma "pos_o_term")
                                  (("2"
                                    (inst-cp -1 "x!3" "fd" "x!2")
                                    (("2"
                                      (inst -1 "x!3" "fd" "x!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but (-1 -2 1))
                                          (("2"
                                            (rewrite "ext_preserv_pos")
                                            (("2"
                                              (rewrite
                                               "ext_preserv_pos")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide - 2)
      (("2" (skosimp)
        (("2" (expand "child")
          (("2" (skosimp)
            (("2" (lemma "pos_subterm_ax")
              (("2" (inst -1 "p1!1" "p1!2" "y!2")
                (("2" (assert)
                  (("2" (lemma "not_var")
                    (("2" (lemma "seq_first_rest[posnat]")
                      (("2" (inst -1 "p1!2")
                        (("2" (lemma "empty_0[posnat]")
                          (("2" (inst -1 "p1!2")
                            (("2" (assert)
                              (("2"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide - 2)
      (("3" (skosimp)
        (("3" (expand "child")
          (("3" (skosimp)
            (("3" (lemma "pos_subterm_ax")
              (("3" (inst -1 "p1!1" "p1!2" "y!1")
                (("3" (assert)
                  (("3" (lemma "not_var")
                    (("3" (lemma "seq_first_rest[posnat]")
                      (("3" (inst -1 "p1!2")
                        (("3" (lemma "empty_0[posnat]")
                          (("3" (inst -1 "p1!2")
                            (("3" (assert)
                              (("3"
                                (inst
                                 -2
                                 "first(p1!2)"
                                 "p1!2"
                                 "rest(p1!2)"
                                 "subtermOF(y!1, p1!1)")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide - 2)
      (("4" (lemma "right_pos_subset")
        (("4" (inst?)
          (("4" (lemma "positions_of_terms_finite")
            (("4" (inst?)
              (("4" (lemma "finite_subset[position]")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 1 3)
      (("5" (lemma "right_pos_subset")
        (("5" (inst?)
          (("5" (lemma "positions_of_terms_finite")
            (("5" (inst?)
              (("5" (lemma "finite_subset[position]")
                (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide -1 2)
      (("6" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("7" (hide 1 3)
      (("7" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("8" (hide-all-but 1)
      (("8" (skosimp)
        (("8" (lemma "app_term")
          (("8" (inst -1 "y!3" "p1!1" "y!2") (("8" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide-all-but 1)
      (("9" (skosimp)
        (("9" (lemma "app_term")
          (("9" (inst -1 "y!3" "p1!1" "y!1") (("9" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide 2)
      (("10" (lemma "right_pos_subset")
        (("10" (inst?)
          (("10" (lemma "positions_of_terms_finite")
            (("10" (inst?)
              (("10" (lemma "finite_subset[position]")
                (("10" (inst?) (("10" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide 2)
      (("11" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (lemma "right_pos_subset")
        (("12" (inst?)
          (("12" (lemma "positions_of_terms_finite")
            (("12" (inst?)
              (("12" (lemma "finite_subset[position]")
                (("12" (inst?) (("12" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("14" (hide-all-but 1)
      (("14" (lemma "app_term")
        (("14" (skosimp)
          (("14" (inst -1 "x!1`3" "p11!1" "x!1`2")
            (("14" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("15" (hide-all-but 1)
      (("15" (skosimp)
        (("15" (lemma "app_term")
          (("15" (inst -1 "x!1`3" "p11!1" "x!1`1")
            (("15" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("16" (hide-all-but 1)
      (("16" (skosimp)
        (("16" (lemma "app_term")
          (("16" (inst -1 "y!1`3" "p1!1" "y!1`2")
            (("16" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("17" (hide-all-but 1)
      (("17" (skosimp)
        (("17" (lemma "app_term")
          (("17" (inst -1 "y!1`3" "p1!1" "y!1`1")
            (("17" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma "right_pos_subset")
        (("18" (inst?)
          (("18" (lemma "positions_of_terms_finite")
            (("18" (inst?)
              (("18" (lemma "finite_subset[position]")
                (("18" (inst?) (("18" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (hide 2)
      (("19" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("20" (hide 2)
      (("20" (lemma "right_pos_subset")
        (("20" (inst?)
          (("20" (lemma "positions_of_terms_finite")
            (("20" (inst?)
              (("20" (lemma "finite_subset[position]")
                (("20" (inst?) (("20" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (hide 2)
      (("21" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil)
     ("22" (hide -1 2)
      (("22" (skosimp)
        (("22" (lemma "app_term")
          (("22" (inst -1 "p!1" "p1!1" "t!1") (("22" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("23" (hide -1 2)
      (("23" (skosimp)
        (("23" (lemma "app_term")
          (("23" (inst -1 "p!1" "p1!1" "s!1") (("23" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("24" (hide - 2 3)
      (("24" (lemma "right_pos_subset")
        (("24" (inst?)
          (("24" (lemma "positions_of_terms_finite")
            (("24" (inst?)
              (("24" (lemma "finite_subset[position]")
                (("24" (inst?) (("24" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("25" (hide - 2 3)
      (("25" (rewrite "finite_union")
        (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil))
          nil)
         ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (union const-decl "set" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (left_without_children const-decl "bool" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (child const-decl "bool" positions nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (member const-decl "bool" sets nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (<= const-decl "bool" unification nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (comp const-decl "term" substitution nil)
    (ext def-decl "term" substitution nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (first_diff def-decl "position" robinsonunification nil)
    (unifier const-decl "bool" unification nil)
    (unifiable const-decl "bool" unification nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (pos_ax formula-decl nil positions nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (not_var formula-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (pos_o_term formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (<= const-decl "bool" positions nil)
    (ext_o formula-decl nil substitution nil)
    (o_ass formula-decl nil substitution nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (O const-decl "finseq" finite_sequences nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (vars_of_term_finite formula-decl nil subterm nil)
    (app_term formula-decl nil subterm nil))
   shostak))
 (ruaEF_fails_iff_non_unifiable 0
  (ruaEF_fails_iff_non_unifiable-1 nil 3510675455
   (""
    (then (skosimp)
     (spread (prop)
      ((then (lemma "ruaEF_fails_iff_non_unifiable_aux")
        (spread (inst -1 "s!1" "t!1" "empty_seq")
         ((spread (split)
           ((then (expand "robinson_unification_algorithm_EF")
             (assert))
            (then (skosimp*) (hide +) (expand "left_without_children")
             (skosimp*) (lemma "seq_empty[posnat]") (inst?)
             (rewrite "empty_0") (rewrite "empty_0") (assert))
            (then (skosimp*) (hide +) (expand "child") (skosimp)
             (lemma "seq_empty[posnat]") (inst?) (rewrite "empty_0")
             (rewrite "empty_0") (assert))))
          (then (hide (2 3))
           (spread (prop)
            ((then (expand "positionsOF") (lift-if)
              (expand* "only_empty_seq" "union" "member"))
             (then (expand "positionsOF") (lift-if)
              (expand* "only_empty_seq" "union" "member"))))))))
       (then (expand "robinson_unification_algorithm_EF")
        (lemma "ruaEF_fails_iff_non_unifiable_aux") (inst?)
        (spread (split)
         ((assert)
          (then (skosimp*) (hide-all-but -1)
           (expand "left_without_children") (skosimp)
           (lemma "seq_empty[posnat]") (inst?) (rewrite "empty_0")
           (rewrite "empty_0") (assert))
          (then (skosimp*) (hide-all-but -1) (expand "child") (skosimp)
           (lemma "seq_empty[posnat]") (inst?) (rewrite "empty_0")
           (rewrite "empty_0") (assert))))))))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (child const-decl "bool" positions nil)
    (left_without_children const-decl "bool" positions nil)
    (seq_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil))
   shostak))
 (ruaEF_gives_unifier 0
  (ruaEF_gives_unifier-1 nil 3510656703
   (""
    (then (skosimp) (lemma "ruaEF_gives_unifier_aux")
     (spread (prop)
      ((spread (inst -2 "s!1" "t!1" "empty_seq")
        ((spread (prop)
          ((then (expand "robinson_unification_algorithm_EF") (propax))
           (then (skosimp) (hide-all-but -1)
            (expand "left_without_children") (skosimp)
            (lemma "seq_empty[posnat]") (inst?) (assert) (flatten)
            (rewrite "empty_0" -2))
           (then (skosimp) (hide-all-but -1) (expand "child") (skosimp)
            (lemma "seq_empty[posnat]") (inst?) (assert) (flatten)
            (rewrite "empty_0" -2))))
         (then (hide-all-but 1)
          (spread (split)
           ((then (expand "positionsOF") (lift-if)
             (expand* "only_empty_seq" "union" "member"))
            (then (expand "positionsOF") (lift-if)
             (expand* "only_empty_seq" "union" "member")))))))
       (spread (inst -2 "s!1" "t!1" "empty_seq")
        ((spread (prop)
          ((then (expand "robinson_unification_algorithm_EF") (propax))
           (then (skosimp) (hide-all-but -1)
            (expand "left_without_children") (skosimp)
            (lemma "seq_empty[posnat]") (inst?) (assert) (flatten)
            (rewrite "empty_0" -2))
           (then (skosimp) (hide-all-but -1) (expand "child") (skosimp)
            (lemma "seq_empty[posnat]") (inst?) (assert) (flatten)
            (rewrite "empty_0" -2))))
         (then (hide-all-but 1)
          (spread (split)
           ((then (expand "positionsOF") (lift-if)
             (expand* "only_empty_seq" "union" "member"))
            (then (expand "positionsOF") (lift-if)
             (expand* "only_empty_seq" "union" "member"))))))))))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (child const-decl "bool" positions nil)
    (left_without_children const-decl "bool" positions nil)
    (seq_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil))
   shostak))
 (ruaEF_gives_mg_subs 0
  (ruaEF_gives_mg_subs-1 nil 3508152404
   (""
    (then (skosimp) (lemma "ruaEF_gives_mg_subs_aux")
     (spread (inst -1 "rho!1" "s!1" "t!1" "empty_seq")
      ((spread (prop)
        ((then (expand "robinson_unification_algorithm_EF") (propax))
         (then (skosimp) (hide-all-but -1)
          (expand "left_without_children") (skosimp)
          (lemma "seq_empty[posnat]") (inst?) (assert) (flatten)
          (rewrite "empty_0" -2))
         (then (skosimp) (hide-all-but -1) (expand "child") (skosimp)
          (lemma "seq_empty[posnat]") (inst?) (assert) (flatten)
          (rewrite "empty_0" -2))))
       (then (hide-all-but 1)
        (spread (split)
         ((then (expand "positionsOF") (lift-if)
           (expand* "only_empty_seq" "union" "member"))
          (then (expand "positionsOF") (lift-if)
           (expand* "only_empty_seq" "union" "member"))))))))
    nil)
   ((only_empty_seq const-decl "positions" positions nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_empty formula-decl nil seq_extras structures)
    (left_without_children const-decl "bool" positions nil)
    (child const-decl "bool" positions nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (completeness_ruaEF 0
  (completeness_ruaEF-1 nil 3508152087
   (""
    (then (skosimp)
     (spread (prop)
      ((then (expand "mgu")
        (spread (prop)
         ((rewrite "ruaEF_gives_unifier")
          (then (skosimp) (rewrite "ruaEF_gives_mg_subs")))))
       (then (lemma "ruaEF_fails_iff_non_unifiable")
        (inst -1 "s!1" "t!1") (assert)))))
    nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (mgu const-decl "bool" unification nil))
   shostak)))