(relations_closure
 (RC_TCC1 0
  (RC_TCC1-1 nil 3370210023 ("" (subtype-tcc) nil nil)
   ((reflexive? const-decl "bool" relations nil)) nil
   (RC subtype
    "sets[[relations_closure.T, relations_closure.T]].union(relations_closure.R, =)"
    "reflexive")))
 (change_to_RC 0
  (change_to_RC-1 nil 3375182313
   ("" (expand* "reflexive_closure" "RC") nil nil)
   ((reflexive_closure const-decl "(reflexive?)" closure_ops orders))
   shostak))
 (R_subset_RC 0
  (R_subset_RC-1 nil 3371210190
   ("" (skeep)
    (("" (expand* "subset?" "member")
      (("" (skeep)
        (("" (expand* "RC" "union" "member") (("" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (RC_idempotent 0
  (RC_idempotent-1 nil 3370210197
   ("" (skeep)
    (("" (lemma "reflexive_closure_identity")
      (("" (inst -1 "RC(R)")
        (("" (rewrite-lemma "change_to_RC" ("R" "RC(R)")) nil nil))
        nil))
      nil))
    nil)
   ((reflexive_closure_identity formula-decl nil closure_ops orders)
    (reflexive? const-decl "bool" relations nil))
   shostak))
 (RC_characterization 0
  (RC_characterization-1 nil 3370210321
   ("" (skeep)
    (("" (prop)
      (("1" (lemma "reflexive_closure_identity")
        (("1" (inst?)
          (("1" (rewrite-lemma "change_to_RC" ("R" "S"))
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (reflexive_closure_identity formula-decl nil closure_ops orders))
   shostak))
 (SC_TCC1 0
  (SC_TCC1-1 nil 3370210023 ("" (subtype-tcc) nil nil)
   ((symmetric? const-decl "bool" relations nil)) nil
   (SC subtype
    "sets[[relations_closure.T, relations_closure.T]].union(relations_closure.R, relation_defs[relations_closure.T, relations_closure.T].converse(relations_closure.R))"
    "symmetric")))
 (change_to_SC 0
  (change_to_SC-1 nil 3375182425
   ("" (expand* "symmetric_closure" "SC") nil nil)
   ((symmetric_closure const-decl "(symmetric?)" closure_ops orders))
   shostak))
 (R_subset_SC 0
  (R_subset_SC-1 nil 3371210082
   ("" (skeep)
    (("" (expand* "subset?" "member")
      (("" (skeep)
        (("" (expand* "SC" "union" "member") (("" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (SC_idempotent 0
  (SC_idempotent-1 nil 3370210671
   ("" (skeep)
    (("" (lemma "symmetric_closure_identity")
      (("" (inst -1 "SC(R)")
        (("" (rewrite-lemma "change_to_SC" ("R" "SC(R)")) nil nil))
        nil))
      nil))
    nil)
   ((symmetric_closure_identity formula-decl nil closure_ops orders)
    (symmetric? const-decl "bool" relations nil))
   shostak))
 (SC_characterization 0
  (SC_characterization-1 nil 3370210710
   ("" (skeep)
    (("" (prop)
      (("1" (lemma "symmetric_closure_identity")
        (("1" (inst?)
          (("1" (rewrite-lemma "change_to_SC" ("R" "S"))
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((symmetric? const-decl "bool" relations nil)
    (symmetric_closure_identity formula-decl nil closure_ops orders))
   shostak))
 (TC_TCC1 0
  (TC_TCC1-1 nil 3370210023
   ("" (expand* "transitive?" "IUnion")
    (("" (skosimp*)
      (("" (forward-chain "iterate_add_applied") (("" (inst?) nil nil))
        nil))
      nil))
    nil)
   ((iterate_add_applied formula-decl nil relation_iterate orders)
    (transitive? const-decl "bool" relations nil))
   nil
   (TC subtype
    "indexed_sets[posnat, [relations_closure.T, relations_closure.T]].IUnion(LAMBDA p: relation_iterate[relations_closure.T].iterate(relations_closure.R, relations_closure.p))"
    "transitive")))
 (change_to_TC 0
  (change_to_TC-1 nil 3375182475
   ("" (expand* "transitive_closure" "TC") nil nil)
   ((transitive_closure const-decl "(transitive?)" closure_ops orders))
   shostak))
 (R_subset_TC 0
  (R_subset_TC-1 nil 3371210276
   ("" (skeep)
    (("" (expand* "subset?" "member")
      (("" (skeep)
        (("" (expand* "TC" "IUnion")
          (("" (inst 1 "1") (("" (rewrite "iterate_1") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((iterate_1 formula-decl nil relation_iterate orders)) shostak))
 (TC_converse 0
  (TC_converse-1 nil 3372708950
   ("" (skeep)
    (("" (decompose-equality)
      (("" (expand* "TC" "IUnion")
        (("" (iff)
          (("" (prop)
            (("1" (skolem * "i")
              (("1" (rewrite "iterate_converse")
                (("1" (expand "converse") (("1" (inst?) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "converse" -1)
              (("2" (skolem * "i")
                (("2" (inst?)
                  (("2" (rewrite "iterate_converse")
                    (("2" (expand "converse") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive? const-decl "bool" relations nil)
    (iterate_converse formula-decl nil relation_iterate orders))
   shostak))
 (TC_idempotent 0
  (TC_idempotent-1 nil 3370214273
   ("" (skeep)
    (("" (lemma "transitive_closure_identity")
      (("" (inst -1 "TC(R)")
        (("" (rewrite-lemma "change_to_TC" ("R" "TC(R)")) nil nil))
        nil))
      nil))
    nil)
   ((transitive_closure_identity formula-decl nil closure_ops orders)
    (transitive? const-decl "bool" relations nil))
   shostak))
 (TC_characterization 0
  (TC_characterization-1 nil 3370211587
   ("" (skeep)
    (("" (prop)
      (("1" (lemma "transitive_closure_identity")
        (("1" (inst?)
          (("1" (rewrite-lemma "change_to_TC" ("R" "S"))
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((transitive? const-decl "bool" relations nil)
    (transitive_closure_identity formula-decl nil closure_ops orders))
   shostak))
 (RTC_TCC1 0
  (RTC_TCC1-1 nil 3370210023
   ("" (expand "reflexive_transitive?")
    (("" (skolem!)
      (("" (split)
        (("1" (expand* "reflexive?" "IUnion")
          (("1" (skolem!)
            (("1" (inst + "0")
              (("1" (expand "iterate") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand* "transitive?" "IUnion")
          (("2" (skosimp*)
            (("2" (forward-chain "iterate_add_applied")
              (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive? const-decl "bool" relations nil)
    (iterate_add_applied formula-decl nil relation_iterate orders)
    (reflexive? const-decl "bool" relations nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders))
   nil
   (RTC subtype
    "indexed_sets[nat, [relations_closure.T, relations_closure.T]].IUnion(LAMBDA n: relation_iterate[relations_closure.T].iterate(relations_closure.R, relations_closure.n))"
    "reflexive_transitive")))
 (change_to_RTC 0
  (change_to_RTC-1 nil 3375182493
   ("" (expand* "preorder_closure" "RTC") nil nil)
   ((preorder_closure const-decl "(preorder?)" closure_ops orders))
   shostak))
 (R_subset_RTC 0
  (R_subset_RTC-1 nil 3371209765
   ("" (skeep)
    (("" (expand* "subset?" "member")
      (("" (skeep)
        (("" (expand* "RTC" "IUnion")
          (("" (inst 1 "1") (("" (rewrite "iterate_1") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((iterate_1 formula-decl nil relation_iterate orders)) shostak))
 (iterate_RTC 0
  (iterate_RTC-1 nil 3372720815
   ("" (skeep)
    (("" (expand* "subset?" "member" "RTC" "IUnion")
      (("" (skeep) (("" (inst 1 "n") nil nil)) nil)) nil))
    nil)
   nil shostak))
 (RTC_idempotent 0
  (RTC_idempotent-2 "" 3790333472
   ("" (skeep)
    (("" (lemma " preorder_closure_identity")
      (("" (inst -1 "RTC(R)")
        (("" (rewrite-lemma "change_to_RTC" ("R" "RTC(R)")) nil nil))
        nil))
      nil))
    nil)
   nil shostak)
  (RTC_idempotent-1 nil 3370216879
   ("" (skeep)
    (("" (lemma " preorder_closure_identity")
      (("" (inst -1 "RTC(R)")
        (("1" (rewrite-lemma "change_to_RTC" ("R" "RTC(R)")) nil nil)
         ("2" (assert)
          (("2" (expand "preorder?")
            (("2" (hide 2)
              (("2" (typepred "RTC(R)")
                (("2" (expand "reflexive_transitive?")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder_closure_identity formula-decl nil closure_ops orders)
    (preorder? const-decl "bool" orders nil))
   shostak))
 (RTC_characterization 0
  (RTC_characterization-1 nil 3370216958
   ("" (skeep)
    (("" (prop)
      (("1" (lemma " preorder_closure_identity")
        (("1" (inst?)
          (("1" (rewrite-lemma "change_to_RTC" ("R" "S"))
            (("1" (assert) nil nil)) nil)
           ("2" (expand* "reflexive_transitive?" "preorder?") nil nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (preorder_closure_identity formula-decl nil closure_ops orders))
   shostak))
 (EC_TCC1 0
  (EC_TCC1-1 nil 3375182313
   ("" (skeep)
    (("" (lemma "preorder_closure_preserves_symmetry")
      (("" (inst -1 "SC(R)")
        (("" (rewrite-lemma "change_to_RTC" ("R" "SC(R)")) nil nil))
        nil))
      nil))
    nil)
   ((preorder_closure_preserves_symmetry judgement-tcc nil closure_ops
     orders)
    (symmetric? const-decl "bool" relations nil))
   nil
   (EC subtype
    "relations_closure.RTC(relations_closure.SC(relations_closure.R))"
    "equivalence")))
 (change_to_EC 0
  (change_to_EC-1 nil 3375182512
   ("" (skeep)
    (("" (expand* "equivalence_closure" "EC")
      (("" (rewrite-lemma "change_to_SC" ("R" "R"))
        (("" (rewrite-lemma "change_to_RTC" ("R" "SC(R)")) nil nil))
        nil))
      nil))
    nil)
   ((equivalence_closure const-decl "(equivalence?)" closure_ops
     orders)
    (symmetric? const-decl "bool" relations nil))
   shostak))
 (R_subset_EC 0
  (R_subset_EC-1 nil 3371210430
   ("" (skeep)
    (("" (lemma "R_subset_SC")
      (("" (inst?)
        (("" (expand* "subset?" "member")
          (("" (skeep)
            (("" (inst?)
              (("" (expand "EC")
                (("" (expand* "RTC" "IUnion")
                  (("" (inst 1 "1")
                    (("" (rewrite "iterate_1") (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric? const-decl "bool" relations nil)
    (iterate_1 formula-decl nil relation_iterate orders))
   shostak))
 (RTC_subset_EC 0
  (RTC_subset_EC-1 nil 3372883240
   ("" (skeep)
    (("" (expand "EC")
      (("" (lemma "R_subset_SC")
        (("" (inst?)
          (("" (lemma "preorder_closure_is_monotone")
            (("" (inst -1 "R" "SC(R)")
              (("" (rewrite-lemma "change_to_RTC" ("R" "R"))
                (("" (rewrite-lemma "change_to_RTC" ("R" "SC(R)"))
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric? const-decl "bool" relations nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (preorder_closure_is_monotone formula-decl nil closure_ops orders))
   shostak))
 (EC_idempotent 0
  (EC_idempotent-1 nil 3370261011
   ("" (skeep)
    (("" (lemma "equivalence_closure_identity")
      (("" (inst -1 "EC(R)")
        (("" (rewrite-lemma "change_to_EC" ("R" "EC(R)")) nil nil))
        nil))
      nil))
    nil)
   ((equivalence_closure_identity formula-decl nil closure_ops orders)
    (equivalence? const-decl "bool" relations nil))
   shostak))
 (EC_characterization 0
  (EC_characterization-1 nil 3370261180
   ("" (skeep)
    (("" (prop)
      (("1" (lemma "equivalence_closure_identity")
        (("1" (inst?)
          (("1" (rewrite-lemma "change_to_EC" ("R" "S"))
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((equivalence? const-decl "bool" relations nil)
    (equivalence_closure_identity formula-decl nil closure_ops orders))
   shostak))
 (RTC_vs_TC 0
  (RTC_vs_TC-1 nil 3744642801
   ("" (skeep)
    (("" (expand "union")
      (("" (decompose-equality)
        (("" (expand "RTC")
          (("" (expand "TC")
            (("" (expand "IUnion")
              (("" (iff)
                (("" (prop)
                  (("1" (skeep)
                    (("1" (case-replace "i=0")
                      (("1" (expand "iterate")
                        (("1" (expand "member")
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "member")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst 1 "0") (("2" (grind) nil nil)) nil)
                   ("3" (expand "member")
                    (("3" (skeep) (("3" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (transitive? const-decl "bool" relations nil))
   shostak))
 (Closure_monotony 0
  (Closure_monotony-1 nil 3744642575
   ("" (skeep)
    (("" (split)
      (("1" (expand "SC")
        (("1" (expand "union")
          (("1" (expand "member")
            (("1" (expand "subset?")
              (("1" (copy -1)
                (("1" (skeep)
                  (("1" (inst? -1)
                    (("1" (prop)
                      (("1" (expand "member") (("1" (assert) nil nil))
                        nil)
                       ("2" (expand "member")
                        (("2" (assert)
                          (("2" (expand "converse")
                            (("2" (inst -2 "(x_1`2, x_1`1)")
                              (("2"
                                (assert)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -1)
        (("2" (grind)
          (("2" (reveal -1)
            (("2" (expand "subset?")
              (("2" (inst?)
                (("2" (expand "member") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma "transitive_closure_is_monotone")
        (("3" (inst -1 "R" "S")
          (("3" (assert)
            (("3" (rewrite "change_to_TC")
              (("3" (rewrite "change_to_TC") nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (rewrite "RTC_vs_TC")
        (("4" (rewrite "RTC_vs_TC")
          (("4" (expand "union")
            (("4" (expand "subset?")
              (("4" (skeep)
                (("4" (expand "member")
                  (("4" (assert)
                    (("4" (prop)
                      (("4" (lemma "transitive_closure_is_monotone")
                        (("4" (inst -1 "R" "S")
                          (("4" (expand "subset?")
                            (("4" (expand "member")
                              (("4"
                                (assert)
                                (("4"
                                  (prop)
                                  (("4"
                                    (rewrite "change_to_TC")
                                    (("4"
                                      (rewrite "change_to_TC")
                                      (("4"
                                        (inst?)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (expand "subset?")
        (("5" (expand "EC")
          (("5" (expand "RTC")
            (("5" (expand "IUnion")
              (("5" (skeep)
                (("5" (expand "member")
                  (("5" (skeep)
                    (("5" (inst?)
                      (("5" (generalize "x" "x" :fnums (-1 1))
                        (("5" (generalize "i" "i" :fnums (1))
                          (("5" (induct "i")
                            (("1" (skeep) (("1" (grind) nil nil)) nil)
                             ("2" (skeep)
                              (("2"
                                (skeep)
                                (("2"
                                  (rewrite "iterate_add_one")
                                  (("2"
                                    (rewrite "iterate_add_one")
                                    (("2"
                                      (expand "o ")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "(y, x!1`2)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst 1 "y")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -1 -3)
                                                  (("2"
                                                    (expand "SC")
                                                    (("2"
                                                      (expand "union")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (expand
                                                           "converse")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "(x!1`1, y)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -2
                                                               "(y, x!1`1)")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (transitive_closure_is_monotone formula-decl nil closure_ops
     orders)
    (iterate_add_one formula-decl nil relation_iterate orders)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (symmetric? const-decl "bool" relations nil))
   nil))
 (seq_of_relation_RTC 0
  (seq_of_relation_RTC-1 nil 3755567562
   ("" (skeep)
    (("" (measure-induct+ "j-i" ("i" "j"))
      (("" (case "x!1 = x!2")
        (("1" (hide -2 -3)
          (("1" (expand "RTC")
            (("1" (expand "IUnion")
              (("1" (inst 1 "0")
                (("1" (expand "iterate") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst -1 "x!1" "x!2 - 1")
          (("1" (assert)
            (("1" (expand "RTC")
              (("1" (expand "IUnion")
                (("1" (assert)
                  (("1" (prop)
                    (("1" (skeep)
                      (("1" (inst 2 "i+1")
                        (("1" (lemma "iterate_add")
                          (("1" (inst -1 "R" "i" "1")
                            (("1" (replaces -1)
                              (("1"
                                (expand "o ")
                                (("1"
                                  (inst 2 "seq(x!2 - 1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "iterate")
                                        (("1"
                                          (expand "iterate")
                                          (("1"
                                            (expand "o ")
                                            (("1"
                                              (inst -1 "x!2 - 1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   2
                                                   "seq(x!2 - 1)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (skeep* :preds? t)
                        (("2" (inst -3 "k") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (iterate_add formula-decl nil relation_iterate orders)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders))
   nil))
 (finseq_to_RTC_TCC1 0
  (finseq_to_RTC_TCC1-1 nil 3757155964 ("" (subtype-tcc) nil nil) nil
   nil
   (finseq_to_RTC subtype "relations_closure.k" "below[length(seq)]")))
 (finseq_to_RTC_TCC2 0
  (finseq_to_RTC_TCC2-1 nil 3757155964 ("" (subtype-tcc) nil nil) nil
   nil
   (finseq_to_RTC subtype "(number_fields.+)(relations_closure.k, 1)"
    "below[length(seq)]")))
 (finseq_to_RTC 0
  (finseq_to_RTC-1 nil 3757155966
   ("" (auto-rewrite "finseq_appl")
    (("" (assert)
      (("" (skeep)
        (("" (measure-induct "j-i" ("i" "j"))
          (("1" (skeep* :preds? t)
            (("1" (case "x_1 = x_2")
              (("1" (hide-all-but (-1 1))
                (("1" (expand "RTC")
                  (("1" (expand "IUnion")
                    (("1" (inst 1 "0")
                      (("1" (expand "iterate") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -4 "x_1" "x_2 - 1")
                (("1" (assert)
                  (("1" (prop)
                    (("1" (expand "RTC")
                      (("1" (expand "IUnion")
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (inst 2 "i+1")
                              (("1"
                                (lemma "iterate_add")
                                (("1"
                                  (inst -1 "R" "i" "1")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "o ")
                                      (("1"
                                        (inst 2 "seq(x_2 - 1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -5 "x_2 - 1")
                                            (("1"
                                              (expand "iterate")
                                              (("1"
                                                (expand "iterate")
                                                (("1"
                                                  (expand "o ")
                                                  (("1"
                                                    (inst? 2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 1))
                      (("2" (skeep) (("2" (inst?) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep* :preds? t) (("2" (grind) nil nil)) nil)) nil)
           ("3" (hide 2) (("3" (grind) nil nil)) nil)
           ("4" (hide 2) (("4" (grind) nil nil)) nil)
           ("5" (hide 2) (("5" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (well_founded? const-decl "bool" orders nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (iterate_add formula-decl nil relation_iterate orders))
   shostak))
 (iterate_to_finseq_TCC1 0
  (iterate_to_finseq_TCC1-1 nil 3757153530 ("" (subtype-tcc) nil nil)
   nil nil (iterate_to_finseq subtype "0" "below[length(seq)]")))
 (iterate_to_finseq_TCC2 0
  (iterate_to_finseq_TCC2-1 nil 3757153530 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (iterate_to_finseq subtype
    "(number_fields.-)(length(relations_closure.seq), 1)"
    "below[length(seq)]")))
 (iterate_to_finseq_TCC3 0
  (iterate_to_finseq_TCC3-1 nil 3757153530 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (iterate_to_finseq subtype
    "(number_fields.-)(length(relations_closure.seq), 1)" "nat")))
 (iterate_to_finseq_TCC4 0
  (iterate_to_finseq_TCC4-1 nil 3757153530 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (iterate_to_finseq subtype "relations_closure.k"
    "below[length(seq)]")))
 (iterate_to_finseq_TCC5 0
  (iterate_to_finseq_TCC5-1 nil 3757153530 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (iterate_to_finseq subtype
    "(number_fields.+)(relations_closure.k, 1)" "below[length(seq)]")))
 (iterate_to_finseq 0
  (iterate_to_finseq-1 nil 3755567588
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "finseq_appl")
        (("1" (inst 1 "#(x)")
          (("1" (grind) nil nil)
           ("2" (hide -) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep* :preds? t)
      (("2" (expand "iterate" -3)
        (("2" (expand "finseq_appl")
          (("2" (expand "o ")
            (("2" (skeep)
              (("2" (inst -2 "x" "y_1" "R")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst 1 "seq o #(y)")
                      (("1" (expand "o ")
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "#")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "#")
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (skeep)
                                  (("4"
                                    (lift-if)
                                    (("4"
                                      (lift-if)
                                      (("4"
                                        (prop)
                                        (("1"
                                          (inst -6 "k")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case-replace
                                           "k = seq`length - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "#")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (lift-if)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (typepred "k")
                                              (("3"
                                                (expand "o ")
                                                (("3"
                                                  (expand "#")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "seq")
                        (("2" (expand "o")
                          (("2" (expand "#") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders))
   nil)))