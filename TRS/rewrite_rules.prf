(rewrite_rules
 (IMP_substitution_TCC1 0
  (IMP_substitution_TCC1-1 nil 3762611052
   ("" (rewrite "var_countable") nil nil) nil nil
   (IMP_substitution assuming
    "substitution[rewrite_rules.variable, rewrite_rules.symbol, rewrite_rules.arity].substitution"
    "var_countable: ASSUMPTION countability[term_adt[substitution.variable, substitution.symbol, substitution.arity].term].is_countably_infinite(variables_term[substitution.variable, substitution.symbol, substitution.arity].V)")))
 (ren_rewrite 0
  (ren_rewrite-1 nil 3402089498
   ("" (skeep)
    (("" (expand "rewrite_rule?")
      (("" (prop)
        (("1" (expand "ext")
          (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (rewrite "rename_preserv_inclusion") nil nil))
        nil))
      nil))
    nil)
   ((rename_preserv_inclusion formula-decl nil substitution nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Ren? const-decl "bool" substitution nil)
    (Ren type-eq-decl nil substitution nil)
    (ext def-decl "term" substitution nil))
   shostak))
 (defined?_TCC1 0
  (defined?_TCC1-1 nil 3758656570 ("" (subtype-tcc) nil nil)
   ((term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   nil
   (defined? subtype "rewrite_rules.lhs(rewrite_rules.e)"
    "(term_adt[rewrite_rules.variable, rewrite_rules.symbol, rewrite_rules.arity].app?)"))))