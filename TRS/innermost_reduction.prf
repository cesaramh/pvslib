(innermost_reduction
 (IMP_reduction_TCC1 0
  (IMP_reduction_TCC1-2 "" 3912757742
   ("" (rewrite "var_countable") nil nil) nil shostak
   (IMP_reduction assuming
    "reduction[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].reduction"
    "var_countable: ASSUMPTION countability[term_adt[reduction.variable, reduction.symbol, reduction.arity].term].is_countably_infinite(variables_term[reduction.variable, reduction.symbol, reduction.arity].V)"))
  (IMP_reduction_TCC1-1 nil 3762696323
   ("" (rewrite "var_countable") nil)
   ((var_countable formula-decl nil innermost_reduction nil)) nil
   (IMP_reduction assuming
    "reduction[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].reduction"
    "var_countable: ASSUMPTION countability[term_adt[reduction.variable, reduction.symbol, reduction.arity].term].is_countably_infinite(variables_term[reduction.variable, reduction.symbol, reduction.arity].V)")))
 (nr_normal_form_subterms 0
  (nr_normal_form_subterms-2 nil 3759130128
   ("" (skeep* :preds? t)
    (("" (prop)
      (("1" (skeep* :preds? t)
        (("1" (expand "is_normal_form?")
          (("1" (expand "reducible?")
            (("1" (expand "reduction?")
              (("1" (skeep* :preds? t)
                (("1"
                  (inst 1 "replaceTerm(t, ext(sigma)(rhs(e)), q o p)")
                  (("1" (expand "non_root_reduction?")
                    (("1" (expand "reduction_fix?")
                      (("1" (inst 1 "q o p")
                        (("1" (inst?)
                          (("1" (rewrite "pos_subterm")
                            (("1" (rewrite "pos_o_term") nil nil))
                            nil))
                          nil)
                         ("2" (rewrite "pos_o_term")
                          (("2" (hide-all-but (-1 1))
                            (("2" (use "seq_empty[posnat]")
                              (("2"
                                (assert)
                                (("2" (rewrite "empty_0") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "pos_o_term") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "is_normal_form?")
        (("2" (expand "reducible?")
          (("2" (skeep)
            (("2" (expand "non_root_reduction?")
              (("2" (skeep :preds? t)
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (expand "reduction_fix?")
                      (("2" (skeep :preds? t)
                        (("2" (inst 2 "ext(sigma)(rhs(e))")
                          (("2" (expand "reduction?")
                            (("2" (inst?)
                              (("2"
                                (inst 2 "empty_seq")
                                (("1"
                                  (rewrite "subterm_empty_seq")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "replaceTerm" 2)
                                      (("1"
                                        (rewrite "empty_0")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "empty_seq_is_position")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (p skolem-const-decl
     "{p: positions?[variable, symbol, arity](t) | NOT (p = empty_seq)}"
     innermost_reduction nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (empty_seq_is_position formula-decl nil positions nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (non_root_reduction? const-decl "bool" reduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_empty formula-decl nil seq_extras structures)
    (reduction_fix? const-decl "bool" reduction nil)
    (member const-decl "bool" sets nil)
    (rhs const-decl "term" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (replaceTerm def-decl "term" replacement nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (term type-decl nil term_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (t skolem-const-decl "term" innermost_reduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (positions? type-eq-decl nil positions nil)
    (q skolem-const-decl "positions?[variable, symbol, arity](t)"
     innermost_reduction nil)
    (subtermOF def-decl "term" subterm nil)
    (p skolem-const-decl
     "positions?[variable, symbol, arity](subtermOF(t, q))"
     innermost_reduction nil)
    (reduction? const-decl "bool" reduction nil)
    (is_normal_form? const-decl "bool" ars_terminology nil))
   nil)
  (nr_normal_form_subterms-1 nil 3759081941
   ("" (skeep)
    (("" (prop)
      (("1" (expand "is_normal_form?")
        (("1" (skeep :preds? t)
          (("1" (expand "reducible?")
            (("1" (skeep)
              (("1" (inst 1 "replaceTerm(t, y, empty_seq)")
                (("1" (expand "replaceTerm")
                  (("1" (rewrite "empty_0")
                    (("1" (expand "non_root_reduction?")
                      (("1" (inst 1 "q")
                        (("1" (expand "reduction?")
                          (("1" (skeep)
                            (("1" (expand "reduction_fix?")
                              (("1"
                                (inst?)
                                (("1" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (innermost_subset_reduction 0
  (innermost_subset_reduction-2 "" 3912757742
   ("" (skeep*)
    (("" (expand "subset?")
      (("" (skeep)
        (("" (expand "member")
          (("" (expand "reduction?")
            (("" (expand "innermost_reduction?")
              (("" (expand "innermost_reduction_fix?")
                (("" (expand "reduction_fix?")
                  (("" (skeep*)
                    (("" (inst 1 "e" "sigma" "p")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (innermost_subset_reduction-1 nil 3745014472
   (""
    (then (skeep*) (expand "subset?") (skeep) (expand "member")
     (expand "reduction?") (expand "innermost_reduction?")
     (expand "innermost_reduction_fix?") (expand "reduction_fix?")
     (skeep*) (inst 1 "e" "sigma" "p") (assert))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reduction? const-decl "bool" reduction nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (innermost_reduction? const-decl "bool" innermost_reduction nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (terminating_is_inn_terminating 0
  (terminating_is_inn_terminating-2 "" 3912757742
   ("" (skeep)
    (("" (expand "terminating?")
      (("" (skeep)
        (("" (inst?)
          (("" (assert)
            (("" (skeep)
              (("" (inst?)
                (("" (lemma "innermost_subset_reduction")
                  (("" (inst?)
                    (("" (expand "subset?")
                      (("" (expand "member")
                        (("" (inst?) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (terminating_is_inn_terminating-1 nil 3755565938
   (""
    (then (skeep) (expand "terminating?") (skeep) (inst?) (assert)
     (skeep) (inst?) (lemma "innermost_subset_reduction") (inst?)
     (expand "subset?") (expand "member") (inst?) (assert))
    nil)
   ((rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subset? const-decl "bool" sets nil)
    (innermost_subset_reduction formula-decl nil innermost_reduction
     nil)
    (sequence type-eq-decl nil sequences nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (terminating? const-decl "bool" noetherian nil))
   nil))
 (inn_reduction_is_comp_op 0
  (inn_reduction_is_comp_op-3 nil 3759131370
   ("" (skeep :preds? t)
    (("" (expand "comp_op?")
      (("" (auto-rewrite "finseq_appl")
        (("" (assert)
          (("" (skeep*)
            (("" (expand "innermost_reduction?")
              (("" (expand "innermost_reduction_fix?")
                (("" (skeep* :preds? t)
                  (("" (inst 1 "add_first(i + 1, p)")
                    (("1" (case "first(add_first(1 + i, p)) - 1 = i")
                      (("1" (case "rest(add_first(1 + i, p)) = p")
                        (("1" (prop)
                          (("1" (rewrite* "nr_normal_form_subterms")
                            (("1" (skeep :preds? t)
                              (("1"
                                (typepred "p")
                                (("1"
                                  (inst -6 "q")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "subtermOF" 2 2)
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide-all-but -1)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "q")
                                    (("2"
                                      (expand "subtermOF" -1)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (hide-all-but -1)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (expand "finseq_appl")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "reduction_fix?")
                            (("2" (skeep)
                              (("2"
                                (inst 1 "e" "sigma")
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "subtermOF" 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide-all-but -1)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (expand "finseq_appl")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (decompose-equality)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "replace")
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (decompose-equality)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (decompose-equality)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "rest_add_first") nil nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide -)
                      (("2" (typepred "p") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (p skolem-const-decl
     "positions?[variable, symbol, arity](st1`seq(i))"
     innermost_reduction nil)
    (positions? type-eq-decl nil positions nil)
    (i skolem-const-decl "below[n]" innermost_reduction nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (add_first const-decl "finseq" seq_extras structures)
    (st1 skolem-const-decl "fs_len[term[variable, symbol, arity]](n)"
     innermost_reduction nil)
    (fs_len type-eq-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (f skolem-const-decl "arity_eq[variable, symbol, arity](n)"
     innermost_reduction nil)
    (arity_eq type-eq-decl nil compatibility nil)
    (n skolem-const-decl "nat" innermost_reduction nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (rest const-decl "finseq" seq_extras structures)
    (reduction_fix? const-decl "bool" reduction nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (member const-decl "bool" sets nil)
    (replaceTerm def-decl "term" replacement nil)
    (ext def-decl "term" substitution nil)
    (sigma skolem-const-decl "Sub[variable, symbol, arity]"
           innermost_reduction nil)
    (rhs const-decl "term" rewrite_rules nil)
    (E skolem-const-decl "set[rewrite_rule[variable, symbol, arity]]"
     innermost_reduction nil)
    (e skolem-const-decl "{e | member(e, E)}" innermost_reduction nil)
    (replace const-decl "finseq" seq_extras structures)
    (term_app_extensionality formula-decl nil term_adt nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (non_root_reduction? const-decl "bool" reduction nil)
    (lhs const-decl "term" rewrite_rules nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nr_normal_form_subterms formula-decl nil innermost_reduction nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil)
    (subtermOF def-decl "term" subterm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (insert? const-decl "finseq" seq_extras structures)
    (q skolem-const-decl "positions?
    [variable, symbol, arity](subtermOF(app(f, st1), add_first(1 + i, p)))"
     innermost_reduction nil)
    (rest_add_first formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (catenate const-decl "positions" positions nil)
    (only_empty_seq const-decl "positions" positions nil)
    (innermost_reduction? const-decl "bool" innermost_reduction nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (comp_op? const-decl "bool" compatibility nil))
   nil)
  (inn_reduction_is_comp_op-2 nil 3759130270
   ("" (skeep*)
    (("" (expand "comp_op?")
      (("" (expand "finseq_appl")
        (("" (skeep*)
          (("" (expand "innermost_reduction?")
            (("" (expand "innermost_reduction_fix?")
              (("" (skeep* :preds? t)
                (("" (inst 1 "add_first(i + 1, p)")
                  (("1" (case "first(add_first(1 + i, p)) - 1 = i")
                    (("1" (case "rest(add_first(1 + i, p)) = p")
                      (("1" (prop)
                        (("1" (expand "is_nr_normal_form?")
                          (("1" (skeep :preds? t)
                            (("1" (typepred "p")
                              (("1"
                                (inst -6 "q")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "subtermOF" 2 2)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide-all-but -1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "q")
                                  (("2"
                                    (expand "subtermOF" -1)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but -1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "finseq_appl")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "reduction_fix?")
                          (("2" (skeep)
                            (("2" (inst 1 "e" "sigma")
                              (("2"
                                (prop)
                                (("1"
                                  (expand "subtermOF" 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide-all-but -1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "finseq_appl")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (expand "replace")
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (decompose-equality)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (decompose-equality)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "rest_add_first") nil nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                     ("3" (hide-all-but 1) (("3" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (hide -)
                    (("2" (typepred "p") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (only_empty_seq const-decl "positions" positions nil)
    (catenate const-decl "positions" positions nil)
    (union const-decl "set" sets nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest_add_first formula-decl nil seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (insert? const-decl "finseq" seq_extras structures)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (lhs const-decl "term" rewrite_rules nil)
    (reduction? const-decl "bool" reduction nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (replace const-decl "finseq" seq_extras structures)
    (rhs const-decl "term" rewrite_rules nil)
    (ext def-decl "term" substitution nil)
    (replaceTerm def-decl "term" replacement nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (rest const-decl "finseq" seq_extras structures)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (arity_eq type-eq-decl nil compatibility nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (fs_len type-eq-decl nil seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (positions? type-eq-decl nil positions nil)
    (comp_op? const-decl "bool" compatibility nil))
   nil)
  (inn_reduction_is_comp_op-1 nil 3745056019
   ("" (skeep*)
    (("" (expand "comp_op?")
      (("" (expand "finseq_appl")
        (("" (skeep*)
          (("" (expand "innermost_reduction?")
            (("" (expand "innermost_reduction_fix?")
              (("" (skeep* :preds? t)
                (("" (inst 1 "add_first(i + 1, p)")
                  (("1" (case "first(add_first(1 + i, p)) - 1 = i")
                    (("1" (case "rest(add_first(1 + i, p)) = p")
                      (("1" (prop)
                        (("1" (expand "is_nr_normal_form?")
                          (("1" (skeep :preds? t)
                            (("1" (typepred "p")
                              (("1"
                                (inst -6 "q")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "subtermOF" 2 2)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide-all-but -1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "q")
                                  (("2"
                                    (expand "subtermOF" -1)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but -1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "finseq_appl")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "reduction_fix?")
                          (("2" (skeep)
                            (("2" (inst 1 "e" "sigma")
                              (("2"
                                (prop)
                                (("1"
                                  (expand "subtermOF" 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide-all-but -1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "finseq_appl")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (expand "replace")
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (decompose-equality)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (decompose-equality)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "rest_add_first") nil nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                     ("3" (hide-all-but 1) (("3" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (hide -)
                    (("2" (typepred "p") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comp_op? const-decl "bool" compatibility nil)
    (positions? type-eq-decl nil positions nil)
    (add_first const-decl "finseq" seq_extras structures)
    (fs_len type-eq-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (arity_eq type-eq-decl nil compatibility nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (rest const-decl "finseq" seq_extras structures)
    (reduction_fix? const-decl "bool" reduction nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (replaceTerm def-decl "term" replacement nil)
    (ext def-decl "term" substitution nil)
    (rhs const-decl "term" rewrite_rules nil)
    (replace const-decl "finseq" seq_extras structures)
    (term_app_extensionality formula-decl nil term_adt nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (reduction? const-decl "bool" reduction nil)
    (lhs const-decl "term" rewrite_rules nil)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (insert? const-decl "finseq" seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (rest_add_first formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (union const-decl "set" sets nil)
    (catenate const-decl "positions" positions nil)
    (only_empty_seq const-decl "positions" positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (innermost_terminating_all_subterms 0
  (innermost_terminating_all_subterms-2 nil 3755566291
   ("" (skeep*)
    (("" (prop)
      (("1" (expand "terminating?")
        (("1" (skeep*)
          (("1"
            (inst 1
             "(LAMBDA(i:nat): IF i=0 THEN t ELSE replaceTerm(t,seq(i),p) ENDIF)")
            (("1" (induct "n")
              (("1" (assert)
                (("1" (inst -2 0)
                  (("1" (lemma "inn_reduction_is_comp_op")
                    (("1" (inst?)
                      (("1" (rewrite "comp_op_iff_comp_cont")
                        (("1" (expand "comp_cont?")
                          (("1" (inst -1 "p" "t")
                            (("1" (typepred "p")
                              (("1"
                                (assert)
                                (("1"
                                  (inst -2 "seq(0)" "seq(1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -3 -2)
                                      (("1"
                                        (lemma
                                         "replace_subterm_of_term")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep*)
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (replaces -1)
                        (("1" (assert)
                          (("1" (inst -3 1)
                            (("1" (lemma "inn_reduction_is_comp_op")
                              (("1"
                                (inst?)
                                (("1"
                                  (rewrite "comp_op_iff_comp_cont")
                                  (("1"
                                    (expand "comp_cont?")
                                    (("1"
                                      (inst -1 "p" "t")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -1 "seq(1)" "seq(2)")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -3 "1 + j")
                        (("2" (lemma "inn_reduction_is_comp_op")
                          (("2" (inst?)
                            (("2" (rewrite "comp_op_iff_comp_cont")
                              (("2"
                                (expand "comp_cont?")
                                (("2"
                                  (inst -1 "p" "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -1
                                       "seq(1 + j)"
                                       "seq(2 + j)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "terminating?")
        (("2" (skeep)
          (("2" (inst -1 "empty_seq")
            (("1" (inst 1 "seq")
              (("1" (rewrite "subterm_empty_seq")
                (("1" (assert) nil nil)) nil))
              nil)
             ("2" (hide -2)
              (("2" (expand "positionsOF")
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "only_empty_seq")
                      (("1" (propax) nil nil)) nil)
                     ("2" (expand "only_empty_seq")
                      (("2" (propax) nil nil)) nil)
                     ("3" (expand "only_empty_seq")
                      (("3" (expand "union")
                        (("3" (expand "member")
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (t skolem-const-decl "term" innermost_reduction nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (only_empty_seq const-decl "positions" positions nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (terminating? const-decl "bool" noetherian nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (term type-decl nil term_adt nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (replaceTerm def-decl "term" replacement nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (inn_reduction_is_comp_op formula-decl nil innermost_reduction nil)
    (comp_op_iff_comp_cont formula-decl nil compatibility nil)
    (replace_subterm_of_term formula-decl nil replacement nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (comp_cont? const-decl "bool" compatibility nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (innermost_reduction? const-decl "bool" innermost_reduction nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (pred type-eq-decl nil defined_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (innermost_terminating_all_subterms-1 nil 3755566151
   ("" (skeep*)
    (("" (prop)
      (("1" (expand "terminating?")
        (("1" (skeep*)
          (("1"
            (inst 1
             "(LAMBDA(i:nat): IF i=0 THEN t ELSE replaceTerm(t,seq(i),p) ENDIF)")
            (("1" (induct "n")
              (("1" (assert)
                (("1" (inst -2 0)
                  (("1" (lemma "inn_reduction_is_comp_op")
                    (("1" (inst?)
                      (("1" (rewrite "comp_op_iff_comp_cont")
                        (("1" (expand "comp_cont?")
                          (("1" (inst -1 "p" "t")
                            (("1" (typepred "p")
                              (("1"
                                (assert)
                                (("1"
                                  (inst -2 "seq(0)" "seq(1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -3 -2)
                                      (("1"
                                        (lemma
                                         "replace_subterm_of_term")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            nil)))))))))))))))))))))))))))))
               ("2" (skeep*)
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (replaces -1)
                        (("1" (assert)
                          (("1" (inst -3 1)
                            (("1" (lemma "inn_reduction_is_comp_op")
                              (("1"
                                (inst?)
                                (("1"
                                  (rewrite "comp_op_iff_comp_cont")
                                  (("1"
                                    (expand "comp_cont?")
                                    (("1"
                                      (inst -1 "p" "t")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -1 "seq(1)" "seq(2)")
                                          (("1"
                                            (assert)
                                            nil)))))))))))))))))))))
                       ("2" (inst -3 "1 + j")
                        (("2" (lemma "inn_reduction_is_comp_op")
                          (("2" (inst?)
                            (("2" (rewrite "comp_op_iff_comp_cont")
                              (("2"
                                (expand "comp_cont?")
                                (("2"
                                  (inst -1 "p" "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -1
                                       "seq(1 + j)"
                                       "seq(2 + j)")
                                      (("2"
                                        (assert)
                                        nil)))))))))))))))))))))))))))))))))
       ("2" (expand "terminating?")
        (("2" (skeep)
          (("2" (inst -1 "empty_seq")
            (("1" (inst 1 "seq")
              (("1" (rewrite "subterm_empty_seq")
                (("1" (assert) nil)))))
             ("2" (hide -2)
              (("2" (expand "positionsOF")
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "only_empty_seq")
                      (("1" (propax) nil)))
                     ("2" (expand "only_empty_seq")
                      (("2" (propax) nil)))
                     ("3" (expand "only_empty_seq")
                      (("3" (expand "union")
                        (("3" (expand "member")
                          (("3" (propax) nil))))))))))))))))))))))))
    nil)
   nil nil))
 (normal_subst_TCC1 0
  (normal_subst_TCC1-2 "" 3912757753
   ("" (skeep* :preds? t) (("" (use "restriction_Subs") nil nil)) nil)
   nil shostak
   (normal_subst subtype
    "substitution[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].restriction(innermost_reduction.sigma)(subterm[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].Vars(innermost_reduction.s))"
    "Sub[variable, symbol, arity]"))
  (normal_subst_TCC1-1 nil 3755568199
   ("" (then (skeep* :preds? t) (use "restriction_Subs")) nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (restriction_Subs formula-decl nil substitution nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil))
   nil
   (normal_subst subtype
    "substitution[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].restriction(innermost_reduction.sigma)(subterm[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].Vars(innermost_reduction.s))"
    "Sub[variable, symbol, arity]")))
 (normal_subst 0
  (normal_subst-3 nil 3759131513
   ("" (skeep)
    (("" (expand "normal_sub?")
      (("" (skeep)
        (("" (typepred "x")
          (("" (expand "Dom")
            (("" (expand "restriction")
              (("" (lift-if)
                (("" (prop)
                  (("" (hide -1)
                    (("" (expand "Vars")
                      (("" (expand "member")
                        (("" (skeep)
                          (("" (rewrite* "nr_normal_form_subterms")
                            (("" (inst -3 "p")
                              (("1"
                                (prop)
                                (("1"
                                  (rewrite "subterm_ext_commute")
                                  (("1"
                                    (replace -2 -1)
                                    (("1"
                                      (expand "ext" -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "s")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "p")
                                (("2"
                                  (rewrite "ext_preserv_pos")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (nr_normal_form_subterms formula-decl nil innermost_reduction nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (ext def-decl "term" substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (lhs const-decl "term" rewrite_rules nil)
    (rhs const-decl "term" rewrite_rules nil)
    (reduction? const-decl "bool" reduction nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subtermOF def-decl "term" subterm nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (sigma skolem-const-decl "Sub[variable, symbol, arity]"
           innermost_reduction nil)
    (s skolem-const-decl "{s: term | app?(s)}" innermost_reduction nil)
    (positions? type-eq-decl nil positions nil)
    (p skolem-const-decl "positions?[variable, symbol, arity](s)"
     innermost_reduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (restriction const-decl "term" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (normal_sub? const-decl "bool" reduction nil))
   nil)
  (normal_subst-2 nil 3759130319
   ("" (skeep)
    (("" (expand "normal_sub?")
      (("" (skeep)
        (("" (typepred "x")
          (("" (expand "Dom")
            (("" (expand "restriction")
              (("" (lift-if)
                (("" (prop)
                  (("" (hide -1)
                    (("" (expand "Vars")
                      (("" (expand "member")
                        (("" (skeep)
                          (("" (expand "is_nr_normal_form?")
                            (("" (inst -3 "p")
                              (("1"
                                (prop)
                                (("1"
                                  (rewrite "subterm_ext_commute")
                                  (("1"
                                    (replace -2 -1)
                                    (("1"
                                      (expand "ext" -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "s")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "p")
                                (("2"
                                  (rewrite "ext_preserv_pos")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (lhs const-decl "term" rewrite_rules nil)
    (rhs const-decl "term" rewrite_rules nil)
    (reduction? const-decl "bool" reduction nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subtermOF def-decl "term" subterm nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (ext def-decl "term" substitution nil)
    (positions? type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (restriction const-decl "term" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (normal_sub? const-decl "bool" reduction nil))
   nil)
  (normal_subst-1 nil 3755568252
   ("" (skeep)
    (("" (expand "normal_sub?")
      (("" (skeep)
        (("" (typepred "x")
          (("" (expand "Dom")
            (("" (expand "restriction")
              (("" (lift-if)
                (("" (prop)
                  (("" (hide -1)
                    (("" (expand "Vars")
                      (("" (expand "member")
                        (("" (skeep)
                          (("" (expand "is_nr_normal_form?")
                            (("" (inst -3 "p")
                              (("1"
                                (prop)
                                (("1"
                                  (rewrite "subterm_ext_commute")
                                  (("1"
                                    (replace -2 -1)
                                    (("1"
                                      (expand "ext" -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "s")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "p")
                                (("2"
                                  (rewrite "ext_preserv_pos")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((normal_sub? const-decl "bool" reduction nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (restriction const-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (ext def-decl "term" substitution nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (reduction? const-decl "bool" reduction nil)
    (rhs const-decl "term" rewrite_rules nil)
    (lhs const-decl "term" rewrite_rules nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (member const-decl "bool" sets nil))
   nil))
 (inn_nf_subterms 0
  (inn_nf_subterms-1 nil 3745146451
   ("" (skeep)
    (("" (prop)
      (("1" (skeep :preds? t)
        (("1" (expand "positionsOF" -1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "only_empty_seq")
                (("1" (replace -2)
                  (("1" (rewrite "subterm_empty_seq") nil nil)) nil))
                nil)
               ("2" (expand "only_empty_seq")
                (("2" (replace -2)
                  (("2" (rewrite "subterm_empty_seq") nil nil)) nil))
                nil)
               ("3" (expand "union")
                (("3" (expand "IUnion")
                  (("3" (expand "catenate")
                    (("3" (expand "member")
                      (("3" (prop)
                        (("1" (expand "only_empty_seq")
                          (("1" (replaces -1)
                            (("1" (rewrite "subterm_empty_seq") nil
                              nil))
                            nil))
                          nil)
                         ("2" (skeep* :preds? t)
                          (("2" (expand "finseq_appl")
                            (("2" (expand "reducible?")
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "innermost_reduction?")
                                  (("2"
                                    (skeep :preds? t)
                                    (("2"
                                      (expand
                                       "innermost_reduction_fix?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -5)
                                          (("2"
                                            (expand
                                             "reduction_fix?"
                                             -7)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand
                                                 "replaceTerm"
                                                 -8)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (case
                                                       "p_1 = empty_seq")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (rewrite
                                                           "subterm_empty_seq")
                                                          (("1"
                                                            (inst
                                                             3
                                                             "replaceTerm(t,ext(sigma)(rhs(e)),add_first(i_1, x_1))")
                                                            (("1"
                                                              (inst
                                                               3
                                                               "add_first(i_1, x_1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "reduction_fix?")
                                                                  (("1"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 1))
                                                        (("2"
                                                          (expand
                                                           "empty_seq")
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (decompose-equality)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (lemma
                                                         "pos_subterm")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "add_first(i_1, x_1)"
                                                           "p_1"
                                                           "t")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (inst
                                                                 4
                                                                 "replaceTerm(t,ext(sigma)(rhs(e)),add_first(i_1, x_1) o p_1)")
                                                                (("1"
                                                                  (inst
                                                                   4
                                                                   "add_first(i_1, x_1) o p_1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "reduction_fix?")
                                                                      (("1"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -7
                                                               5)
                                                              (("2"
                                                                (lemma
                                                                 "pos_o_term")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "add_first(i_1, x_1)"
                                                                   "p_1"
                                                                   "t")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "reducible?")
        (("2" (skeep)
          (("2" (expand "innermost_reduction?")
            (("2" (skeep)
              (("2" (inst -1 "empty_seq")
                (("1" (inst 1 "y")
                  (("1" (inst 1 "p")
                    (("1" (rewrite "subterm_empty_seq") nil nil)
                     ("2" (typepred "p")
                      (("2" (rewrite "subterm_empty_seq") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -)
                  (("2" (expand "positionsOF")
                    (("2" (expand "only_empty_seq")
                      (("2" (expand "union")
                        (("2" (expand "member")
                          (("2" (expand "IUnion")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((t skolem-const-decl "term" innermost_reduction nil)
    (p skolem-const-decl "positions?[variable, symbol, arity](t)"
     innermost_reduction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (insert? const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (catenate const-decl "positions" positions nil)
    (TRUE const-decl "bool" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (replaceTerm def-decl "term" replacement nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (FALSE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (rhs const-decl "term" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_first const-decl "finseq" seq_extras structures)
    (<= const-decl "bool" reals nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (positions type-eq-decl nil positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (pos_subterm formula-decl nil subterm nil)
    (O const-decl "finseq" finite_sequences nil)
    (pos_o_term formula-decl nil subterm nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (innermost_reduction? const-decl "bool" innermost_reduction nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (member const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (term type-decl nil term_adt nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (positionsOF def-decl "positions" positions nil))
   nil))
 (innf_iff_nf 0
  (innf_iff_nf-4 nil 3759131597
   ("" (skeep)
    (("" (prop)
      (("1" (expand "is_normal_form?")
        (("1" (expand "reducible?")
          (("1" (skeep)
            (("1" (inst 1 "y")
              (("1" (lemma "innermost_subset_reduction")
                (("1" (inst?)
                  (("1" (expand "subset?")
                    (("1" (inst -1 "(t, y)")
                      (("1" (expand "member") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (generalize "t" "t" :fnums (-1 1))
        (("2" (induct "t")
          (("1" (skeep*)
            (("1" (hide -1)
              (("1" (expand "is_normal_form?")
                (("1" (expand "reducible?")
                  (("1" (skeep)
                    (("1" (expand "reduction?")
                      (("1" (skeep :preds? t)
                        (("1" (expand "rewrite_rule?")
                          (("1" (flatten)
                            (("1" (expand "subtermOF" -5)
                              (("1"
                                (expand "positionsOF" -4)
                                (("1"
                                  (expand "only_empty_seq")
                                  (("1"
                                    (expand "empty_seq")
                                    (("1"
                                      (decompose-equality -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "lhs")
                                          (("1"
                                            (hide -7)
                                            (("1"
                                              (expand "ext")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep*)
            (("2" (expand "is_normal_form?" 1)
              (("2" (expand "reducible?")
                (("2" (skeep)
                  (("2" (expand "reduction?" -3)
                    (("2" (skeep)
                      (("2" (typepred "p")
                        (("2" (expand "positionsOF")
                          (("2" (prop)
                            (("1" (hide -3)
                              (("1"
                                (expand "is_normal_form?")
                                (("1"
                                  (expand "only_empty_seq")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (rewrite "subterm_empty_seq")
                                      (("1"
                                        (expand "replaceTerm")
                                        (("1"
                                          (expand "empty_seq" -4)
                                          (("1"
                                            (expand "reducible?")
                                            (("1"
                                              (inst 1 "y")
                                              (("1"
                                                (expand
                                                 "innermost_reduction?")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replaces -2)
                                                    (("1"
                                                      (expand
                                                       "innermost_reduction_fix?")
                                                      (("1"
                                                        (expand
                                                         "reduction_fix?")
                                                        (("1"
                                                          (rewrite
                                                           "subterm_empty_seq")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (rewrite*
                                                               "nr_normal_form_subterms")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "q")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-2
                                                                      -1
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst?)
                                                              (("2"
                                                                (expand
                                                                 "replaceTerm")
                                                                (("2"
                                                                  (expand
                                                                   "empty_seq")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "union")
                              (("2"
                                (prop)
                                (("1"
                                  (expand "member")
                                  (("1"
                                    (expand "only_empty_seq")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case
                                         "is_normal_form?(non_root_reduction?(E))(app(app1_var, app2_var))")
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (expand
                                             "is_normal_form?"
                                             -3)
                                            (("1"
                                              (expand "reducible?")
                                              (("1"
                                                (inst 2 "y")
                                                (("1"
                                                  (expand
                                                   "innermost_reduction?")
                                                  (("1"
                                                    (inst
                                                     2
                                                     "empty_seq")
                                                    (("1"
                                                      (expand
                                                       "innermost_reduction_fix?")
                                                      (("1"
                                                        (rewrite
                                                         "subterm_empty_seq")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "reduction_fix?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (rewrite
                                                                 "subterm_empty_seq")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite*
                                           "nr_normal_form_subterms")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred "q")
                                              (("2"
                                                (expand
                                                 "positionsOF"
                                                 -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "union" -1)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       -1
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "only_empty_seq")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "IUnion")
                                                            (("2"
                                                              (expand
                                                               "catenate")
                                                              (("2"
                                                                (skeep*)
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("2"
                                                                      (inst
                                                                       -4
                                                                       "i_1 - 1 ")
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "subtermOF"
                                                                             2)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "finseq_appl")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "rest_add_first")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "first_add")
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "st"
                                                                                       "app2_var`seq(i_1 - 1)")
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          2))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "is_normal_form?")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "nf_subterms")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "E"
                                                                                               "st")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "is_normal_form?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "st")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2
                                                                            -4
                                                                            1
                                                                            4))
                                                                          (("2"
                                                                            (lemma
                                                                             "args_subterm")
                                                                            (("2"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "app(app1_var, app2_var)"
                                                                                 "i_1 - 1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "is_normal_form?")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "inn_nf_subterms")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "E"
                                                                                           "app(app1_var, app2_var)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "#(i_1)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "IUnion")
                                  (("2"
                                    (expand "catenate")
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (skeep* :preds? t)
                                          (("2"
                                            (lemma "inn_nf_subterms")
                                            (("2"
                                              (inst
                                               -1
                                               "E"
                                               "app(app1_var, app2_var)")
                                              (("2"
                                                (expand
                                                 "is_normal_form?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -1 "p")
                                                    (("2"
                                                      (inst
                                                       -5
                                                       "i_1 - 1")
                                                      (("2"
                                                        (replace -4 1)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide 2 4)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "subtermOF"
                                                                 -5)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (expand
                                                                     "replaceTerm")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("2"
                                                                            (rewrite
                                                                             "rest_add_first")
                                                                            (("2"
                                                                              (rewrite
                                                                               "first_add")
                                                                              (("2"
                                                                                (decompose-equality)
                                                                                (("2"
                                                                                  (expand
                                                                                   "replace")
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     -3)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "i_1 - 1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "reducible?")
                                                                                            (("1"
                                                                                              (inst
                                                                                               3
                                                                                               "args(y)`seq(i_1 - 1)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "reduction?")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 1)
                                                            (("2"
                                                              (lemma
                                                               "inn_nf_subterms")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "E"
                                                                 "app(app1_var, app2_var)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "args_subterm")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "app(app1_var, app2_var)"
                                                                       "i_1 - 1")
                                                                      (("2"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "#(i_1)")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reduction? const-decl "bool" reduction nil)
    (innermost_reduction? const-decl "bool" innermost_reduction nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (replaceTerm def-decl "term" replacement nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (union const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (catenate const-decl "positions" positions nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nr_normal_form_subterms formula-decl nil innermost_reduction nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (non_root_reduction? const-decl "bool" reduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (first_add formula-decl nil seq_extras structures)
    (nf_subterms formula-decl nil reduction nil)
    (st skolem-const-decl "term[variable, symbol, arity]"
     innermost_reduction nil)
    (rest_add_first formula-decl nil seq_extras structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (args_subterm formula-decl nil subterm nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (inn_nf_subterms formula-decl nil innermost_reduction nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rhs const-decl "term" rewrite_rules nil)
    (replace const-decl "finseq" seq_extras structures)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (app1_var skolem-const-decl "symbol" innermost_reduction nil)
    (app2_var skolem-const-decl
     "{args: finite_sequence[term[variable, symbol, arity]] |
   args`length = arity(app1_var)}" innermost_reduction nil)
    (i_1 skolem-const-decl
     "upto?[position[variable, symbol, arity]](length(app2_var))"
     innermost_reduction nil)
    (y skolem-const-decl "term[variable, symbol, arity]"
     innermost_reduction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (positionsOF def-decl "positions" positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (lhs const-decl "term" rewrite_rules nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (< const-decl "bool" reals nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (FALSE const-decl "bool" booleans nil)
    (positions? type-eq-decl nil positions nil)
    (vars adt-constructor-decl "[variable -> (vars?)]" term_adt nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (only_empty_seq const-decl "positions" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (term_induction formula-decl nil term_adt nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (innermost_subset_reduction formula-decl nil innermost_reduction
     nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (reducible? const-decl "bool" ars_terminology nil))
   nil)
  (innf_iff_nf-3 nil 3759130399
   ("" (skeep)
    (("" (prop)
      (("1" (expand "is_normal_form?")
        (("1" (expand "reducible?")
          (("1" (skeep)
            (("1" (inst 1 "y")
              (("1" (lemma "innermost_subset_reduction")
                (("1" (inst?)
                  (("1" (expand "subset?")
                    (("1" (inst -1 "(t, y)")
                      (("1" (expand "member") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (generalize "t" "t" :fnums (-1 1))
        (("2" (induct "t")
          (("1" (skeep*)
            (("1" (hide -1)
              (("1" (expand "is_normal_form?")
                (("1" (expand "reducible?")
                  (("1" (skeep)
                    (("1" (expand "reduction?")
                      (("1" (skeep :preds? t)
                        (("1" (expand "rewrite_rule?")
                          (("1" (flatten)
                            (("1" (expand "subtermOF" -5)
                              (("1"
                                (expand "positionsOF" -4)
                                (("1"
                                  (expand "only_empty_seq")
                                  (("1"
                                    (expand "empty_seq")
                                    (("1"
                                      (decompose-equality -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "lhs")
                                          (("1"
                                            (hide -7)
                                            (("1"
                                              (expand "ext")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep*)
            (("2" (expand "is_normal_form?" 1)
              (("2" (expand "reducible?")
                (("2" (skeep)
                  (("2" (expand "reduction?" -3)
                    (("2" (skeep)
                      (("2" (typepred "p")
                        (("2" (expand "positionsOF")
                          (("2" (prop)
                            (("1" (hide -3)
                              (("1"
                                (expand "is_normal_form?")
                                (("1"
                                  (expand "only_empty_seq")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (rewrite "subterm_empty_seq")
                                      (("1"
                                        (expand "replaceTerm")
                                        (("1"
                                          (expand "empty_seq" -4)
                                          (("1"
                                            (expand "reducible?")
                                            (("1"
                                              (inst 1 "y")
                                              (("1"
                                                (expand
                                                 "innermost_reduction?")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replaces -2)
                                                    (("1"
                                                      (expand
                                                       "innermost_reduction_fix?")
                                                      (("1"
                                                        (expand
                                                         "reduction_fix?")
                                                        (("1"
                                                          (rewrite
                                                           "subterm_empty_seq")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "is_nr_normal_form?")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "q")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-2
                                                                      -1
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst?)
                                                              (("2"
                                                                (expand
                                                                 "replaceTerm")
                                                                (("2"
                                                                  (expand
                                                                   "empty_seq")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "union")
                              (("2"
                                (prop)
                                (("1"
                                  (expand "member")
                                  (("1"
                                    (expand "only_empty_seq")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case
                                         "is_nr_normal_form?(E)(app(app1_var, app2_var))")
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (expand
                                             "is_normal_form?"
                                             -3)
                                            (("1"
                                              (expand "reducible?")
                                              (("1"
                                                (inst 2 "y")
                                                (("1"
                                                  (expand
                                                   "innermost_reduction?")
                                                  (("1"
                                                    (inst
                                                     2
                                                     "empty_seq")
                                                    (("1"
                                                      (expand
                                                       "innermost_reduction_fix?")
                                                      (("1"
                                                        (rewrite
                                                         "subterm_empty_seq")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "reduction_fix?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (rewrite
                                                                 "subterm_empty_seq")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "is_nr_normal_form?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred "q")
                                              (("2"
                                                (expand
                                                 "positionsOF"
                                                 -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "union" -1)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       -1
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "only_empty_seq")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "IUnion")
                                                            (("2"
                                                              (expand
                                                               "catenate")
                                                              (("2"
                                                                (skeep*)
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("2"
                                                                      (inst
                                                                       -4
                                                                       "i_1 - 1 ")
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "subtermOF"
                                                                             2)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "finseq_appl")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "rest_add_first")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "first_add")
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "st"
                                                                                       "app2_var`seq(i_1 - 1)")
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          2))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "is_normal_form?")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "nf_subterms")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "E"
                                                                                               "st")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "is_normal_form?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "st")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2
                                                                            -4
                                                                            1
                                                                            4))
                                                                          (("2"
                                                                            (lemma
                                                                             "args_subterm")
                                                                            (("2"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "app(app1_var, app2_var)"
                                                                                 "i_1 - 1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "is_normal_form?")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "inn_nf_subterms")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "E"
                                                                                           "app(app1_var, app2_var)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "#(i_1)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "IUnion")
                                  (("2"
                                    (expand "catenate")
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (skeep* :preds? t)
                                          (("2"
                                            (lemma "inn_nf_subterms")
                                            (("2"
                                              (inst
                                               -1
                                               "E"
                                               "app(app1_var, app2_var)")
                                              (("2"
                                                (expand
                                                 "is_normal_form?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -1 "p")
                                                    (("2"
                                                      (inst
                                                       -5
                                                       "i_1 - 1")
                                                      (("2"
                                                        (replace -4 1)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide 2 4)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "subtermOF"
                                                                 -5)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (expand
                                                                     "replaceTerm")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("2"
                                                                            (rewrite
                                                                             "rest_add_first")
                                                                            (("2"
                                                                              (rewrite
                                                                               "first_add")
                                                                              (("2"
                                                                                (decompose-equality)
                                                                                (("2"
                                                                                  (expand
                                                                                   "replace")
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     -3)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "i_1 - 1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "reducible?")
                                                                                            (("1"
                                                                                              (inst
                                                                                               3
                                                                                               "args(y)`seq(i_1 - 1)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "reduction?")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 1)
                                                            (("2"
                                                              (lemma
                                                               "inn_nf_subterms")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "E"
                                                                 "app(app1_var, app2_var)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "args_subterm")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "app(app1_var, app2_var)"
                                                                       "i_1 - 1")
                                                                      (("2"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "#(i_1)")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reduction? const-decl "bool" reduction nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (replaceTerm def-decl "term" replacement nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (union const-decl "set" sets nil)
    (catenate const-decl "positions" positions nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (first_add formula-decl nil seq_extras structures)
    (nf_subterms formula-decl nil reduction nil)
    (rest_add_first formula-decl nil seq_extras structures)
    (args_subterm formula-decl nil subterm nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (rhs const-decl "term" rewrite_rules nil)
    (replace const-decl "finseq" seq_extras structures)
    (positionsOF def-decl "positions" positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (lhs const-decl "term" rewrite_rules nil)
    (positions? type-eq-decl nil positions nil)
    (vars adt-constructor-decl "[variable -> (vars?)]" term_adt nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (only_empty_seq const-decl "positions" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (term_induction formula-decl nil term_adt nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (term type-decl nil term_adt nil)
    (reducible? const-decl "bool" ars_terminology nil))
   nil)
  (innf_iff_nf-2 nil 3758896055
   ("" (skeep)
    (("" (prop)
      (("1" (expand "is_normal_form?")
        (("1" (expand "reducible?")
          (("1" (skeep)
            (("1" (inst 1 "y")
              (("1" (lemma "innermost_subset_reduction")
                (("1" (inst?)
                  (("1" (expand "subset?")
                    (("1" (inst -1 "(t, y)")
                      (("1" (expand "member") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (generalize "t" "t" :fnums (-1 1))
        (("2" (induct "t")
          (("1" (skeep*)
            (("1" (hide -1)
              (("1" (expand "is_normal_form?")
                (("1" (expand "reducible?")
                  (("1" (skeep)
                    (("1" (expand "reduction?")
                      (("1" (skeep :preds? t)
                        (("1" (expand "rewrite_rule?")
                          (("1" (flatten)
                            (("1" (expand "subtermOF" -5)
                              (("1"
                                (expand "positionsOF" -4)
                                (("1"
                                  (expand "only_empty_seq")
                                  (("1"
                                    (expand "empty_seq")
                                    (("1"
                                      (decompose-equality -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "lhs")
                                          (("1"
                                            (hide -7)
                                            (("1"
                                              (expand "ext")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep*)
            (("2" (expand "is_normal_form?" 1)
              (("2" (expand "reducible?")
                (("2" (skeep)
                  (("2" (expand "reduction?" -3)
                    (("2" (skeep)
                      (("2" (typepred "p")
                        (("2" (expand "positionsOF")
                          (("2" (prop)
                            (("1" (hide -3)
                              (("1"
                                (expand "is_normal_form?")
                                (("1"
                                  (expand "only_empty_seq")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (rewrite "subterm_empty_seq")
                                      (("1"
                                        (expand "replaceTerm")
                                        (("1"
                                          (expand "empty_seq" -4)
                                          (("1"
                                            (expand "reducible?")
                                            (("1"
                                              (inst 1 "y")
                                              (("1"
                                                (expand
                                                 "innermost_reduction?")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replaces -2)
                                                    (("1"
                                                      (expand
                                                       "innermost_reduction_fix?")
                                                      (("1"
                                                        (expand
                                                         "reduction_fix?")
                                                        (("1"
                                                          (rewrite
                                                           "subterm_empty_seq")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "is_nr_normal_form?")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "q")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-2
                                                                      -1
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst?)
                                                              (("2"
                                                                (expand
                                                                 "replaceTerm")
                                                                (("2"
                                                                  (expand
                                                                   "empty_seq")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "union")
                              (("2"
                                (prop)
                                (("1"
                                  (expand "member")
                                  (("1"
                                    (expand "only_empty_seq")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case
                                         "is_nr_normal_form?(E)(app(app1_var, app2_var))")
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (expand
                                             "is_normal_form?"
                                             -3)
                                            (("1"
                                              (expand "reducible?")
                                              (("1"
                                                (inst 2 "y")
                                                (("1"
                                                  (expand
                                                   "innermost_reduction?")
                                                  (("1"
                                                    (inst
                                                     2
                                                     "empty_seq")
                                                    (("1"
                                                      (expand
                                                       "innermost_reduction_fix?")
                                                      (("1"
                                                        (rewrite
                                                         "subterm_empty_seq")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "reduction_fix?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (rewrite
                                                                 "subterm_empty_seq")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "is_nr_normal_form?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred "q")
                                              (("2"
                                                (expand
                                                 "positionsOF"
                                                 -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "union" -1)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       -1
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "only_empty_seq")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "IUnion")
                                                            (("2"
                                                              (expand
                                                               "catenate")
                                                              (("2"
                                                                (skeep*)
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("2"
                                                                      (inst
                                                                       -4
                                                                       "i_1 - 1 ")
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "subtermOF"
                                                                             2)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "finseq_appl")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "rest_add_first")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "first_add")
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "st"
                                                                                       "app2_var`seq(i_1 - 1)")
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          2))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "is_normal_form?")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "nf_subterms")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "E"
                                                                                               "st")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "is_normal_form?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "st")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2
                                                                            -4
                                                                            1
                                                                            4))
                                                                          (("2"
                                                                            (lemma
                                                                             "args_subterm")
                                                                            (("2"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "app(app1_var, app2_var)"
                                                                                 "i_1 - 1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "is_normal_form?")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "inn_nf_subterms")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "E"
                                                                                           "app(app1_var, app2_var)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "#(i_1)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "IUnion")
                                  (("2"
                                    (expand "catenate")
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (skeep* :preds? t)
                                          (("2"
                                            (lemma "inn_nf_subterms")
                                            (("2"
                                              (inst
                                               -1
                                               "E"
                                               "app(app1_var, app2_var)")
                                              (("2"
                                                (expand
                                                 "is_normal_form?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -1 "p")
                                                    (("2"
                                                      (inst
                                                       -5
                                                       "i_1 - 1")
                                                      (("2"
                                                        (replace -4 1)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide 2 4)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "subtermOF"
                                                                 -5)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (expand
                                                                     "replaceTerm")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("2"
                                                                            (rewrite
                                                                             "rest_add_first")
                                                                            (("2"
                                                                              (rewrite
                                                                               "first_add")
                                                                              (("2"
                                                                                (decompose-equality)
                                                                                (("2"
                                                                                  (expand
                                                                                   "replace")
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     -3)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "i_1 - 1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "reducible?")
                                                                                            (("1"
                                                                                              (inst
                                                                                               3
                                                                                               "args(y)`seq(i_1 - 1)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "reduction?")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 1)
                                                            (("2"
                                                              (lemma
                                                               "inn_nf_subterms")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "E"
                                                                 "app(app1_var, app2_var)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "args_subterm")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "app(app1_var, app2_var)"
                                                                       "i_1 - 1")
                                                                      (("2"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "#(i_1)")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reducible? const-decl "bool" ars_terminology nil)
    (term type-decl nil term_adt nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (term_induction formula-decl nil term_adt nil)
    (subtermOF def-decl "term" subterm nil)
    (only_empty_seq const-decl "positions" positions nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (vars adt-constructor-decl "[variable -> (vars?)]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (lhs const-decl "term" rewrite_rules nil)
    (ext def-decl "term" substitution nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (replace const-decl "finseq" seq_extras structures)
    (rhs const-decl "term" rewrite_rules nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (args_subterm formula-decl nil subterm nil)
    (rest_add_first formula-decl nil seq_extras structures)
    (nf_subterms formula-decl nil reduction nil)
    (first_add formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (catenate const-decl "positions" positions nil)
    (union const-decl "set" sets nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (replaceTerm def-decl "term" replacement nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (reduction? const-decl "bool" reduction nil))
   nil)
  (innf_iff_nf-1 nil 3758895224
   ("" (skeep)
    (("" (prop)
      (("1" (postpone) nil nil)
       ("2" (generalize "t" "t" :fnums (-1 1))
        (("2" (postpone) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (non_nf_has_reducible_subterm 0
  (non_nf_has_reducible_subterm-2 nil 3758896670
   ("" (skeep)
    (("" (induct "t")
      (("1" (typepred "t!1") (("1" (propax) nil nil)) nil)
       ("2" (skeep)
        (("2" (expand "is_normal_form?")
          (("2" (inst 1 "empty_seq")
            (("1" (rewrite "subterm_empty_seq")
              (("1" (expand "reducible?")
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (expand "reduction?")
                      (("1" (expand "innermost_reduction?")
                        (("1" (expand "innermost_reduction_fix?")
                          (("1" (skeep)
                            (("1" (typepred "p")
                              (("1"
                                (inst 1 "p")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "positionsOF")
                                    (("1"
                                      (expand "only_empty_seq")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (rewrite "subterm_empty_seq")
                                          (("1"
                                            (hide -)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (grind)
                                    (("2"
                                      (typepred "e")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (skeep :preds? t)
        (("3" (case "arity(app1_var) = 0")
          (("1" (hide -3)
            (("1" (lemma "innf_iff_nf")
              (("1" (inst?)
                (("1" (prop)
                  (("1" (hide 2)
                    (("1" (expand "is_normal_form?")
                      (("1" (expand "reducible?")
                        (("1" (expand "innermost_reduction?")
                          (("1" (expand "innermost_reduction_fix?")
                            (("1" (skeep* :preds? t)
                              (("1"
                                (expand "positionsOF")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "only_empty_seq")
                                    (("1"
                                      (inst 1 "empty_seq")
                                      (("1"
                                        (inst 1 "y")
                                        (("1"
                                          (inst 1 "empty_seq")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (rewrite*
                                               "subterm_empty_seq")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "innf_iff_nf")
            (("2" (inst?)
              (("2" (assert)
                (("2" (hide 3)
                  (("2" (expand "is_normal_form?")
                    (("2" (expand "reducible?")
                      (("2" (skeep)
                        (("2" (expand "innermost_reduction?")
                          (("2" (skeep :preds? t)
                            (("2" (expand "positionsOF")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "union")
                                  (("2"
                                    (expand "member")
                                    (("2"
                                      (expand "IUnion")
                                      (("2"
                                        (expand "catenate")
                                        (("2"
                                          (expand "only_empty_seq")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (expand
                                                     "innermost_reduction_fix?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         2
                                                         "empty_seq")
                                                        (("1"
                                                          (inst 2 "y")
                                                          (("1"
                                                            (inst
                                                             2
                                                             "empty_seq")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (rewrite*
                                                                 "subterm_empty_seq")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite*
                                                               "subterm_empty_seq")
                                                              (("2"
                                                                (rewrite
                                                                 "empty_seq_is_position")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "empty_seq_is_position")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep :preds? t)
                                                  (("2"
                                                    (skolem -3 "q")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         -7
                                                         "i_1 - 1")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (skeep*
                                                             :preds?
                                                             t)
                                                            (("1"
                                                              (inst
                                                               2
                                                               "add_first(i_1, p!1)")
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "y!1")
                                                                (("1"
                                                                  (inst
                                                                   2
                                                                   "p_1")
                                                                  (("1"
                                                                    (expand
                                                                     "subtermOF"
                                                                     2)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "rest_add_first")
                                                                            (("2"
                                                                              (case
                                                                               "first(add_first(i_1, p!1)) = i_1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "subtermOF"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "finseq_appl")
                                                                      (("2"
                                                                        (rewrite
                                                                         "rest_add_first")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "first(add_first(i_1, p!1)) = i_1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -3
                                                                 -8)
                                                                (("2"
                                                                  (expand
                                                                   "positionsOF"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "union")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (expand
                                                                         "IUnion")
                                                                        (("2"
                                                                          (expand
                                                                           "catenate")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               2
                                                                               "i_1")
                                                                              (("2"
                                                                                (inst
                                                                                 2
                                                                                 "p!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "finseq_appl")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 3)
                                                            (("2"
                                                              (expand
                                                               "innermost_reduction_fix?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   -5)
                                                                  (("2"
                                                                    (expand
                                                                     "reduction_fix?")
                                                                    (("2"
                                                                      (skeep
                                                                       :preds?
                                                                       t)
                                                                      (("2"
                                                                        (expand
                                                                         "subtermOF"
                                                                         -8)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -9))
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "first(p)=i_1"
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "rest(p)=q"
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "replaceTerm"
                                                                                     -9)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "finseq_appl")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "replace")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (decompose-equality
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (decompose-equality
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "i_1 - 1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 3
                                                                                                                 "replaceTerm(app2_var`seq(i_1 - 1), ext(sigma)(rhs(e)), q)")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "reduction?")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-8
                                                                                      1
                                                                                      2))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      (("1"
                                                                                        (decompose-equality)
                                                                                        (("1"
                                                                                          (decompose-equality)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (decompose-equality)
                                                                                        (("2"
                                                                                          (decompose-equality)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (decompose-equality)
                                                                                        (("1"
                                                                                          (decompose-equality)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (decompose-equality)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-8
                                                                                    1))
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_seq_is_position formula-decl nil positions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (q skolem-const-decl "position[variable, symbol, arity]"
     innermost_reduction nil)
    (p skolem-const-decl
     "positions?[variable, symbol, arity](app(app1_var, app2_var))"
     innermost_reduction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (even? const-decl "bool" integers nil)
    (even_nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y skolem-const-decl "term[variable, symbol, arity]"
     innermost_reduction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (replace const-decl "finseq" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (rest_add_first formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (p_1 skolem-const-decl
     "positions?[variable, symbol, arity](subtermOF(app2_var`seq(i_1 - 1), p!1))"
     innermost_reduction nil)
    (p!1 skolem-const-decl
     "positions?[variable, symbol, arity](app2_var`seq(i_1 - 1))"
     innermost_reduction nil)
    (i_1 skolem-const-decl
     "upto?[position[variable, symbol, arity]](length(app2_var))"
     innermost_reduction nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app2_var skolem-const-decl
     "{args: finite_sequence[term[variable, symbol, arity]] |
   args`length = arity(app1_var)}" innermost_reduction nil)
    (app1_var skolem-const-decl "symbol" innermost_reduction nil)
    (innf_iff_nf formula-decl nil innermost_reduction nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (vars adt-constructor-decl "[variable -> (vars?)]" term_adt nil)
    (vars1_var skolem-const-decl "variable" innermost_reduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (replaceTerm def-decl "term" replacement nil)
    (E skolem-const-decl "set[rewrite_rule[variable, symbol, arity]]"
     innermost_reduction nil)
    (e skolem-const-decl "{e | member(e, E)}" innermost_reduction nil)
    (union const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (catenate const-decl "positions" positions nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (p skolem-const-decl
     "positions?[variable, symbol, arity](vars(vars1_var))"
     innermost_reduction nil)
    (ext def-decl "term" substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (member const-decl "bool" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (subset? const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (non_root_reduction? const-decl "bool" reduction nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (rhs const-decl "term" rewrite_rules nil)
    (lhs const-decl "term" rewrite_rules nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (only_empty_seq const-decl "positions" positions nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (term_induction formula-decl nil term_adt nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (subtermOF def-decl "term" subterm nil)
    (innermost_reduction? const-decl "bool" innermost_reduction nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (reduction? const-decl "bool" reduction nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil))
   nil)
  (non_nf_has_reducible_subterm-1 nil 3745061457
   ("" (skeep)
    (("" (induct "t")
      (("1" (typepred "t!1") (("1" (propax) nil nil)) nil)
       ("2" (skeep)
        (("2" (expand "is_normal_form?")
          (("2" (inst 1 "empty_seq")
            (("1" (rewrite "subterm_empty_seq")
              (("1" (expand "reducible?")
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (expand "reduction?")
                      (("1" (expand "innermost_reduction?")
                        (("1" (expand "innermost_reduction_fix?")
                          (("1" (skeep)
                            (("1" (typepred "p")
                              (("1"
                                (inst 1 "p")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "positionsOF")
                                    (("1"
                                      (expand "only_empty_seq")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (rewrite "subterm_empty_seq")
                                          (("1"
                                            (hide -)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (grind)
                                    (("2"
                                      (typepred "e")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (skeep :preds? t)
        (("3" (case "arity(app1_var) = 0")
          (("1" (hide -3)
            (("1" (lemma "nf_is_innf")
              (("1" (inst?)
                (("1" (prop)
                  (("1" (hide 2)
                    (("1" (expand "is_normal_form?")
                      (("1" (expand "reducible?")
                        (("1" (expand "innermost_reduction?")
                          (("1" (expand "innermost_reduction_fix?")
                            (("1" (skeep* :preds? t)
                              (("1"
                                (expand "positionsOF")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "only_empty_seq")
                                    (("1"
                                      (inst 1 "empty_seq")
                                      (("1"
                                        (inst 1 "y")
                                        (("1"
                                          (inst 1 "empty_seq")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (rewrite*
                                               "subterm_empty_seq")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "nf_is_innf")
            (("2" (inst?)
              (("2" (prop)
                (("2" (hide 3)
                  (("2" (expand "is_normal_form?")
                    (("2" (expand "reducible?")
                      (("2" (skeep)
                        (("2" (expand "innermost_reduction?")
                          (("2" (skeep :preds? t)
                            (("2" (expand "positionsOF")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "union")
                                  (("2"
                                    (expand "member")
                                    (("2"
                                      (expand "IUnion")
                                      (("2"
                                        (expand "catenate")
                                        (("2"
                                          (expand "only_empty_seq")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (hide -4)
                                              (("1"
                                                (expand
                                                 "innermost_reduction_fix?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst
                                                     2
                                                     "empty_seq")
                                                    (("1"
                                                      (inst 2 "y")
                                                      (("1"
                                                        (inst
                                                         2
                                                         "empty_seq")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (rewrite*
                                                             "subterm_empty_seq")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep :preds? t)
                                              (("2"
                                                (skolem -3 "q")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "finseq_appl")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (inst
                                                         -7
                                                         "i_1 - 1")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (skeep*
                                                             :preds?
                                                             t)
                                                            (("1"
                                                              (inst
                                                               2
                                                               "add_first(i_1, p!1)")
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "y!1")
                                                                (("1"
                                                                  (inst
                                                                   2
                                                                   "p_1")
                                                                  (("1"
                                                                    (expand
                                                                     "subtermOF"
                                                                     2)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "rest_add_first")
                                                                            (("2"
                                                                              (case
                                                                               "first(add_first(i_1, p!1)) = i_1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "subtermOF"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "finseq_appl")
                                                                      (("2"
                                                                        (rewrite
                                                                         "rest_add_first")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "first(add_first(i_1, p!1)) = i_1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -3
                                                                 -8)
                                                                (("2"
                                                                  (expand
                                                                   "positionsOF"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "union")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (expand
                                                                         "IUnion")
                                                                        (("2"
                                                                          (expand
                                                                           "catenate")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               2
                                                                               "i_1")
                                                                              (("2"
                                                                                (inst
                                                                                 2
                                                                                 "p!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "finseq_appl")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 3)
                                                            (("2"
                                                              (expand
                                                               "innermost_reduction_fix?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   -5)
                                                                  (("2"
                                                                    (expand
                                                                     "reduction_fix?")
                                                                    (("2"
                                                                      (skeep
                                                                       :preds?
                                                                       t)
                                                                      (("2"
                                                                        (expand
                                                                         "subtermOF"
                                                                         -8)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -9))
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "first(p)=i_1"
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "rest(p)=q"
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "replaceTerm"
                                                                                     -9)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "finseq_appl")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "replace")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (decompose-equality
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (decompose-equality
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "i_1 - 1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 3
                                                                                                                 "replaceTerm(app2_var`seq(i_1 - 1), ext(sigma)(rhs(e)), q)")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "reduction?")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-8
                                                                                      1
                                                                                      2))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      (("1"
                                                                                        (decompose-equality)
                                                                                        (("1"
                                                                                          (decompose-equality)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (decompose-equality)
                                                                                        (("2"
                                                                                          (decompose-equality)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (decompose-equality)
                                                                                        (("1"
                                                                                          (decompose-equality)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (decompose-equality)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-8
                                                                                    1))
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (^ const-decl "finseq" finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (replace const-decl "finseq" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (rest_add_first formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (vars adt-constructor-decl "[variable -> (vars?)]" term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (replaceTerm def-decl "term" replacement nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (union const-decl "set" sets nil)
    (catenate const-decl "positions" positions nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (ext def-decl "term" substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (member const-decl "bool" sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (rhs const-decl "term" rewrite_rules nil)
    (lhs const-decl "term" rewrite_rules nil)
    (only_empty_seq const-decl "positions" positions nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (term_induction formula-decl nil term_adt nil)
    (subtermOF def-decl "term" subterm nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (reduction? const-decl "bool" reduction nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (term type-decl nil term_adt nil))
   shostak))
 (non_root_inn_subset_inn_reduction 0
  (non_root_inn_subset_inn_reduction-2 "" 3912757769
   ("" (skeep)
    (("" (expand "subset?")
      (("" (skeep)
        (("" (expand "member")
          (("" (expand "non_root_innermost_reduction?")
            (("" (expand "innermost_reduction?")
              (("" (expand "reduction_fix?")
                (("" (expand "innermost_reduction_fix?")
                  (("" (skeep*)
                    (("" (inst 1 "p")
                      (("" (assert)
                        (("" (expand "reduction_fix?")
                          (("" (inst?) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (non_root_inn_subset_inn_reduction-1 nil 3745055373
   (""
    (then (skeep) (expand "subset?") (skeep) (expand "member")
     (expand "non_root_innermost_reduction?")
     (expand "innermost_reduction?") (expand "reduction_fix?")
     (expand "innermost_reduction_fix?") (skeep*) (inst 1 "p") (assert)
     (expand "reduction_fix?") (inst?) (assert))
    nil)
   ((non_root_innermost_reduction? const-decl "bool"
     innermost_reduction nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (innermost_reduction? const-decl "bool" innermost_reduction nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (non_root_ir_preserves_root_symbol 0
  (non_root_ir_preserves_root_symbol-1 nil 3752331521
   ("" (skeep)
    (("" (use "non_root_rtc_preserves_root_symbol")
      (("" (assert)
        (("" (split -1)
          (("1" (propax) nil nil)
           ("2"
            (case "subset?(non_root_innermost_reduction?(E), non_root_reduction?(E))")
            (("1" (use "Closure_monotony")
              (("1" (assert)
                (("1" (flatten)
                  (("1" (hide-all-but (-4 -7 1))
                    (("1" (expand "subset?")
                      (("1" (expand "member")
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "subset?")
                (("2" (expand "member")
                  (("2" (skeep)
                    (("2" (expand "non_root_innermost_reduction?")
                      (("2" (expand "non_root_reduction?")
                        (("2" (skeep) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_root_reduction? const-decl "bool" reduction nil)
    (non_root_innermost_reduction? const-decl "bool"
     innermost_reduction nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (pred type-eq-decl nil defined_types nil)
    (Closure_monotony formula-decl nil relations_closure nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (non_root_rtc_preserves_root_symbol formula-decl nil reduction
     nil))
   shostak))
 (non_root_ir_preserves_pos_args 0
  (non_root_ir_preserves_pos_args-1 nil 3752336724
   ("" (skeep :preds? t)
    (("" (use "non_root_ir_preserves_root_symbol")
      (("" (assert)
        (("" (lemma "equal_symbol_equal_length_arg")
          (("" (inst -1 "s" "t" "f(s)" "f(t)" "args(s)" "args(t)")
            (("" (flatten)
              (("" (prop)
                (("1" (lemma "positions_of_arg")
                  (("1" (inst -1 "t" "k - 1")
                    (("1" (assert) nil nil)
                     ("2" (replace -1 1 rl)
                      (("2" (hide -1 -2 -3 -7 2)
                        (("2" (expand "#")
                          (("2" (grind)
                            (("2" (decompose-equality -7)
                              (("2" (inst -1 "0") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (decompose-equality) nil nil)
                 ("3" (decompose-equality) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (t skolem-const-decl "term" innermost_reduction nil)
    (k skolem-const-decl "{k: posnat | positionsOF(s)( #(k))}"
     innermost_reduction nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (s skolem-const-decl "{s: term | app?(s)}" innermost_reduction nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (catenate const-decl "positions" positions nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member const-decl "bool" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (positions_of_arg formula-decl nil positions nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (equal_symbol_equal_length_arg formula-decl nil positions nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (term type-decl nil term_adt nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (non_root_ir_preserves_root_symbol formula-decl nil
     innermost_reduction nil))
   shostak))
 (arg_preservation_in_finite_reduction_TCC1 0
  (arg_preservation_in_finite_reduction_TCC1-2 "" 3912757770
   ("" (skeep :preds? t)
    (("" (use "empty_0[term]") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (arg_preservation_in_finite_reduction subtype "0"
    "below[length(seqt)]"))
  (arg_preservation_in_finite_reduction_TCC1-1 nil 3757317981
   ("" (then (skeep :preds? t) (use "empty_0[term]") (assert)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (arg_preservation_in_finite_reduction subtype "0"
    "below[length(seqt)]")))
 (arg_preservation_in_finite_reduction_TCC2 0
  (arg_preservation_in_finite_reduction_TCC2-2 "" 3912757770
   ("" (skeep :preds? t)
    (("" (use "empty_0[term]") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (arg_preservation_in_finite_reduction subtype "0"
    "below[length(seqt)]"))
  (arg_preservation_in_finite_reduction_TCC2-1 nil 3757317981
   ("" (then (skeep :preds? t) (use "empty_0[term]") (assert)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (< const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (arg_preservation_in_finite_reduction subtype "0"
    "below[length(seqt)]")))
 (arg_preservation_in_finite_reduction_TCC3 0
  (arg_preservation_in_finite_reduction_TCC3-2 "" 3912757770
   ("" (subtype-tcc) nil nil) nil shostak
   (arg_preservation_in_finite_reduction subtype
    "finite_sequences[term_adt[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].term].finseq_appl(innermost_reduction.seqt)(0)"
    "(term_adt[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].app?)"))
  (arg_preservation_in_finite_reduction_TCC3-1 nil 3757317981
   ("" (subtype-tcc) nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (arg_preservation_in_finite_reduction subtype
    "finite_sequences[term_adt[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].term].finseq_appl(innermost_reduction.seqt)(0)"
    "(term_adt[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].app?)")))
 (arg_preservation_in_finite_reduction_TCC4 0
  (arg_preservation_in_finite_reduction_TCC4-2 "" 3912757770
   ("" (skeep :preds? t)
    (("" (use "empty_0[term]") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (arg_preservation_in_finite_reduction subtype
    "(number_fields.-)(length(innermost_reduction.seqp), 1)" "nat"))
  (arg_preservation_in_finite_reduction_TCC4-1 nil 3757317981
   ("" (then (skeep :preds? t) (use "empty_0[term]") (assert)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (< const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (arg_preservation_in_finite_reduction subtype
    "(number_fields.-)(length(innermost_reduction.seqp), 1)" "nat")))
 (arg_preservation_in_finite_reduction_TCC5 0
  (arg_preservation_in_finite_reduction_TCC5-2 "" 3912757770
   ("" (subtype-tcc) nil nil) nil shostak
   (arg_preservation_in_finite_reduction subtype
    "innermost_reduction.n" "below[length(seqp)]"))
  (arg_preservation_in_finite_reduction_TCC5-1 nil 3757317981
   ("" (subtype-tcc) nil) nil nil
   (arg_preservation_in_finite_reduction subtype
    "innermost_reduction.n" "below[length(seqp)]")))
 (arg_preservation_in_finite_reduction_TCC6 0
  (arg_preservation_in_finite_reduction_TCC6-2 "" 3912757770
   ("" (subtype-tcc) nil nil) nil shostak
   (arg_preservation_in_finite_reduction subtype
    "innermost_reduction.n" "below[length(seqt)]"))
  (arg_preservation_in_finite_reduction_TCC6-1 nil 3757317981
   ("" (subtype-tcc) nil) nil nil
   (arg_preservation_in_finite_reduction subtype
    "innermost_reduction.n" "below[length(seqt)]")))
 (arg_preservation_in_finite_reduction_TCC7 0
  (arg_preservation_in_finite_reduction_TCC7-2 "" 3912757770
   ("" (expand "finseq_appl")
    (("" (skeep :preds? t)
      (("" (expand "finseq_appl")
        (("" (hide-all-but (-7 2))
          (("" (use "empty_0[posnat]") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (arg_preservation_in_finite_reduction subtype
    "finite_sequences[position[variable, symbol, arity]].finseq_appl(innermost_reduction.seqp)(innermost_reduction.n)"
    "not_empty_seq[posnat]"))
  (arg_preservation_in_finite_reduction_TCC7-1 nil 3757317981
   (""
    (then (expand "finseq_appl") (skeep :preds? t)
     (expand "finseq_appl") (hide-all-but (-7 2))
     (use "empty_0[posnat]") (assert))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_0 formula-decl nil seq_extras structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (arg_preservation_in_finite_reduction subtype
    "finite_sequences[position[variable, symbol, arity]].finseq_appl(innermost_reduction.seqp)(innermost_reduction.n)"
    "not_empty_seq[posnat]")))
 (arg_preservation_in_finite_reduction_TCC8 0
  (arg_preservation_in_finite_reduction_TCC8-2 "" 3912757770
   ("" (subtype-tcc) nil nil) nil shostak
   (arg_preservation_in_finite_reduction subtype
    "(number_fields.+)(innermost_reduction.n, 1)"
    "below[length(seqt)]"))
  (arg_preservation_in_finite_reduction_TCC8-1 nil 3757317981
   ("" (subtype-tcc) nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (first const-decl "T" seq_extras structures))
   nil
   (arg_preservation_in_finite_reduction subtype
    "(number_fields.+)(innermost_reduction.n, 1)"
    "below[length(seqt)]")))
 (arg_preservation_in_finite_reduction_TCC9 0
  (arg_preservation_in_finite_reduction_TCC9-1 nil 3757317981
   ("" (skeep :preds? t)
    (("" (expand "finseq_appl")
      (("" (skeep)
        (("" (use "positions_of_arg")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (l skolem-const-decl
     "{l: posnat | l <= length(args(finseq_appl[term](seqt)(0)))}"
     innermost_reduction nil)
    (seqt skolem-const-decl "{seqt: finseq[term] |
   NOT seqt = empty_seq AND app?(finseq_appl[term](seqt)(0))}"
     innermost_reduction nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil) (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (positions_of_arg formula-decl nil positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (arg_preservation_in_finite_reduction subtype
    "set2seq[posnat].#(innermost_reduction.l)"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(finite_sequences[term_adt[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].term].finseq_appl(innermost_reduction.seqt)(0))")))
 (arg_preservation_in_finite_reduction_TCC10 0
  (arg_preservation_in_finite_reduction_TCC10-2 "" 3912757771
   ("" (subtype-tcc) nil nil) nil shostak
   (arg_preservation_in_finite_reduction subtype
    "innermost_reduction.n" "below[length(seqt)]"))
  (arg_preservation_in_finite_reduction_TCC10-1 nil 3757317981
   ("" (subtype-tcc) nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (first const-decl "T" seq_extras structures)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (lhs const-decl "term" rewrite_rules nil)
    (rhs const-decl "term" rewrite_rules nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (non_root_reduction? const-decl "bool" reduction nil)
    (term type-decl nil term_adt nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (is_normal_form? const-decl "bool" ars_terminology nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (arg_preservation_in_finite_reduction subtype
    "innermost_reduction.n" "below[length(seqt)]")))
 (arg_preservation_in_finite_reduction_TCC11 0
  (arg_preservation_in_finite_reduction_TCC11-2 "" 3804432787
   ("" (auto-rewrite "finseq_appl")
    (("" (assert)
      (("" (skeep* :preds? t)
        (("" (assert)
          (("" (case-replace "n = 0")
            (("1" (use "positions_of_arg") (("1" (assert) nil nil))
              nil)
             ("2" (case "positionsOF(seqt`seq(0))( #[posnat](l))")
              (("1" (lemma "non_root_ir_preserves_pos_args")
                (("1" (inst-cp -1 "E" "seqt(0)" "l" "seqt(n - 1)")
                  (("1" (expand "finseq_appl")
                    (("1" (prop)
                      (("1" (inst -2 "E" "seqt(n - 1)" "l" "seqt(n)")
                        (("1" (expand "finseq_appl")
                          (("1" (hide-all-but (-8 1 2))
                            (("1" (lemma "finseq_to_RTC")
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "non_root_innermost_reduction?")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (expand
                                                   "innermost_reduction_fix?")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst? -8)
                          (("1" (flatten)
                            (("1" (hide-all-but (-9 1 2))
                              (("1"
                                (lemma "reducible_is_app")
                                (("1"
                                  (inst -1 "E" "seqt(n - 1)")
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "reducible?")
                                        (("1"
                                          (inst 1 "seqt(n)")
                                          (("1"
                                            (expand "finseq_appl")
                                            (("1"
                                              (use
                                               "innermost_subset_reduction")
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "innermost_reduction?")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil)
                       ("2" (lemma "finseq_to_RTC")
                        (("2" (expand "finseq_appl")
                          (("2" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (hide-all-but (-8 1))
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand
                                         "non_root_innermost_reduction?")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "innermost_reduction_fix?")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (use "positions_of_arg") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (position type-eq-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (positions_of_arg formula-decl nil positions nil)
    (non_root_ir_preserves_pos_args formula-decl nil
     innermost_reduction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (k skolem-const-decl "{k: nat | k < n - 1}" innermost_reduction
     nil)
    (k skolem-const-decl "{k: nat | k >= n - 1 AND k < n}"
     innermost_reduction nil)
    (positions? type-eq-decl nil positions nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (pred type-eq-decl nil defined_types nil)
    (non_root_innermost_reduction? const-decl "bool"
     innermost_reduction nil)
    (finseq_to_RTC formula-decl nil relations_closure nil)
    (reducible_is_app formula-decl nil reduction nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (subset? const-decl "bool" sets nil)
    (innermost_reduction? const-decl "bool" innermost_reduction nil)
    (member const-decl "bool" sets nil)
    (innermost_subset_reduction formula-decl nil innermost_reduction
     nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil)
    (n skolem-const-decl "below[length(seqp)]" innermost_reduction nil)
    (seqp skolem-const-decl
     "{seqp: finseq[position[variable, symbol, arity]] |
   length(seqt) = length(seqp)}" innermost_reduction nil)
    (l skolem-const-decl
     "{l: posnat | l <= length(args(finseq_appl[term](seqt)(0)))}"
     innermost_reduction nil)
    (seqt skolem-const-decl "{seqt: finseq[term] |
   NOT seqt = empty_seq AND app?(finseq_appl[term](seqt)(0))}"
     innermost_reduction nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak
   (arg_preservation_in_finite_reduction subtype
    "set2seq[posnat].#(innermost_reduction.l)"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(finite_sequences[term_adt[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].term].finseq_appl(innermost_reduction.seqt)(innermost_reduction.n))"))
  (arg_preservation_in_finite_reduction_TCC11-1 nil 3757320035
   ("" (auto-rewrite "finseq_appl")
    (("" (assert)
      (("" (skeep* :preds? t)
        (("" (assert)
          (("" (case-replace "n1 = 0")
            (("1" (use "positions_of_arg") (("1" (assert) nil nil))
              nil)
             ("2" (case "positionsOF(seqt`seq(0))( #[posnat](l))")
              (("1" (lemma "non_root_ir_preserves_pos_args")
                (("1" (inst-cp -1 "E" "seqt(0)" "l" "seqt(n1 - 1)")
                  (("1" (expand "finseq_appl")
                    (("1" (prop)
                      (("1" (inst -2 "E" "seqt(n1 - 1)" "l" "seqt(n1)")
                        (("1" (expand "finseq_appl")
                          (("1" (hide-all-but (-8 1 2))
                            (("1" (lemma "finseq_to_RTC")
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "non_root_innermost_reduction?")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (expand
                                                   "innermost_reduction_fix?")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst? -8)
                          (("1" (flatten)
                            (("1" (hide-all-but (-9 1 2))
                              (("1"
                                (lemma "reducible_is_app")
                                (("1"
                                  (inst -1 "E" "seqt(n1 - 1)")
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "reducible?")
                                        (("1"
                                          (inst 1 "seqt(n1)")
                                          (("1"
                                            (expand "finseq_appl")
                                            (("1"
                                              (use
                                               "innermost_subset_reduction")
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "innermost_reduction?")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil)
                       ("2" (lemma "finseq_to_RTC")
                        (("2" (expand "finseq_appl")
                          (("2" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (hide-all-but (-8 1))
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand
                                         "non_root_innermost_reduction?")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "innermost_reduction_fix?")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (use "positions_of_arg") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (set type-eq-decl nil sets nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (reducible_is_app formula-decl nil reduction nil)
    (finseq_to_RTC formula-decl nil relations_closure nil)
    (positions? type-eq-decl nil positions nil)
    (positions_of_arg formula-decl nil positions nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil))
   nil
   (arg_preservation_in_finite_reduction subtype
    "set2seq[posnat].#(innermost_reduction.l)"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(finite_sequences[term_adt[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].term].finseq_appl(innermost_reduction.seqt)(innermost_reduction.n))")))
 (arg_preservation_in_finite_reduction 0
  (arg_preservation_in_finite_reduction-1 nil 3757318007
   ("" (auto-rewrite "finseq_appl")
    (("" (assert)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep :preds? t)
            (("" (skolem 1 "l1")
              (("" (typepred "l1")
                (("" (prop)
                  ((""
                    (case "positionsOF[variable, symbol, arity](seqt`seq(0))( #[posnat](l1))")
                    (("1"
                      (case " FORALL (n: below[length(seqp)]): positionsOF[variable, symbol, arity](seqt`seq(n))( #[posnat](l1))")
                      (("1" (induct "n")
                        (("1" (skeep)
                          (("1" (assert)
                            (("1" (replaces -2)
                              (("1"
                                (inst -7 "jb")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "innermost_reduction_fix?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "reduction_fix?")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (replaces -10)
                                            (("1"
                                              (use
                                               "replace_persistence")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (use
                                                     "non_root_ir_preserves_pos_args")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "finseq_to_RTC")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "seqt"
                                                           "non_root_innermost_reduction?(E)"
                                                           "0"
                                                           "jb")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (reveal
                                                                   -8)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "k")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -2
                                                                          1
                                                                          2
                                                                          3))
                                                                        (("1"
                                                                          (expand
                                                                           "non_root_innermost_reduction?")
                                                                          (("1"
                                                                            (expand
                                                                             "innermost_reduction_fix?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst?
                                                                                 3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 1 3 4))
                                                    (("2"
                                                      (use
                                                       "empty_0[posnat]")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "parallel")
                                                          (("2"
                                                            (expand
                                                             "<=")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   "#")
                                                                  (("1"
                                                                    (decompose-equality
                                                                     -1)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -2)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "o ")
                                                                          (("1"
                                                                            (expand
                                                                             "first")
                                                                            (("1"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "first")
                                                                    (("2"
                                                                      (expand
                                                                       "finseq_appl")
                                                                      (("2"
                                                                        (expand
                                                                         "#")
                                                                        (("2"
                                                                          (expand
                                                                           "o ")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep) nil nil))
                        nil)
                       ("2" (skeep :preds? t)
                        (("2" (use "non_root_ir_preserves_pos_args")
                          (("2" (assert)
                            (("2" (lemma "finseq_to_RTC")
                              (("2"
                                (assert)
                                (("2"
                                  (inst
                                   -1
                                   "seqt"
                                   "non_root_innermost_reduction?(E)"
                                   "0"
                                   "n")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -6 "k")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide 2 3 6)
                                            (("2"
                                              (expand
                                               "non_root_innermost_reduction?")
                                              (("2"
                                                (expand
                                                 "innermost_reduction_fix?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (rewrite "positions_of_arg") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (n skolem-const-decl "below[length(seqp)]" innermost_reduction nil)
    (k skolem-const-decl "{k: nat | k < n}" innermost_reduction nil)
    (l1 skolem-const-decl
     "{l: posnat | l <= length(args(finseq_appl[term](seqt)(0)))}"
     innermost_reduction nil)
    (seqp skolem-const-decl
     "{seqp: finseq[position[variable, symbol, arity]] |
   length(seqt) = length(seqp)}" innermost_reduction nil)
    (seqt skolem-const-decl "{seqt: finseq[term] |
   NOT seqt = empty_seq AND app?(finseq_appl[term](seqt)(0))}"
     innermost_reduction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (<= const-decl "bool" positions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (O const-decl "finseq" finite_sequences nil)
    (first const-decl "T" seq_extras structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (parallel const-decl "bool" positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (non_root_ir_preserves_pos_args formula-decl nil
     innermost_reduction nil)
    (finseq_to_RTC formula-decl nil relations_closure nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (jb skolem-const-decl "below(length(seqp))" innermost_reduction
     nil)
    (k skolem-const-decl "{k: nat | k < jb}" innermost_reduction nil)
    (non_root_innermost_reduction? const-decl "bool"
     innermost_reduction nil)
    (member const-decl "bool" sets nil)
    (rhs const-decl "term" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (replace_persistence formula-decl nil replacement nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (positions_of_arg formula-decl nil positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (non_root_rtc_reduction_of_argument_TCC1 0
  (non_root_rtc_reduction_of_argument_TCC1-2 "" 3912757773
   ("" (skeep* :preds? t) (("" (rewrite "positions_of_arg") nil nil))
    nil)
   nil shostak
   (non_root_rtc_reduction_of_argument subtype
    "set2seq[posnat].#(innermost_reduction.k)"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(innermost_reduction.s)"))
  (non_root_rtc_reduction_of_argument_TCC1-1 nil 3754382736
   ("" (then (skeep* :preds? t) (rewrite "positions_of_arg")) nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (positions_of_arg formula-decl nil positions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (non_root_rtc_reduction_of_argument subtype
    "set2seq[posnat].#(innermost_reduction.k)"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(innermost_reduction.s)")))
 (non_root_rtc_reduction_of_argument_TCC2 0
  (non_root_rtc_reduction_of_argument_TCC2-1 nil 3754382736
   ("" (skeep* :preds? t)
    (("" (use "non_root_ir_preserves_pos_args")
      (("1" (assert) nil nil)
       ("2" (rewrite "positions_of_arg") nil nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (positions_of_arg formula-decl nil positions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (k skolem-const-decl "{k: posnat | k <= length(args(s))}"
     innermost_reduction nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (s skolem-const-decl "{s: term | app?(s)}" innermost_reduction nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (term type-decl nil term_adt nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (non_root_ir_preserves_pos_args formula-decl nil
     innermost_reduction nil))
   nil
   (non_root_rtc_reduction_of_argument subtype
    "set2seq[posnat].#(innermost_reduction.k)"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(innermost_reduction.t)")))
 (non_root_rtc_reduction_of_argument 0
  (non_root_rtc_reduction_of_argument-2 nil 3755592487
   ("" (skeep :preds? t)
    (("" (expand "RTC")
      (("" (expand "IUnion")
        (("" (skeep -2)
          (("" (skeep :preds? t)
            (("" (generalize "s" "s" :fnums (-1 -2 -3 -4 1))
              (("1" (generalize "t" "t" :fnums (1))
                (("1" (generalize "i" "i" :fnums (1))
                  (("1" (induct "i")
                    (("1" (assert) nil nil)
                     ("2" (skeep* :preds? t)
                      (("2" (inst 1 "0")
                        (("2" (expand "iterate")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (skeep* :preds? t)
                      (("3" (expand "iterate" -6)
                        (("3" (expand "o")
                          (("3" (skeep)
                            (("3" (inst -3 "y" "s!1")
                              (("3"
                                (assert)
                                (("3"
                                  (skeep)
                                  (("3"
                                    (expand
                                     "non_root_innermost_reduction?"
                                     -7)
                                    (("3"
                                      (skeep* :preds? t)
                                      (("3"
                                        (case "first(p) = k")
                                        (("1"
                                          (inst 2 "i!1+1")
                                          (("1"
                                            (expand "iterate" 2)
                                            (("1"
                                              (expand "o ")
                                              (("1"
                                                (inst
                                                 2
                                                 "subtermOF(y,  #(k))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide
                                                     -3
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8)
                                                    (("1"
                                                      (expand
                                                       "innermost_reduction?")
                                                      (("1"
                                                        (expand
                                                         "innermost_reduction_fix?")
                                                        (("1"
                                                          (case-replace
                                                           "#(k) o rest(p) = p")
                                                          (("1"
                                                            (use
                                                             "pos_subterm")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "rest(p)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "reduction_fix?")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             "replace_distributivity")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 1 2))
                                                            (("2"
                                                              (lemma
                                                               "empty_0[posnat]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "p")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "seq_first_rest_1[posnat]")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst 3 "i!1")
                                          (("2"
                                            (case-replace
                                             "subtermOF(y,  #(k)) = subtermOF(t!1,  #(k))")
                                            (("2"
                                              (hide 4)
                                              (("2"
                                                (expand
                                                 "reduction_fix?")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (replaces -9)
                                                    (("2"
                                                      (use
                                                       "replace_persistence")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (lemma
                                                             "non_root_ir_preserves_pos_args")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "E"
                                                               "s!1"
                                                               "k"
                                                               "y")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "RTC")
                                                                  (("1"
                                                                    (expand
                                                                     "IUnion")
                                                                    (("1"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "positions_of_arg")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "seq_first_rest_1[posnat]")
                                                            (("2"
                                                              (use
                                                               "empty_0[posnat]")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    2
                                                                    4
                                                                    5))
                                                                  (("2"
                                                                    (expand
                                                                     "parallel")
                                                                    (("2"
                                                                      (expand
                                                                       "<=")
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1
                                                                              2))
                                                                            (("1"
                                                                              (expand
                                                                               "#")
                                                                              (("1"
                                                                                (decompose-equality
                                                                                 -1)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "o"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "first")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "finseq_appl")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "first")
                                                                              (("2"
                                                                                (expand
                                                                                 "finseq_appl")
                                                                                (("2"
                                                                                  (expand
                                                                                   "#")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "o ")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (use "empty_0[posnat]")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide 2)
                      (("4" (skeep)
                        (("4" (lemma "non_root_ir_preserves_pos_args")
                          (("4" (inst -1 "E" "s!1" "k" "t!1")
                            (("1" (prop)
                              (("1"
                                (expand "RTC")
                                (("1"
                                  (expand "IUnion")
                                  (("1" (inst?) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "positions_of_arg")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide 2)
                      (("5" (skeep :preds? t)
                        (("5" (use "positions_of_arg")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep :preds? t)
                      (("2" (lemma "non_root_ir_preserves_pos_args")
                        (("2" (inst -1 "E" "s!1" "k" "t!1")
                          (("1" (prop)
                            (("1" (expand "RTC")
                              (("1"
                                (expand "IUnion")
                                (("1" (inst?) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "positions_of_arg")
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (skeep :preds? t)
                      (("3" (use "positions_of_arg")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skeep :preds? t)
                    (("2" (lemma "non_root_ir_preserves_pos_args")
                      (("2" (inst -1 "E" "s!1" "k" "t!1")
                        (("1" (prop)
                          (("1" (expand "RTC")
                            (("1" (expand "IUnion")
                              (("1" (inst?) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (use "positions_of_arg")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (skeep)
                    (("3" (use "positions_of_arg")
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep :preds? t)
                  (("2" (lemma "non_root_ir_preserves_pos_args")
                    (("2" (inst -1 "E" "s!1" "k" "t")
                      (("1" (prop)
                        (("1" (expand "RTC")
                          (("1" (expand "IUnion")
                            (("1" (inst?) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (use "positions_of_arg")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep :preds? t)
                  (("3" (use "positions_of_arg")
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("4" (assert)
                (("4" (lemma "non_root_ir_preserves_pos_args")
                  (("4" (inst -1 "E" "s" "k" "t")
                    (("1" (assert)
                      (("1" (expand "RTC")
                        (("1" (expand "IUnion")
                          (("1" (hide 3) (("1" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "positions_of_arg")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("5" (assert)
                (("5" (use "positions_of_arg") (("5" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IUnion const-decl "set[T]" indexed_sets nil)
    (s!1 skolem-const-decl "{s: term | app?(s)}" innermost_reduction
     nil)
    (s!1 skolem-const-decl "{s: term | app?(s)}" innermost_reduction
     nil)
    (s!1 skolem-const-decl "{s: term | app?(s)}" innermost_reduction
     nil)
    (s!1 skolem-const-decl "{s: term | app?(s)}" innermost_reduction
     nil)
    (s skolem-const-decl "{s: term | app?(s)}" innermost_reduction nil)
    (k skolem-const-decl "{k: posnat | k <= length(args(s))}"
     innermost_reduction nil)
    (E skolem-const-decl "set[rewrite_rule[variable, symbol, arity]]"
     innermost_reduction nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (pos_subterm formula-decl nil subterm nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (member const-decl "bool" sets nil)
    (replace_distributivity formula-decl nil replacement nil)
    (ext def-decl "term" substitution nil)
    (rhs const-decl "term" rewrite_rules nil)
    (O const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (parallel const-decl "bool" positions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (<= const-decl "bool" positions nil)
    (non_root_ir_preserves_pos_args formula-decl nil
     innermost_reduction nil)
    (positions_of_arg formula-decl nil positions nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (s!1 skolem-const-decl "{s: term | app?(s)}" innermost_reduction
     nil)
    (replace_persistence formula-decl nil replacement nil)
    (O const-decl "bool" relation_props nil)
    (s!1 skolem-const-decl "{s: term | app?(s)}" innermost_reduction
     nil)
    (s!1 skolem-const-decl "{s: term | app?(s)}" innermost_reduction
     nil)
    (s!1 skolem-const-decl "{s: term | app?(s)}" innermost_reduction
     nil)
    (s!1 skolem-const-decl "{s: term | app?(s)}" innermost_reduction
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (term type-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil)
    (non_root_innermost_reduction? const-decl "bool"
     innermost_reduction nil)
    (innermost_reduction? const-decl "bool" innermost_reduction nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (RTC const-decl "reflexive_transitive" relations_closure nil))
   nil)
  (non_root_rtc_reduction_of_argument-1 nil 3752324899
   ("" (skeep* :preds? t)
    (("" (expand "RTC")
      (("" (expand "IUnion")
        (("" (skeep)
          (("" (use "non_root_rtc_reduction_of_argument_aux")
            (("" (assert)
              (("" (inst -1 "k")
                (("" (expand "RTC")
                  (("" (expand "IUnion") (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RTC const-decl "reflexive_transitive" relations_closure nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (arg_rest?_TCC1 0
  (arg_rest?_TCC1-2 "" 3912757775
   ("" (skeep* :preds? t)
    (("" (hide -1 -2) (("" (rewrite "empty_0") nil nil)) nil)) nil)
   nil shostak
   (arg_rest? subtype "innermost_reduction.p" "not_empty_seq[posnat]"))
  (arg_rest?_TCC1-1 nil 3752242402
   ("" (then (skeep* :preds? t) (hide -1 -2) (rewrite "empty_0")) nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty_0 formula-decl nil seq_extras structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (arg_rest? subtype "innermost_reduction.p"
    "not_empty_seq[posnat]")))
 (nr_rest_is_union_of_arg_rests 0
  (nr_rest_is_union_of_arg_rests-1 nil 3752242447
   ("" (skeep :preds? t)
    (("" (assert)
      (("" (decompose-equality)
        (("" (iff)
          (("" (prop)
            (("1" (expand "rest?")
              (("1" (flatten)
                (("1" (hide -1 -2 -4)
                  (("1" (expand "non_root_innermost_reduction?")
                    (("1" (lemma "reducible_is_app")
                      (("1" (inst -1 "E" "x!1")
                        (("1" (assert)
                          (("1" (expand "reducible?")
                            (("1" (expand "reduction?")
                              (("1"
                                (expand "reduction_fix?")
                                (("1"
                                  (skeep* :preds? t)
                                  (("1"
                                    (inst 2 "x!2")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "arg_rest?")
              (("2" (copy -1)
                (("2" (expand "rest?" -1)
                  (("2" (flatten)
                    (("2" (hide -1 -2)
                      (("2" (expand "non_root_innermost_reduction?" -1)
                        (("2" (skeep)
                          (("2" (inst 1 "first(p)")
                            (("1" (assert)
                              (("1"
                                (inst 1 "p")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "innermost_reduction_fix?")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "p")
                              (("2"
                                (hide -)
                                (("2"
                                  (expand "empty_seq")
                                  (("2"
                                    (decompose-equality)
                                    (("2"
                                      (decompose-equality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "rest?")
              (("3" (skeep)
                (("3" (expand "arg_rest?")
                  (("3" (expand "rest?")
                    (("3" (flatten) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (rest? const-decl "bool" restricted_reduction nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (set type-eq-decl nil sets nil)
    (non_root_innermost_reduction? const-decl "bool"
     innermost_reduction nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (arg_rest? const-decl "bool" innermost_reduction nil)
    (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (reducible? const-decl "bool" ars_terminology nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (below type-eq-decl nil nat_types nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (reduction? const-decl "bool" reduction nil)
    (reducible_is_app formula-decl nil reduction nil)
    (p skolem-const-decl "{p: positions?(x!1) | NOT (p = empty_seq)}"
     innermost_reduction nil)
    (x!1 skolem-const-decl "term[variable, symbol, arity]"
     innermost_reduction nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (epsilon const-decl "T" epsilons nil)
    (FALSE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil))
   shostak))
 (innermost_reduction_permutates_TCC1 0
  (innermost_reduction_permutates_TCC1-3 "" 3912757775
   ("" (skeep :preds? t)
    (("" (expand "innermost_reduction_fix?")
      (("" (flatten)
        (("" (expand "reduction_fix?")
          (("" (skeep :preds? t)
            (("" (replaces -9)
              (("" (rewrite "replace_preserv_parallel_pos") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (innermost_reduction_permutates subtype "innermost_reduction.q"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(innermost_reduction.t1)"))
  (innermost_reduction_permutates_TCC1-2 "" 3804432959
   (""
    (then (skeep :preds? t) (expand "innermost_reduction_fix?")
     (flatten) (expand "reduction_fix?") (skeep :preds? t)
     (replaces -9) (rewrite "replace_preserv_parallel_pos"))
    nil)
   ((replace_preserv_parallel_pos formula-decl nil replacement nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rhs const-decl "term" rewrite_rules nil)
    (member const-decl "bool" sets nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil))
   shostak
   (innermost_reduction_permutates subtype "innermost_reduction.q"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(innermost_reduction.t1)"))
  (innermost_reduction_permutates_TCC1-1 nil 3750416834
   ("" (skeep :preds? t)
    (("" (expand "innermost_reduction_fix?")
      (("" (flatten)
        (("" (expand "reduction_fix?")
          (("" (skeep :preds? t)
            (("" (replaces -8)
              (("" (rewrite "replace_preserv_parallel_pos") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reduction_fix? const-decl "bool" reduction nil)
    (member const-decl "bool" sets nil)
    (rhs const-decl "term" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (replace_preserv_parallel_pos formula-decl nil replacement nil))
   nil
   (innermost_reduction_permutates subtype "innermost_reduction.q"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(innermost_reduction.t1)")))
 (innermost_reduction_permutates_TCC2 0
  (innermost_reduction_permutates_TCC2-2 "" 3912757775
   ("" (skeep* :preds? t)
    (("" (hide -4 -5)
      (("" (expand "innermost_reduction_fix?")
        (("" (flatten)
          (("" (expand "reduction_fix?")
            (("" (skeep* :preds? t)
              (("" (replaces -9)
                (("" (rewrite "replace_preserv_parallel_pos")
                  (("" (hide-all-but (-6 1))
                    (("" (expand "parallel") (("" (prop) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (innermost_reduction_permutates subtype "innermost_reduction.p"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(innermost_reduction.t2)"))
  (innermost_reduction_permutates_TCC2-1 nil 3750416834
   (""
    (then (skeep* :preds? t) (hide -4 -5)
     (expand "innermost_reduction_fix?") (flatten)
     (expand "reduction_fix?") (skeep* :preds? t) (replaces -9)
     (rewrite "replace_preserv_parallel_pos") (hide-all-but (-6 1))
     (expand "parallel") (prop))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (parallel const-decl "bool" positions nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (member const-decl "bool" sets nil)
    (rhs const-decl "term" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (replace_preserv_parallel_pos formula-decl nil replacement nil))
   nil
   (innermost_reduction_permutates subtype "innermost_reduction.p"
    "positions[innermost_reduction.variable, innermost_reduction.symbol, innermost_reduction.arity].positions?(innermost_reduction.t2)")))
 (innermost_reduction_permutates 0
  (innermost_reduction_permutates-1 nil 3750416873
   ("" (skeep :preds? t)
    (("" (expand "innermost_reduction_fix?")
      (("" (flatten)
        (("" (expand "reduction_fix?")
          (("" (skolem -5 ("e1" "sigma1"))
            (("" (skolem -7 ("e2" "sigma2"))
              (("" (flatten)
                (("" (lemma "replace_persistence")
                  (("" (inst-cp -1 "p" "q" "s" "ext(sigma1)(rhs(e1))")
                    (("" (inst -1 "q" "p" "t1" "ext(sigma2)(rhs(e2))")
                      (("" (assert)
                        (("" (lemma "replace_preserv_pos")
                          (("" (inst -1 "p" "s" "ext(sigma1)(rhs(e1))")
                            (("" (assert)
                              ((""
                                (lemma "replace_preserv_parallel_pos")
                                ((""
                                  (inst
                                   -1
                                   "p"
                                   "q"
                                   "s"
                                   "ext(sigma1)(rhs(e1))")
                                  ((""
                                    (assert)
                                    ((""
                                      (prop)
                                      (("1"
                                        (inst
                                         1
                                         "replaceTerm(s, ext(sigma2)(rhs(e2)), q)")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst 1 "e2" "sigma2")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide -13)
                                            (("2"
                                              (lemma
                                               "replace_persistence")
                                              (("2"
                                                (inst
                                                 -1
                                                 "q"
                                                 "p"
                                                 "s"
                                                 "ext(sigma2)(rhs(e2))")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (-7 1))
                                                    (("2"
                                                      (expand
                                                       "parallel")
                                                      (("2"
                                                        (prop)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst 1 "e1" "sigma1")
                                            (("3"
                                              (prop)
                                              (("1"
                                                (lemma
                                                 "replace_persistence")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "q"
                                                   "p"
                                                   "s"
                                                   "ext(sigma2)(rhs(e2))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but
                                                       (-7 1))
                                                      (("1"
                                                        (expand
                                                         "parallel")
                                                        (("1"
                                                          (prop)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -10)
                                                (("2"
                                                  (hide-all-but
                                                   (-2 -3 -5 -6 -12 1))
                                                  (("2"
                                                    (lemma
                                                     "replace_commutativity")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "q"
                                                       "ext(sigma2)(rhs(e2))"
                                                       "s"
                                                       "ext(sigma1)(rhs(e1))")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-6 1))
                                        (("2"
                                          (expand "parallel")
                                          (("2" (prop) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (rewrite_rule? const-decl "bool" rewrite_rules nil)
    (rewrite_rule type-eq-decl nil rewrite_rules nil)
    (rhs const-decl "term" rewrite_rules nil)
    (member const-decl "bool" sets nil)
    (replace_preserv_parallel_pos formula-decl nil replacement nil)
    (replaceTerm def-decl "term" replacement nil)
    (TRUE const-decl "bool" booleans nil)
    (replace_commutativity formula-decl nil replacement nil)
    (parallel const-decl "bool" positions nil)
    (replace_preserv_pos formula-decl nil replacement nil)
    (replace_persistence formula-decl nil replacement nil)
    (variable formal-nonempty-type-decl nil innermost_reduction nil)
    (symbol formal-nonempty-type-decl nil innermost_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" innermost_reduction nil)
    (reduction_fix? const-decl "bool" reduction nil)
    (innermost_reduction_fix? const-decl "bool" innermost_reduction
     nil))
   shostak)))

