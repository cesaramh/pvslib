(ars_terminology
 (seq_of_relation_RTC 0
  (seq_of_relation_RTC-1 nil 3746442279
   ("" (skeep)
    (("" (measure-induct+ "j-i" ("i" "j"))
      (("" (case "x!1 = x!2")
        (("1" (hide -2 -3)
          (("1" (expand "RTC")
            (("1" (expand "IUnion")
              (("1" (inst 1 "0")
                (("1" (expand "iterate") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst -1 "x!1" "x!2 - 1")
          (("1" (assert)
            (("1" (expand "RTC")
              (("1" (expand "IUnion")
                (("1" (assert)
                  (("1" (prop)
                    (("1" (skeep)
                      (("1" (inst 2 "i+1")
                        (("1" (lemma "iterate_add")
                          (("1" (inst -1 "R" "i" "1")
                            (("1" (replaces -1)
                              (("1"
                                (expand "o ")
                                (("1"
                                  (inst 2 "seq(x!2 - 1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "iterate")
                                        (("1"
                                          (expand "iterate")
                                          (("1"
                                            (expand "o ")
                                            (("1"
                                              (inst -1 "x!2 - 1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   2
                                                   "seq(x!2 - 1)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (skeep* :preds? t)
                        (("2" (inst -3 "k") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil ars_terminology nil)
    (PRED type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (reflexive_transitive? const-decl "bool" relations_closure nil)
    (reflexive_transitive type-eq-decl nil relations_closure nil)
    (RTC const-decl "reflexive_transitive" relations_closure nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "nat" ars_terminology nil)
    (x!2 skolem-const-decl "{j: nat | j >= x!1}" ars_terminology nil)
    (iterate_add formula-decl nil relation_iterate "orders/")
    (TRUE const-decl "bool" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (O const-decl "bool" relation_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate "orders/"))
   shostak))
 (iterate_to_finseq_TCC1 0
  (iterate_to_finseq_TCC1-1 nil 3752342748 ("" (subtype-tcc) nil nil)
   nil nil))
 (iterate_to_finseq_TCC2 0
  (iterate_to_finseq_TCC2-1 nil 3752342748 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (iterate_to_finseq_TCC3 0
  (iterate_to_finseq_TCC3-1 nil 3752342748 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (iterate_to_finseq_TCC4 0
  (iterate_to_finseq_TCC4-1 nil 3752344217 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (iterate_to_finseq_TCC5 0
  (iterate_to_finseq_TCC5-1 nil 3752344217 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (iterate_to_finseq 0
  (iterate_to_finseq-1 nil 3752342788
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "finseq_appl")
        (("1" (inst 1 "#(x)")
          (("1" (grind) nil nil)
           ("2" (hide -) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep* :preds? t)
      (("2" (expand "iterate" -3)
        (("2" (expand "finseq_appl")
          (("2" (expand "o ")
            (("2" (skeep)
              (("2" (inst -2 "x" "y_1" "R")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst 1 "seq o #(y)")
                      (("1" (expand "o ")
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "#")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "#")
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (skeep)
                                  (("4"
                                    (lift-if)
                                    (("4"
                                      (lift-if)
                                      (("4"
                                        (prop)
                                        (("1"
                                          (inst -6 "k")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case-replace
                                           "k = seq`length - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "#")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (lift-if)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (typepred "k")
                                              (("3"
                                                (expand "o ")
                                                (("3"
                                                  (expand "#")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "seq")
                        (("2" (expand "o")
                          (("2" (expand "#") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (j skolem-const-decl "nat" ars_terminology nil)
    (seq skolem-const-decl "{seq: finseq[T] | length(seq) = 1 + j}"
     ars_terminology nil)
    (y skolem-const-decl "T" ars_terminology nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (k skolem-const-decl "below[length(seq o  #(y)) - 1]"
     ars_terminology nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (O const-decl "bool" relation_props nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq "structures/")
    (x skolem-const-decl "T" ars_terminology nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate "orders/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil ars_terminology nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak)))