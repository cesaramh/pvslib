(positions
 (positionsOF_TCC1 0
  (positionsOF_TCC1-1 nil 3388744728 ("" (subtype-tcc) nil nil) nil nil
   (positionsOF subtype "(number_fields.-)(positions.i, 1)"
    "below[length(st)]")))
 (positionsOF_TCC2 0
  (positionsOF_TCC2-1 nil 3389723936
   ("" (skeep :preds? t)
    (("" (skeep :preds? t)
      (("" (expand "<<")
        (("" (lift-if)
          (("" (assert)
            (("" (expand "finseq_appl")
              (("" (inst 2 "i - 1")
                (("1" (expand "subterm")
                  (("1" (replace -4) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (replace -4) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (positionsOF termination
    "positions.positionsOF(finite_sequences[term_adt[positions.variable, positions.symbol, positions.arity].term].finseq_appl(positions.st)((number_fields.-)(positions.i, 1)))"
    "nil")))
 (left_without_children_TCC1 0
  (left_without_children_TCC1-1 nil 3511797058
   ("" (skosimp) (("" (rewrite empty_0) nil nil)) nil)
   ((empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (left_without_children subtype "positions.p1"
    "not_empty_seq[posnat]")))
 (left_without_children_TCC2 0
  (left_without_children_TCC2-1 nil 3511797058
   ("" (skosimp) (("" (rewrite empty_0) nil nil)) nil)
   ((empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (left_without_children subtype "positions.q1"
    "not_empty_seq[posnat]")))
 (positions_of_terms_finite 0
  (positions_of_terms_finite-1 nil 3415310384
   ("" (induct "t")
    (("1" (skosimp*)
      (("1" (expand* "positionsOF" "only_empty_seq")
        (("1"
          (case-replace
           "{x: position | x = empty_seq} = singleton(empty_seq)"
           :hide? T)
          (("1" (rewrite "finite_singleton") nil nil)
           ("2" (hide 2)
            (("2" (expand "singleton") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "positionsOF" 1)
        (("2" (prop)
          (("1" (expand "only_empty_seq")
            (("1"
              (case-replace
               "{x: position | x = empty_seq} = singleton(empty_seq)"
               :hide? T)
              (("1" (rewrite "finite_singleton") nil nil)
               ("2" (hide (-1 -2 2))
                (("2" (expand "singleton") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "finite_sets[position].finite_union")
            (("2" (inst?)
              (("1" (hide 3)
                (("1" (expand "finseq_appl")
                  (("1" (lemma "IUnion_of_finite_is_finite")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (skosimp*)
                            (("1" (inst -1 "i!1 - 1")
                              (("1"
                                (expand "is_finite")
                                (("1"
                                  (skolem-typepred)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst
                                       1
                                       "LAMBDA (x: (catenate(i!1, positionsOF(app2_var!1`seq(i!1 - 1))))): f!1(rest(x))")
                                      (("1"
                                        (expand "injective?")
                                        (("1"
                                          (skolem-typepred)
                                          (("1"
                                            (expand "catenate")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (replaces -2)
                                                  (("1"
                                                    (replaces -3)
                                                    (("1"
                                                      (rewrite
                                                       "rest_add_first")
                                                      (("1"
                                                        (rewrite
                                                         "rest_add_first")
                                                        (("1"
                                                          (inst
                                                           -5
                                                           "x!1"
                                                           "x!2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skolem-typepred)
                                        (("2"
                                          (expand "catenate")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (replaces -2)
                                                (("2"
                                                  (rewrite
                                                   "rest_add_first")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide (-1 2 3))
                (("2" (expand "only_empty_seq")
                  (("2"
                    (case-replace
                     "{x: position | x = empty_seq} = singleton(empty_seq)"
                     :hide? T)
                    (("1" (rewrite "finite_singleton") nil nil)
                     ("2" (hide 2)
                      (("2" (expand "singleton")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (rest const-decl "finseq" seq_extras structures)
    (rest_add_first formula-decl nil seq_extras structures)
    (IUnion_of_finite_is_finite formula-decl nil IUnion_extra nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finite_singleton judgement-tcc nil finite_sets nil)
    (term_induction formula-decl nil term_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (term type-decl nil term_adt nil))
   shostak))
 (empty_pos 0
  (empty_pos-1 nil 3390055503
   ("" (skeep)
    (("" (expand "<=")
      (("" (skolem * "p1")
        (("" (replaces -1)
          (("" (expand* "o" "empty_seq")
            (("" (flatten)
              (("" (apply-extensionality)
                (("" (hide 2) (("" (decompose-equality) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (empty_seq_is_position 0
  (empty_seq_is_position-1 nil 3749477256
   ("" (skeep)
    (("" (expand "positionsOF")
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (expand "union")
            (("3" (prop) (("3" (hide 3) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)) nil))
 (closed_positions 0
  (closed_positions-1 nil 3388746243
   ("" (measure-induct+ "length(q)" "q")
    (("" (skeep)
      (("" (expand "positionsOF" (-2 1))
        (("" (lift-if)
          (("" (prop)
            (("1" (hide (-1 -2 -4))
              (("1" (expand "only_empty_seq")
                (("1" (lemma "empty_pos")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (hide (-1 -2 -4 2 3))
              (("2" (expand "only_empty_seq")
                (("2" (lemma "empty_pos")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (expand* "union" "member" "only_empty_seq")
              (("3" (prop)
                (("1" (hide-all-but (-1 -3 2))
                  (("1" (lemma "empty_pos")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (expand "IUnion")
                  (("2" (skolem * "i1")
                    (("2" (expand "catenate" -1)
                      (("2" (skolem * "q1")
                        (("2" (flatten)
                          (("2" (expand "member")
                            (("2" (inst -3 "q1")
                              (("2"
                                (expand "<=" -4)
                                (("2"
                                  (skolem * "p1")
                                  (("2"
                                    (inst
                                     -3
                                     "rest(p)"
                                     "args(t)(i1 - 1)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst 3 "i1")
                                        (("1"
                                          (expand "catenate")
                                          (("1"
                                            (inst 3 "rest(p)")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but
                                                   (-3 -4 2 3))
                                                  (("1"
                                                    (lemma
                                                     "fsepn.seq_first_rest")
                                                    (("1"
                                                      (inst -1 "p")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           -3)
                                                          (("1"
                                                            (lemma
                                                             "fsepn.add_first_compo")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "rest(p)"
                                                               "p1"
                                                               "first(p)")
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 -3)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "fsepn.first_equal")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "fsepn.seq_first_rest")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "p")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "empty_0")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "empty_0")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "empty_0")
                                        (("2"
                                          (hide-all-but (-2 -3 1 3))
                                          (("2"
                                            (expand "<=")
                                            (("2"
                                              (inst 1 "p1")
                                              (("2"
                                                (lemma
                                                 "fsepn.seq_first_rest")
                                                (("2"
                                                  (inst -1 "p")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (replaces -1 -3)
                                                      (("1"
                                                        (rewrite
                                                         "fsepn.add_first_compo")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           -2)
                                                          (("1"
                                                            (lemma
                                                             "fsepn.first_equal")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "empty_0")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but (-2 -3 1 3))
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (first_equal formula-decl nil seq_extras structures)
    (add_first_compo formula-decl nil seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (term type-decl nil term_adt nil))
   shostak))
 (equal_symbol_equal_length_arg 0
  (equal_symbol_equal_length_arg-1 nil 3496152694
   ("" (skosimp*) (("" (grind) nil nil)) nil) nil shostak))
 (not_var 0
  (not_var-1 nil 3388757591 ("" (skeep) (("" (grind) nil nil)) nil)
   ((add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (not_var1 0
  (not_var1-1 nil 3496151134 ("" (skosimp) (("" (grind) nil nil)) nil)
   ((add_last const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (pos_ax 0
  (pos_ax-1 nil 3388757621
   ("" (lemma "closed_positions")
    (("" (assert)
      (("" (expand "<=")
        (("" (skosimp)
          (("" (inst -1 p!1 "p!1 o q!1" t!1)
            (("" (assert) (("" (inst 1 q!1) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (rest_of_positions_TCC1 0
  (rest_of_positions_TCC1-1 nil 3411856776
   ("" (skosimp*)
    (("" (lemma "not_var")
      (("" (inst -1 "first(p!1)" "p!1" "rest(p!1)" "s!1")
        (("1" (assert)
          (("1" (lemma "fsepn.seq_first_rest")
            (("1" (inst?)
              (("1" (assert)
                (("1" (expand "positionsOF")
                  (("1" (prop)
                    (("1" (expand "only_empty_seq")
                      (("1" (rewrite "empty_0") nil nil)) nil)
                     ("2" (expand* "union" "member")
                      (("2" (prop)
                        (("1" (expand "only_empty_seq")
                          (("1" (rewrite "empty_0") nil nil)) nil)
                         ("2" (expand "IUnion")
                          (("2" (skosimp*)
                            (("2" (expand "catenate")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (replace -3 -2)
                                      (("2"
                                        (lemma "fsepn.first_equal")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (first_equal formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (term type-decl nil term_adt nil)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (rest_of_positions subtype
    "(number_fields.-)(seq_extras[posnat].first(positions.p), 1)"
    "below[length(args[variable, symbol, arity](s))]")))
 (rest_of_positions_TCC2 0
  (rest_of_positions_TCC2-1 nil 3411856776
   ("" (skosimp*)
    (("" (expand "positionsOF") (("" (grind) nil nil)) nil)) nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)) nil
   (rest_of_positions subtype "positions.s"
    "(term_adt[positions.variable, positions.symbol, positions.arity].app?)")))
 (rest_of_positions 0
  (rest_of_positions-1 nil 3411856777
   ("" (skeep)
    (("" (expand "positionsOF" -1)
      (("" (lift-if)
        (("" (prop)
          (("1" (expand "only_empty_seq")
            (("1" (rewrite "empty_0") nil nil)) nil)
           ("2" (expand "only_empty_seq")
            (("2" (rewrite "empty_0") nil nil)) nil)
           ("3" (expand "only_empty_seq")
            (("3" (expand* "union" "member")
              (("3" (prop)
                (("1" (rewrite "empty_0") nil nil)
                 ("2" (expand "IUnion")
                  (("2" (skolem * "i1")
                    (("2" (expand "catenate")
                      (("2" (skolem * "y1")
                        (("2" (expand "member")
                          (("2" (flatten)
                            (("2" (lemma "fsepn.seq_first_rest")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replaces -1 -3)
                                    (("2"
                                      (lemma "fsepn.first_equal")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (first_equal formula-decl nil seq_extras structures)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures))
   shostak))
 (delete_is_position_TCC1 0
  (delete_is_position_TCC1-1 nil 3495982353 ("" (subtype-tcc) nil nil)
   nil nil
   (delete_is_position subtype
    "(number_fields.-)(length(positions.p), 1)" "below[length(p)]")))
 (delete_is_position 0
  (delete_is_position-1 nil 3495982633
   ("" (skosimp*)
    (("" (lemma "fsepn.add_last_delete")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "fsepn.add_last_delete_is_o")
            (("" (inst?)
              (("" (assert)
                (("" (expand "finseq_appl")
                  (("" (replaces -1 -2)
                    (("" (replaces -1 -2)
                      (("" (lemma "pos_ax")
                        (("" (inst?) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add_last_delete formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (delete const-decl "finseq" seq_extras structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (term type-decl nil term_adt nil)
    (add_last_delete_is_o formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (parallel_comm 0
  (parallel_comm-1 nil 3394367640
   ("" (skeep)
    (("" (expand* "parallel" "<=") (("" (prop) nil nil)) nil)) nil)
   nil shostak))
 (rest_parallel 0
  (rest_parallel-2 "" 3790333434
   ("" (skeep)
    (("" (lemma "fsepn.seq_first_rest")
      (("" (copy -1)
        (("" (inst -1 "p")
          (("" (inst -2 "q")
            (("" (assert)
              (("" (expand "parallel")
                (("" (expand "<=")
                  (("" (skosimp*)
                    (("" (assert)
                      (("" (prop)
                        (("1" (skosimp*)
                          (("1" (replace -2 3)
                            (("1" (replace -3 3)
                              (("1"
                                (inst 3 "p1!1")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replaces -3)
                                    (("1"
                                      (rewrite "add_first_compo")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (replace -2 4)
                            (("2" (replace -3 4)
                              (("2"
                                (inst 3 "p1!1")
                                (("2"
                                  (inst 4 "p1!1")
                                  (("2"
                                    (replaces -4)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (rewrite "add_first_compo")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (rest_parallel-1 nil 3394301450
   ("" (skeep)
    (("" (lemma "fsepn.seq_first_rest")
      (("" (copy -1)
        (("" (inst -1 "p")
          (("" (inst -2 "q")
            (("" (assert)
              (("" (expand "parallel")
                (("" (expand "<=")
                  (("" (skosimp*)
                    (("" (assert)
                      (("" (prop)
                        (("1" (skosimp*)
                          (("1" (replace -2 3)
                            (("1" (replace -3 3)
                              (("1"
                                (inst 3 "p1!1")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replaces -4)
                                    (("1"
                                      (replaces -3)
                                      (("1"
                                        (rewrite "add_first_compo")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (replace -2 4)
                            (("2" (replace -3 4)
                              (("2"
                                (inst 3 "p1!1")
                                (("2"
                                  (inst 4 "p1!1")
                                  (("2"
                                    (replaces -4)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (rewrite "add_first_compo")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq_first_rest formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (add_first_compo formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures))
   shostak))
 (parallel_pos_same_prefix 0
  (parallel_pos_same_prefix-1 nil 3673474908
   ("" (measure-induct "p`length" p)
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (rewrite empty_0)
            (("1" (replaces -1)
              (("1" (rewrite empty_o_seq)
                (("1" (rewrite empty_o_seq) (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "rest(x)")
            (("2" (rewrite length_rest)
              (("2" (inst -1 "rest(p1)" "rest(p2)" q1 q2)
                (("2" (rewrite rest_parallel)
                  (("1" (replaces -3 -1)
                    (("1" (replaces -3 -1)
                      (("1" (rewrite rest_compo)
                        (("1" (rewrite rest_compo) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (replaces -2)
                    (("2" (expand o 1) (("2" (assert) nil nil)) nil))
                    nil)
                   ("3" (replaces -3)
                    (("3" (expand o 1) (("3" (assert) nil nil)) nil))
                    nil)
                   ("4" (replaces -2)
                    (("4" (replaces -2)
                      (("4" (rewrite first_compo)
                        (("4" (rewrite first_compo) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_o_seq formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (length_rest formula-decl nil seq_extras structures)
    (rest_compo formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (comp_preservs_parallel_pos 0
  (comp_preservs_parallel_pos-1 nil 3673475024
   ("" (skeep)
    (("" (expand* parallel <=)
      (("" (flatten)
        (("" (split)
          (("1" (hide 2)
            (("1" (skolem -1 p3)
              (("1" (inst 1 p3)
                (("1" (expand o)
                  (("1" (flatten)
                    (("1" (decompose-equality)
                      (("1" (decompose-equality)
                        (("1" (decompose-equality)
                          (("1" (inst -1 "p`length+x!1")
                            (("1" (lift-if)
                              (("1"
                                (lift-if)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (replaces -2)
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (skeep) (("3" (assert) nil nil)) nil))
                          nil)
                         ("2" (skeep) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 1)
            (("2" (skolem -1 p3)
              (("2" (inst 1 p3)
                (("2" (expand o)
                  (("2" (flatten)
                    (("2" (decompose-equality)
                      (("2" (decompose-equality)
                        (("1" (decompose-equality)
                          (("1" (inst -1 "p`length+x!1")
                            (("1" (lift-if)
                              (("1"
                                (lift-if)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (replaces -2)
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (skeep) (("3" (assert) nil nil)) nil))
                          nil)
                         ("2" (skeep) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)) shostak))
 (comp_preservs_parallel_pos2 0
  (comp_preservs_parallel_pos2-1 nil 3673475055
   ("" (measure-induct "q1`length" q1)
    (("" (skeep)
      (("" (skeep)
        (("" (case "x`length=0")
          (("1" (rewrite empty_0)
            (("1" (replaces -1) (("1" (rewrite seq_o_empty) nil nil))
              nil))
            nil)
           ("2" (inst -1 "delete(x,x`length-1)")
            (("1" (expand delete -1 1)
              (("1" (lift-if)
                (("1" (assert)
                  (("1" (inst -1 p1 p2)
                    (("1" (assert)
                      (("1" (expand parallel (-1 2))
                        (("1" (expand <=)
                          (("1" (flatten)
                            (("1" (split)
                              (("1"
                                (skolem -1 p3)
                                (("1"
                                  (inst 2 "#(x`seq(x`length-1)) o p3")
                                  (("1"
                                    (lemma
                                     add_last_delete_is_o[posnat])
                                    (("1"
                                      (inst -1 x)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand finseq_appl)
                                          (("1"
                                            (rewrite o_assoc 2)
                                            (("1"
                                              (lemma o_assoc[posnat])
                                              (("1"
                                                (inst
                                                 -1
                                                 p1
                                                 "delete(x, x`length - 1)"
                                                 "#(x`seq(x`length - 1))")
                                                (("1"
                                                  (replace -1 2 rl)
                                                  (("1"
                                                    (replace -2 2 rl)
                                                    (("1"
                                                      (lemma
                                                       add_last_delete[posnat])
                                                      (("1"
                                                        (inst -1 x)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem -1 p3)
                                (("2"
                                  (case "p3`length=0")
                                  (("1"
                                    (rewrite empty_0)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (rewrite seq_o_empty)
                                        (("1"
                                          (inst
                                           2
                                           "#(x`seq(x`length-1))")
                                          (("1"
                                            (lemma o_assoc[posnat])
                                            (("1"
                                              (inst
                                               -1
                                               p1
                                               "delete(x, x`length - 1)"
                                               "#(x`seq(x`length - 1))")
                                              (("1"
                                                (replace -1 2 rl)
                                                (("1"
                                                  (lemma
                                                   add_last_delete_is_o[posnat])
                                                  (("1"
                                                    (inst -1 x)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         finseq_appl)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             add_last_delete[posnat])
                                                            (("1"
                                                              (inst
                                                               -1
                                                               x)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 4 "delete(p3,p3`length-1)")
                                    (("1"
                                      (expand o (-1 4))
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand delete 1)
                                            (("1"
                                              (lift-if)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (decompose-equality)
                                            (("1"
                                              (decompose-equality)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst -1 x!1)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 delete
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   finseq_appl)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     delete
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       finseq_appl)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lift-if)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (expand
                                                                     delete
                                                                     2)
                                                                    (("3"
                                                                      (expand
                                                                       finseq_appl)
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             x!1)
                                                            (("2"
                                                              (expand
                                                               delete
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (expand delete 1)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3" (assert) nil nil))
                                              nil)
                                             ("4"
                                              (skeep)
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq_o_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_last_delete formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (add_last_delete_is_o formula-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (comp_preservs_parallel_pos3 0
  (comp_preservs_parallel_pos3-1 nil 3673475221
   ("" (skeep)
    (("" (lemma comp_preservs_parallel_pos2)
      (("" (inst -1 p1 p2 q1)
        (("" (assert)
          (("" (lemma parallel_comm)
            (("" (inst -1 "p1 o q1" p2)
              (("" (assert)
                (("" (rewrite parallel_comm 1)
                  (("" (lemma comp_preservs_parallel_pos2)
                    (("" (inst -1 p2 "p1 o q1" q2)
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (rest_of_PP_is_PP 0
  (rest_of_PP_is_PP-1 nil 3411908006
   ("" (skolem-typepred)
    (("" (expand "PP?")
      (("" (prop)
        (("1" (hide 2) (("1" (grind) nil nil)) nil)
         ("2" (skosimp*)
          (("2" (inst -1 "i!1 + 1" "j!1 + 1")
            (("1" (assert)
              (("1" (expand "finseq_appl")
                (("1" (lemma "fspos.rest_pos")
                  (("1" (inst?)
                    (("1" (lemma "fspos.rest_pos")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (inst -1 "i!1")
                            (("1" (inst -2 "j!1")
                              (("1"
                                (expand "finseq_appl")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (typepred "j!1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred "i!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "j!1") (("2" (grind) nil nil)) nil)) nil)
             ("3" (hide-all-but 1)
              (("3" (typepred "i!1") (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest_pos formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (rest const-decl "finseq" seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (rest_of_SP_is_SP 0
  (rest_of_SP_is_SP-1 nil 3411908172
   ("" (skolem-typepred)
    (("" (expand "SP?")
      (("" (case "length(rest(fss!1)) = 0")
        (("1" (hide -2) (("1" (grind) nil nil)) nil)
         ("2" (skosimp*)
          (("2" (inst -1 "i!1 + 1")
            (("1" (lemma "fspos.rest_pos")
              (("1" (inst?)
                (("1" (prop)
                  (("1" (inst -1 "i!1")
                    (("1" (expand "finseq_appl")
                      (("1" (assert) nil nil)) nil)
                     ("2" (typepred "i!1") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind)
              (("2" (typepred "i!1") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest_pos formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil))
   shostak))
 (delete_of_PP_is_PP 0
  (delete_of_PP_is_PP-1 nil 3411908236
   ("" (skolem 1 ("fss" "_"))
    (("" (case "length(fss) = 0")
      (("1" (grind) nil nil)
       ("2" (skolem-typepred)
        (("2" (typepred "fss")
          (("2" (expand "PP?")
            (("2" (prop)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (skosimp*)
                (("2" (expand "finseq_appl")
                  (("2" (case "i!2 < i!1")
                    (("1" (case "j!1 < i!1")
                      (("1" (expand "delete" 3)
                        (("1" (assert)
                          (("1" (expand "finseq_appl")
                            (("1" (inst -3 "i!2" "j!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "delete" 4)
                        (("2" (assert)
                          (("2" (expand "finseq_appl")
                            (("2" (inst -2 "i!2" "j!1 + 1")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "j!1")
                                (("2"
                                  (hide (3 5))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "j!1 < i!1")
                      (("1" (expand "delete" 4)
                        (("1" (assert)
                          (("1" (expand "finseq_appl")
                            (("1" (inst -2 "i!2 + 1" "j!1")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide (3 5))
                                (("2"
                                  (typepred "i!2")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "delete" 5)
                        (("2" (assert)
                          (("2" (expand "finseq_appl")
                            (("2" (inst -1 "i!2 + 1" "j!1 + 1")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide (4 6))
                                (("2"
                                  (typepred "j!1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide (4 6))
                                (("3"
                                  (typepred "i!2")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (delete const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (delete_of_SP_is_SP 0
  (delete_of_SP_is_SP-1 nil 3411908310
   ("" (skolem 1 ("s" "fss" "_"))
    (("" (case "length(fss) = 0")
      (("1" (grind) nil nil)
       ("2" (skolem-typepred)
        (("2" (typepred "fss")
          (("2" (expand "SP?")
            (("2" (case "length(delete(fss, i!1)) = 0")
              (("1" (hide -2) (("1" (grind) nil nil)) nil)
               ("2" (skosimp*)
                (("2" (case "i!2 < i!1")
                  (("1" (expand* "delete" "finseq_appl")
                    (("1" (assert) (("1" (inst -2 "i!2") nil nil))
                      nil))
                    nil)
                   ("2" (expand* "delete" "finseq_appl")
                    (("2" (assert)
                      (("2" (inst -1 "i!2 + 1")
                        (("1" (assert) nil nil)
                         ("2" (hide 5)
                          (("2" (typepred "i!2")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (delete const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (add_first_parallel_pos_to_PP_is_PP 0
  (add_first_parallel_pos_to_PP_is_PP-1 nil 3411908488
   ("" (skolem-typepred)
    (("" (case "length(fss!1) = 0")
      (("1" (grind) nil nil)
       ("2" (skosimp*)
        (("2" (expand "PP?" 2)
          (("2" (prop)
            (("2" (skosimp*)
              (("2" (case-replace "i!1 = 0")
                (("1" (inst -3 "j!1 - 1")
                  (("1" (lemma "fspos.nth_add_first")
                    (("1" (inst -1 "fss!1" "q!1" "0")
                      (("1" (replaces -1)
                        (("1" (lemma "fspos.nth_add_first")
                          (("1" (inst -1 "fss!1" "q!1" "j!1")
                            (("1" (assert)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (rewrite "parallel_comm")
                                  nil
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred "j!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-2 4))
                    (("2" (typepred "j!1") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case-replace "j!1 = 0")
                  (("1" (inst -3 "i!1 - 1")
                    (("1" (lemma "fspos.nth_add_first")
                      (("1" (inst -1 "fss!1" "q!1" "0")
                        (("1" (replaces -1)
                          (("1" (lemma "fspos.nth_add_first")
                            (("1" (inst -1 "fss!1" "q!1" "i!1")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (typepred "i!1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (-2 5))
                      (("2" (typepred "i!1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (expand "PP?")
                      (("2" (prop)
                        (("1" (typepred "i!1" "j!1")
                          (("1" (hide 5) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (inst -1 "i!1 - 1" "j!1 - 1")
                          (("1" (assert)
                            (("1" (lemma "fspos.nth_add_first")
                              (("1"
                                (inst -1 "fss!1" "q!1" "i!1")
                                (("1"
                                  (lemma "fspos.nth_add_first")
                                  (("1"
                                    (inst -1 "fss!1" "q!1" "j!1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (typepred "j!1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (typepred "i!1")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 3))
                            (("2" (typepred "j!1")
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (hide-all-but (1 4))
                            (("3" (typepred "i!1")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nth_add_first formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (add_first_parallel_pos_to_SP_is_SP 0
  (add_first_parallel_pos_to_SP_is_SP-1 nil 3411908749
   ("" (skolem-typepred)
    (("" (case "length(fss!1) = 0")
      (("1" (hide -2) (("1" (grind) nil nil)) nil)
       ("2" (expand "SP?" 2)
        (("2" (skosimp*)
          (("2" (case-replace "i!1 = 0")
            (("1" (hide -2)
              (("1" (lemma "fspos.nth_add_first")
                (("1" (inst?)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "SP?")
              (("2" (inst -1 "i!1 - 1")
                (("1" (lemma "fspos.nth_add_first")
                  (("1" (inst -1 "fss!1" "q!1" "i!1")
                    (("1" (assert) nil nil)
                     ("2" (hide-all-but (1 2))
                      (("2" (typepred "i!1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 2))
                  (("2" (typepred "i!1") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nth_add_first formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil))
   shostak))
 (add_last_parallel_pos_to_PP_is_PP 0
  (add_last_parallel_pos_to_PP_is_PP-1 nil 3411908815
   ("" (skolem-typepred)
    (("" (case "length(fss!1) = 0")
      (("1" (grind) nil nil)
       ("2" (skosimp*)
        (("2" (expand "PP?" 2)
          (("2" (prop)
            (("2" (skosimp*)
              (("2" (case-replace "i!1 = length(fss!1)")
                (("1" (inst -3 "j!1")
                  (("1" (lemma "fspos.nth_add_last")
                    (("1" (inst -1 "fss!1" "q!1" "length(fss!1)")
                      (("1" (replaces -1)
                        (("1" (lemma "fspos.nth_add_last")
                          (("1" (inst -1 "fss!1" "q!1" "j!1")
                            (("1" (assert)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (rewrite "parallel_comm")
                                  nil
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred "j!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 3 5))
                    (("2" (typepred "j!1") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case-replace "j!1 = length(fss!1)")
                  (("1" (inst -3 "i!1")
                    (("1" (lemma "fspos.nth_add_last")
                      (("1" (inst -1 "fss!1" "q!1" "length(fss!1)")
                        (("1" (replaces -1)
                          (("1" (lemma "fspos.nth_add_last")
                            (("1" (inst -1 "fss!1" "q!1" "i!1")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (typepred "i!1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (2 1 6))
                      (("2" (typepred "i!1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (expand "PP?")
                      (("2" (prop)
                        (("1" (typepred "i!1" "j!1")
                          (("1" (hide 5) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (inst -1 "i!1" "j!1")
                          (("1" (assert)
                            (("1" (lemma "fspos.nth_add_last")
                              (("1"
                                (inst -1 "fss!1" "q!1" "i!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "fspos.nth_add_last")
                                    (("1"
                                      (inst -1 "fss!1" "q!1" "j!1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (typepred "j!1")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (typepred "i!1")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 3))
                            (("2" (typepred "j!1")
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (hide-all-but (1 4))
                            (("3" (typepred "i!1")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nth_add_last formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (add_last_parallel_pos_to_SP_is_SP 0
  (add_last_parallel_pos_to_SP_is_SP-1 nil 3411908915
   ("" (skolem-typepred)
    (("" (case "length(fss!1) = 0")
      (("1" (hide -2) (("1" (grind) nil nil)) nil)
       ("2" (expand "SP?" 2)
        (("2" (skosimp*)
          (("2" (case-replace "i!1 = length(fss!1)")
            (("1" (hide -2)
              (("1" (lemma "fspos.nth_add_last")
                (("1" (inst?) (("1" (replaces -1) nil nil)) nil)) nil))
              nil)
             ("2" (expand "SP?")
              (("2" (inst -1 "i!1")
                (("1" (lemma "fspos.nth_add_last")
                  (("1" (inst -1 "fss!1" "q!1" "i!1")
                    (("1" (assert) nil nil)
                     ("2" (hide-all-but (1 2))
                      (("2" (typepred "i!1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 2))
                  (("2" (typepred "i!1") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nth_add_last formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil))
   shostak))
 (parallel_pos_are_dif 0
  (parallel_pos_are_dif-1 nil 3673475493
   ("" (skeep)
    (("" (skeep)
      (("" (expand finseq_appl)
        (("" (expand PP?)
          (("" (expand finseq_appl)
            (("" (prop)
              (("1" (typepred i)
                (("1" (typepred j) (("1" (assert) nil nil)) nil)) nil)
               ("2" (inst -1 i j)
                (("2" (assert)
                  (("2" (expand parallel)
                    (("2" (flatten)
                      (("2" (expand <=)
                        (("2" (inst 2 empty_seq)
                          (("2" (rewrite seq_o_empty)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (comp_SPP_commute 0
  (comp_SPP_commute-1 nil 3673543218
   ("" (skeep)
    (("" (expand o)
      (("" (expand* SPP? SP? PP? finseq_appl)
        (("" (lift-if)
          (("" (assert)
            (("" (prop)
              (("1" (skeep)
                (("1" (typepred i)
                  (("1" (prop)
                    (("1" (inst -5 "fsp`length + i")
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil)
                     ("2" (inst -4 "i-fsq`length")
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2)
                (("2" (skeep)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (prop)
                            (("1"
                              (inst -3 "fsp`length+i" "fsp`length+j")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil)
                               ("3" (assert) nil nil))
                              nil)
                             ("2"
                              (inst -2 "fsp`length+i" "j-fsq`length")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil)
                               ("3" (assert) nil nil))
                              nil)
                             ("3"
                              (inst -2 "i-fsq`length" "fsp`length+j")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil)
                               ("3" (assert) nil nil))
                              nil)
                             ("4"
                              (inst -1 "i-fsq`length" "j-fsq`length")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (assert)
                  (("3" (prop)
                    (("1" (inst -3 "fsp`length+i")
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil)
                     ("2" (inst -2 "i-fsq`length")
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (positions_of_arg 0
  (positions_of_arg-1 nil 3455282168
   ("" (skeep)
    (("" (typepred "k")
      (("" (expand* "#" "positionsOF")
        (("" (expand* "union" "IUnion" "member")
          (("" (flatten)
            (("" (hide 1)
              (("" (inst 1 "k + 1")
                (("" (assert)
                  (("" (expand "catenate")
                    (("" (inst 1 "empty_seq")
                      (("" (split)
                        (("1"
                          (expand* "member" "finseq_appl"
                           "positionsOF")
                          (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures))
   shostak))
 (left_pos_transitive 0
  (left_pos_transitive-1 nil 3512738380
   ("" (skosimp)
    (("" (expand "left_pos")
      (("" (skosimp*)
        (("" (prop)
          (("1" (replace -3 -4 rl)
            (("1" (replace -2 -4)
              (("1" (hide -2 -3)
                (("1" (inst 3 r!2 "p1!2 o p1!1" empty_seq)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (hide -2 -3)
                        (("1" (lemma seq_empty[posnat])
                          (("1" (inst?)
                            (("1" (assert)
                              (("1" (rewrite empty_0) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide -1 2 3)
                          (("2" (rewrite o_assoc) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -4 -5 rl)
            (("2" (replace -2 -5)
              (("2" (hide -2 -4)
                (("2" (inst 4 r!2 "p1!2 o p1!1" q1!3)
                  (("2" (flatten)
                    (("2" (hide 4)
                      (("2" (prop)
                        (("1" (rewrite o_assoc) nil nil)
                         ("2" (lemma seq_empty[posnat])
                          (("2" (inst?)
                            (("2" (assert)
                              (("2" (rewrite empty_0) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (rewrite first_compo)
                          (("3" (flatten)
                            (("3" (rewrite empty_0) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (case "r!2 <= r!1")
            (("1" (expand <=)
              (("1" (skosimp)
                (("1" (replace -1 -5)
                  (("1" (hide -1 -3 -4 -6)
                    (("1" (inst 4 r!2 "p1!3 o p1!1" empty_seq)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (lemma seq_empty[posnat])
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite empty_0)
                                  (("1" (rewrite empty_0) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite o_assoc) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "r!1 <= r!2")
              (("1" (expand <= -1)
                (("1" (skosimp)
                  (("1" (replace -1 -2)
                    (("1" (inst 5 r!1 p1!1 p1!3)
                      (("1" (flatten)
                        (("1" (hide 5)
                          (("1" (prop)
                            (("1" (expand <=)
                              (("1"
                                (inst 1 empty_seq)
                                (("1"
                                  (replace -1 -2)
                                  (("1"
                                    (rewrite seq_o_empty)
                                    (("1"
                                      (rewrite seq_o_empty)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1 -3)
                              (("2"
                                (replace -3 -4)
                                (("2"
                                  (hide -1 -2 -3 -5)
                                  (("2"
                                    (lemma equal_prefix[posnat])
                                    (("2"
                                      (inst -1 r!1 "p1!3 o p1!2" q1!2)
                                      (("2"
                                        (rewrite o_assoc)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1 -3 rl)
                                            (("2"
                                              (rewrite first_compo)
                                              (("2"
                                                (expand <=)
                                                (("2"
                                                  (inst 3 empty_seq)
                                                  (("2"
                                                    (reveal -2)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (rewrite
                                                         empty_0)
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (rewrite
                                                             seq_o_empty)
                                                            (("2"
                                                              (rewrite
                                                               seq_o_empty)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -3 1 2))
                (("2" (expand <=)
                  (("2" (replaces -1)
                    (("2" (case "length(r!2) = length(r!1)")
                      (("1" (lemma o_equals_o[posnat])
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst 1 empty_seq)
                              (("1" (rewrite seq_o_empty) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case " length(r!2) < length(r!1)")
                        (("1" (lemma o_length_o[posnat])
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (lemma o_length_o[posnat])
                          (("2" (inst -1 r!1 q1!2 r!2 p1!2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (case "r!1 <= r!2")
            (("1" (expand <=)
              (("1" (skosimp)
                (("1" (replace -1 -2)
                  (("1" (inst 5 r!1 p1!1 "p1!3 o q1!3")
                    (("1" (flatten)
                      (("1" (hide 5)
                        (("1" (prop)
                          (("1" (rewrite o_assoc) nil nil)
                           ("2" (lemma seq_empty[posnat])
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2" (rewrite empty_0 -2) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (replace -1 -3)
                            (("3" (replace -3 -5)
                              (("3"
                                (lemma equal_prefix[posnat])
                                (("3"
                                  (inst -1 r!1 "p1!3 o p1!2" q1!2)
                                  (("3"
                                    (rewrite o_assoc)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -1 -8 rl)
                                        (("3"
                                          (case "p1!3 = empty_seq")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (rewrite empty_o_seq)
                                              (("1"
                                                (rewrite empty_o_seq)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite first_compo)
                                            (("1"
                                              (rewrite first_compo)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (rewrite empty_0)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (rewrite empty_0)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "r!2 <= r!1")
              (("1" (hide 1)
                (("1" (expand <=)
                  (("1" (skosimp)
                    (("1" (replace -1 -6)
                      (("1" (inst 5 r!2 "p1!3 o p1!1" q1!3)
                        (("1" (flatten)
                          (("1" (hide 5)
                            (("1" (prop)
                              (("1" (rewrite o_assoc) nil nil)
                               ("2"
                                (lemma seq_empty[posnat])
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (rewrite empty_0 -2)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (replace -1 -5)
                                (("3"
                                  (replace -3 -5)
                                  (("3"
                                    (lemma equal_prefix[posnat])
                                    (("3"
                                      (inst -1 r!2 p1!2 "p1!3 o q1!2")
                                      (("3"
                                        (rewrite o_assoc)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (replace -1 -5)
                                            (("3"
                                              (case "p1!3 = empty_seq")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (rewrite empty_o_seq)
                                                  (("1"
                                                    (rewrite
                                                     empty_o_seq)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite first_compo)
                                                (("1"
                                                  (rewrite first_compo)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite empty_0)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite empty_0)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -4 1 2))
                (("2" (replaces -1)
                  (("2" (expand <=)
                    (("2" (case "length(r!2) = length(r!1)")
                      (("1" (lemma o_equals_o[posnat])
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst 1 empty_seq)
                              (("1"
                                (rewrite seq_o_empty)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case " length(r!2) < length(r!1)")
                        (("1" (lemma o_length_o[posnat])
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (lemma o_length_o[posnat])
                          (("2" (inst -1 r!1 q1!2 r!2 p1!2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (seq_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (first_compo formula-decl nil seq_extras structures)
    (equal_prefix formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (empty_o_seq formula-decl nil seq_extras structures))
   nil))
 (lwc_is_left_pos 0
  (lwc_is_left_pos-1 nil 3512738444
   ("" (skosimp*)
    (("" (expand* "left_without_children" "left_pos")
      (("" (skosimp*)
        (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (lwc_transitive 0
  (lwc_transitive-1 nil 3512738520
   ("" (skosimp)
    (("" (expand left_without_children)
      (("" (skosimp*)
        (("" (case "r!1 = r!2")
          (("1" (replaces -1)
            (("1" (inst 5 r!2 p1!1 q1!3)
              (("1" (assert)
                (("1" (lemma equal_prefix[posnat])
                  (("1" (inst -1 r!2 q1!2 p1!2)
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "child(r!2, r!1)")
            (("1" (expand child)
              (("1" (skosimp)
                (("1" (inst 7 r!1 p1!1 "p1!3 o q1!3")
                  (("1" (rewrite o_assoc)
                    (("1" (assert)
                      (("1" (lemma equal_prefix[posnat])
                        (("1" (inst -1 r!1 q1!2 "p1!3 o p1!2")
                          (("1" (rewrite o_assoc)
                            (("1" (assert)
                              (("1"
                                (replace -1 -5)
                                (("1"
                                  (rewrite first_compo)
                                  (("1"
                                    (rewrite first_compo)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma seq_empty[posnat])
                                          (("1"
                                            (inst -1 p1!3 q1!3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite empty_0)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 2))
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (rewrite empty_0)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (1 2))
                                    (("2"
                                      (flatten)
                                      (("2" (rewrite empty_0) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "child(r!1, r!2)")
              (("1" (expand child -1)
                (("1" (skosimp)
                  (("1" (inst 8 r!2 "p1!3 o p1!1" q1!3)
                    (("1" (rewrite o_assoc)
                      (("1" (assert)
                        (("1" (lemma equal_prefix[posnat])
                          (("1" (inst -1 r!2 "p1!3 o q1!2" p1!2)
                            (("1" (rewrite o_assoc)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 -8 rl)
                                  (("1"
                                    (rewrite first_compo)
                                    (("1"
                                      (rewrite first_compo)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma seq_empty[posnat])
                                          (("1"
                                            (inst -1 p1!3 p1!1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite empty_0)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 2))
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (rewrite empty_0)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 2))
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (rewrite empty_0)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-1 -5 1 2 3 4 7))
                (("2" (replaces -1)
                  (("2" (case "length(r!1) < length(r!2)")
                    (("1" (lemma o_length_o[posnat])
                      (("1" (inst -1 r!1 q1!2 r!2 p1!2)
                        (("1" (assert)
                          (("1" (skosimp)
                            (("1" (expand child 2)
                              (("1"
                                (inst 2 seq!1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replaces -3)
                                      (("1"
                                        (rewrite seq_o_empty)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "length(r!1) > length(r!2)")
                      (("1" (lemma o_length_o[posnat])
                        (("1" (inst -1 r!2 p1!2 r!1 q1!2)
                          (("1" (assert)
                            (("1" (skosimp)
                              (("1"
                                (expand child 2)
                                (("1"
                                  (inst 2 seq!1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replaces -3)
                                        (("1"
                                          (rewrite seq_o_empty)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma o_equals_o[posnat])
                        (("2" (inst -1 r!1 q1!2 r!2 p1!2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_prefix formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (first_compo formula-decl nil seq_extras structures)
    (seq_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil))
   shostak))
 (subterm_if_le_arity 0
  (subterm_if_le_arity-1 nil 3513100939
   ("" (skosimp)
    (("" (expand positionsOF)
      (("" (lift-if)
        (("" (assert)
          (("" (prop)
            (("1" (assert) nil nil)
             ("2"
              (expand* union IUnion member only_empty_seq finseq_appl)
              (("2" (flatten)
                (("2" (expand* catenate member)
                  (("2" (inst 3 i!1)
                    (("2" (inst 3 empty_seq)
                      (("2" (prop)
                        (("1" (hide-all-but 1)
                          (("1" (expand positionsOF)
                            (("1" (lift-if)
                              (("1"
                                (expand* union member only_empty_seq)
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (rewrite add_first_empty_seq) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (add_first_empty_seq formula-decl nil seq_extras structures)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   shostak))
 (subterms_acc_arity 0
  (subterms_acc_arity-1 nil 3513101734
   ("" (skosimp)
    (("" (expand positionsOF -1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide-all-but -2)
            (("1" (expand* only_empty_seq "#" empty_seq) nil nil)) nil)
           ("2" (hide-all-but -2)
            (("2" (expand* only_empty_seq "#" empty_seq) nil nil)) nil)
           ("3"
            (expand* union IUnion catenate member only_empty_seq
             finseq_appl)
            (("3" (prop)
              (("1" (hide-all-but -1)
                (("1" (expand* "#" empty_seq) nil nil)) nil)
               ("2" (skosimp*)
                (("2" (lemma subterm_if_le_arity)
                  (("2" (inst -1 j!1 s!1)
                    (("2" (assert)
                      (("2" (hide -1 4)
                        (("2" (typepred i!2)
                          (("2" (case "i!1 = i!2")
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but (-3 1))
                              (("2"
                                (expand* add_first insert? finseq_appl)
                                (("2"
                                  (decompose-equality)
                                  (("2"
                                    (expand "#")
                                    (("2"
                                      (decompose-equality -2)
                                      (("2" (inst -1 0) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((|#| const-decl "finite_sequence[T]" set2seq structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (term type-decl nil term_adt nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (lwc_add_last_delete_TCC1 0
  (lwc_add_last_delete_TCC1-1 nil 3513013796
   ("" (skosimp)
    (("" (lemma empty_0[posnat])
      (("" (inst -1 p!1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (lwc_add_last_delete subtype
    "(number_fields.-)(length(positions.p), 1)" "below[length(p)]")))
 (lwc_add_last_delete_TCC2 0
  (lwc_add_last_delete_TCC2-1 nil 3513013796
   ("" (skosimp)
    (("" (hide -1)
      (("" (lemma empty_0[posnat])
        (("" (inst -1 p!1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (lwc_add_last_delete subtype "positions.p"
    "not_empty_seq[posnat]")))
 (lwc_add_last_delete 0
  (lwc_add_last_delete-2 nil 3514047307
   ("" (skosimp)
    (("" (assert)
      (("" (flatten)
        ((""
          (name-replace "pi"
           "add_last(delete(p!1, length(p!1) - 1), 1 + last(p!1))"
           :hide? nil)
          (("1" (expand left_without_children -2)
            (("1" (skosimp)
              (("1" (case "r!1 = delete(p!1, length(p!1) - 1)")
                (("1" (case "q1!2 = #(1 + last(p!1))")
                  (("1"
                    (case "add_last(delete(p!1, length(p!1) - 1), 1 + last(p!1)) = r!1 o q1!2")
                    (("1" (assert) nil nil)
                     ("2" (hide-all-but (-1 -2 1))
                      (("2" (replace -1)
                        (("2" (replace -2)
                          (("2" (hide -)
                            (("2"
                              (name-replace "q!1"
                               "delete(p!1, length(p!1) - 1)")
                              (("2"
                                (expand o)
                                (("2"
                                  (decompose-equality 1)
                                  (("1"
                                    (expand* add_last insert? "#")
                                    nil
                                    nil)
                                   ("2"
                                    (decompose-equality 1)
                                    (("1"
                                      (lemma nth_add_last[posnat])
                                      (("1"
                                        (inst
                                         -1
                                         "q!1"
                                         "1 + last(p!1)"
                                         "x!1")
                                        (("1"
                                          (expand finseq_appl)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (prop)
                                                (("1"
                                                  (expand "#")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred x!1)
                                                  (("2"
                                                    (hide -2 3)
                                                    (("2"
                                                      (expand*
                                                       add_last
                                                       insert?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (typepred x!1)
                                            (("2"
                                              (expand*
                                               add_last
                                               insert?)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (expand* add_last insert? "#")
                                        nil
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (case "first(q1!2) = 1 + last(p!1) AND length(q1!2) > 1")
                    (("1" (flatten)
                      (("1" (expand child)
                        (("1" (lemma seq_first_rest_1[posnat])
                          (("1" (inst -1 q1!2)
                            (("1" (assert)
                              (("1"
                                (replace -1 -6)
                                (("1"
                                  (replace -4 -5 rl)
                                  (("1"
                                    (case
                                     "add_last(r!1, 1 + last(p!1)) = r!1 o #(1 + last(p!1))")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (rewrite o_assoc)
                                          (("1"
                                            (replace -2 -6)
                                            (("1"
                                              (replace -5 -6)
                                              (("1"
                                                (inst 6 "rest(q1!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -3 -9 3))
                                                      (("1"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "rest(q1!2)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand*
                                                               o
                                                               "#")
                                                              (("1"
                                                                (decompose-equality
                                                                 -2)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 3))
                                      (("2"
                                        (expand o)
                                        (("2"
                                          (decompose-equality 1)
                                          (("1"
                                            (expand*
                                             add_last
                                             insert?
                                             "#")
                                            nil
                                            nil)
                                           ("2"
                                            (decompose-equality 1)
                                            (("1"
                                              (lemma
                                               nth_add_last[posnat])
                                              (("1"
                                                (expand finseq_appl)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       r!1
                                                       "1 + last(p!1)"
                                                       x!1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred x!1)
                                                      (("2"
                                                        (expand
                                                         add_last
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           insert?
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -2
                                                             r!1
                                                             "1 + last(p!1)"
                                                             x!1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "#")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (expand*
                                                 add_last
                                                 insert?
                                                 "#")
                                                nil
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (split)
                      (("1" (case "last(p!1) = first(p1!1)")
                        (("1" (replace -1 1)
                          (("1" (expand left_without_children 6)
                            (("1" (rewrite add_last_is_o)
                              (("1"
                                (replace -2 -3 rl)
                                (("1"
                                  (inst 6 r!1 "#(1 + last(p!1))" q1!2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide-all-but -1)
                                        (("1"
                                          (expand* "#" empty_seq)
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (expand first 1 1)
                                          (("2"
                                            (expand finseq_appl)
                                            (("2"
                                              (expand "#" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 -4 1 4 6))
                          (("2" (replace -1)
                            (("2" (hide -1)
                              (("2"
                                (lemma add_last_delete[posnat])
                                (("2"
                                  (inst -1 p!1)
                                  (("2"
                                    (lemma empty_0[posnat])
                                    (("2"
                                      (inst -1 p!1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite add_last_is_o)
                                          (("2"
                                            (lemma
                                             equal_prefix[posnat])
                                            (("2"
                                              (inst
                                               -1
                                               "delete(p!1, p!1`length - 1)"
                                               "#(last(p!1))"
                                               "p1!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -2 -3)
                                                  (("2"
                                                    (expand*
                                                     last
                                                     first
                                                     "#"
                                                     finseq_appl)
                                                    (("2"
                                                      (decompose-equality
                                                       -1)
                                                      (("2"
                                                        (decompose-equality
                                                         -2)
                                                        (("2"
                                                          (inst -1 0)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite add_last_is_o)
                        (("2" (case "q1!2 = #(1 + last(p!1))")
                          (("1" (propax) nil nil)
                           ("2" (replace -1 -2 rl)
                            (("2" (case "first(p1!1) = last(p!1)")
                              (("1"
                                (expand left_without_children)
                                (("1"
                                  (inst 7 r!1 "#(1 + last(p!1))" q1!2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide-all-but -1)
                                        (("1"
                                          (expand* "#" empty_seq)
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "first(q1!2) = 1 + last(p!1)")
                                        (("1"
                                          (case
                                           "q1!2 = #(1 + last(p!1))")
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (hide-all-but (-1 1 4 6 7))
                                            (("2"
                                              (expand*
                                               first
                                               last
                                               "#"
                                               finseq_appl)
                                              (("2"
                                                (decompose-equality 1)
                                                (("1"
                                                  (lemma
                                                   empty_0[posnat])
                                                  (("1"
                                                    (inst -1 q1!2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (lemma
                                                       empty_0[posnat])
                                                      (("1"
                                                        (inst -1 q1!2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (lemma
                                                       empty_0[posnat])
                                                      (("2"
                                                        (inst -1 p!1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp)
                                                  (("3"
                                                    (lemma
                                                     empty_0[posnat])
                                                    (("3"
                                                      (inst -1 p!1)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1 1 rl)
                                          (("2"
                                            (replace -1 2 rl)
                                            (("2"
                                              (expand first 2 1)
                                              (("2"
                                                (expand finseq_appl)
                                                (("2"
                                                  (expand "#" 2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 -4 1 5 7))
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma add_last_delete[posnat])
                                      (("2"
                                        (inst -1 p!1)
                                        (("2"
                                          (lemma empty_0[posnat])
                                          (("2"
                                            (inst -1 p!1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite add_last_is_o)
                                                (("2"
                                                  (lemma
                                                   equal_prefix[posnat])
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "delete(p!1, p!1`length - 1)"
                                                     "#(last(p!1))"
                                                     "p1!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide -2 -3)
                                                        (("2"
                                                          (expand*
                                                           last
                                                           first
                                                           "#"
                                                           finseq_appl)
                                                          (("2"
                                                            (decompose-equality
                                                             -1)
                                                            (("2"
                                                              (decompose-equality
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 0)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (name-replace "dp" "delete(p!1, length(p!1) - 1)"
                   :hide? nil)
                  (("2" (rewrite add_last_is_o)
                    (("2" (case "child(dp, r!1)")
                      (("1" (expand child -1)
                        (("1" (skosimp)
                          (("1" (replace -1 -3)
                            (("1" (case "first(p1!1) = first(p1!2)")
                              (("1"
                                (expand left_without_children)
                                (("1"
                                  (inst
                                   6
                                   r!1
                                   "p1!2 o  #(1 + last(p!1))"
                                   q1!2)
                                  (("1"
                                    (rewrite o_assoc)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite first_compo)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (1 6))
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 seq_empty[posnat])
                                                (("1"
                                                  (inst
                                                   -1
                                                   p1!2
                                                   "#(1 + last(p!1))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite
                                                         empty_0
                                                         -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 2))
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite empty_0)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 -2 -3 -5 1 2 4 6))
                                (("2"
                                  (lemma add_last_delete[posnat])
                                  (("2"
                                    (inst -1 p!1)
                                    (("2"
                                      (lemma empty_0[posnat])
                                      (("2"
                                        (inst -1 p!1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite add_last_is_o)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (replace -2 -1)
                                                (("2"
                                                  (replace -1 -5)
                                                  (("2"
                                                    (hide-all-but
                                                     (-5 2 3 5))
                                                    (("2"
                                                      (lemma
                                                       equal_prefix[posnat])
                                                      (("2"
                                                        (inst
                                                         -1
                                                         r!1
                                                         "p1!2 o  #(last(p!1))"
                                                         p1!1)
                                                        (("2"
                                                          (rewrite
                                                           o_assoc)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide -2)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 rl)
                                                                (("2"
                                                                  (rewrite
                                                                   first_compo)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     2
                                                                     4)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (rewrite
                                                                         empty_0)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but (1 2))
                                (("3"
                                  (flatten)
                                  (("3" (rewrite empty_0) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma add_last_delete[posnat])
                        (("2" (inst -1 p!1)
                          (("2" (lemma empty_0[posnat])
                            (("2" (inst -1 p!1)
                              (("2"
                                (assert)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (rewrite add_last_is_o)
                                    (("2"
                                      (replace -1 -5)
                                      (("2"
                                        (lemma o_length_o[posnat])
                                        (("2"
                                          (inst
                                           -1
                                           "r!1"
                                           "p1!1"
                                           "dp"
                                           "#(last(p!1))")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand child 2)
                                                  (("1"
                                                    (inst 2 seq!1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 2 3))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (rewrite
                                                                 seq_o_empty)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 o_equals_o[posnat])
                                                (("2"
                                                  (inst
                                                   -1
                                                   "r!1"
                                                   "p1!1"
                                                   "dp"
                                                   "#(last(p!1))")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       o_length_o[posnat])
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "dp"
                                                         "#(last(p!1))"
                                                         "r!1"
                                                         "p1!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               -6)
                                                              (("2"
                                                                (lemma
                                                                 equal_prefix[posnat])
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   dp
                                                                   "#(last(p!1))"
                                                                   "seq!1 o p1!1")
                                                                  (("2"
                                                                    (rewrite
                                                                     o_assoc)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "seq!1 = empty_seq")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -3
                                                                            5))
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 seq_o_empty)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1
                                                                            4
                                                                            7
                                                                            9))
                                                                          (("2"
                                                                            (expand*
                                                                             "#"
                                                                             o)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (lemma
                                                                                   empty_0[posnat])
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     seq!1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       p1!1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but (1 2))
                  (("3" (lemma empty_0[posnat])
                    (("3" (inst -1 p!1) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (1 2))
            (("2" (lemma empty_0[posnat])
              (("2" (inst -1 p!1) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (add_last const-decl "finseq" seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (seq_empty formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (insert? const-decl "finseq" seq_extras structures)
    (nth_add_last formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (add_last_is_o formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures))
   nil)
  (lwc_add_last_delete-1 nil 3513524398
   ("" (skosimp)
    (("" (assert)
      (("" (flatten)
        ((""
          (name-replace "pi"
           "add_last(delete(p!1, length(p!1) - 1), 1 + last(p!1))"
           :hide? nil)
          (("1" (expand left_without_children -2)
            (("1" (skosimp)
              (("1" (case "r!1 = delete(p!1, length(p!1) - 1)")
                (("1" (case "q1!2 = #(1 + last(p!1))")
                  (("1"
                    (case "add_last(delete(p!1, length(p!1) - 1), 1 + last(p!1)) = r!1 o q1!2")
                    (("1" (assert) nil nil)
                     ("2" (hide-all-but (-1 -2 1))
                      (("2" (replaces -1)
                        (("2" (replaces -1)
                          (("2"
                            (name-replace "q!1"
                             "delete(p!1, length(p!1) - 1)")
                            (("2" (expand o)
                              (("2"
                                (decompose-equality 1)
                                (("1"
                                  (expand* add_last insert? "#")
                                  nil
                                  nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("1"
                                    (lemma nth_add_last[posnat])
                                    (("1"
                                      (inst
                                       -1
                                       "q!1"
                                       "1 + last(p!1)"
                                       "x!1")
                                      (("1"
                                        (expand finseq_appl)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (prop)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (prop)
                                              (("1"
                                                (expand "#")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred x!1)
                                                (("2"
                                                  (hide -2 3)
                                                  (("2"
                                                    (expand*
                                                     add_last
                                                     insert?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (typepred x!1)
                                          (("2"
                                            (expand* add_last insert?)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (expand* add_last insert? "#")
                                      nil
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "first(q1!2) = 1 + last(p!1)")
                    (("1" (expand child)
                      (("1" (lemma seq_first_rest_1[posnat])
                        (("1" (inst -1 q1!2)
                          (("1" (lemma empty_0[posnat])
                            (("1" (inst -1 q1!2)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 -5)
                                  (("1"
                                    (replace -3 -4 rl)
                                    (("1"
                                      (case
                                       "add_last(r!1, 1 + last(p!1)) = r!1 o #(1 + last(p!1))")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (rewrite o_assoc)
                                          (("1"
                                            (replace -2 -5)
                                            (("1"
                                              (replace -4 -5)
                                              (("1"
                                                (inst 7 "rest(q1!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (-8 1 4))
                                                      (("1"
                                                        (expand rest)
                                                        (("1"
                                                          (expand "^")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (postpone)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (lwc_add_last_delete1_TCC1 0
  (lwc_add_last_delete1_TCC1-1 nil 3514218201
   ("" (skosimp)
    (("" (assert)
      (("" (lemma empty_0[posnat])
        (("" (inst -1 p!1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (lwc_add_last_delete1 subtype
    "(number_fields.-)(length(positions.p), 1)" "below[length(p)]")))
 (lwc_add_last_delete1_TCC2 0
  (lwc_add_last_delete1_TCC2-1 nil 3514218201
   ("" (skosimp) (("" (rewrite empty_0) nil nil)) nil)
   ((empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil
   (lwc_add_last_delete1 subtype "positions.p"
    "not_empty_seq[posnat]")))
 (lwc_add_last_delete1 0
  (lwc_add_last_delete1-1 nil 3515010779
   ("" (skosimp)
    (("" (assert)
      (("" (flatten)
        ((""
          (name-replace "pi" "add_last(delete(p!1, length(p!1) - 1),
                                       1 + last(p!1))" :hide? nil)
          (("1" (expand left_without_children -2)
            (("1" (skosimp)
              (("1"
                (name-replace "dp" "delete(p!1, length(p!1) - 1)"
                 :hide? nil)
                (("1" (rewrite add_last_is_o)
                  (("1" (lemma add_last_delete[posnat])
                    (("1" (inst -1 p!1)
                      (("1" (lemma empty_0[posnat])
                        (("1" (inst -1 p!1)
                          (("1" (assert)
                            (("1" (replace -2)
                              (("1"
                                (rewrite add_last_is_o)
                                (("1"
                                  (case "r!1 = dp")
                                  (("1"
                                    (case "first(p1!1) = last(p!1)")
                                    (("1"
                                      (hide 4)
                                      (("1"
                                        (expand child 4)
                                        (("1"
                                          (inst 4 "rest(p1!1)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (lemma
                                               seq_first_rest_1[posnat])
                                              (("1"
                                                (inst -1 p1!1)
                                                (("1"
                                                  (lemma
                                                   empty_0[posnat])
                                                  (("1"
                                                    (inst -1 p1!1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (rewrite
                                                           seq_o_empty)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1
                                                              -3
                                                              -4
                                                              -5
                                                              -9
                                                              5))
                                                            (("1"
                                                              (replaces
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -3
                                                                 rl)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -3 1)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (replace -7 1)
                                                  (("2"
                                                    (replace -2 1)
                                                    (("2"
                                                      (hide-all-but
                                                       (1 4))
                                                      (("2"
                                                        (lemma
                                                         seq_first_rest_1[posnat])
                                                        (("2"
                                                          (inst
                                                           -1
                                                           p1!1)
                                                          (("2"
                                                            (lemma
                                                             empty_0[posnat])
                                                            (("2"
                                                              (inst
                                                               -1
                                                               p1!1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   1
                                                                   3)
                                                                  (("2"
                                                                    (lemma
                                                                     o_assoc[posnat])
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "dp"
                                                                       "#(first(p1!1))"
                                                                       "rest(p1!1)")
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         1
                                                                         rl)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             rl)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand left_without_children)
                                      (("2"
                                        (inst 5 dp p1!1 "#(last(p!1))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (hide-all-but -1)
                                              (("1"
                                                (expand* "#" empty_seq)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "first(q1!2) = 1 + last(p!1)")
                                              (("1"
                                                (expand first 1 2)
                                                (("1"
                                                  (expand finseq_appl)
                                                  (("1"
                                                    (expand "#" 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 -4 -5 1 5))
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (replaces -2)
                                                    (("2"
                                                      (lemma
                                                       equal_prefix[posnat])
                                                      (("2"
                                                        (inst
                                                         -1
                                                         dp
                                                         "#(1 + last(p!1))"
                                                         q1!2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (expand
                                                               "#")
                                                              (("2"
                                                                (decompose-equality
                                                                 -1)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("2"
                                                                    (expand*
                                                                     first
                                                                     finseq_appl)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       0)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "length(r!1) < length(dp)")
                                    (("1"
                                      (replace -5 -4)
                                      (("1"
                                        (lemma o_length_o[posnat])
                                        (("1"
                                          (inst
                                           -1
                                           r!1
                                           q1!2
                                           dp
                                           "#(1 + last(p!1))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (replace -1 -3)
                                                (("1"
                                                  (expand
                                                   left_without_children)
                                                  (("1"
                                                    (inst
                                                     5
                                                     r!1
                                                     p1!1
                                                     "seq!1 o  #(last(p!1))")
                                                    (("1"
                                                      (rewrite o_assoc)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide-all-but
                                                             -1)
                                                            (("1"
                                                              (expand*
                                                               "#"
                                                               o
                                                               empty_seq)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             first_compo)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -5)
                                                              (("1"
                                                                (lemma
                                                                 equal_prefix[posnat])
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   r!1
                                                                   "seq!1 o  #(1 + last(p!1))"
                                                                   q1!2)
                                                                  (("1"
                                                                    (rewrite
                                                                     o_assoc)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -9
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           first_compo)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1
                                                                              3))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 empty_0)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     seq_o_empty)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1
                                                                1
                                                                3))
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (rewrite
                                                                   empty_0)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       seq_o_empty)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma o_equals_o[posnat])
                                      (("2"
                                        (inst
                                         -1
                                         dp
                                         "#(1 + last(p!1))"
                                         r!1
                                         q1!2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but
                                             (-3 -4 1 2 5))
                                            (("2"
                                              (replaces -2)
                                              (("2"
                                                (expand* "#" o)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (lemma
                                                       empty_0[posnat])
                                                      (("2"
                                                        (inst -1 q1!2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (typepred p!1)
                    (("2" (lemma empty_0[posnat])
                      (("2" (inst -1 p!1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred p!1)
            (("2" (hide-all-but (-1 1))
              (("2" (lemma empty_0[posnat])
                (("2" (inst -1 p!1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (add_last const-decl "finseq" seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (add_last_is_o formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (o_length_o formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (add_last_delete formula-decl nil seq_extras structures))
   shostak))
 (leftmost_pos 0
  (leftmost_pos-1 nil 3514292411
   ("" (skosimp)
    (("" (expand positionsOF -2)
      (("" (lift-if)
        (("" (ground)
          (("1" (hide-all-but (-2 2))
            (("1" (expand only_empty_seq) (("1" (propax) nil nil))
              nil))
            nil)
           ("2" (hide-all-but (-2 3))
            (("2" (expand only_empty_seq) (("2" (propax) nil nil))
              nil))
            nil)
           ("3"
            (expand* union IUnion catenate only_empty_seq member
             finseq_appl)
            (("3" (skosimp*)
              (("3" (typepred i!2)
                (("3" (rewrite add_first_is_o)
                  (("3" (case "i!2 = i!1")
                    (("1" (case "x!1 = empty_seq")
                      (("1" (hide-all-but (-1 -2 -6 6))
                        (("1" (replaces -1)
                          (("1" (replaces -1)
                            (("1" (rewrite seq_o_empty) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replaces -1)
                        (("2" (hide-all-but (-4 1 6))
                          (("2" (expand left_pos)
                            (("2" (inst 2 "#(i!1)" x!1 empty_seq)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand left_pos)
                      (("2" (inst 6 empty_seq "#(i!2) o x!1" "#(i!1)")
                        (("2" (flatten)
                          (("2" (hide 6)
                            (("2" (rewrite empty_o_seq)
                              (("2"
                                (rewrite empty_o_seq)
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (hide-all-but -1)
                                      (("1"
                                        (expand* "#" empty_seq)
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite first_compo)
                                      (("1"
                                        (hide-all-but (-1 -2 1 2 5))
                                        (("1"
                                          (expand "#" 1)
                                          (("1"
                                            (expand* first finseq_appl)
                                            (("1"
                                              (lemma positions_of_arg)
                                              (("1"
                                                (inst -1 "s!1" "i!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (expand "#")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (add_first_is_o formula-decl nil seq_extras structures)
    (empty_o_seq formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (term type-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak)))

