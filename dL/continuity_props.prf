(continuity_props
 (f_sol_continuous 0
  (f_sol_continuous-1 nil 3867510863
   ("" (skeep*)
    (("" (expand "solution_odes?" -1)
      (("" (flatten)
        (("" (expand "derivable_odes?")
          (("" (inst -1 "i")
            (("" (lemma "derivable_continuous[(D)]")
              (("1" (inst -1 "restrict[real, (D), real](fs(i))" _)
                (("1" (expand "derivable?" -2)
                  (("1" (expand "continuous?" 1)
                    (("1" (skeep)
                      (("1" (inst -2 "x0")
                        (("1" (inst -1 "x0") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "dd_noe") (("2" (inst?) nil nil)) nil)
               ("3" (lemma "dd_deriv_domain") (("3" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes? const-decl "bool" hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable_continuous formula-decl nil derivatives_def analysis)
    (dd? const-decl "bool" hp_expr nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (restrict const-decl "R" restrict nil)
    (dd_noe formula-decl nil hp_expr nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (c_delt_TCC1 0
  (c_delt_TCC1-1 nil 3867512556
   (""
    (inst 1
     "LAMBDA(D:(dd?),x:(D),f:{ff: [(D) -> real] | continuous?[(D)](ff)})(eps:posreal): choose[real]({delta:posreal | FORALL(x1:(D)): abs(x1-x) < delta IMPLIES abs(f(x1)-f(x)) < eps})")
    (("1" (skeep)
      (("1" (split)
        (("1"
          (typepred
           "choose[real] (extend[real, posreal, bool, FALSE] ({delta: posreal | FORALL (x1: (D)): abs(x1 - x) < delta IMPLIES abs(f(x1) - f(x)) < eps}))")
          (("1" (expand "extend" -1)
            (("1" (split -)
              (("1" (flatten)
                (("1" (expand "extend" 1) (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2"
          (typepred
           "choose[real] (extend[real, posreal, bool, FALSE] ({delta: posreal | FORALL (x1: (D)): abs(x1 - x) < delta IMPLIES abs(f(x1) - f(x)) < eps}))")
          (("2" (expand "extend" -1)
            (("2" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (expand "extend" 1) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil)
         ("3"
          (typepred
           "choose[real] (extend[real, posreal, bool, FALSE] ({delta: posreal | FORALL (x1: (D)): abs(x1 - x) < delta IMPLIES abs(f(x1) - f(x)) < eps}))")
          (("1" (expand "extend" -1)
            (("1" (split)
              (("1" (flatten)
                (("1" (expand "extend" 1) (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "nonempty?")
              (("2" (expand "empty?")
                (("2" (typepred "f")
                  (("2" (expand "continuous?")
                    (("2" (inst -1 "x")
                      (("2" (expand "continuous?")
                        (("2" (inst -1 "eps")
                          (("2" (skeep)
                            (("2" (inst -2 "delta")
                              (("2"
                                (expand "member" 1)
                                (("2"
                                  (expand "extend" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (expand "nonempty?" 1)
        (("2" (expand "empty?" -1)
          (("2" (typepred "f")
            (("2" (expand "continuous?")
              (("2" (inst -1 "x")
                (("2" (expand "continuous?")
                  (("2" (inst -1 "eps")
                    (("2" (skeep)
                      (("2" (inst -2 "delta")
                        (("2" (expand "member" 1)
                          (("2" (expand "extend" 1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (empty? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (c_delt existence ""
    "[d: [D: (hp_expr.dd?), (D), {ff: [(D) -> reals.real] | continuous_functions[(D)].continuous?(ff)}] -> [eps: real_types.posreal -> {delta: real_types.posreal | FORALL (x1: (d`1)): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(continuity_props.x1, d`2)), delta), reals.<(real_defs.abs((number_fields.-)(d`3(continuity_props.x1), d`3(d`2))), eps))}]]")))
 (min_delt_TCC1 0
  (min_delt_TCC1-1 nil 3867512556 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_delt subtype "0" "naturalnumbers.below(continuity_props.n)")))
 (min_delt_TCC2 0
  (min_delt_TCC2-1 nil 3867512556 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil) (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (restrict const-decl "R" restrict nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_delt subtype
    "restrict[real, (continuity_props.D), real].restrict(continuity_props.fs(0))"
    "{ff: [(continuity_props.D) -> reals.real] | continuous_functions[(continuity_props.D)].continuous?(ff)}")))
 (min_delt_TCC3 0
  (min_delt_TCC3-1 nil 3867512556
   ("" (skeep*)
    ((""
      (with-tccs
       (typepred
        "c_delt(D, x, restrict[real, (D), real](fs(0)))(eps)"))
      (("" (inst -3 "x1")
        (("" (assert)
          (("" (expand "restrict" -)
            (("" (typepred "i") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (dd? const-decl "bool" hp_expr nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (c_delt const-decl "{delta: posreal |
   FORALL (x1: (D)): abs(x1 - x) < delta IMPLIES abs(f(x1) - f(x)) < eps}"
     continuity_props nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_delt subtype
    "continuity_props.c_delt(continuity_props.D, continuity_props.x, restrict[real, (continuity_props.D), real].restrict(continuity_props.fs(0)))(continuity_props.eps)"
    "{DELTA: real_types.posreal | FORALL (i: naturalnumbers.below(continuity_props.n), x1: (continuity_props.D)): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x1, continuity_props.x)), DELTA), reals.<(real_defs.abs((number_fields.-)(continuity_props.fs(i)(x1), continuity_props.fs(i)(continuity_props.x))), continuity_props.eps))}")))
 (min_delt_TCC4 0
  (min_delt_TCC5-1 nil 3867512556 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_delt subtype "0" "naturalnumbers.below(continuity_props.n)")))
 (min_delt_TCC5 0
  (min_delt_TCC4-1 nil 3867512556 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil) (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (restrict const-decl "R" restrict nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_delt subtype
    "restrict[real, (continuity_props.D), real].restrict(continuity_props.fs(0))"
    "{ff: [(continuity_props.D) -> reals.real] | continuous_functions[(continuity_props.D)].continuous?(ff)}")))
 (min_delt_TCC6 0
  (min_delt_TCC8-1 nil 3867512556 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil) (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (restrict const-decl "R" restrict nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_delt subtype "(number_fields.-)(continuity_props.n, 1)"
    "posnat")))
 (min_delt_TCC7 0
  (min_delt_TCC9-1 nil 3867512556 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_delt subtype "(number_fields.+)(continuity_props.i, 1)"
    "naturalnumbers.below(continuity_props.n)")))
 (min_delt_TCC8 0
  (min_delt_TCC10-1 nil 3867512556 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil) (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_delt subtype
    "LAMBDA (i: naturalnumbers.below((number_fields.-)(continuity_props.n, 1))): continuity_props.fs((number_fields.+)(i, 1))"
    "{fs: [naturalnumbers.below((number_fields.-)(continuity_props.n, 1)) -> [reals.real -> reals.real]] | FORALL (i: naturalnumbers.below((number_fields.-)(continuity_props.n, 1))): continuous_functions[(continuity_props.D)].continuous?(restrict[real, (continuity_props.D), real].restrict(fs(i)))}")))
 (min_delt_TCC9 0
  (min_delt_TCC11-1 nil 3867512556 ("" (termination-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_delt termination
    "continuity_props.min_delt(continuity_props.D, continuity_props.x, (number_fields.-)(continuity_props.n, 1), LAMBDA (i: naturalnumbers.below((number_fields.-)(continuity_props.n, 1))): continuity_props.fs((number_fields.+)(i, 1)))"
    "nil")))
 (min_delt_TCC10 0
  (min_delt_TCC6-1 nil 3867512556
   ("" (skeep*)
    ((""
      (with-tccs
       (typepred
        "c_delt(D, x, restrict[real, (D), real](fs(0)))(eps)"))
      ((""
        (typepred
         " v(D, x, n - 1, LAMBDA (i: below(n - 1)): fs(i + 1))(eps)")
        (("1" (inst -6 "x1")
          (("1" (case "i_1=0")
            (("1" (assert)
              (("1" (expand "restrict") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (inst -3 "i_1-1" "x1")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (typepred "fs")
          (("2" (skeep) (("2" (inst -1 "1+i_1!1") nil nil)) nil)) nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dd? const-decl "bool" hp_expr nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (restrict const-decl "R" restrict nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (c_delt const-decl "{delta: posreal |
   FORALL (x1: (D)): abs(x1 - x) < delta IMPLIES abs(f(x1) - f(x)) < eps}"
     continuity_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (n skolem-const-decl "posnat" continuity_props nil)
    (i_1 skolem-const-decl "below(n)" continuity_props nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_delt subtype
    "real_defs.min(continuity_props.c_delt(continuity_props.D, continuity_props.x, restrict[real, (continuity_props.D), real].restrict(continuity_props.fs(0)))(continuity_props.eps), continuity_props.min_delt(continuity_props.D, continuity_props.x, (number_fields.-)(continuity_props.n, 1), LAMBDA (i: naturalnumbers.below((number_fields.-)(continuity_props.n, 1))): continuity_props.fs((number_fields.+)(i, 1)))(continuity_props.eps))"
    "{DELTA: real_types.posreal | FORALL (i: naturalnumbers.below(continuity_props.n), x1: (continuity_props.D)): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x1, continuity_props.x)), DELTA), reals.<(real_defs.abs((number_fields.-)(continuity_props.fs(i)(x1), continuity_props.fs(i)(continuity_props.x))), continuity_props.eps))}")))
 (env_at_t_continuous 0
  (env_at_t_continuous-1 nil 3867514091
   ("" (skeep*)
    (("" (expand "continuous_env?" 1)
      (("" (skeep)
        (("" (expand "continuous?")
          (("" (skeep)
            (("" (expand "continuous?")
              (("" (case "not_in_map(ode)(i!1)")
                (("1" (skeep)
                  (("1" (inst 1 "1")
                    (("1" (skeep)
                      (("1" (expand "env_at_t" 1)
                        (("1" (assert)
                          (("1" (hide -)
                            (("1" (expand "abs" 1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "f_sol_continuous")
                  (("2" (inst -1 "D" "envi" "ode" "fs")
                    (("2" (assert)
                      (("2" (copy 1)
                        (("2" (expand "not_in_map" 1)
                          (("2" (skeep)
                            (("2" (inst -2 "i!2")
                              (("2"
                                (expand "continuous?" -2)
                                (("2"
                                  (inst -2 "x0")
                                  (("2"
                                    (expand "continuous?" -2)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -2 "epsilon")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst 2 "delta")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -2 "x_1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred
                                                     "env_at_t(ode, fs, envi)(x_1)")
                                                    (("2"
                                                      (expand
                                                       "env_at_t?"
                                                       -1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "i!2")
                                                          (("2"
                                                            (typepred
                                                             " env_at_t(ode, fs, envi)(x0)")
                                                            (("2"
                                                              (expand
                                                               "env_at_t?"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "i!2")
                                                                  (("2"
                                                                    (expand
                                                                     "restrict")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_env? const-decl "bool" continuity_re_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (f_sol_continuous formula-decl nil continuity_props nil)
    (restrict const-decl "R" restrict nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (re_env_continuous 0
  (re_env_continuous-1 nil 3867514780
   ("" (skeep)
    (("" (expand "continuous?" 1)
      (("" (skeep)
        (("" (expand "continuous?" 1)
          (("" (skeep)
            (("" (typepred "re")
              (("" (expand "cont_re?" -1)
                (("" (inst -1 "env_at_t(ode,fs,envi)(x0)" "epsilon")
                  (("1" (skeep)
                    (("1"
                      (inst 1 "min_delt(D,x0,length(ode),fs)(delta)")
                      (("1" (skeep)
                        (("1" (inst -1 "env_at_t(ode,fs,envi)(x)")
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2"
                              (typepred
                               "min_delt(D, x0, length(ode), fs)(delta)")
                              (("2"
                                (expand "inf_norm_bound?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred
                                     "env_at_t(ode, fs, envi)(x)"
                                     "env_at_t(ode, fs, envi)(x0)")
                                    (("2"
                                      (expand "env_at_t?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (case "not_in_map(ode)(i)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "env_at_t")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "not_in_map" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (typepred
                                                 "env_at_t(ode, fs, envi)(x)"
                                                 "env_at_t(ode, fs, envi)(x0)")
                                                (("2"
                                                  (expand "env_at_t?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -2 "i_1")
                                                      (("2"
                                                        (inst -5 "i_1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -7)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               1
                                                               rl)
                                                              (("2"
                                                                (replace
                                                                 -5
                                                                 1
                                                                 rl)
                                                                (("2"
                                                                  (inst
                                                                   -16
                                                                   "i_1"
                                                                   "x")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst?) nil nil))
                          nil))
                        nil)
                       ("2" (lemma "f_sol_continuous")
                        (("2" (hide -2 -4)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (reveal +)
                        (("3" (case "NOT ode=null")
                          (("1" (assert)
                            (("1" (expand "length" 3)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (hide 2)
                              (("2"
                                (inst 1 "1")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (case
                                     "env_at_t(null, fs, envi)(x) = envi")
                                    (("1"
                                      (case
                                       "env_at_t(null, fs, envi)(x0) = envi")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "abs" 1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (case
                                             "not_in_map(null)(x!1)")
                                            (("1"
                                              (expand "env_at_t" 1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "not_in_map" 1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (decompose-equality 1)
                                        (("2"
                                          (case
                                           "not_in_map(null)(x!1)")
                                          (("1"
                                            (expand "env_at_t" 1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (expand "not_in_map" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (typepred "i")
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (cont_re? const-decl "bool" continuity_re_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x0 skolem-const-decl "(D)" continuity_props nil)
    (D skolem-const-decl "(dd?)" continuity_props nil)
    (dd? const-decl "bool" hp_expr nil)
    (envi skolem-const-decl "Environment" continuity_props nil)
    (fs skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     continuity_props nil)
    (ode skolem-const-decl "ODEs" continuity_props nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (P skolem-const-decl "(ddl_dom?)" continuity_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restrict const-decl "R" restrict nil)
    (min_delt def-decl "{DELTA: posreal |
   FORALL (i: below(n), x1: (D)):
     abs(x1 - x) < DELTA IMPLIES abs(fs(i)(x1) - fs(i)(x)) < eps}"
     continuity_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (x skolem-const-decl "(D)" continuity_props nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inf_norm_bound? const-decl "bool" continuity_re_def nil)
    (f_sol_continuous formula-decl nil continuity_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak)))