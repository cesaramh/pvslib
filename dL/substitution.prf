(substitution
 (assign_env_TCC1 0
  (assign_env_TCC1-1 nil 3797973980 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil))
   nil
   (assign_env subtype "substitution.l" "(list_adt[MapExpr].cons?)")))
 (assign_env_TCC2 0
  (assign_env_TCC2-1 nil 3797973980
   ("" (skeep*) (("" (rewrite "cdr_is_MapExprInj") nil nil)) nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (assign_env subtype "list_adt[MapExpr].cdr(substitution.l)"
    "Assigns")))
 (assign_env_TCC3 0
  (assign_env_TCC3-1 nil 3797973980 ("" (termination-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil))
   nil
   (assign_env termination
    "substitution.assign_env(list_adt[MapExpr].cdr(substitution.l), substitution.envi, substitution.envo WITH [(substitution.n) := substitution.r])"
    "nil")))
 (assign_env_TCC4 0
  (assign_env_TCC4-1 nil 3797973980 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil))
   nil
   (assign_env subtype "substitution.l" "(list_adt[MapExpr].cons?)")))
 (SUB_MapExpr_TCC1 0
  (SUB_MapExpr_TCC1-1 nil 3797973980 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil))
   nil
   (SUB_MapExpr subtype "substitution.i"
    "below[length[MapExpr](mp)]")))
 (SUB_MapExpr_TCC2 0
  (SUB_MapExpr_TCC2-2 nil 3797974273
   ("" (skeep) (("" (replaces -1) (("" (grind) nil nil)) nil)) nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (SUB_MapExpr subtype "list_adt[MapExpr].null"
    "{l: hp_def.MapExprInj | booleans.AND(list_props[MapExpr].length(substitution.mp) = list_props[MapExpr].length(l), FORALL (i: naturalnumbers.below(list_props[MapExpr].length(l))): booleans.AND(list_props[MapExpr].nth(substitution.mp, i)`1 = list_props[MapExpr].nth(l, i)`1, list_props[MapExpr].nth(l, i)`2 = substitution.SUB_Re(substitution.sigma)(list_props[MapExpr].nth(substitution.mp, i)`2)))}"))
  (SUB_MapExpr_TCC2-1 nil 3797973980 ("" (subtype-tcc) nil nil) nil nil
   (SUB_MapExpr subtype "list_adt[MapExpr].null"
    "{l: hp_def.MapExprInj | booleans.AND(list_props[MapExpr].length(substitution.mp) = list_props[MapExpr].length(l), FORALL (i: naturalnumbers.below(list_props[MapExpr].length(l))): booleans.AND(list_props[MapExpr].nth(substitution.mp, i)`1 = list_props[MapExpr].nth(l, i)`1, list_props[MapExpr].nth(l, i)`2 = substitution.SUB_Re(substitution.sigma)(list_props[MapExpr].nth(substitution.mp, i)`2)))}")))
 (SUB_MapExpr_TCC3 0
  (SUB_MapExpr_TCC3-2 nil 3797974319
   ("" (skeep)
    (("" (lemma "cdr_is_MapExprInj")
      (("" (inst?)
        (("1" (replaces -2) (("1" (assert) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil (SUB_MapExpr subtype "substitution.tail" "MapExprInj"))
  (SUB_MapExpr_TCC3-1 nil 3797973980 ("" (subtype-tcc) nil nil) nil nil
   (SUB_MapExpr subtype "substitution.tail" "MapExprInj")))
 (SUB_MapExpr_TCC4 0
  (SUB_MapExpr_TCC4-1 nil 3797973980 ("" (termination-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil))
   nil
   (SUB_MapExpr termination
    "substitution.SUB_MapExpr(substitution.sigma)(substitution.tail)"
    "nil")))
 (SUB_MapExpr_TCC5 0
  (SUB_MapExpr_TCC5-2 nil 3797974354
   ("" (skeep)
    (("" (with-tccs (typepred "v(sigma)(tail)"))
      (("" (typepred "mp")
        (("" (replaces -5)
          (("" (split)
            (("1" (expand "mapexpr_inj")
              (("1" (skeep :preds? t)
                (("1" (case-replace "i=0")
                  (("1" (expand "nth" -5)
                    (("1" (insteep -6)
                      (("1" (replaces -1)
                        (("1" (expand "nth" -5)
                          (("1" (inst -7 "j-1")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "length" (-4 1))
                        (("2" (assert) nil nil)) nil)
                       ("3" (expand "length" 1)
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "nth" -4)
                    (("2" (assert)
                      (("2" (inst -6 "i-1" "j-1")
                        (("1" (assert) nil nil)
                         ("2" (expand "length" -3)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "length" 1) (("2" (propax) nil nil)) nil)
             ("3" (skeep 1 :preds? t)
              (("3" (expand "length" -1)
                (("3" (case-replace "i=0")
                  (("1" (expand "nth" 1) (("1" (propax) nil nil)) nil)
                   ("2" (inst -5 "i-1")
                    (("1" (expand "nth" 2) (("1" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (SUB_MapExpr subtype
    "list_adt[[hp_def.dLVar, [Environment -> real]]].cons((substitution.a`1, substitution.SUB_Re(substitution.sigma)(substitution.a`2)), substitution.SUB_MapExpr(substitution.sigma)(substitution.tail))"
    "{l: hp_def.MapExprInj | booleans.AND(list_props[MapExpr].length(substitution.mp) = list_props[MapExpr].length(l), FORALL (i: naturalnumbers.below(list_props[MapExpr].length(l))): booleans.AND(list_props[MapExpr].nth(substitution.mp, i)`1 = list_props[MapExpr].nth(l, i)`1, list_props[MapExpr].nth(l, i)`2 = substitution.SUB_Re(substitution.sigma)(list_props[MapExpr].nth(substitution.mp, i)`2)))}"))
  (SUB_MapExpr_TCC5-1 nil 3797973980 ("" (subtype-tcc) nil nil) nil nil
   (SUB_MapExpr subtype
    "list_adt[[hp_def.dLVar, [Environment -> real]]].cons((substitution.a`1, substitution.SUB_Re(substitution.sigma)(substitution.a`2)), substitution.SUB_MapExpr(substitution.sigma)(substitution.tail))"
    "{l: hp_def.MapExprInj | booleans.AND(list_props[MapExpr].length(substitution.mp) = list_props[MapExpr].length(l), FORALL (i: naturalnumbers.below(list_props[MapExpr].length(l))): booleans.AND(list_props[MapExpr].nth(substitution.mp, i)`1 = list_props[MapExpr].nth(l, i)`1, list_props[MapExpr].nth(l, i)`2 = substitution.SUB_Re(substitution.sigma)(list_props[MapExpr].nth(substitution.mp, i)`2)))}")))
 (assign_env__TCC1 0
  (assign_env__TCC1-2 nil 3798058424
   ("" (skeep* :preds? t)
    (("" (use "snoc_car_sublist_append[MapExpr]")
      (("" (use "sub_mapexpr_inj_is_mapexpr_inj")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((snoc_car_sublist_append formula-decl nil more_list_props
     structures)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (sublist_alt_def rec-application-judgement
     "{b: bool | b = EXISTS (l_: list[T] | suffix?(l_, l2)): prefix?(l1, l_)}"
     more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (snoc const-decl "list[T]" more_list_props structures)
    (MapExprInj type-eq-decl nil hp_def nil)
    (sub_mapexpr_inj_is_mapexpr_inj formula-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (assign_env_ subtype
    "more_list_props[MapExpr].snoc(substitution.l_, list_adt[MapExpr].car(substitution.l))"
    "Assigns"))
  (assign_env__TCC1-1 nil 3798058316 ("" (subtype-tcc) nil nil) nil nil
   (assign_env_ subtype
    "more_list_props[MapExpr].snoc(substitution.l_, list_adt[MapExpr].car(substitution.l))"
    "Assigns")))
 (assign_env__TCC2 0
  (assign_env__TCC2-2 nil 3798058636
   ("" (skeep* :preds? t)
    (("" (split 2)
      (("1" (use "cdr_is_MapExprInj") nil nil)
       ("2" (rewrite "append_consume_one") nil nil))
      nil))
    nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (append_consume_one formula-decl nil more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (assign_env_ subtype "list_adt[MapExpr].cdr(substitution.l)"
    "{l_1: hp_def.Assigns | hp_def.mapexpr_inj(list_props[MapExpr].append(more_list_props[MapExpr].snoc(substitution.l_, list_adt[MapExpr].car(substitution.l)), l_1))}"))
  (assign_env__TCC2-1 nil 3798058316 ("" (subtype-tcc) nil nil) nil nil
   (assign_env_ subtype "list_adt[MapExpr].cdr(substitution.l)"
    "{l_1: hp_def.Assigns | hp_def.mapexpr_inj(list_props[MapExpr].append(more_list_props[MapExpr].snoc(substitution.l_, list_adt[MapExpr].car(substitution.l)), l_1))}")))
 (assign_env__alt_j_TCC1 0
  (assign_env__alt_j_TCC1-1 nil 3798058705
   ("" (recursive-judgement-tcc) nil nil) nil nil
   (assign_env__alt_j_ subtype
    "list_props[MapExpr].append(substitution.l_, substitution.l)"
    "Assigns")))
 (assign_env__alt_j_TCC2 0
  (assign_env__alt_j_TCC2-2 nil 3798060418
   ("" (skeep :preds? t)
    (("" (typepred "d`2") (("" (propax) nil nil)) nil)) nil)
   ((dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil))
   nil
   (assign_env__alt_j_ subtype "list_props[MapExpr].append(d`1, d`2)"
    "MapExprInj")))
 (assign_env__alt_j_TCC3 0
  (assign_env__alt_j_TCC3-2 nil 3798060575
   ("" (skeep* :preds? t)
    (("" (split 1)
      (("1" (skeep :preds? t)
        (("1" (case "l=null")
          (("1" (replace -1 :hide? t)
            (("1" (rewrite "append_null_right")
              (("1" (inst? -5) nil nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (append_null_right formula-decl nil more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (assign_env__alt_j_ subtype "substitution.envo"
    "{env: hp_def.Environment | booleans.AND(FORALL (i: naturalnumbers.below(list_props[MapExpr].length(list_props[MapExpr].append(substitution.l_, substitution.l)))): env(hp_def.dlvar_index(list_props[MapExpr].nth(list_props[MapExpr].append(substitution.l_, substitution.l), i)`1)) = list_props[MapExpr].nth(list_props[MapExpr].append(substitution.l_, substitution.l), i)`2(substitution.envi), FORALL (i: (hp_def.not_in_map(list_props[MapExpr].append(substitution.l_, substitution.l)))): env(i) = substitution.envo(i))}")))
 (assign_env__alt_j_TCC4 0
  (assign_env__alt_j_TCC4-2 nil 3798060942
   ("" (skeep* :preds? t)
    (("" (expand "snoc")
      (("" (rewrite "length_append")
        (("" (case "i<length(l_)")
          (("1" (rewrite "nth_append")
            (("1" (assert)
              (("1" (inst -8 "i")
                (("1" (case "n=dlvar_index(nth(l_, i)`1)")
                  (("1" (expand "mapexpr_inj" -8)
                    (("1" (inst -8 "i" "length(l_)")
                      (("1" (rewrite "nth_append")
                        (("1" (rewrite "nth_append")
                          (("1" (assert)
                            (("1" (lemma "dLVar_dlvar_extensionality")
                              (("1"
                                (inst -1 "nth(l_,i)`1" "car(l)`1")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (rewrite "length_append")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil)
                       ("3" (rewrite "length_append")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "i=length(l_)")
            (("1" (rewrite "nth_append")
              (("1" (assert)
                (("1" (replace -1 :hide? t)
                  (("1" (assert)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((snoc const-decl "list[T]" more_list_props structures)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (dLVar_dlvar_extensionality formula-decl nil hp_def nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (nth_append formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (assign_env__alt_j_ subtype
    "substitution.envo WITH [(substitution.n) := substitution.r]"
    "{env: hp_def.Environment | FORALL (i: naturalnumbers.below(list_props[MapExpr].length(more_list_props[MapExpr].snoc(substitution.l_, list_adt[MapExpr].car(substitution.l))))): env(hp_def.dlvar_index(list_props[MapExpr].nth(more_list_props[MapExpr].snoc(substitution.l_, list_adt[MapExpr].car(substitution.l)), i)`1)) = list_props[MapExpr].nth(more_list_props[MapExpr].snoc(substitution.l_, list_adt[MapExpr].car(substitution.l)), i)`2(substitution.envi)}")))
 (assign_env__alt_j_TCC5 0
  (assign_env__alt_j_TCC5-1 nil 3798059602
   ("" (skeep* :preds? t)
    ((""
      (case "append(snoc[MapExpr](l_, car[MapExpr](l)), cdr[MapExpr](l)) = append(l_,l)")
      (("1"
        (typepred
         "v(snoc[MapExpr](l_, car[MapExpr](l)), cdr[MapExpr](l), envi, envo WITH [(n) := r])")
        (("1" (split 2)
          (("1" (skeep* :preds? t)
            (("1" (inst -2 "i")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil)
           ("2" (skeep* :preds? t)
            (("2" (inst -3 "i")
              (("1" (case "i=n")
                (("1" (replace -1 :hide? t)
                  (("1" (replace -12 :hide? t)
                    (("1" (hide-all-but (-1 2))
                      (("1" (expand "not_in_map")
                        (("1" (inst -1 "length(l_)")
                          (("1" (rewrite "nth_append")
                            (("1" (expand "nth")
                              (("1" (propax) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (rewrite "length_append")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (use "assign_env__alt_j_TCC4")
          (("2" (assert) (("2" (inst?) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (rewrite "cdr_is_MapExprInj")
          (("3" (use "snoc_car_sublist_append[MapExpr]")
            (("3" (use "sub_mapexpr_inj_is_mapexpr_inj")
              (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (use "snoc_car_sublist_append[MapExpr]")
          (("4" (use "sub_mapexpr_inj_is_mapexpr_inj")
            (("4" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (rewrite "append_consume_one") nil nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (snoc const-decl "list[T]" more_list_props structures)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (sublist_alt_def rec-application-judgement
     "{b: bool | b = EXISTS (l_: list[T] | suffix?(l_, l2)): prefix?(l1, l_)}"
     more_list_props structures)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (sub_mapexpr_inj_is_mapexpr_inj formula-decl nil hp_def nil)
    (snoc_car_sublist_append formula-decl nil more_list_props
     structures)
    (nth_append formula-decl nil more_list_props structures)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (append_consume_one formula-decl nil more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (assign_env__alt_j_ subtype
    "substitution.v(more_list_props[MapExpr].snoc(substitution.l_, list_adt[MapExpr].car(substitution.l)), list_adt[MapExpr].cdr(substitution.l), substitution.envi, substitution.envo WITH [(substitution.n) := substitution.r])"
    "{env: hp_def.Environment | booleans.AND(FORALL (i: naturalnumbers.below(list_props[MapExpr].length(list_props[MapExpr].append(substitution.l_, substitution.l)))): env(hp_def.dlvar_index(list_props[MapExpr].nth(list_props[MapExpr].append(substitution.l_, substitution.l), i)`1)) = list_props[MapExpr].nth(list_props[MapExpr].append(substitution.l_, substitution.l), i)`2(substitution.envi), FORALL (i: (hp_def.not_in_map(list_props[MapExpr].append(substitution.l_, substitution.l)))): env(i) = substitution.envo(i))}")))
 (assign_env_phantom_eq_TCC1 0
  (assign_env_phantom_eq_TCC1-1 nil 3798061470
   ("" (subtype-tcc) nil nil) nil nil
   (assign_env_phantom_eq subtype "substitution.l"
    "{l: hp_def.Assigns | hp_def.mapexpr_inj(list_props[MapExpr].append(substitution.l_, l))}")))
 (assign_env_phantom_eq 0
  (assign_env_phantom_eq-1 nil 3798061901
   ("" (induct "l")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("map" "assings"))
      (("3" (flatten)
        (("3" (skeep :preds? t)
          (("3" (expand "assign_env" 1)
            (("3" (expand "assign_env_" 1)
              (("3" (split -4)
                (("1" (inst? -1 :where 1)
                  (("1" (hide 2)
                    (("1" (skeep :preds? t)
                      (("1" (typepred "envo")
                        (("1" (expand "snoc")
                          (("1" (rewrite "length_append")
                            (("1" (case "i=length(l_)")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (rewrite "nth_append")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -1 "i")
                                (("1"
                                  (rewrite "nth_append")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "nth(l_, i)`1 = map`1")
                                      (("1"
                                        (expand "mapexpr_inj" -5)
                                        (("1"
                                          (inst -5 "i" "length(l_)")
                                          (("1"
                                            (rewrite "nth_append")
                                            (("1"
                                              (rewrite "nth_append")
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "length_append")
                                            (("2" (grind) nil nil))
                                            nil)
                                           ("3"
                                            (rewrite "length_append")
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "append_consume_one[MapExpr]")
                    (("2" (inst -1 "cons(map,assings)" "l_")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (lemma "cdr_is_MapExprInj")
                  (("2" (inst -1 "cons(map,assings)")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (snoc const-decl "list[T]" more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (dLVar_dlvar_extensionality formula-decl nil hp_def nil)
    (length_singleton formula-decl nil more_list_props structures)
    (append_consume_one formula-decl nil more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil))
   nil))
 (assign_env_alt 0
  (assign_env_alt-1 nil 3798063214
   ("" (skeep)
    (("" (lemma "assign_env_phantom_eq")
      (("" (inst -1 "l" "null" "envi" "envo")
        (("1" (replace -1 :hide? t)
          (("1" (use "assign_env__alt_j")
            (("1" (flatten)
              (("1" (assert)
                (("1" (rewrite "append_null_left")
                  (("1" (split 1)
                    (("1" (skeep)
                      (("1" (inst?)
                        (("1" (rewrite "append_null_left")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skeep :preds? t)
                      (("2" (inst? -3)
                        (("2" (rewrite "append_null_left") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "append_null_left") (("2" (assert) nil nil))
              nil)
             ("3" (hide 2)
              (("3" (skeep :preds? t)
                (("3" (expand "length") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil))
        nil))
      nil))
    nil)
   ((append_null_left formula-decl nil more_list_props structures)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil))
 (assign_env_ext 0
  (assign_env_ext-1 nil 3798034064
   ("" (induct "l")
    (("1" (assert) nil nil)
     ("2" (flatten)
      (("2" (skeep)
        (("2" (expand "assign_env")
          (("2" (rewrite "in_map_null_false") nil nil)) nil))
        nil))
      nil)
     ("3" (skolem 1 ("mapexpr" "assings"))
      (("3" (flatten)
        (("3" (use "mapexpr_inj_cons")
          (("3" (assert)
            (("3" (skeep 1)
              (("3" (expand "assign_env" 1)
                (("3" (inst? -2)
                  (("3" (replace -2 :hide? t)
                    (("3" (case-replace "in_map(assings)(i)")
                      (("1"
                        (case-replace
                         "in_map(cons(mapexpr, assings))(i)")
                        (("1" (lemma "expr_not_car")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (lemma "in_map_cons")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 1))
                          (("2" (expand "in_map")
                            (("2" (skeep -1)
                              (("2"
                                (inst 1 "i_1+1")
                                (("1"
                                  (expand "nth" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "length")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2"
                          (case-replace
                           "in_map(cons(mapexpr, assings))(i)")
                          (("1" (expand "in_map")
                            (("1" (skeep -1)
                              (("1"
                                (case-replace "i_1 = 0")
                                (("1"
                                  (expand "nth" -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "expr_car")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst 2 "i_1-1")
                                  (("1"
                                    (expand "nth" -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "i_1")
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case-replace
                               "i /= dlvar_index(mapexpr`1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "in_map" 1)
                                  (("2"
                                    (inst 1 "0")
                                    (("1"
                                      (expand "nth")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "length")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mapexpr_inj_cons formula-decl nil hp_def nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (expr_not_car formula-decl nil hp_def nil)
    (in_map_cons formula-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (expr_car formula-decl nil hp_def nil)
    (in_map_null_false formula-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (expr const-decl "RealExpr" hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil))
   nil))
 (assign_sub_ext 0
  (assign_sub_ext-1 nil 3798033921
   ("" (skeep)
    (("" (expand "assign_sub")
      (("" (lemma "assign_env_ext") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (SUB_MapVar_TCC1 0
  (SUB_MapVar_TCC1-1 nil 3797976469
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((val const-decl "real" hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (SUB_MapVar subtype "hp_def.val(substitution.v)"
    "{re: hp_def.RealExpr | FORALL (env: hp_def.Environment): re(env) = substitution.SUB_Re(substitution.l)(hp_def.val(substitution.v))(env)}")))
 (SUB_MapVar_TCC2 0
  (SUB_MapVar_TCC2-1 nil 3797976469
   ("" (skeep*)
    (("" (rewrite "same_var_eq")
      (("" (expand "SUB_Re")
        (("" (expand "val")
          (("" (lemma "assign_sub_ext")
            (("" (inst?)
              (("" (case-replace "in_map(l)(dlvar_index(v))")
                (("1" (lemma "expr_car")
                  (("1" (inst -1 "car(l)" "cdr(l)")
                    (("1" (case-replace "cons(car(l),cdr(l))=l")
                      (("1" (assert) nil nil)
                       ("2" (hide-all-but 1)
                        (("2" (decompose-equality) nil nil)) nil))
                      nil)
                     ("2" (rewrite "cdr_is_MapExprInj") nil nil))
                    nil))
                  nil)
                 ("2" (expand "in_map")
                  (("2" (inst 1 "0")
                    (("1" (expand "nth") (("1" (assert) nil nil)) nil)
                     ("2" (hide-all-but (1 2)) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same_var_eq formula-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (val const-decl "real" hp_def nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (expr_car formula-decl nil hp_def nil)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (SUB_MapVar subtype "list_adt[MapExpr].car(substitution.l)`2"
    "{re: hp_def.RealExpr | FORALL (env: hp_def.Environment): re(env) = substitution.SUB_Re(substitution.l)(hp_def.val(substitution.v))(env)}")))
 (SUB_MapVar_TCC3 0
  (SUB_MapVar_TCC1-1 nil 3797974761
   ("" (skeep*) (("" (rewrite "cdr_is_MapExprInj") nil nil)) nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (SUB_MapVar subtype "list_adt[MapExpr].cdr(substitution.l)"
    "Assigns")))
 (SUB_MapVar_TCC4 0
  (SUB_MapVar_TCC2-1 nil 3797974761 ("" (termination-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (same_var const-decl "bool" hp_def nil))
   nil
   (SUB_MapVar termination
    "substitution.SUB_MapVar(list_adt[MapExpr].cdr(substitution.l))"
    "nil")))
 (SUB_MapVar_TCC5 0
  (SUB_MapVar_TCC5-1 nil 3797976469
   ("" (skeep*)
    (("" (typepred "v1(cdr[MapExpr](l))(v)")
      (("" (inst -1 "env")
        (("" (expand "SUB_Re")
          (("" (expand "val")
            (("" (replaces -1)
              (("" (expand "assign_sub")
                (("" (expand "assign_env" 3 2)
                  (("" (assert)
                    (("" (lemma "assign_env_ext")
                      (("" (inst -1 "dlvar_index(v)" "cdr(l)" "env" _)
                        (("" (inst-cp -1 "env")
                          ((""
                            (inst -1
                             "env WITH [(dlvar_index(car(l)`1)) := car(l)`2(env)]")
                            ((""
                              (case-replace
                               "in_map(cdr(l))(dlvar_index(v))")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (replaces -)
                                  (("2"
                                    (expand "same_var")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val const-decl "real" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (same_var const-decl "bool" hp_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (SUB_MapVar subtype
    "substitution.SUB_MapVar(list_adt[MapExpr].cdr(substitution.l))(substitution.v)"
    "{re: hp_def.RealExpr | FORALL (env: hp_def.Environment): re(env) = substitution.SUB_Re(substitution.l)(hp_def.val(substitution.v))(env)}")))
 (dl_subre_val 0
  (dl_subre_val-3 nil 3797976241
   ("" (skeep)
    (("" (typepred "SUB_MapVar(sigma)(v)")
      (("" (decompose-equality)
        (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((val const-decl "real" hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil)
  (dl_subre_val-2 nil 3797976212 ("" (postpone) nil nil) nil nil)
  (dl_subre_val-1 nil 3797976204 ("" (postpone) nil nil) nil shostak))
 (dl_subre_const 0
  (dl_subre_const-1 nil 3798032969
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_subre_plus 0
  (dl_subre_plus-1 nil 3798032994
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_subre_minus 0
  (dl_subre_minus-1 nil 3798033096
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_subre_neg 0
  (dl_subre_neg-1 nil 3798033442
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_subre_prod 0
  (dl_subre_prod-1 nil 3798033470
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_subre_prod_scal1 0
  (dl_subre_prod_scal1-1 nil 3798033505
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_subre_prod_scal2 0
  (dl_subre_prod_scal2-1 nil 3798033530
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (cnst const-decl "real" hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_subre_exp 0
  (dl_subre_exp-1 nil 3798033616
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_bool 0
  (dl_sub_bool-1 nil 3798033662
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_bool_restricted 0
  (dl_sub_bool_restricted-1 nil 3882006165
   ("" (skeep)
    (("" (decompose-equality)
      (("" (expand "DLFORALL")
        (("" (iff)
          (("" (expand "DLIMPLIES")
            (("" (split 1)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (rewrite "dl_sub_bool") nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (skeep)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (rewrite "dl_sub_bool") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (QBoolExpr type-eq-decl nil hp_def nil)
    (DLFORALL const-decl "bool" bool_expr nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_and 0
  (dl_sub_and-1 nil 3798033680
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLAND const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_or 0
  (dl_sub_or-1 nil 3798033692
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLOR const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_not 0
  (dl_sub_not-1 nil 3798033702
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_implies 0
  (dl_sub_implies-1 nil 3798033708
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_ge 0
  (dl_sub_ge-1 nil 3798033714
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (>= const-decl "BoolExpr" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_gt 0
  (dl_sub_gt-1 nil 3798033723
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (> const-decl "BoolExpr" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_le 0
  (dl_sub_le-1 nil 3798033731
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (<= const-decl "BoolExpr" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_lt 0
  (dl_sub_lt-1 nil 3798033737
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (< const-decl "BoolExpr" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_eq 0
  (dl_sub_eq-1 nil 3798033743
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (= const-decl "BoolExpr" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_neq 0
  (dl_sub_neq-1 nil 3798033749
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (/= const-decl "BoolExpr" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_iff 0
  (dl_sub_iff-1 nil 3798033756
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLIFF const-decl "BoolExpr" bool_expr nil)
    (DLAND const-decl "bool" bool_expr nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_allruns0_x_neq_y_TCC1 0
  (dl_sub_allruns0_x_neq_y_TCC1-1 nil 3798398839
   ("" (subtype-tcc) nil nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (length_singleton formula-decl nil more_list_props structures)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (dl_sub_allruns0_x_neq_y subtype
    "(: (substitution.y, substitution.rey) :)" "Assigns")))
 (dl_sub_allruns0_x_neq_y_TCC2 0
  (dl_sub_allruns0_x_neq_y_TCC2-1 nil 3798403370
   ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (HP type-decl nil HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (fresh? const-decl "bool" hp_expr nil)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (dl_sub_allruns0_x_neq_y subtype "substitution.sigma"
    "Substitution")))
 (dl_sub_allruns0_x_neq_y_TCC3 0
  (dl_sub_allruns0_x_neq_y_TCC2-1 nil 3798398839
   ("" (skeep*)
    (("" (expand "fresh?")
      (("" (expand "mapexpr_inj")
        (("" (skeep :preds? t)
          (("" (expand "length")
            (("" (expand "length")
              (("" (expand "length")
                (("" (case-replace "i=0")
                  (("1" (case-replace "j=1")
                    (("1" (expand "nth")
                      (("1" (expand "nth") (("1" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fresh? const-decl "bool" hp_expr nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (dl_sub_allruns0_x_neq_y subtype
    "(: (substitution.z, substitution.re), (substitution.y, substitution.SUB_Re(substitution.sigma)(substitution.rey)) :)"
    "Assigns")))
 (dl_sub_allruns0_x_neq_y_TCC4 0
  (dl_sub_allruns0_x_neq_y_TCC4-1 nil 3798403370
   ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (HP type-decl nil HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (fresh? const-decl "bool" hp_expr nil)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (dl_sub_allruns0_x_neq_y subtype "substitution.sigmap"
    "Substitution")))
 (dl_sub_allruns0_x_neq_y 0
  (dl_sub_allruns0_x_neq_y-3 nil 3903302488
   (""
    (deftactic inst_not_in_map (fnum var)
     (spread (inst-cp fnum var)
      ((assert)
       (then (expand "not_in_map") (unroll 1) (repeat (expand "nth" 1))
        (rewrite "dlvar_inj")))))
    ((""
      (deftactic in_map (fnum)
       (with-fresh-labels ((l fnum))
        (then (unroll l) (repeat (expand "nth" l)))))
      (("" (skeep)
        (("" (beta)
          (("" (flatten)
            (("" (decompose-equality 4)
              (("" (iff)
                (("" (split)
                  (("1" (flatten)
                    (("1" (expand "ALLRUNS")
                      (("1" (skeep)
                        (("1" (expand "SUB")
                          (("1" (expand "assign_sub")
                            (("1" (expand "assign_env")
                              (("1"
                                (expand "assign_env")
                                (("1"
                                  (expand "val")
                                  (("1"
                                    (expand "SUB_Re")
                                    (("1"
                                      (expand "assign_sub")
                                      (("1"
                                        (expand "assign_env")
                                        (("1"
                                          (expand "assign_env")
                                          (("1"
                                            (expand "semantic_rel" -2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (in_map -2)
                                                (("1"
                                                  (case
                                                   "EXISTS (envop: Environment): semantic_rel(ASSIGN((: (y, rey) :)))(x!1 WITH [(dlvar_index(x)) := re(x!1)])(envop)")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -2 "envop")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "semantic_rel")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (in_map
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "fresh?"
                                                                 -7)
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "envop"
                                                                   "re(x!1)")
                                                                  (("1"
                                                                    (case-replace
                                                                     "envo WITH [(dlvar_index(x)) := envo(dlvar_index(z))] = envop WITH [(dlvar_index(z)) := re(x!1)]")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("2"
                                                                        (case-replace
                                                                         "x!2 = dlvar_index(x)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             4)
                                                                            (("1"
                                                                              (inst_not_in_map
                                                                               -3
                                                                               "dlvar_index(x)")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case-replace
                                                                             "x!2 = dlvar_index(z)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst_not_in_map
                                                                                 -2
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (inst_not_in_map
                                                                                   -7
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "x!1 WITH [(dlvar_index(x)) := re(x!1), (dlvar_index(y)):=rey(x!1 WITH [(dlvar_index(x)) := re(x!1)]), (dlvar_index(z)) := x!1(dlvar_index(z))]")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (case-replace
                                                                   "i=0")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       3)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         4)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           5)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "nth")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (expand
                                                               "not_in_map")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "0")
                                                                (("2"
                                                                  (expand
                                                                   "nth")
                                                                  (("2"
                                                                    (case-replace
                                                                     "i=dlvar_index(z)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         5)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       6)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         7)
                                                                        (("2"
                                                                          (decompose-equality
                                                                           7)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (eval-formula)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "SUB")
                      (("2" (expand "assign_sub")
                        (("2" (expand "assign_env")
                          (("2" (expand "assign_env")
                            (("2" (expand "val")
                              (("2"
                                (expand "ALLRUNS")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "semantic_rel" -2)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (in_map -2)
                                        (("2"
                                          (expand "SUB_Re")
                                          (("2"
                                            (expand "assign_sub")
                                            (("2"
                                              (expand "assign_env")
                                              (("2"
                                                (expand "assign_env")
                                                (("2"
                                                  (case
                                                   "EXISTS (envop:Environment): semantic_rel(ASSIGN((: (z, re), (y, LAMBDA (env) -> real: rey(env WITH [(dlvar_index(x)) := re(env)])) :))) (x!1)(envop)")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -2 "envop")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "semantic_rel")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (in_map
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "fresh?"
                                                                 -7)
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "envop WITH [(dlvar_index(x)) := envop(dlvar_index(z))]"
                                                                   "x!1(dlvar_index(z))")
                                                                  (("1"
                                                                    (case-replace
                                                                     "envop WITH [(dlvar_index(x)) := envop(dlvar_index(z))] WITH [(dlvar_index(z)) := x!1(dlvar_index(z))] = envo")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("2"
                                                                        (case-replace
                                                                         "x!2 = dlvar_index(z)")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           4)
                                                                          (("1"
                                                                            (inst_not_in_map
                                                                             -7
                                                                             "dlvar_index(z)")
                                                                            (("1"
                                                                              (decompose-equality
                                                                               6)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case-replace
                                                                           "x!2 = dlvar_index(x)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst_not_in_map
                                                                               -7
                                                                               "dlvar_index(x)")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case-replace
                                                                               "x!2=dlvar_index(y)")
                                                                              (("1"
                                                                                (inst_not_in_map
                                                                                 -4
                                                                                 "x!2")
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst_not_in_map
                                                                                 -3
                                                                                 "x!2")
                                                                                (("1"
                                                                                  (inst_not_in_map
                                                                                   -7
                                                                                   "x!2")
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "nth")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "x!1 WITH [(dlvar_index(z)):=re(x!1), (dlvar_index(y)):= rey(x!1 WITH [(dlvar_index(x)) := re(x!1)])]")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (expand
                                                                   "length")
                                                                  (("1"
                                                                    (case-replace
                                                                     "i=0")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (decompose-equality
                                                                         5)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case-replace
                                                                       "i=1")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (expand
                                                               "not_in_map")
                                                              (("2"
                                                                (inst-cp
                                                                 -1
                                                                 "0")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "1")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (eval-formula)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (eval-formula)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide -1)
                                                    (("3"
                                                      (expand
                                                       "mapexpr_inj")
                                                      (("3"
                                                        (skeep
                                                         :preds?
                                                         t)
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (expand
                                                             "length")
                                                            (("3"
                                                              (expand
                                                               "length")
                                                              (("3"
                                                                (case-replace
                                                                 "i=0")
                                                                (("1"
                                                                  (case-replace
                                                                   "j=1")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Substitution type-eq-decl nil substitution nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (SUB const-decl "bool" substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (HP type-decl nil HP_adt nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (SUB_Re const-decl "real" substitution nil)
    (val const-decl "real" hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (assign_env def-decl "Environment" substitution nil)
    (length_singleton formula-decl nil more_list_props structures)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (x!2 skolem-const-decl "nat" substitution nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dlvar_inj formula-decl nil hp_def nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (dLVar_dlvar_extensionality formula-decl nil hp_def nil)
    (fresh? const-decl "bool" hp_expr nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (below type-eq-decl nil naturalnumbers nil)
    (x skolem-const-decl "dLVar" substitution nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (rey skolem-const-decl "RealExpr" substitution nil)
    (y skolem-const-decl "dLVar" substitution nil)
    (re skolem-const-decl "RealExpr" substitution nil)
    (z skolem-const-decl "dLVar" substitution nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (assign_sub const-decl "Environment" substitution nil)
    (x!2 skolem-const-decl "nat" substitution nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (dl_sub_allruns0_x_neq_y-2 nil 3903301633
   (""
    (deftactic inst_not_in_map (fnum var)
     (spread (inst-cp fnum var)
      ((assert)
       (then (expand "not_in_map") (rewrite "forall_and_below")
        (grind)))))
    ((""
      (deftactic in_map (fnum)
       (with-fresh-labels ((l fnum))
        (then (unroll l) (repeat (expand "nth" l)))))
      (("" (skeep)
        (("" (beta)
          (("" (flatten)
            (("" (decompose-equality 4)
              (("" (iff)
                (("" (split)
                  (("1" (flatten)
                    (("1" (expand "ALLRUNS")
                      (("1" (skeep)
                        (("1" (expand "SUB")
                          (("1" (expand "assign_sub")
                            (("1" (expand "assign_env")
                              (("1"
                                (expand "assign_env")
                                (("1"
                                  (expand "val")
                                  (("1"
                                    (expand "SUB_Re")
                                    (("1"
                                      (expand "assign_sub")
                                      (("1"
                                        (expand "assign_env")
                                        (("1"
                                          (expand "assign_env")
                                          (("1"
                                            (expand "semantic_rel" -2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (in_map -2)
                                                (("1"
                                                  (case
                                                   "EXISTS (envop: Environment): semantic_rel(ASSIGN((: (y, rey) :)))(x!1 WITH [(dlvar_index(x)) := re(x!1)])(envop)")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -2 "envop")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "semantic_rel")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (in_map
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "fresh?"
                                                                 -7)
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "envop"
                                                                   "re(x!1)")
                                                                  (("1"
                                                                    (case-replace
                                                                     "envo WITH [(dlvar_index(x)) := envo(dlvar_index(z))] = envop WITH [(dlvar_index(z)) := re(x!1)]")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("2"
                                                                        (case-replace
                                                                         "x!2 = dlvar_index(x)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst_not_in_map
                                                                             -3
                                                                             "dlvar_index(x)")
                                                                            nil)))
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case-replace
                                                                             "x!2 = dlvar_index(z)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst_not_in_map
                                                                                 -2
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (inst_not_in_map
                                                                                   -7
                                                                                   "x!2")
                                                                                  nil)))))))))))))))))))))))))))))))
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "x!1 WITH [(dlvar_index(x)) := re(x!1), (dlvar_index(y)):=rey(x!1 WITH [(dlvar_index(x)) := re(x!1)]), (dlvar_index(z)) := x!1(dlvar_index(z))]")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (case-replace
                                                                   "i=0")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil)))
                                                                   ("2"
                                                                    (expand
                                                                     "nth")
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))))
                                                           ("2"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (expand
                                                               "not_in_map")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "0")
                                                                (("2"
                                                                  (expand
                                                                   "nth")
                                                                  (("2"
                                                                    (case-replace
                                                                     "i=z")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil)))))))))))))))))))
                                                   ("3"
                                                    (eval-formula)
                                                    nil)))))))))))))))))))))))))))))))))
                   ("2" (flatten)
                    (("2" (expand "SUB")
                      (("2" (expand "assign_sub")
                        (("2" (expand "assign_env")
                          (("2" (expand "assign_env")
                            (("2" (expand "val")
                              (("2"
                                (expand "ALLRUNS")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "semantic_rel" -2)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (in_map -2)
                                        (("2"
                                          (expand "SUB_Re")
                                          (("2"
                                            (expand "assign_sub")
                                            (("2"
                                              (expand "assign_env")
                                              (("2"
                                                (expand "assign_env")
                                                (("2"
                                                  (case
                                                   "EXISTS (envop:Environment): semantic_rel(ASSIGN((: (z, re), (y, LAMBDA (env) -> real: rey(env WITH [(x) := re(env)])) :))) (x!1)(envop)")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -2 "envop")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "semantic_rel")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (in_map
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "fresh?"
                                                                 -7)
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "envop WITH [(x) := envop(z)]"
                                                                   "x!1(z)")
                                                                  (("1"
                                                                    (case-replace
                                                                     "envop WITH [(x) := envop(z)] WITH [(z) := x!1(z)] = envo")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("2"
                                                                        (case-replace
                                                                         "x!2 = z")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst_not_in_map
                                                                             -7
                                                                             "z")
                                                                            nil)))
                                                                         ("2"
                                                                          (case-replace
                                                                           "x!2 = x")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst_not_in_map
                                                                               -7
                                                                               "x")
                                                                              nil)))
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case-replace
                                                                               "x!2=y")
                                                                              (("1"
                                                                                (inst_not_in_map
                                                                                 -4
                                                                                 "x!2")
                                                                                nil)
                                                                               ("2"
                                                                                (inst_not_in_map
                                                                                 -3
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (inst_not_in_map
                                                                                   -7
                                                                                   "x!2")
                                                                                  nil)))))))))))))))))))))))))))))))
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "x!1 WITH [(z):=re(x!1), y:= rey(x!1 WITH [(x) := re(x!1)])]")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (expand
                                                                   "length")
                                                                  (("1"
                                                                    (case-replace
                                                                     "i=0")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (propax)
                                                                        nil)))
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case-replace
                                                                         "i=1")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (expand
                                                                             "nth")
                                                                            (("1"
                                                                              (propax)
                                                                              nil)))))
                                                                         ("2"
                                                                          (assert)
                                                                          nil)))))))))))))))
                                                           ("2"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (expand
                                                               "not_in_map")
                                                              (("2"
                                                                (inst-cp
                                                                 -1
                                                                 "0")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "1")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))))
                                                                   ("2"
                                                                    (eval-formula)
                                                                    nil)))
                                                                 ("2"
                                                                  (eval-formula)
                                                                  nil)))))))))))))))
                                                   ("3"
                                                    (hide -1)
                                                    (("3"
                                                      (expand
                                                       "mapexpr_inj")
                                                      (("3"
                                                        (skeep
                                                         :preds?
                                                         t)
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (expand
                                                             "length")
                                                            (("3"
                                                              (expand
                                                               "length")
                                                              (("3"
                                                                (case-replace
                                                                 "i=0")
                                                                (("1"
                                                                  (case-replace
                                                                   "j=1")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (propax)
                                                                        nil)))))
                                                                   ("2"
                                                                    (assert)
                                                                    nil)))
                                                                 ("2"
                                                                  (assert)
                                                                  nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (dl_sub_allruns0_x_neq_y-1 nil 3798381477
   (""
    (deftactic inst_not_in_map (fnum var)
     (spread (inst-cp fnum var)
      ((assert)
       (then (expand "not_in_map") (rewrite "forall_and_below")
        (grind)))))
    ((""
      (deftactic in_map (fnum)
       (with-fresh-labels ((l fnum))
        (then (unroll l) (repeat (expand "nth" l)))))
      (("" (skeep)
        (("" (beta)
          (("" (flatten)
            (("" (decompose-equality 4)
              (("" (iff)
                (("" (split)
                  (("1" (flatten)
                    (("1" (expand "ALLRUNS")
                      (("1" (skeep)
                        (("1" (expand "SUB")
                          (("1" (expand "assign_sub")
                            (("1" (expand "assign_env")
                              (("1"
                                (expand "assign_env")
                                (("1"
                                  (expand "val")
                                  (("1"
                                    (expand "SUB_Re")
                                    (("1"
                                      (expand "assign_sub")
                                      (("1"
                                        (expand "assign_env")
                                        (("1"
                                          (expand "assign_env")
                                          (("1"
                                            (expand "semantic_rel" -2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (in_map -2)
                                                (("1"
                                                  (case
                                                   "EXISTS (envop: Environment): semantic_rel(ASSIGN((: (y, rey) :)))(x!1 WITH [(x) := re(x!1)])(envop)")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -2 "envop")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "semantic_rel")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (in_map
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "fresh?"
                                                                 -7)
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "envop"
                                                                   "re(x!1)")
                                                                  (("1"
                                                                    (case-replace
                                                                     "envo WITH [(x) := envo(z)] = envop WITH [(z) := re(x!1)]")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("2"
                                                                        (case-replace
                                                                         "x!2 = x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst_not_in_map
                                                                             -3
                                                                             "x")
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case-replace
                                                                             "x!2 = z")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst_not_in_map
                                                                                 -2
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (inst_not_in_map
                                                                                   -7
                                                                                   "x!2")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "x!1 WITH [(x) := re(x!1), (y):=rey(x!1 WITH [(x) := re(x!1)]), (z) := x!1(z)]")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (case-replace
                                                                   "i=0")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "nth")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (expand
                                                               "not_in_map")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "0")
                                                                (("2"
                                                                  (expand
                                                                   "nth")
                                                                  (("2"
                                                                    (case-replace
                                                                     "i=z")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (eval-formula)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "SUB")
                      (("2" (expand "assign_sub")
                        (("2" (expand "assign_env")
                          (("2" (expand "assign_env")
                            (("2" (expand "val")
                              (("2"
                                (expand "ALLRUNS")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "semantic_rel" -2)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (in_map -2)
                                        (("2"
                                          (expand "SUB_Re")
                                          (("2"
                                            (expand "assign_sub")
                                            (("2"
                                              (expand "assign_env")
                                              (("2"
                                                (expand "assign_env")
                                                (("2"
                                                  (case
                                                   "EXISTS (envop:Environment): semantic_rel(ASSIGN((: (z, re), (y, LAMBDA (env) -> real: rey(env WITH [(x) := re(env)])) :))) (x!1)(envop)")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -2 "envop")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "semantic_rel")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (in_map
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "fresh?"
                                                                 -7)
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "envop WITH [(x) := envop(z)]"
                                                                   "x!1(z)")
                                                                  (("1"
                                                                    (case-replace
                                                                     "envop WITH [(x) := envop(z)] WITH [(z) := x!1(z)] = envo")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("2"
                                                                        (case-replace
                                                                         "x!2 = z")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst_not_in_map
                                                                             -7
                                                                             "z")
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case-replace
                                                                           "x!2 = x")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst_not_in_map
                                                                               -7
                                                                               "x")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case-replace
                                                                               "x!2=y")
                                                                              (("1"
                                                                                (inst_not_in_map
                                                                                 -4
                                                                                 "x!2")
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst_not_in_map
                                                                                 -3
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (inst_not_in_map
                                                                                   -7
                                                                                   "x!2")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "x!1 WITH [(z):=re(x!1), y:= rey(x!1 WITH [(x) := re(x!1)])]")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (expand
                                                                   "length")
                                                                  (("1"
                                                                    (case-replace
                                                                     "i=0")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case-replace
                                                                         "i=1")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (expand
                                                                             "nth")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (expand
                                                               "not_in_map")
                                                              (("2"
                                                                (inst-cp
                                                                 -1
                                                                 "0")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "1")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (eval-formula)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (eval-formula)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide -1)
                                                    (("3"
                                                      (expand
                                                       "mapexpr_inj")
                                                      (("3"
                                                        (skeep
                                                         :preds?
                                                         t)
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (expand
                                                             "length")
                                                            (("3"
                                                              (expand
                                                               "length")
                                                              (("3"
                                                                (case-replace
                                                                 "i=0")
                                                                (("1"
                                                                  (case-replace
                                                                   "j=1")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (HP type-decl nil HP_adt nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (val const-decl "real" hp_def nil)
    (length_singleton formula-decl nil more_list_props structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (iterate_left const-decl "T" for_iterate structures)
    (forall_and_below formula-decl nil for_examples structures)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   nil))
 (dl_sub_allruns_assign0_x_eq_y_TCC1 0
  (dl_sub_allruns_assign0_x_eq_y_TCC2-1 nil 3798396615
   ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (HP type-decl nil HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (dl_sub_allruns_assign0_x_eq_y subtype
    "(: (substitution.y, substitution.SUB_Re(substitution.sigma)(substitution.rey)) :)"
    "Assigns")))
 (dl_sub_allruns_assign0_x_eq_y_TCC2 0
  (dl_sub_allruns_assign0_x_eq_y_TCC3-1 nil 3798396615
   ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (HP type-decl nil HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (dl_sub_allruns_assign0_x_eq_y subtype "substitution.sigma"
    "Substitution")))
 (dl_sub_allruns_assign0_x_eq_y 0
  (dl_sub_allruns_assign0_x_eq_y-1 nil 3798396615
   (""
    (deftactic in_map (fnum)
     (with-fresh-labels ((l fnum))
      (then (unroll l) (repeat (expand "nth" l)))))
    ((""
      (deftactic not_in_map (&optional (fnum 1) (idx 0))
       (with-fresh-names ((nm))
        (let ((casestr (format nil "~a = ~a" nm idx)))
          (then (expand "not_in_map" fnum)
           (skolem fnum nm :skolem-typepreds? t)
           (repeat (expand "length" fnum))
           (spread (case-replace casestr)
            ((then (repeat (expand "nth")) (assert)) (assert)))))))
      ((""
        (deftactic inst_not_in_map (fnum var)
         (spread (inst-cp fnum var) ((skip) (not_in_map))))
        (("" (skeep)
          (("" (beta)
            (("" (flatten)
              (("" (decompose-equality 1)
                (("" (iff)
                  (("" (split)
                    (("1" (flatten)
                      (("1" (expand "ALLRUNS")
                        (("1" (skeep)
                          (("1" (expand "SUB")
                            (("1" (expand "SUB_Re")
                              (("1"
                                (expand "assign_sub")
                                (("1"
                                  (expand "assign_env")
                                  (("1"
                                    (expand "assign_env")
                                    (("1"
                                      (expand "semantic_rel" -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (in_map -2)
                                          (("1"
                                            (inst -1 "envo")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "semantic_rel")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (not_in_map)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (skeep :preds? t)
                                                    (("2"
                                                      (expand
                                                       "not_in_map")
                                                      (("2"
                                                        (inst -1 "0")
                                                        (("2"
                                                          (expand
                                                           "nth")
                                                          (("2"
                                                            (insteep)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (not_in_map)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "SUB")
                        (("2" (expand "ALLRUNS")
                          (("2" (skeep)
                            (("2" (expand "assign_sub")
                              (("2"
                                (expand "SUB_Re")
                                (("2"
                                  (expand "assign_sub")
                                  (("2"
                                    (expand "assign_env")
                                    (("2"
                                      (expand "assign_env")
                                      (("2"
                                        (expand "semantic_rel" -2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (in_map -2)
                                            (("2"
                                              (insteep)
                                              (("2"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (expand
                                                   "semantic_rel")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (not_in_map)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (skeep :preds? t)
                                                      (("2"
                                                        (expand
                                                         "not_in_map")
                                                        (("2"
                                                          (inst -1 "0")
                                                          (("2"
                                                            (expand
                                                             "nth")
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "i")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (not_in_map)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (length_singleton formula-decl nil more_list_props structures)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (HP type-decl nil HP_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil))
 (dl_sub_forall 0
  (dl_sub_forall-1 nil 3798033826
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (QBoolExpr type-eq-decl nil hp_def nil)
    (DLFORALL const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_sub_exists 0
  (dl_sub_exists-1 nil 3798033833
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (QBoolExpr type-eq-decl nil hp_def nil)
    (DLEXISTS const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak)))