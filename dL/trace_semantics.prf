(trace_semantics
 (wf_trace?_TCC1 0
  (wf_trace?_TCC1-1 nil 3888662962 ("" (assert) nil nil) nil nil
   (wf_trace? subtype "trace_semantics.i"
    "below[length[TraceState](trace)]")))
 (finite_trace?_TCC1 0
  (finite_trace?_TCC1-1 nil 3791212029
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (finite_trace? subtype "trace_semantics.trace"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (wf_append 0
  (wf_append-1 nil 3889824595
   ("" (skeep)
    (("" (typepred "trace1")
      (("" (typepred "trace2")
        (("" (expand "wf_trace?")
          (("" (flatten)
            (("" (case "cdr(trace2) = null")
              (("1" (replace -1)
                (("1" (rewrite "append_null_right")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst -5 "i")
                        (("1" (assert) nil nil)
                         ("2" (typepred "i")
                          (("2" (replace -2)
                            (("2" (rewrite "append_null_right") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (grind) nil nil)
                 ("2" (use "car_append[TraceState]")
                  (("2" (replace -1) (("2" (propax) nil nil)) nil))
                  nil)
                 ("3" (skeep)
                  (("3" (lemma "nth_append[TraceState]")
                    (("3" (inst -1 "trace1" "cdr(trace2)" "i")
                      (("3" (split)
                        (("1" (assert)
                          (("1" (replace -1 :hide? T)
                            (("1" (lift-if)
                              (("1"
                                (inst -4 "i")
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (split)
                                    (("1" (flatten) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -2
                                           "i - length(trace1)+1")
                                          (("1"
                                            (hide-all-but
                                             (2 4 -2 5 -3 -1))
                                            (("1"
                                              (expand "nth" -)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "i")
                                            (("2"
                                              (use
                                               "length_append[TraceState]")
                                              (("2"
                                                (replace -1 :hide? T)
                                                (("2"
                                                  (expand
                                                   "length"
                                                   -1
                                                   2)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 -1))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (case
                                     "i = length[TraceState](trace1) - 1")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -3 "0")
                                          (("1"
                                            (expand "nth" -3)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (inst
                                         -2
                                         "i - length(trace1) + 1")
                                        (("1"
                                          (expand "nth" -2)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (typepred "i")
                                          (("2"
                                            (use
                                             "length_append[TraceState]")
                                            (("2"
                                              (replace -1 :hide? T)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "i")
                          (("2" (use "length_append[TraceState]")
                            (("2" (replace -1 :hide? T)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append_null_right formula-decl nil more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil) nil nil
    (below type-eq-decl nil naturalnumbers nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (length_append formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    nil (nth_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (last const-decl "T" more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (wf_append_finite 0
  (wf_append_finite-1 nil 3896947009
   ("" (skeep)
    (("" (typepred "trace1")
      (("" (typepred "trace2")
        (("" (expand "wf_trace?")
          (("" (expand "finite_trace?")
            (("" (expand "last")
              (("" (flatten)
                (("" (split 3)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (skeep)
                    (("3" (lemma "nth_append[TraceState]")
                      (("3" (inst?)
                        (("3" (assert)
                          (("3" (lemma "length_append[TraceState]")
                            (("3" (inst?)
                              (("3"
                                (assert)
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (case "i = length(trace1)-1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (inst -7 "i")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (typepred "i")
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (inst
                                               -5
                                               "i - length(trace1)")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (last const-decl "T" more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil
    (length_append formula-decl nil list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (init_env_TCC1 0
  (init_env_TCC1-1 nil 3896265592 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil))
   nil
   (init_env subtype
    "list_adt[TraceState_adt.TraceState].car(trace_semantics.trace)"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (final_env_TCC1 0
  (final_env_TCC1-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last const-decl "T" more_list_props structures))
   nil
   (final_env subtype
    "more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace)"
    "(TraceState_adt.state_diff?)")))
 (final_env_TCC2 0
  (final_env_TCC2-1 nil 3892812644
   ("" (skeep)
    (("" (typepred "D(last[TraceState](trace))")
      (("" (skeep)
        (("" (replace -2)
          (("" (expand "closed_interval?")
            (("" (inst 2 "0" "b") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    nil (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil)
   nil
   (final_env subtype
    "TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace))"
    "(interval_def.closed_interval?)")))
 (trace_semantic_rel_TCC1 0
  (trace_semantic_rel_TCC2-1 nil 3790681048 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC2 0
  (trace_semantic_rel_TCC5-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC3 0
  (trace_semantic_rel_TCC5-1 nil 3896265592 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.env"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (trace_semantic_rel_TCC4 0
  (trace_semantic_rel_TCC8-1 nil 3790681048 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (odes adt-accessor-decl "[(diff?) -> ODEs]" HP_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (nth def-decl "T" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC5 0
  (trace_semantic_rel_TCC7-1 nil 3888662962 ("" (subtype-tcc) nil nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "interval_def.hp(0)" "(hp_expr.dd?)")))
 (trace_semantic_rel_TCC6 0
  (trace_semantic_rel_TCC8-1 nil 3896265592 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.env"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (trace_semantic_rel_TCC7 0
  (trace_semantic_rel_TCC12-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (HP type-decl nil HP_adt nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (odes adt-accessor-decl "[(diff?) -> ODEs]" HP_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC8 0
  (trace_semantic_rel_TCC4-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC9 0
  (trace_semantic_rel_TCC13-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC10 0
  (trace_semantic_rel_TCC10-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC11 0
  (trace_semantic_rel_TCC16-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC12 0
  (trace_semantic_rel_TCC21-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC13 0
  (trace_semantic_rel_TCC17-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC14 0
  (trace_semantic_rel_TCC18-1 nil 3888662962 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC15 0
  (trace_semantic_rel_TCC23-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC16 0
  (trace_semantic_rel_TCC24-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantics_correct_assign 0
  (trace_semantics_correct_assign-1 nil 3899811609
   ("" (skeep)
    (("" (skoletin)
      (("" (skoletin)
        (("" (replace -2 :hide? true)
          (("" (replace -1 :hide? true)
            (("" (flatten)
              (("" (expand "semantic_rel")
                (("" (expand "trace_semantic_rel")
                  (("" (flatten)
                    (("" (split)
                      (("1" (skeep)
                        (("1" (inst -4 "i")
                          (("1" (assert)
                            (("1" (expand "init_env")
                              (("1"
                                (expand "final_env")
                                (("1"
                                  (expand "last")
                                  (("1"
                                    (replace -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst -5 "i")
                          (("2" (expand "final_env")
                            (("2" (expand "init_env")
                              (("2"
                                (expand "last")
                                (("2"
                                  (replace -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (HP type-decl nil HP_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (last const-decl "T" more_list_props structures)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_correct_diff 0
  (trace_semantics_correct_diff-1 nil 3899811930
   ("" (skeep*)
    (("" (skoletin)
      (("" (skoletin)
        (("" (replace -1 :hide? t)
          (("" (replace -1 :hide? t)
            (("" (flatten)
              (("" (expand "semantic_rel")
                (("" (expand "trace_semantic_rel")
                  (("" (flatten)
                    (("" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "init_env")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "final_env")
                                  (("1"
                                    (expand "last")
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "car(trace) = last(trace)")
                              (("1"
                                (expand "init_env")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "final_env")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 2 "D(car(trace))")
                                          (("1"
                                            (expand
                                             "semantic_rel_diff")
                                            (("1"
                                              (inst
                                               2
                                               "max_ci(D(last(trace)))")
                                              (("1"
                                                (inst 2 "fs")
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -4 "t")
                                                        (("1"
                                                          (typepred
                                                           "env")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "env_at_t(odes, fs, s0(last(trace)))(t)")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "env")
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "D(last[TraceState](trace))")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand
                                                 "closed_interval?")
                                                (("3"
                                                  (typepred
                                                   "D(last[TraceState](trace))")
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst 1 "0" "b")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (1 -3))
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (hide-all-but (-1 -4))
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (flatten)
                            (("3" (typepred "trace")
                              (("3"
                                (expand "finite_trace?")
                                (("3"
                                  (case "car(trace) = last(trace)")
                                  (("1"
                                    (replace -1)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace")
                        (("2" (flatten)
                          (("2" (expand "finite_trace?")
                            (("2" (hide-all-but (-5 -3 -2))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (HP type-decl nil HP_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    nil (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil) nil nil
    (<= const-decl "bool" reals nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (env_at_t? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    nil
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_correct_any 0
  (trace_semantics_correct_any-1 nil 3900062811
   ("" (skeep*)
    (("" (skoletin)
      (("" (skoletin)
        (("" (replace -1 :hide? T)
          (("" (replace -1 :hide? T)
            (("" (flatten)
              (("" (expand "semantic_rel")
                (("" (expand "trace_semantic_rel")
                  (("" (flatten)
                    (("" (skeep) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (ANY adt-constructor-decl "[dLVar -> (any?)]" HP_adt nil)
    (any? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (dLVar type-decl nil hp_def nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (HP type-decl nil HP_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (last const-decl "T" more_list_props structures)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_correct_test 0
  (trace_semantics_correct_test-1 nil 3900071207
   ("" (skeep*)
    (("" (skoletin)
      (("" (skoletin)
        (("" (replace -1 :hide? T)
          (("" (replace -1 :hide? T)
            (("" (flatten)
              (("" (expand "trace_semantic_rel")
                (("" (expand "semantic_rel")
                  (("" (assert)
                    (("" (split)
                      (("1" (flatten)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (typepred "trace")
                          (("2" (expand "finite_trace?")
                            (("2" (expand "wf_trace?")
                              (("2"
                                (flatten)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (HP type-decl nil HP_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_correct_seq 0
  (trace_semantics_correct_seq-1 nil 3900071304
   ("" (skeep*)
    (("" (skoletin)
      (("" (skoletin)
        (("" (replace -1 :hide? t)
          (("" (replace -1 :hide? t)
            (("" (flatten)
              (("" (expand "semantic_rel" 1)
                (("" (expand "trace_semantic_rel" -1)
                  (("" (split)
                    (("1" (skeep)
                      (("1" (inst -6 "trace1")
                        (("1" (beta)
                          (("1" (inst -7 "trace2")
                            (("1" (assert)
                              (("1"
                                (inst 1 "final_env(trace1)")
                                (("1"
                                  (replace -5 :hide? T)
                                  (("1"
                                    (split)
                                    (("1"
                                      (hide -4 -6)
                                      (("1"
                                        (expand "init_env")
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite
                                               "car_append[TraceState]")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred "trace1")
                                                (("2"
                                                  (expand "wf_trace?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (rewrite
                                               "car_append[TraceState]")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred "trace1")
                                                (("2"
                                                  (expand "wf_trace?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -5)
                                      (("2"
                                        (expand "final_env")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite
                                                       "last_append[TraceState]")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "trace2")
                                                        (("2"
                                                          (expand
                                                           "wf_trace?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "last_append[TraceState]")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "trace2")
                                                        (("2"
                                                          (expand
                                                           "wf_trace?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "last_append[TraceState]")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "trace2")
                                                    (("2"
                                                      (expand
                                                       "wf_trace?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "trace")
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (replace -7)
                                  (("2"
                                    (rewrite "last_append[TraceState]")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "trace")
                      (("2" (expand "finite_trace?")
                        (("2" (flatten)
                          (("2" (hide-all-but (-2 -3))
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (HP type-decl nil HP_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (last_append formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_append formula-decl nil more_list_props structures) nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_correct_union 0
  (trace_semantics_correct_union-1 nil 3900760304
   ("" (skeep*)
    (("" (beta)
      (("" (flatten)
        (("" (expand "semantic_rel" 1)
          (("" (flatten)
            (("" (expand "trace_semantic_rel" -3)
              (("" (split)
                (("1" (inst -2 "trace") (("1" (assert) nil nil)) nil)
                 ("2" (inst -3 "trace") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_correct_star 0
  (trace_semantics_correct_star-1 nil 3901397779
   ("" (skeep*)
    (("" (lemma "trace_semantic_rel_induction")
      ((""
        (inst -1
         ("LAMBDA(hp:HP)(trace:Trace): finite_trace?(trace) IMPLIES EXISTS (i: nat): semantic_rel_bounded_star(i)(hp )(init_env(trace))(final_env(trace))"))
        (("" (split)
          (("1" (inst -1 "STAR(hp)" "trace") (("1" (assert) nil nil))
            nil)
           ("2" (skeep*)
            (("2" (split)
              (("1" (flatten)
                (("1" (inst 1 "0")
                  (("1" (expand "semantic_rel_bounded_star" 1)
                    (("1" (assert)
                      (("1" (lemma "trace_semantics_correct_assign")
                        (("1" (inst -1 "trace_1" "assigns(hp_1)")
                          (("1" (beta)
                            (("1" (use "HP_ASSIGN_eta")
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "trace_semantic_rel" 1)
                                    (("1"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst 1 "0")
                (("2" (expand "semantic_rel_bounded_star")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (lemma "trace_semantics_correct_diff")
                          (("2"
                            (inst -1 "trace_1" "odes(hp_1)" "be(hp_1)")
                            (("2" (beta)
                              (("2"
                                (use "HP_DIFF_eta")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "trace_semantic_rel" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (flatten)
                (("3" (inst 1 "0")
                  (("3" (expand "semantic_rel_bounded_star" 1)
                    (("3" (assert)
                      (("3" (lemma "trace_semantics_correct_any")
                        (("3" (inst -1 "trace_1" "anyvar(hp_1)")
                          (("3" (beta)
                            (("3" (use "HP_ANY_eta")
                              (("3"
                                (replace -1)
                                (("3"
                                  (expand "semantic_rel" 1)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (expand "trace_semantic_rel" 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (flatten)
                (("4" (inst 1 "0")
                  (("4" (expand "semantic_rel_bounded_star" 1)
                    (("4" (assert)
                      (("4" (lemma "trace_semantics_correct_test")
                        (("4" (inst -1 "trace_1" "be(hp_1)")
                          (("4" (beta)
                            (("4" (use "HP_TEST_eta")
                              (("4"
                                (replace -1)
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand "trace_semantic_rel" 1)
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (flatten)
                (("5" (hide -5 -6)
                  (("5" (split -2)
                    (("1" (skeep)
                      (("1" (assert)
                        (("1" (skolem -2 "i1")
                          (("1" (split)
                            (("1" (skolem -1 "i2")
                              (("1"
                                (inst 1 "max(i1,i2)")
                                (("1"
                                  (expand
                                   "semantic_rel_bounded_star"
                                   1)
                                  (("1"
                                    (inst 1 "final_env(trace1)")
                                    (("1"
                                      (split)
                                      (("1"
                                        (lemma
                                         "semantic_rel_bounded_star_inc")
                                        (("1"
                                          (inst
                                           -1
                                           "stm1(hp_1)"
                                           "init_env(trace1)"
                                           "final_env(trace1)"
                                           "i1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -1 "max(i1,i2)")
                                              (("1"
                                                (case
                                                 "init_env(trace_1) = init_env(trace1)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 -8))
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (expand
                                                       "init_env")
                                                      (("2"
                                                        (use
                                                         "car_append[TraceState]")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "trace1")
                                                          (("2"
                                                            (expand
                                                             "wf_trace?")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "semantic_rel_bounded_star_inc")
                                        (("2"
                                          (inst
                                           -1
                                           "stm2(hp_1)"
                                           "init_env(trace2)"
                                           "final_env(trace2)"
                                           "i2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -1 "max(i1,i2)")
                                              (("2"
                                                (replace -7)
                                                (("2"
                                                  (case
                                                   "final_env(trace2) = final_env(trace_1)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 -8))
                                                    (("2"
                                                      (expand
                                                       "final_env")
                                                      (("2"
                                                        (use
                                                         "last_append[TraceState]")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "trace2")
                                                          (("2"
                                                            (expand
                                                             "wf_trace?")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 -8 -6))
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (use "last_append[TraceState]")
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (replace -1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide-all-but (-1 -5))
                        (("2" (expand "finite_trace?")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (flatten)
                (("6" (split)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (insteep)
                          (("1" (expand "semantic_rel_bounded_star" 1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (insteep)
                          (("2" (expand "semantic_rel_bounded_star" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("7" (flatten)
                (("7" (split)
                  (("1" (flatten)
                    (("1" (inst 1 "0")
                      (("1" (expand "semantic_rel_bounded_star" 1)
                        (("1" (assert)
                          (("1" (hide-all-but (-1 -2 -4 1))
                            (("1" (expand "init_env")
                              (("1"
                                (expand "final_env")
                                (("1"
                                  (case "car(trace_1)=last(trace_1)")
                                  (("1"
                                    (replace -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (1 -1))
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (typepred "trace_1")
                                    (("3"
                                      (expand "wf_trace?")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "i+1")
                          (("2" (expand "semantic_rel_bounded_star" 1)
                            (("2" (flatten)
                              (("2"
                                (expand "semantic_rel_bounded_star" -2)
                                (("2"
                                  (use "HP_STAR_eta")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst 2 "env")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (use
                                             "bounded_implies_semantic_rel")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trace_semantic_rel_induction formula-decl nil trace_semantics nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (assigns adt-accessor-decl "[(assign?) -> Assigns]" HP_adt nil)
    (HP_ASSIGN_eta formula-decl nil HP_adt nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (trace_semantics_correct_assign formula-decl nil trace_semantics
     nil)
    (trace_semantics_correct_diff formula-decl nil trace_semantics nil)
    (HP_DIFF_eta formula-decl nil HP_adt nil)
    (be shared-adt-accessor-decl
     "[{x: HP | diff?(x) OR test?(x)} -> BoolExpr]" HP_adt nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (odes adt-accessor-decl "[(diff?) -> ODEs]" HP_adt nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (anyvar adt-accessor-decl "[(any?) -> dLVar]" HP_adt nil)
    (any? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (HP_ANY_eta formula-decl nil HP_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (trace_semantics_correct_any formula-decl nil trace_semantics nil)
    (HP_TEST_eta formula-decl nil HP_adt nil)
    (trace_semantics_correct_test formula-decl nil trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace1 skolem-const-decl "Trace" trace_semantics nil)
    (car_append formula-decl nil more_list_props structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (semantic_rel_bounded_star_inc formula-decl nil
     bounded_star_semantics nil)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (trace2 skolem-const-decl "Trace" trace_semantics nil)
    (last_append formula-decl nil more_list_props structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (HP_STAR_eta formula-decl nil HP_adt nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (bounded_implies_semantic_rel formula-decl nil
     bounded_star_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_correct 0
  (trace_semantics_correct-1 nil 3901637860
   ("" (induct "hp")
    (("1" (beta) (("1" (propax) nil nil)) nil)
     ("2" (use "trace_semantics_correct_assign")
      (("2" (skeep)
        (("2" (beta)
          (("2" (skeep)
            (("2" (inst -1 "trace" "ASSIGN1_var")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (use "trace_semantics_correct_diff")
      (("3" (skeep*)
        (("3" (inst -1 "trace" "DIFF1_var" "DIFF2_var")
          (("3" (beta) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (use "trace_semantics_correct_test")
      (("4" (skeep*)
        (("4" (inst -1 "trace" "TEST1_var")
          (("4" (beta) (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (use "trace_semantics_correct_seq")
      (("5" (skeep*)
        (("5" (inst -1 "SEQ1_var" "SEQ2_var")
          (("5" (split)
            (("1" (inst -1 "trace")
              (("1" (beta) (("1" (assert) nil nil)) nil)) nil)
             ("2" (beta) (("2" (propax) nil nil)) nil)
             ("3" (beta) (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (use "trace_semantics_correct_union")
      (("6" (skeep)
        (("6" (inst -1 "UNION1_var" "UNION2_var")
          (("6" (assert)
            (("6" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (use "trace_semantics_correct_star")
      (("7" (skeep*)
        (("7" (inst -1 "STAR1_var")
          (("7" (split)
            (("1" (inst -1 "trace")
              (("1" (assert)
                (("1" (skeep)
                  (("1" (use "bounded_implies_semantic_rel")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (use "trace_semantics_correct_any")
      (("8" (skeep*)
        (("8" (inst -1 "trace" "ANY1_var")
          (("8" (beta) (("8" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((trace_semantics_correct_any formula-decl nil trace_semantics nil)
    (trace_semantics_correct_star formula-decl nil trace_semantics nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (bounded_implies_semantic_rel formula-decl nil
     bounded_star_semantics nil)
    (trace_semantics_correct_union formula-decl nil trace_semantics
     nil)
    (trace_semantics_correct_seq formula-decl nil trace_semantics nil)
    (trace_semantics_correct_test formula-decl nil trace_semantics nil)
    (trace_semantics_correct_diff formula-decl nil trace_semantics nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (TRUE const-decl "bool" booleans nil)
    (trace_semantics_correct_assign formula-decl nil trace_semantics
     nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (HP_induction formula-decl nil HP_adt nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HP type-decl nil HP_adt nil))
   shostak))
 (trace_semantics_complete_assign 0
  (trace_semantics_complete_assign-1 nil 3888957866
   ("" (skeep*)
    (("" (inst 1 "(: STATE(envi), STATE(envo) :)")
      (("1" (split)
        (("1" (expand "init_env") (("1" (propax) nil nil)) nil)
         ("2" (expand "final_env") (("2" (grind) nil nil)) nil)
         ("3" (expand "semantic_rel")
          (("3" (expand "trace_semantic_rel")
            (("3" (flatten)
              (("3" (split)
                (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil) nil nil
    (Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (last const-decl "T" more_list_props structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_complete_diff 0
  (trace_semantics_complete_diff-1 nil 3889102892
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (split)
        (("1" (flatten)
          (("1" (inst 1 "(: STATE(envi) :)")
            (("1" (expand "init_env")
              (("1" (expand "final_env")
                (("1" (expand "last")
                  (("1" (expand "nth")
                    (("1" (expand "length")
                      (("1" (expand "length")
                        (("1" (assert)
                          (("1" (expand "trace_semantic_rel")
                            (("1" (expand "length")
                              (("1"
                                (expand "length")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (expand "semantic_rel_diff")
            (("2" (skeep)
              (("2" (skeep)
                (("2" (case "r=0")
                  (("1" (replace -1)
                    (("1" (inst 1 "(: STATE(envi) :)")
                      (("1" (expand "init_env")
                        (("1" (expand "final_env")
                          (("1" (expand "last")
                            (("1" (expand "nth")
                              (("1"
                                (expand "length")
                                (("1"
                                  (expand "length")
                                  (("1"
                                    (expand "trace_semantic_rel")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -3 "0" "envi")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "fs")
                                            (("1"
                                              (expand
                                               "solution_odes_u?")
                                              (("1"
                                                (expand
                                                 "solution_odes?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (typepred
                                                     "env_at_t(odes, fs, envi)(0)")
                                                    (("1"
                                                      (inst-cp
                                                       -2
                                                       "envi")
                                                      (("1"
                                                        (inst-cp
                                                         -2
                                                         "envo")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "fs")
                                          (("2"
                                            (expand "solution_odes_u?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "solution_odes?")
                                                (("2"
                                                  (flatten)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "wf_trace?")
                        (("2" (expand "finite_trace?")
                          (("2" (expand "last")
                            (("2" (expand "nth")
                              (("2"
                                (assert)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "i")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (inst 2
                     "(: STATE_DIFF(closed_interval(0,r), envi, LAMBDA (r1:closed_interval(0,r)): env_at_t(odes,fs,envi)(r1)) :)")
                    (("1" (expand "init_env")
                      (("1" (expand "final_env")
                        (("1" (expand "last")
                          (("1" (expand "nth")
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1"
                                  (use "db_max")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (typepred
                                       "env_at_t(odes,
 fs, envi)(r)")
                                      (("1"
                                        (inst -2 "envo")
                                        (("1"
                                          (replace -2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "r")
                                    (("2"
                                      (typepred "D")
                                      (("2"
                                        (expand "dd?")
                                        (("2"
                                          (split)
                                          (("1"
                                            (skeep)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "trace_semantic_rel")
                                  (("2"
                                    (expand "length")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (inst 1 "fs")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split)
                                            (("1"
                                              (decompose-equality)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (typepred "r")
                                                (("2"
                                                  (typepred "D")
                                                  (("2"
                                                    (expand "dd?")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (typepred "t")
                                                (("2"
                                                  (inst
                                                   -3
                                                   "t"
                                                   "env_at_t(odes, fs, envi)(t)")
                                                  (("2"
                                                    (expand
                                                     "closed_interval")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "D")
                                                            (("2"
                                                              (expand
                                                               "dd?")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (expand
                                                                     "closed_interval")
                                                                    (("1"
                                                                      (typepred
                                                                       "r")
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "hp")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "fs")
                                          (("2"
                                            (lemma
                                             "solution_odes_subset")
                                            (("2"
                                              (inst
                                               -1
                                               "D"
                                               "odes"
                                               "envi"
                                               "fs"
                                               "closed_interval(0, r)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred "r")
                                                (("2"
                                                  (typepred "D")
                                                  (("2"
                                                    (expand "dd?")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (skeep*)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (expand
                                                             "closed_interval")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "closed_interval")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "hp")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (split)
                      (("1" (expand "wf_trace?")
                        (("1" (skeep)
                          (("1" (typepred "i")
                            (("1" (expand "length")
                              (("1"
                                (expand "length")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "finite_trace?")
                        (("2" (flatten)
                          (("2" (hide 1)
                            (("2" (expand "last")
                              (("2"
                                (expand "length")
                                (("2"
                                  (expand "length")
                                  (("2"
                                    (expand "nth")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "env_at_t(odes, fs, envi)(0)")
                      (("3" (typepred "fs")
                        (("3" (expand "solution_odes_u?")
                          (("3" (expand "solution_odes?")
                            (("3" (flatten)
                              (("3" (inst -6 "envi") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "closed_interval")
                      (("4" (propax) nil nil)) nil)
                     ("5" (typepred "r")
                      (("5" (typepred "D")
                        (("5" (expand "dd?")
                          (("5" (split -1)
                            (("1" (skeep)
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "closed_interval" -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst 1 "r")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst 1 "r")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (expand "hp")
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst 1 "r")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 1 "r")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (typepred "r")
                      (("6" (typepred "D")
                        (("6" (expand "dd?") (("6" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (dd? const-decl "bool" hp_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length_singleton formula-decl nil more_list_props structures)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (<= const-decl "bool" reals nil) nil nil
    (solution_odes_u? const-decl "bool" hp_expr nil) nil
    (env_at_t? const-decl "bool" hp_expr nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (solution_odes_subset formula-decl nil ODEs_equiv nil) nil
    (/= const-decl "boolean" notequal nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (below type-eq-decl nil nat_types nil)
    (db_max formula-decl nil more_ci_props ODEs)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def ODEs)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (STATE_DIFF adt-constructor-decl
     "[[D: {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)},
  s0: Environment, {b: [(D) -> Environment] | b(0) = s0}] ->
   (state_diff?)]" TraceState_adt nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (IFF const-decl "[bool, bool -> bool]" booleans nil) nil
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil) nil
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (length def-decl "nat" list_props nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_complete_any 0
  (trace_semantics_complete_any-1 nil 3889351265
   ("" (skeep*)
    (("" (inst 1 "(: STATE(envi), STATE(envo) :)")
      (("1" (split)
        (("1" (expand "init_env") (("1" (propax) nil nil)) nil)
         ("2" (expand "final_env") (("2" (grind) nil nil)) nil)
         ("3" (expand "semantic_rel")
          (("3" (expand "trace_semantic_rel")
            (("3" (expand "length")
              (("3" (expand "length")
                (("3" (expand "length")
                  (("3" (split)
                    (("1" (grind) nil nil)
                     ("2" (skeep)
                      (("2" (expand "nth")
                        (("2" (expand "nth")
                          (("2" (insteep) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (envo skolem-const-decl "Environment" trace_semantics nil)
    (envi skolem-const-decl "Environment" trace_semantics nil)
    (Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (last const-decl "T" more_list_props structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_complete_test 0
  (trace_semantics_complete_test-1 nil 3889519796
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (flatten)
        (("" (inst 1 "(:STATE(envi):)")
          (("1" (assert)
            (("1" (expand "init_env")
              (("1" (expand "final_env")
                (("1" (expand "last")
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "nth")
                        (("1" (expand "trace_semantic_rel")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil) nil
    (Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_complete_seq 0
  (trace_semantics_complete_seq-1 nil 3791545264
   ("" (skeep*)
    (("" (expand "semantic_rel" -3)
      (("" (skeep -3)
        (("" (inst -1 "envi" "env")
          (("" (inst -2 "env" "envo")
            (("" (assert)
              (("" (skolem -1 "trace1")
                (("" (skolem -2 "trace2")
                  (("" (flatten)
                    (("" (inst 1 "append(trace1,trace2)")
                      (("1" (split)
                        (("1" (expand "init_env" 1)
                          (("1" (expand "init_env" -1)
                            (("1" (rewrite "car_append[TraceState]")
                              (("1"
                                (typepred "trace1")
                                (("1"
                                  (expand "wf_trace?")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "final_env" 1)
                          (("2" (expand "final_env" -5)
                            (("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (typepred "trace2")
                                (("2"
                                  (expand "wf_trace?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "trace_semantic_rel" 1)
                          (("3" (flatten)
                            (("3" (inst 1 "trace1" "trace2")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (hide (-5 -6 -7 -8 -9 -10 -11 -12))
                            (("2" (split)
                              (("1"
                                (expand "wf_trace?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split)
                                    (("1"
                                      (hide-all-but (1 -1 -4))
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "car_append[TraceState]")
                                      nil
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (lemma
                                         "nth_append[TraceState]")
                                        (("3"
                                          (inst
                                           -1
                                           "trace1"
                                           "trace2"
                                           "i")
                                          (("3"
                                            (typepred "i")
                                            (("3"
                                              (rewrite
                                               "length_append[TraceState]")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (lift-if)
                                                  (("3"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst -8 "i")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "i=length[TraceState](trace1) - 1")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (hide
                                                               1
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "finite_trace?"
                                                                   -8)
                                                                  (("1"
                                                                    (case
                                                                     "last(trace1) = nth(trace1, length[TraceState](trace1) - 1)")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        -7))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "i - length(trace1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "finite_trace?")
                                (("2"
                                  (rewrite "last_append[TraceState]")
                                  (("2"
                                    (expand "wf_trace?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (append def-decl "list[T]" list_props nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil) nil nil
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (last_append formula-decl nil more_list_props structures)
    (init_env const-decl "Environment" trace_semantics nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_append formula-decl nil more_list_props structures)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (last const-decl "T" more_list_props structures) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (trace_semantics_complete_union 0
  (trace_semantics_complete_union-1 nil 3889103604
   ("" (skeep*)
    (("" (expand "semantic_rel" -3)
      (("" (split)
        (("1" (inst -2 "envi" "envo")
          (("1" (assert)
            (("1" (skeep)
              (("1" (inst 1 "trace")
                (("1" (assert)
                  (("1" (expand "trace_semantic_rel" 1)
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "trace_semantic_rel" 1)
          (("2" (inst -3 "envi" "envo")
            (("2" (assert)
              (("2" (skeep)
                (("2" (inst 1 "trace") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_complete_star 0
  (trace_semantics_complete_star-1 nil 3889783976
   ("" (skeep)
    (("" (induct "i")
      (("1" (skeep)
        (("1" (expand "semantic_rel_bounded_star")
          (("1" (inst 1 "(:STATE(envi):)")
            (("1" (assert)
              (("1" (replace -1)
                (("1" (split)
                  (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                   ("3" (expand "trace_semantic_rel" 1)
                    (("3" (flatten) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2" (expand "semantic_rel_bounded_star" -2)
          (("2" (split -2)
            (("1" (inst 1 "(:STATE(envi):)")
              (("1" (replace -1)
                (("1" (assert)
                  (("1" (split)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                     ("3" (expand "trace_semantic_rel" 1)
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (skeep)
              (("2" (inst -3 "env" "envo")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -6 "envi" "env")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "append(trace!1,trace)")
                            (("1" (split)
                              (("1"
                                (expand "init_env")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite
                                         "car_append[TraceState]")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "trace!1")
                                          (("2"
                                            (expand "wf_trace?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (rewrite
                                         "car_append[TraceState]")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "trace!1")
                                          (("2"
                                            (expand "wf_trace?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "final_env")
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "last_append")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "trace")
                                          (("2"
                                            (expand "wf_trace?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (rewrite "last_append")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "trace")
                                          (("2"
                                            (expand "wf_trace?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "trace_semantic_rel" 1)
                                (("3"
                                  (flatten)
                                  (("3"
                                    (expand "trace_semantic_rel" 2)
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (inst 2 "trace!1" "trace")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred "trace")
                                (("2"
                                  (typepred "trace!1")
                                  (("2"
                                    (split)
                                    (("1"
                                      (expand "wf_trace?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1"
                                            (hide-all-but (1 -1 -4))
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "car_append[TraceState]")
                                            nil
                                            nil)
                                           ("3"
                                            (lemma
                                             "nth_append[TraceState]")
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (inst
                                                 -1
                                                 "trace!1"
                                                 "trace"
                                                 "i")
                                                (("3"
                                                  (typepred "i")
                                                  (("3"
                                                    (rewrite
                                                     "length_append[TraceState]")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (replace
                                                         -2
                                                         :hide?
                                                         T)
                                                        (("3"
                                                          (lift-if)
                                                          (("3"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "i")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "i =  length[TraceState](trace!1) - 1")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         1
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "finite_trace?")
                                                                          (("1"
                                                                            (case
                                                                             "last(trace!1) = nth(trace!1, length[TraceState](trace!1) - 1)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                -3))
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -6
                                                                   "i - length(trace!1)")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "finite_trace?")
                                      (("2"
                                        (rewrite
                                         "last_append[TraceState]")
                                        (("2"
                                          (expand "wf_trace?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (Environment type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (HP type-decl nil HP_adt nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures) nil
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last_append formula-decl nil more_list_props structures) nil nil
    (append def-decl "list[T]" list_props nil) nil
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_complete 0
  (trace_semantics_complete-4 "" 3791650339
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (use "trace_semantics_complete_assign")
        (("1" (grind) nil nil)) nil))
      nil)
     ("2" (use "trace_semantics_complete_diff") (("2" (grind) nil nil))
      nil)
     ("3" (use "trace_semantics_complete_test") (("3" (grind) nil nil))
      nil)
     ("4" (use "trace_semantics_complete_seq") nil nil)
     ("5" (use "trace_semantics_complete_union") nil nil)
     ("6" (use "trace_semantics_complete_star")
      (("6" (skeep*)
        (("6" (inst -1 "STAR1_var")
          (("6" (split)
            (("1" (hide -2)
              (("1" (use "semantic_rel_implies_bounded")
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst -2 "envi" "envo" "i")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (use "trace_semantics_complete_any")
      (("7" (skeep*)
        (("7" (inst -1 "envi" "envo" "ANY1_var")
          (("7" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((trace_semantics_complete_any formula-decl nil trace_semantics nil)
    (trace_semantics_complete_star formula-decl nil trace_semantics
     nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (semantic_rel_implies_bounded formula-decl nil
     bounded_star_semantics nil)
    (trace_semantics_complete_union formula-decl nil trace_semantics
     nil)
    (trace_semantics_complete_seq formula-decl nil trace_semantics nil)
    (trace_semantics_complete_test formula-decl nil trace_semantics
     nil)
    (trace_semantics_complete_diff formula-decl nil trace_semantics
     nil)
    (ODEs type-eq-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (DIFF1_var!1 skolem-const-decl "ODEs" trace_semantics nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nth def-decl "T" list_props nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (last const-decl "T" more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (trace_semantics_complete_assign formula-decl nil trace_semantics
     nil)
    (HP_induction formula-decl nil HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HP type-decl nil HP_adt nil))
   shostak)
  (trace_semantics_complete-3 "" 3791309500
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
           ("4" (grind) nil) ("5" (grind) nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (grind) nil) ("4" (grind) nil)
                     ("5" (grind) nil)))))))))))))
         ("2" (expand "wf_trace?") (("2" (grind) nil)))))))
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil) ("2" (grind) nil) ("3" (grind) nil)
           ("4" (grind) nil) ("5" (grind) nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length")
                        (("1" (propax) nil)))))))))
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil)))))))
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil)))))))))))
                                 ("2"
                                  (grind)
                                  nil)))))))))))))))))))))))))
         ("2" (grind) nil)))))
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil) ("2" (grind) nil) ("3" (grind) nil)
               ("4" (grind) nil) ("5" (flatten) (("5" (grind) nil)))
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil)))))))
             ("2" (grind) nil)))))))))
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil) ("2" (grind) nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil)))))))
                                 ("2" (assert) nil)))))
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil)))))
                           ("4" (rewrite "car_append[TraceState]") nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil)))))))))))
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil)))))
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil)
                                   ("2" (propax) nil)
                                   ("3" (propax) nil)
                                   ("4" (propax) nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil)))))))))))))))
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil)))
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil)))))))
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil)))
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil)))))))
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (assert)
                                              nil)))))))))))))))))))))))))))))))))))))))))
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil) ("2" (propax) nil)
                       ("3" (propax) nil) ("4" (propax) nil)
                       ("5" (propax) nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil)))))))))))))
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil) ("2" (propax) nil)
                       ("3" (propax) nil) ("4" (propax) nil)
                       ("5" (propax) nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil)))))))))))))))))))))
     ("6" (skeep*)
      (("6" (expand "semantic_rel" -2)
        (("6" (split)
          (("1" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
               ("4" (grind) nil) ("5" (grind) nil)
               ("6" (expand "trace_semantic_rel" 1)
                (("6" (flatten) (("6" (grind) nil)))))))
             ("2" (grind) nil)))
           ("2" (skip) nil)))))))
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
                 ("4" (grind) nil) ("5" (grind) nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (grind) nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil) ("2" (grind) nil)))))
                     ("5" (skeep 1)
                      (("5" (inst -3 "i")
                        (("5" (grind) nil)))))))))))))
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil))))))))))))))))
    nil)
   nil nil)
  (trace_semantics_complete-2 "" 3791309348
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil)
                     ("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wf_trace?") (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (flatten) (("5" (grind) nil nil)) nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (rewrite "car_append[TraceState]") nil
                            nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (case "envi=envo")
        (("1" (inst 1 "(: STATE(envi) :)")
          (("1" (hide -2)
            (("1" (split)
              (("1" (assert) nil nil) ("2" (assert) nil nil)
               ("3" (assert) (("3" (grind) nil nil)) nil)
               ("4" (assert) nil nil) ("5" (grind) nil nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil)
         ("2" (use "star_gen_seq_io")
          (("1" (assert)
            (("1" (skeep -1)
              (("1" (use "trace_semantics_complete_gen_seq")
                (("1" (split -1)
                  (("1" (inst -1 "envi" "envo" "i")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (insteep 3)
                          (("1" (assert)
                            (("1" (use "star_gen_seq_trace")
                              (("1"
                                (assert)
                                (("1" (inst 1 "i") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("5" (skeep 1)
                      (("5" (inst -3 "i") (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (HP_induction formula-decl nil HP_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (nth_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures))
   shostak)
  (trace_semantics_complete-1 nil 3791034133
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil)
                     ("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wf_trace?") (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (flatten) (("5" (grind) nil nil)) nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (rewrite "car_append[TraceState]") nil
                            nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (expand "semantic_rel" -2)
        (("6" (split)
          (("1" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil)
               ("6" (expand "trace_semantic_rel" 1)
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (skeep)
            (("2" (inst -3 "envi" "envo")
              (("2" (expand "semantic_rel" -2)
                (("2" (split -2)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst 2 "trace")
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (expand "trace_semantic_rel" 1)
                              (("6"
                                (flatten)
                                (("6" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("5" (skeep 1)
                      (("5" (inst -3 "i") (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))