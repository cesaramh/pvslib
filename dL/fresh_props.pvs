fresh_props : THEORY
 % Hello There!
 
%-------------------------------------------------------------------------% 
%-------------------------------------------------------------------------%
%| fresh_props: Many properties of variable 'freshness' that is used     |%
%| in the differential ghost strategy. The idea of freshness is that     |%
%| a particular variable is fresh if it is not used in an expression     |%
%-------------------------------------------------------------------------%
% Created							   Jul 2022
% 								    LW, JTS
% Last Updated							   AUG 2022
%      								    LW, JTS
%-------------------------------------------------------------------------%
%-------------------------------------------------------------------------%

%-----     %
  BEGIN
%     -----%

  IMPORTING bounded_star_semantics
  	  , differentiation
  	  , lnexp@expt
	   
%-------------------------------------------------------------------------
%% Fresh properties for real expressions
%-------------------------------------------------------------------------

  fresh_re_cnst: LEMMA
  FORALL(r:real,i:nat):
  fresh?(cnst(r))(i)

  fresh_re_val: LEMMA
  FORALL(v:dLVar,i:nat | i /=dlvar_index(v)):
  fresh?(val(v))(i)

  fresh_re_sum: LEMMA
  FORALL(re1,re2:RealExpr,i:nat):
  fresh?(re1)(i) AND fresh?(re2)(i)
  IMPLIES
  fresh?(re1+re2)(i)

  fresh_re_minus: LEMMA
  FORALL(re1,re2:RealExpr,i:nat):
  fresh?(re1)(i) AND fresh?(re2)(i)
  IMPLIES
  fresh?(re1-re2)(i)

  fresh_re_prod: LEMMA
  FORALL(re1,re2:RealExpr,i:nat):
  (fresh?(re1)(i) AND fresh?(re2)(i))
  IMPLIES
  fresh?(re1*re2)(i)

  fresh_re_div_safe
  : LEMMA
    FORALL(re1,re2:RealExpr,i:nat)
    : fresh?(re1)(i) AND
      fresh?(re2)(i) 
      IMPLIES fresh?(div_safe_re(re1,re2))(i)

  fresh_re_sqrt_safe
  : LEMMA
    FORALL(re1:RealExpr,i:nat)
    : fresh?(re1)(i) 
      IMPLIES fresh?(sqrt_safe_re(re1))(i)

  fresh_re_pow: LEMMA
  FORALL(re:RealExpr,i:nat, p:nat):
  fresh?(re)(i)
  IMPLIES
  fresh?(re^p)(i)

  fresh_re_exp: LEMMA
  FORALL(re:RealExpr,i:nat, p:nzreal):
  fresh?(re)(i)
  IMPLIES
  fresh?(re ^^ p)(i)

  fresh_re_expt: LEMMA
  FORALL(re:RealExpr,i:nat, p:nzreal):
  fresh?(re)(i)
  IMPLIES
  fresh?(expt(re,p))(i)

%-------------------------------------------------------------------------
%% Not Fresh properties real expression
%-------------------------------------------------------------------------

  not_fresh_re_val: LEMMA
  FORALL(v:dLVar):
  NOT fresh?(val(v))(dlvar_index(v))

%-------------------------------------------------------------------------
%% Fresh properties for bool expressions
%-------------------------------------------------------------------------

  fresh_be_DLTRUE: LEMMA
  FORALL(i:nat):
  fresh?(DLTRUE)(i)

  fresh_be_DLFALSE: LEMMA
  FORALL(i:nat):
  fresh?(DLFALSE)(i)

  fresh_be_eq: LEMMA
  FORALL(re1,re2:RealExpr,i:nat):
  (fresh?(re1)(i) AND fresh?(re2)(i))
  IMPLIES
  fresh?(re1 = re2)(i)

  fresh_be_neq: LEMMA
  FORALL(re1,re2:RealExpr,i:nat):
  (fresh?(re1)(i) AND fresh?(re2)(i))
  IMPLIES
  fresh?(re1 /= re2)(i)

  fresh_be_le: LEMMA
  FORALL(re1,re2:RealExpr,i:nat):
  (fresh?(re1)(i) AND fresh?(re2)(i))
  IMPLIES
  fresh?(re1 <= re2)(i)

  fresh_be_lt: LEMMA
  FORALL(re1,re2:RealExpr,i:nat):
  (fresh?(re1)(i) AND fresh?(re2)(i))
  IMPLIES
  fresh?(re1 < re2)(i)

  fresh_be_ge: LEMMA
  FORALL(re1,re2:RealExpr,i:nat):
  (fresh?(re1)(i) AND fresh?(re2)(i))
  IMPLIES
  fresh?(re1 >= re2)(i)

  fresh_be_gt: LEMMA
  FORALL(re1,re2:RealExpr,i:nat):
  (fresh?(re1)(i) AND fresh?(re2)(i))
  IMPLIES
  fresh?(re1 > re2)(i)

  fresh_be_or: LEMMA
  FORALL(P1,P2:BoolExpr,i:nat):
  (fresh?(P1)(i) AND fresh?(P2)(i))
  IMPLIES
  fresh?(P1 OR P2)(i)

  fresh_be_and: LEMMA
  FORALL(P1,P2:BoolExpr,i:nat):
  (fresh?(P1)(i) AND fresh?(P2)(i))
  IMPLIES
  fresh?(P1 AND P2)(i)

  fresh_be_implies: LEMMA
  FORALL(P1,P2:BoolExpr,i:nat):
  (fresh?(P1)(i) AND fresh?(P2)(i))
  IMPLIES
  fresh?(P1 IMPLIES P2)(i)

  fresh_be_not: LEMMA
  FORALL(P:BoolExpr,i:nat):
  fresh?(P)(i)
  IMPLIES
  fresh?(NOT P)(i)

  fresh_be_IFF: LEMMA
  FORALL(P1,P2:BoolExpr,i:nat):
  (fresh?(P1)(i) AND fresh?(P2)(i))
  IMPLIES
  fresh?(P1 IFF P2)(i)

%%--------------------------------------------
%%Freshness of semantic_rel
%%--------------------------------------------

  fresh_fs_sol: LEMMA
  FORALL(D:(dd?),ode:ODEs,env: Environment,i:nat,r:real, fs:(solution_odes_u?(D, ode, env))):
  fresh_li?(ode)(i) IMPLIES
  solution_odes_u?(D,ode,env WITH [i := r])(fs)

  fresh_bstar_semantic_rel: LEMMA
  FORALL(hp:HP,i,j:nat,envi,envo:Environment,r:real):
  fresh_hp?(hp)(i) AND
  (FORALL(r:real,env1,env2:Environment): semantic_rel(hp)(env1)(env2) IMPLIES
  semantic_rel(hp)(env1 WITH [i := r])(env2 WITH [i := r]))
  AND semantic_rel(BSTAR(hp,j))(envi)(envo)
  IMPLIES
  semantic_rel(BSTAR(hp,j))(envi WITH [ i := r ] )(envo WITH [ i := r])

  fresh_be_semantic_rel: LEMMA
  FORALL(hp:HP,i:nat,envi,envo:Environment,r:real):
  fresh_hp?(hp)(i) AND semantic_rel(hp)(envi)(envo)
  IMPLIES
  semantic_rel(hp)(envi WITH [i := r])(envo WITH [ i:= r ])

  fresh_be_allruns: LEMMA
  FORALL(hp:HP,P:BoolExpr,i:nat):
  (fresh_hp?(hp)(i) AND fresh?(P)(i))
  IMPLIES
  fresh?(ALLRUNS(hp,P))(i)

  fresh_be_allruns_e: LEMMA 
  FORALL(hp:HP,P:BoolExpr,i:nat):
  (fresh_hp?(hp)(i) AND fresh?(P)(i))
  IMPLIES
  fresh?(ALLRUNS_E(hp,P))(i)

  fresh_be_someruns: LEMMA
  FORALL(hp:HP,P:BoolExpr,i:nat):
  (fresh_hp?(hp)(i) AND fresh?(P)(i))
  IMPLIES
  fresh?(SOMERUNS(hp,P))(i)

%-------------------------------------------------------------------------
%% Freshness of quantified bool 
%-------------------------------------------------------------------------

  fresh?(Q:QBoolExpr)(i:nat): bool =
  FORALL(r:real): fresh?(Q(r))(i)

END fresh_props
