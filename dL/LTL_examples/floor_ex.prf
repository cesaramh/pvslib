(floor_ex
 (eventually_not_assign 0
  (eventually_not_assign-1 nil 3904143705
   ("" (rewrite "norm_DLEVENTUALLY")
    (("" (use "dltl_SEQcup_dual")
      (("" (use "dl_cut")
        (("" (assert)
          (("" (hide-all-but 1)
            (("" (rewrite "dltl_ASSIGNcup_dual" :dir rl)
              (("" (dl-hide 2 1)
                (("" (dl-flatten)
                  (("" (dl-hide 2 1)
                    (("" (dl-flatten)
                      (("" (rewrite "SOMERUNS_eq")
                        (("" (rewrite "SOMERUNS_eq")
                          (("" (rewrite "dl_assignd")
                            (("" (dl-assert)
                              ((""
                                (rewrite "dlSequent_equiv")
                                ((""
                                  (expand "dlSequent")
                                  ((""
                                    (skeep)
                                    ((""
                                      (hide -1)
                                      ((""
                                        (inst 1 "0")
                                        ((""
                                          (expand "nth")
                                          ((""
                                            (expand "SOMERUNS")
                                            ((""
                                              (expand "DLNOT")
                                              ((""
                                                (expand "DLOR")
                                                ((""
                                                  (expand "=")
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (expand
                                                       "cnst"
                                                       1
                                                       2)
                                                      ((""
                                                        (case
                                                         "NOT val(x)(env) =5")
                                                        (("1"
                                                          (inst
                                                           2
                                                           "env")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "semantic_rel")
                                                              (("1"
                                                                (expand
                                                                 "DLBOOL")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "val")
                                                          (("2"
                                                            (inst
                                                             1
                                                             "env WITH [x := env(x)+6*(0.1)]")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "semantic_rel")
                                                                (("2"
                                                                  (expand
                                                                   "semantic_rel_diff")
                                                                  (("2"
                                                                    (expand
                                                                     "DLBOOL")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "cnst_lins_sol_u")
                                                                        (("2"
                                                                          (expand
                                                                           "solves_u?")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "DLTRUE"
                                                                             "(: (x, cnst(6)) :)")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "env")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "hp(0)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "1/10"
                                                                                       "LAMBDA (i: below(length((: (x, cnst(6)) :)))): LAMBDA (r: real): Y_sol_ex((: (x, cnst(6)) :))(i)(r)(env)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "env_at_t?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "i_1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "not_in_map")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Y_sol_ex")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "k")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "+")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "*")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "is_cnst?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "nth")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "cnst"
                                                                                                                     1
                                                                                                                     (1
                                                                                                                      2))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "cnst")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "val")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "cnst_lins?")
                                                                                        (("2"
                                                                                          (skeep*)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "i!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "6")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "hp")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "DLBOOL")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "cnst_lins?")
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "mapexpr_inj")
                                                                                    (("1"
                                                                                      (skeep*)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "i")
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "j")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep*)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "6")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_DLEVENTUALLY formula-decl nil temporal_logic dL)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (DLNOT const-decl "bool" bool_expr dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (= const-decl "BoolExpr" bool_expr dL)
    (val const-decl "real" hp_def dL) (x const-decl "nat" floor_ex nil)
    (cnst const-decl "real" hp_def dL)
    (dl_cut formula-decl nil dynamic_logic dL)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt dL)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SOMERUNS_st const-decl "bool" ltl_expr dL)
    (DLOR const-decl "bool" bool_expr dL)
    (normDLEVENTUALLY const-decl "bool" ltl_expr dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SOMERUNS_tr const-decl "bool" ltl_expr dL)
    (TraceBoolExpr type-eq-decl nil ltl_expr dL)
    (Trace type-eq-decl nil trace_semantics dL)
    (wf_trace? const-decl "bool" trace_semantics dL)
    (TraceState type-decl nil TraceState_adt dL)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveR formula-decl nil dynamic_logic dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dl_hideR formula-decl nil dynamic_logic dL)
    (gamma__37 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (delta__38 skolem-const-decl "(cons?)" floor_ex nil)
    (gamma__41 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (delta__42 skolem-const-decl "(cons?)" floor_ex nil)
    (SOMERUNS_eq formula-decl nil ltl_expr dL)
    (dl_assignd formula-decl nil dynamic_logic dL)
    (dlSequent_equiv formula-decl nil dynamic_logic dL)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cnst_lins_sol_u formula-decl nil dl_solution dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MapExprInj type-eq-decl nil hp_def dL)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (hp const-decl "bool" interval_def ODEs)
    (dd? const-decl "bool" hp_expr dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (env_at_t? const-decl "bool" hp_expr dL)
    (not_in_map const-decl "bool" hp_def dL)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (is_cnst? const-decl "bool" dl_solution dL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (solution_odes_u? const-decl "bool" hp_expr dL)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL)
    (env skolem-const-decl "Environment" floor_ex nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (solves_u? const-decl "bool" dl_solution dL)
    (semantic_rel_diff const-decl "bool" hp_expr dL)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nth def-decl "T" list_props nil)
    (dlSequent const-decl "bool" dynamic_logic dL)
    (same_var const-decl "bool" hp_def dL)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(i))(env)}"
     substitution dL)
    (dl_sub_not formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_sub_eq formula-decl nil substitution dL)
    (dl_subre_const formula-decl nil substitution dL)
    (dl_subre_val formula-decl nil substitution dL)
    (dl_false_or formula-decl nil bool_expr dL)
    (SOMERUNS const-decl "bool" bool_expr dL)
    (delta__40 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_orR formula-decl nil dynamic_logic dL)
    (gamma__39 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dltl_ASSIGNcup_dual formula-decl nil temporal_logic dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (HP type-decl nil HP_adt dL) (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (ODEs type-eq-decl nil hp_def dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (TRUE const-decl "bool" booleans nil)
    (Assigns type-eq-decl nil hp_def dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (FALSE const-decl "bool" booleans nil)
    (dltl_SEQcup_dual formula-decl nil temporal_logic dL))
   nil))
 (end_state_5 0
  (end_state_5-1 nil 3904143760
   ("" (dl-assert)
    (("" (dl-grind)
      (("" (dl-assert) (("" (dl-solve) (("" (dl-assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((dl_assignb formula-decl nil dynamic_logic dL)
    (dl_composeb formula-decl nil dynamic_logic dL)
    (HP type-decl nil HP_adt dL)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (ODEs type-eq-decl nil hp_def dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (x const-decl "nat" floor_ex nil)
    (cnst const-decl "real" hp_def dL)
    (DLBOOL const-decl "bool" bool_expr dL)
    (TRUE const-decl "bool" booleans nil)
    (Assigns type-eq-decl nil hp_def dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (= const-decl "BoolExpr" bool_expr dL)
    (val const-decl "real" hp_def dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (dl_subre_val formula-decl nil substitution dL)
    (dl_subre_const formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_sub_eq formula-decl nil substitution dL)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(i))(env)}"
     substitution dL)
    (same_var const-decl "bool" hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (delta__53 skolem-const-decl "(cons?)" floor_ex nil)
    (dl_hideL formula-decl nil dynamic_logic dL)
    (gamma__52 skolem-const-decl "(cons?[BoolExpr])" floor_ex nil)
    (dl_moveL formula-decl nil dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (append def-decl "list[T]" list_props nil)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (iterate_left const-decl "T" for_iterate structures)
    (dl_sub_bool_restricted formula-decl nil substitution dL)
    (dl_assignb_restricted formula-decl nil dynamic_logic dL)
    (gamma__46 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_impliesR formula-decl nil dynamic_logic dL)
    (delta__47 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (delta__49 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_andL formula-decl nil dynamic_logic dL)
    (gamma__48 skolem-const-decl "(cons?[BoolExpr])" floor_ex nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (delta__45 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_forallR formula-decl nil dynamic_logic dL)
    (DLIMPLIES const-decl "bool" bool_expr dL)
    (DLAND const-decl "bool" bool_expr dL)
    (>= const-decl "BoolExpr" bool_expr dL)
    (gamma__44 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (env_nat_shift const-decl "real" dl_solution dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (env_c const-decl "real" dl_solution dL)
    (in_map_ex def-decl "bool" dl_solution dL)
    (is_cnst? const-decl "bool" dl_solution dL)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (is_val_not_in_map? const-decl "bool" dl_solution dL)
    (get_val_cnst_id_ex const-decl "{vc: [below(length(l)), real] |
   vc`1 /= i AND
    nth(l, i)`2 = cnst(vc`2) + val(nth(l, vc`1)`1) AND
     (FORALL (c: real, m: below(length(l))):
        nth(l, i)`2 = cnst(c) + val(nth(l, m)`1) IMPLIES
         (m = vc`1 AND vc`2 = c))}" dl_solution dL)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (init_zip_sol def-decl "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     dl_solution dL)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL)
    (zs const-decl "MapExprInj" dl_solution dL)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (\|- const-decl "bool" dynamic_logic dL)
    (QBoolExpr type-eq-decl nil hp_def dL)
    (DLFORALL const-decl "bool" bool_expr dL)
    (QHP type-eq-decl nil bool_expr dL)
    (UPTO const-decl "BoolExpr" bool_expr dL)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MapExprInj type-eq-decl nil hp_def dL)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (solution_domain_ax_cnst_imp_zip_no_hyp formula-decl nil
     dl_solution dL)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (eventually_not_int 0
  (eventually_not_int-1 nil 3904143862
   ("" (rewrite "norm_DLEVENTUALLY")
    (("" (use "dltl_SEQcup_dual")
      (("" (use "dl_cut")
        (("" (assert)
          (("" (hide-all-but 1)
            (("" (rewrite "dltl_ASSIGNcup_dual" :dir rl)
              (("" (dl-hide 2 1)
                (("" (dl-flatten)
                  (("" (dl-hide 2 1)
                    (("" (dl-flatten)
                      (("" (rewrite "SOMERUNS_eq")
                        (("" (rewrite "SOMERUNS_eq")
                          (("" (rewrite "dl_assignd")
                            (("" (dl-assert)
                              ((""
                                (rewrite "dlSequent_equiv")
                                ((""
                                  (expand "dlSequent")
                                  ((""
                                    (skeep)
                                    ((""
                                      (hide -1)
                                      ((""
                                        (inst 1 "0")
                                        ((""
                                          (expand "nth")
                                          ((""
                                            (expand "SOMERUNS")
                                            ((""
                                              (expand "DLNOT")
                                              ((""
                                                (expand "DLOR")
                                                ((""
                                                  (expand "SUB")
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (expand
                                                       "assign_sub")
                                                      ((""
                                                        (expand
                                                         "assign_env")
                                                        ((""
                                                          (expand
                                                           "assign_env")
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (expand
                                                               "integer_re?"
                                                               1
                                                               2)
                                                              ((""
                                                                (assert)
                                                                ((""
                                                                  (expand
                                                                   "val"
                                                                   1
                                                                   2)
                                                                  ((""
                                                                    (assert)
                                                                    ((""
                                                                      (expand
                                                                       "floor_re"
                                                                       1)
                                                                      ((""
                                                                        (assert)
                                                                        ((""
                                                                          (case
                                                                           "NOT integer_re?(val(x))(env)")
                                                                          (("1"
                                                                            (inst
                                                                             2
                                                                             "env")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "semantic_rel")
                                                                                (("1"
                                                                                  (expand
                                                                                   "DLBOOL")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "integer_re?"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "integer_re?")
                                                                              (("2"
                                                                                (expand
                                                                                 "val")
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "env WITH [x := env(x)+6*(0.1)]")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "semantic_rel")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "semantic_rel_diff")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "DLBOOL")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "cnst_lins_sol_u")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "solves_u?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "DLTRUE"
                                                                                                   "(: (x, cnst(6)) :)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "env")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "hp(0)")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "1/10"
                                                                                                         "LAMBDA (i: below(length((: (x, cnst(6)) :)))): LAMBDA (r: real): Y_sol_ex((: (x, cnst(6)) :))(i)(r)(env)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "env_at_t?")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (skeep)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "i_1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "not_in_map")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "0")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nth")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "Y_sol_ex")
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "k")
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "nth")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "+")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "*")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "is_cnst?")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nth")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "cnst"
                                                                                                                                       1
                                                                                                                                       (1
                                                                                                                                        2))
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "cnst")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "val")
                                                                                                                                          (("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "cnst_lins?")
                                                                                                          (("2"
                                                                                                            (skeep*)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "i!1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "nth")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "6")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (expand
                                                                                                           "hp")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "DLBOOL")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "cnst_lins?")
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "mapexpr_inj")
                                                                                                          (("1"
                                                                                                            (skeep*)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "j")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nth")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skeep*)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "nth")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "i")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "6")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -3)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "rem_even")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "env(0)*5+3"
                                                                                               "5")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rem")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "div")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sgn")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "floor_plus_int")
                                                                                                            (("1"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "env(0)"
                                                                                                                   "3/5")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "-env(0)"
                                                                                                                   "-3/5")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "integers.closed_neg")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "rationals.closed_neg")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "rationals.closed_plus")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "integers.closed_plus")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "rationals.closed_times")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "integers.closed_times")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "rationals.closed_times")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_DLEVENTUALLY formula-decl nil temporal_logic dL)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (DLNOT const-decl "bool" bool_expr dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (integer_re? const-decl "bool" floor_ex nil)
    (val const-decl "real" hp_def dL) (x const-decl "nat" floor_ex nil)
    (dl_cut formula-decl nil dynamic_logic dL)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt dL)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SOMERUNS_st const-decl "bool" ltl_expr dL)
    (DLOR const-decl "bool" bool_expr dL)
    (normDLEVENTUALLY const-decl "bool" ltl_expr dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SOMERUNS_tr const-decl "bool" ltl_expr dL)
    (TraceBoolExpr type-eq-decl nil ltl_expr dL)
    (Trace type-eq-decl nil trace_semantics dL)
    (wf_trace? const-decl "bool" trace_semantics dL)
    (TraceState type-decl nil TraceState_adt dL)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveR formula-decl nil dynamic_logic dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dl_hideR formula-decl nil dynamic_logic dL)
    (gamma__54 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (delta__55 skolem-const-decl "(cons?)" floor_ex nil)
    (gamma__58 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (delta__59 skolem-const-decl "(cons?)" floor_ex nil)
    (SOMERUNS_eq formula-decl nil ltl_expr dL)
    (dl_assignd formula-decl nil dynamic_logic dL)
    (dlSequent_equiv formula-decl nil dynamic_logic dL)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (assign_env def-decl "Environment" substitution dL)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rem_even formula-decl nil rem ints)
    (closed_plus formula-decl nil integers nil)
    (closed_times formula-decl nil rationals nil)
    (closed_times formula-decl nil integers nil)
    (closed_plus formula-decl nil rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (div const-decl "integer" div ints)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (closed_neg formula-decl nil rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (closed_neg formula-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sgn const-decl "int" real_defs nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem ints)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (solves_u? const-decl "bool" dl_solution dL)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (env skolem-const-decl "Environment" floor_ex nil)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL)
    (solution_odes_u? const-decl "bool" hp_expr dL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (is_cnst? const-decl "bool" dl_solution dL)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (not_in_map const-decl "bool" hp_def dL)
    (env_at_t? const-decl "bool" hp_expr dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dd? const-decl "bool" hp_expr dL)
    (hp const-decl "bool" interval_def ODEs)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (MapExprInj type-eq-decl nil hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cnst_lins_sol_u formula-decl nil dl_solution dL)
    (semantic_rel_diff const-decl "bool" hp_expr dL)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (assign_sub const-decl "Environment" substitution dL)
    (nth def-decl "T" list_props nil)
    (dlSequent const-decl "bool" dynamic_logic dL)
    (SUB const-decl "bool" substitution dL)
    (dl_sub_not formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_false_or formula-decl nil bool_expr dL)
    (SOMERUNS const-decl "bool" bool_expr dL)
    (delta__57 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_orR formula-decl nil dynamic_logic dL)
    (gamma__56 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dltl_ASSIGNcup_dual formula-decl nil temporal_logic dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (HP type-decl nil HP_adt dL) (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (ODEs type-eq-decl nil hp_def dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cnst const-decl "real" hp_def dL)
    (DLBOOL const-decl "bool" bool_expr dL)
    (TRUE const-decl "bool" booleans nil)
    (Assigns type-eq-decl nil hp_def dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (integer? const-decl "bool" integers nil)
    (floor_re const-decl "(integer?)" floor_ex nil)
    (FALSE const-decl "bool" booleans nil)
    (dltl_SEQcup_dual formula-decl nil temporal_logic dL))
   nil))
 (end_state_int 0
  (end_state_int-1 nil 3904143918
   ("" (dl-assert)
    (("" (dl-grind)
      (("" (dl-assert)
        (("" (dl-solve)
          (("1" (dl-assert)
            (("1" (dl-grind) (("1" (grind) nil nil)) nil)) nil)
           ("2" (dl-grind)
            (("2" (typepred "j")
              (("2" (expand "length")
                (("2" (expand "length") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dl_assignb formula-decl nil dynamic_logic dL)
    (dl_composeb formula-decl nil dynamic_logic dL)
    (HP type-decl nil HP_adt dL)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (ODEs type-eq-decl nil hp_def dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (x const-decl "nat" floor_ex nil)
    (cnst const-decl "real" hp_def dL)
    (DLBOOL const-decl "bool" bool_expr dL)
    (TRUE const-decl "bool" booleans nil)
    (Assigns type-eq-decl nil hp_def dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (integer? const-decl "bool" integers nil)
    (floor_re const-decl "(integer?)" floor_ex nil)
    (val const-decl "real" hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (integer_re? const-decl "bool" floor_ex nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (SUB const-decl "bool" substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveL formula-decl nil dynamic_logic dL)
    (gamma__69 skolem-const-decl "(cons?[BoolExpr])" floor_ex nil)
    (dl_hideL formula-decl nil dynamic_logic dL)
    (delta__70 skolem-const-decl "(cons?)" floor_ex nil)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (iterate_left const-decl "T" for_iterate structures)
    (assign_env def-decl "Environment" substitution dL)
    (assign_sub const-decl "Environment" substitution dL)
    (real_times_real_is_real application-judgement "real" reals nil)
    (dl_sub_bool_restricted formula-decl nil substitution dL)
    (dl_assignb_restricted formula-decl nil dynamic_logic dL)
    (gamma__63 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_impliesR formula-decl nil dynamic_logic dL)
    (delta__64 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (delta__66 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_andL formula-decl nil dynamic_logic dL)
    (gamma__65 skolem-const-decl "(cons?[BoolExpr])" floor_ex nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (delta__62 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_forallR formula-decl nil dynamic_logic dL)
    (DLIMPLIES const-decl "bool" bool_expr dL)
    (DLAND const-decl "bool" bool_expr dL)
    (>= const-decl "BoolExpr" bool_expr dL)
    (subrange type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (gamma__61 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (env_nat_shift const-decl "real" dl_solution dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (env_c const-decl "real" dl_solution dL)
    (in_map_ex def-decl "bool" dl_solution dL)
    (is_cnst? const-decl "bool" dl_solution dL)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (is_val_not_in_map? const-decl "bool" dl_solution dL)
    (get_val_cnst_id_ex const-decl "{vc: [below(length(l)), real] |
   vc`1 /= i AND
    nth(l, i)`2 = cnst(vc`2) + val(nth(l, vc`1)`1) AND
     (FORALL (c: real, m: below(length(l))):
        nth(l, i)`2 = cnst(c) + val(nth(l, m)`1) IMPLIES
         (m = vc`1 AND vc`2 = c))}" dl_solution dL)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (init_zip_sol def-decl "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     dl_solution dL)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL)
    (zs const-decl "MapExprInj" dl_solution dL)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (\|- const-decl "bool" dynamic_logic dL)
    (QBoolExpr type-eq-decl nil hp_def dL)
    (DLFORALL const-decl "bool" bool_expr dL)
    (QHP type-eq-decl nil bool_expr dL)
    (UPTO const-decl "BoolExpr" bool_expr dL)
    (nth def-decl "T" list_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MapExprInj type-eq-decl nil hp_def dL)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (solution_domain_ax_cnst_imp_zip_no_hyp formula-decl nil
     dl_solution dL)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil)))