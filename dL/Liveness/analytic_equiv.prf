(analytic_equiv
 (fs_2_Rn_TCC1 0
  (fs_2_Rn_TCC1-1 nil 3853246785 ("" (subtype-tcc) nil nil) nil nil
   (fs_2_Rn subtype "0" "naturalnumbers.below(analytic_equiv.n)")))
 (fs_2_Rn_TCC2 0
  (fs_2_Rn_TCC2-1 nil 3853246785 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (fs_2_Rn subtype "(: analytic_equiv.fs(0)(analytic_equiv.r) :)"
    "matrices.VectorN(analytic_equiv.n)")))
 (fs_2_Rn_TCC3 0
  (fs_2_Rn_TCC3-1 nil 3853246785 ("" (subtype-tcc) nil nil) nil nil
   (fs_2_Rn subtype "0" "naturalnumbers.below(analytic_equiv.n)")))
 (fs_2_Rn_TCC4 0
  (fs_2_Rn_TCC4-1 nil 3853246785 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (fs_2_Rn subtype "(number_fields.-)(analytic_equiv.n, 1)"
    "posnat")))
 (fs_2_Rn_TCC5 0
  (fs_2_Rn_TCC5-1 nil 3853246785 ("" (subtype-tcc) nil nil) nil nil
   (fs_2_Rn subtype "(number_fields.+)(analytic_equiv.i, 1)"
    "naturalnumbers.below(analytic_equiv.n)")))
 (fs_2_Rn_TCC6 0
  (fs_2_Rn_TCC6-1 nil 3853246785 ("" (termination-tcc) nil nil) nil nil
   (fs_2_Rn termination
    "analytic_equiv.fs_2_Rn((number_fields.-)(analytic_equiv.n, 1), LAMBDA (i: naturalnumbers.below((number_fields.-)(analytic_equiv.n, 1))): analytic_equiv.fs((number_fields.+)(i, 1)))"
    "nil")))
 (fs_2_Rn_TCC7 0
  (fs_2_Rn_TCC7-1 nil 3853246785
   ("" (induct "n")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (assert)
          (("3" (skeep)
            (("3" (expand "length" 2)
              (("3" (case "j=1")
                (("1" (grind) nil nil)
                 ("2" (inst?)
                  (("1" (inst?)
                    (("1" (assert) nil nil)
                     ("2" (skeep) (("2" (assert) nil nil)) nil))
                    nil)
                   ("2" (skeep) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep) (("4" (skeep) (("4" (assert) nil nil)) nil)) nil)
     ("5" (skeep) (("5" (skeep) (("5" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (j skolem-const-decl "nat" analytic_equiv nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (fs_2_Rn subtype
    "list_adt[real].cons(analytic_equiv.fs(0)(analytic_equiv.r), analytic_equiv.fs_2_Rn((number_fields.-)(analytic_equiv.n, 1), LAMBDA (i: naturalnumbers.below((number_fields.-)(analytic_equiv.n, 1))): analytic_equiv.fs((number_fields.+)(i, 1)))(analytic_equiv.r))"
    "matrices.VectorN(analytic_equiv.n)")))
 (fs_2_Rn_nth_TCC1 0
  (fs_2_Rn_nth_TCC1-1 nil 3853247712
   ("" (skeep)
    (("" (typepred "fs_2_Rn(n,fs)(x)") (("" (assert) nil nil)) nil))
    nil)
   ((fs_2_Rn def-decl "[real -> VectorN(n)]" analytic_equiv nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (fs_2_Rn_nth subtype "analytic_equiv.i"
    "below[length[real](fs_2_Rn(n, fs)(x))]")))
 (fs_2_Rn_nth 0
  (fs_2_Rn_nth-1 nil 3853247716
   ("" (induct "n")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (skeep)
          (("1" (skeep)
            (("1" (typepred "i")
              (("1" (expand "nth")
                (("1" (assert)
                  (("1" (expand "fs_2_Rn")
                    (("1" (assert) (("1" (decompose-equality) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (decompose-equality 2)
              (("1" (case "i=0")
                (("1" (expand "fs_2_Rn" 1)
                  (("1" (expand "nth" 1) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (expand "nth" 2)
                  (("2" (assert)
                    (("2"
                      (inst -1
                       "LAMBDA (i: below(j)): LAMBDA (r: real): fs(1 + i)(r)")
                      (("2" (inst -1 "i-1")
                        (("2" (decompose-equality)
                          (("2" (inst?)
                            (("2" (expand "fs_2_Rn" 2)
                              (("2"
                                (assert)
                                (("2"
                                  (grind)
                                  (("2"
                                    (case
                                     " NOT (LAMBDA (i: below(j)):LAMBDA (r: real): fs(1 + i)(r)) =(LAMBDA (i: below(j)): fs(1 + i))")
                                    (("1"
                                      (decompose-equality)
                                      (("1"
                                        (decompose-equality)
                                        nil
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (typepred "fs_2_Rn(1 + j, fs)(x)")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "fs_2_Rn(n, fs)(x)") (("4" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (j skolem-const-decl "nat" analytic_equiv nil)
    (i skolem-const-decl "below(1 + j)" analytic_equiv nil)
    (fs skolem-const-decl "[below(1 + j) -> [real -> real]]"
     analytic_equiv nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (VectorN type-eq-decl nil matrices matrices)
    (fs_2_Rn def-decl "[real -> VectorN(n)]" analytic_equiv nil))
   shostak))
 (analyticnth_equiv 0
  (analyticnth_equiv-1 nil 3853238636
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "analytic?")
          (("1" (skeep)
            (("1" (expand "analytic_nth?")
              (("1" (inst 1 "M" "a!1") nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((analytic? const-decl "bool" analytic_def Mult_Poly)
    (analytic_nth? const-decl "bool" analytic_equiv nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (analytic_parts? const-decl "bool" analytic_def Mult_Poly)
    (inf_sum const-decl "real" series series)
    (limit const-decl "real" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (series const-decl "sequence[real]" series series)
    (sigma def-decl "real" sigma reals)
    (powerseq const-decl "sequence[real]" power_series series)
    (^ const-decl "real" exponentiation nil)
    (powerseries const-decl "sequence[real]" power_series series))
   shostak))
 (analytic_equiv 0
  (analytic_equiv-1 nil 3852974636
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "DDLanalytic?")
          (("1" (expand "analytic?")
            (("1" (skeep)
              (("1" (inst -1 "i")
                (("1"
                  (case "NOT (LAMBDA (x: real): nth(fs_2_Rn(n, fs)(x), i)) = fs(i)")
                  (("1" (decompose-equality 1)
                    (("1" (lemma "fs_2_Rn_nth")
                      (("1" (inst?)
                        (("1" (decompose-equality)
                          (("1" (inst?) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (typepred "fs_2_Rn(n, fs)(x)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (lemma "analyticnth_equiv")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (typepred "fs_2_Rn(n, fs)(x)")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "analytic?")
          (("2" (expand "DDLanalytic?")
            (("2" (skeep)
              (("2" (inst -1 "i")
                (("2" (lemma "analyticnth_equiv")
                  (("2" (inst?)
                    (("1"
                      (case "NOT (LAMBDA (x: real): nth(fs_2_Rn(n, fs)(x), i)) = fs(i)")
                      (("1" (lemma "fs_2_Rn_nth")
                        (("1" (inst?) nil nil)) nil)
                       ("2" (assert) nil nil)
                       ("3" (skeep)
                        (("3" (typepred "fs_2_Rn(n, fs)(x)")
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (typepred "fs_2_Rn(n, fs)(x)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DDLanalytic? const-decl "bool" analytic_equiv nil)
    (fs_2_Rn def-decl "[real -> VectorN(n)]" analytic_equiv nil)
    (VectorN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fs_2_Rn_nth formula-decl nil analytic_equiv nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fs skolem-const-decl "[below(n) -> [real -> real]]" analytic_equiv
     nil)
    (i skolem-const-decl "below(n)" analytic_equiv nil)
    (n skolem-const-decl "posnat" analytic_equiv nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (analyticnth_equiv formula-decl nil analytic_equiv nil)
    (dd? const-decl "bool" hp_expr DDL)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (analytic? const-decl "bool" analytic_def Mult_Poly)
    (i skolem-const-decl "below(n)" analytic_equiv nil))
   shostak))
 (ODEs_P_analytic?_TCC1 0
  (ODEs_P_analytic?_TCC2-1 nil 3854112630
   ("" (skeep)
    (("" (expand "ODEs_P?")
      (("" (flatten)
        (("" (expand "ODEs_s?" -1) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((ODEs_P? const-decl "bool" differentiation DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def DDL))
   nil
   (ODEs_P_analytic? subtype "analytic_equiv.odes"
    "(ODEs_equiv.ODEs_s?(analytic_equiv.D, analytic_equiv.envi))")))
 (ODEs_P_analytic?_TCC2 0
  (ODEs_P_analytic?_TCC1-1 nil 3854112630
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ODEs_P? const-decl "bool" differentiation DDL)
    (env_sol const-decl "Environment" ODEs_equiv DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (solution_odes_u? const-decl "bool" hp_expr DDL)
    (solution_odes? const-decl "bool" hp_expr DDL)
    (sol_at_t? const-decl "bool" hp_expr DDL)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (env_at_t? const-decl "bool" hp_expr DDL)
    (derivable_odes? const-decl "bool" hp_expr DDL)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr_is_MapExprInj application-judgement "MapExprInj" hp_def DDL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def DDL))
   nil
   (ODEs_P_analytic? subtype
    "list_props[MapExpr].length(analytic_equiv.odes)" "posnat")))
 (Analytic_equiv 0
  (Analytic_equiv-1 nil 3853502754
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "Analytic?")
          (("1" (expand "DDLAnalytic?") (("1" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "DDLAnalytic?")
          (("2" (expand "Analytic?")
            (("2" (skeep)
              (("2" (expand "analytic?" 1)
                (("2" (skeep) (("2" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Analytic? const-decl "bool" poly_comp_analytic Mult_Poly)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (dd? const-decl "bool" hp_expr DDL)
    (analytic? const-decl "bool" analytic_def Mult_Poly))
   shostak))
 (env_at_t_analytic_TCC1 0
  (env_at_t_analytic_TCC2-1 nil 3858415160 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def DDL)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr DDL)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def DDL)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (ddl_dom? const-decl "bool" differentiation DDL)
    (RealExpr type-eq-decl nil hp_def DDL)
    (MapExpr type-eq-decl nil hp_def DDL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def DDL)
    (ODEs type-eq-decl nil hp_def DDL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ODEs_P_analytic? const-decl "bool" analytic_equiv nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (b!1 skolem-const-decl "posreal" analytic_equiv nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (b!1 skolem-const-decl "posreal" analytic_equiv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (odes!1 skolem-const-decl "(ODEs_P_analytic?(D!1, P!1))"
     analytic_equiv nil)
    (D!1 skolem-const-decl "(dd?)" analytic_equiv nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (P!1 skolem-const-decl "(ddl_dom?)" analytic_equiv nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (hp const-decl "bool" interval_def ODEs)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (analytic? const-decl "bool" analytic_def Mult_Poly)
    (analytic? const-decl "bool" analytic_def Mult_Poly)
    (analytic_parts? const-decl "bool" analytic_def Mult_Poly)
    (inf_sum const-decl "real" series series)
    (limit const-decl "real" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (powerseries const-decl "sequence[real]" power_series series)
    (ODEs_P? const-decl "bool" differentiation DDL)
    (env_sol const-decl "Environment" ODEs_equiv DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (not_one_element? const-decl "bool" differentiation DDL)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" differentiation DDL)
    (env_at_t? const-decl "bool" hp_expr DDL)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr DDL)
    (solution_odes? const-decl "bool" hp_expr DDL)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr DDL)
    (solution_odes_u? const-decl "bool" hp_expr DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (proj const-decl "bool" differentiation DDL)
    (between? const-decl "bool" differentiation DDL)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   nil
   (env_at_t_analytic subtype "analytic_equiv.odes"
    "(ODEs_equiv.ODEs_s?(analytic_equiv.D, analytic_equiv.envi))")))
 (env_at_t_analytic 0
  (env_at_t_analytic-1 nil 3855392067
   ("" (skeep)
    (("" (typepred "odes")
      (("" (expand "ODEs_P_analytic?")
        (("" (flatten)
          (("" (inst -4 "envi")
            (("" (assert)
              (("" (expand "DDLAnalytic?")
                (("" (inst -4 "alpha")
                  (("" (expand "DDLAnalytic?")
                    (("" (expand "Analytic?")
                      (("" (skeep)
                        (("" (inst -4 "x")
                          (("" (expand "analytic?")
                            (("" (skeep)
                              ((""
                                (case "not_in_map(odes)(i)")
                                (("1"
                                  (expand "analytic?")
                                  (("1"
                                    (lemma "analytic_const")
                                    (("1"
                                      (inst -1 "x" "envi(i)")
                                      (("1"
                                        (expand "analytic?")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 1 "M" "a!1")
                                            (("1"
                                              (expand
                                               "analytic_parts?")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -1 "x_1")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "env_2_vec_nth")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "env_at_t"
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "not_in_map" 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "analytic?")
                                      (("2"
                                        (inst -5 "i_1")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst 1 "M" "a!1")
                                            (("2"
                                              (expand
                                               "analytic_parts?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -5 "x_1")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "fs_2_Rn_nth")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "length(odes)"
                                                           "fs_sol(D, envi, odes)"
                                                           "i_1")
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x_1")
                                                              (("2"
                                                                (typepred
                                                                 "env_at_t(odes, fs_sol(D, envi, odes), envi)(x_1)")
                                                                (("2"
                                                                  (expand
                                                                   "env_at_t?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -2
                                                                       "i_1")
                                                                      (("2"
                                                                        (lemma
                                                                         "env_2_vec_nth")
                                                                        (("2"
                                                                          (inst?
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -3)
                                                                              (("2"
                                                                                (replace
                                                                                 -6)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ODEs_P_analytic? const-decl "bool" analytic_equiv nil)
    (ddl_dom? const-decl "bool" differentiation DDL)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (dd? const-decl "bool" hp_expr DDL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ODEs type-eq-decl nil hp_def DDL)
    (mapexpr_inj const-decl "bool" hp_def DDL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def DDL)
    (RealExpr type-eq-decl nil hp_def DDL)
    (Environment type-eq-decl nil hp_def DDL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Analytic? const-decl "bool" poly_comp_analytic Mult_Poly)
    (analytic? const-decl "bool" analytic_def Mult_Poly)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (fs_2_Rn def-decl "[real -> VectorN(n)]" analytic_equiv nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fs_2_Rn_nth formula-decl nil analytic_equiv nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (analytic_parts? const-decl "bool" analytic_def Mult_Poly)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     DDL)
    (solution_odes_u? const-decl "bool" hp_expr DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     DDL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (env_at_t? const-decl "bool" hp_expr DDL)
    (length def-decl "nat" list_props nil)
    (env_2_vec_nth formula-decl nil chain_rule_re DDL)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (analytic_const formula-decl nil analytic_def Mult_Poly)
    (below type-eq-decl nil naturalnumbers nil)
    (max_var const-decl "nat" hp_def DDL)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (not_in_map const-decl "bool" hp_def DDL)
    (MapExprInj type-eq-decl nil hp_def DDL)
    (analytic? const-decl "bool" analytic_def Mult_Poly)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def DDL))
   shostak))
 (env_SA_ode_analytic_TCC1 0
  (env_SA_ode_analytic_TCC1-1 nil 3866196684 ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (env_SA_ode_analytic subtype
    "(number_fields.-)(semi_algebraic.meet_max(analytic_equiv.j), 1)"
    "nat")))
 (env_SA_ode_analytic 0
  (env_SA_ode_analytic-1 nil 3866196899
   ("" (skeep)
    (("" (assert)
      (("" (expand "Analytic?")
        (("" (expand "analytic?")
          (("" (typepred "odes")
            (("" (expand "ODEs_P_analytic?")
              (("" (flatten)
                (("" (inst -4 "envi")
                  (("" (expand "DDLAnalytic?")
                    (("" (inst -4 "alpha")
                      (("" (expand "DDLAnalytic?")
                        (("" (skeep)
                          (("" (inst -4 "x")
                            (("" (expand "analytic?")
                              ((""
                                (skeep)
                                ((""
                                  (case "not_in_map(odes)(i)")
                                  (("1"
                                    (expand "analytic?")
                                    (("1"
                                      (lemma "analytic_const")
                                      (("1"
                                        (inst -1 "x" "envi(i)")
                                        (("1"
                                          (expand "analytic?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "M" "a!1")
                                              (("1"
                                                (expand
                                                 "analytic_parts?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -1 "x_1")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "env_2_vec_nth")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "env_at_t"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "not_in_map" 1)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (expand "analytic?")
                                        (("2"
                                          (inst -5 "i_1")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst 1 "M" "a!1")
                                              (("2"
                                                (expand
                                                 "analytic_parts?")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -5 "x_1")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "fs_2_Rn_nth")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "length(odes)"
                                                             "fs_sol(D, envi, odes)"
                                                             "i_1")
                                                            (("2"
                                                              (decompose-equality)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x_1")
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (typepred
                                                                     "env_at_t(odes, fs_sol(D, envi, odes), envi)(x_1)")
                                                                    (("2"
                                                                      (expand
                                                                       "env_at_t?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "i_1")
                                                                          (("2"
                                                                            (lemma
                                                                             "env_2_vec_nth")
                                                                            (("2"
                                                                              (inst?
                                                                               -1)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic? const-decl "bool" analytic_def Mult_Poly)
    (analytic? const-decl "bool" analytic_def Mult_Poly)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (meet_max def-decl "nat" semi_algebraic Mult_Poly)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (< const-decl "bool" reals nil)
    (not_in_map const-decl "bool" hp_def DDL)
    (MapExprInj type-eq-decl nil hp_def DDL)
    (analytic_const formula-decl nil analytic_def Mult_Poly)
    (sequence type-eq-decl nil sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (env_2_vec_nth formula-decl nil chain_rule_re DDL)
    (length def-decl "nat" list_props nil)
    (env_at_t? const-decl "bool" hp_expr DDL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (solution_odes_u? const-decl "bool" hp_expr DDL)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     DDL)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (analytic_parts? const-decl "bool" analytic_def Mult_Poly)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (fs_2_Rn_nth formula-decl nil analytic_equiv nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fs_2_Rn def-decl "[real -> VectorN(n)]" analytic_equiv nil)
    (VectorN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr_is_MapExprInj application-judgement "MapExprInj" hp_def DDL)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr DDL)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr DDL)
    (solution_odes? const-decl "bool" hp_expr DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (env_sol const-decl "Environment" ODEs_equiv DDL)
    (ODEs_P? const-decl "bool" differentiation DDL)
    (powerseries const-decl "sequence[real]" power_series series)
    (^ const-decl "real" exponentiation nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (sigma def-decl "real" sigma reals)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def DDL)
    (RealExpr type-eq-decl nil hp_def DDL)
    (MapExpr type-eq-decl nil hp_def DDL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def DDL)
    (ODEs type-eq-decl nil hp_def DDL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (dd? const-decl "bool" hp_expr DDL)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (ddl_dom? const-decl "bool" differentiation DDL)
    (ODEs_P_analytic? const-decl "bool" analytic_equiv nil)
    (Analytic? const-decl "bool" poly_comp_analytic Mult_Poly)
    (null_MapExprInj name-judgement "MapExprInj" hp_def DDL))
   shostak))
 (DDLanalytic_zero_ball 0
  (DDLanalytic_zero_ball-1 nil 3853416669
   ("" (skeep)
    (("" (lemma "analytic_equiv")
      (("" (inst?)
        (("" (assert)
          (("" (hide -2)
            (("" (expand "analytic?")
              (("" (skeep)
                (("" (inst -1 "i")
                  (("" (inst -2 "i")
                    (("" (lemma "fs_2_Rn_nth")
                      (("" (inst?)
                        (("" (replace -1)
                          (("" (hide -1)
                            (("" (lemma "analytic_zero_ball")
                              ((""
                                (inst?)
                                ((""
                                  (case
                                   "NOT (LAMBDA (x: real): fs(i)(x))=fs(i)")
                                  (("1" (decompose-equality 1) nil nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -1)
                                          (("1" (propax) nil nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic_equiv formula-decl nil analytic_equiv nil)
    (analytic? const-decl "bool" analytic_def Mult_Poly)
    (fs_2_Rn_nth formula-decl nil analytic_equiv nil)
    (analytic_zero_ball formula-decl nil analytic_def Mult_Poly)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dd? const-decl "bool" hp_expr DDL)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (glb_inf_TCC1 0
  (glb_inf_TCC1-1 nil 3859903724 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil))
   nil
   (glb_inf subtype "analytic_equiv.S"
    "(bounded_real_defs.bounded_below?)")))
 (glb_inf 0
  (glb_inf-1 nil 3860056307
   ("" (skeep)
    (("" (lemma "inf_lemma[real]")
      (("" (inst?)
        (("" (lemma "glb_lem")
          (("" (inst?)
            (("" (inst -1 "inf(S)")
              (("" (expand "greatest_lower_bound?")
                (("" (expand "greatest_lower_bound")
                  (("" (assert)
                    (("" (flatten)
                      (("" (assert)
                        (("" (expand "lower_bound?")
                          (("" (expand "lower_bound")
                            (("" (assert)
                              ((""
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst -3 "y")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inf_lemma formula-decl nil real_sets reals)
    (glb_lem formula-decl nil bounded_real_defs nil)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (DDLclean_exit_TCC1 0
  (DDLclean_exit_TCC1-1 nil 3853502644 ("" (subtype-tcc) nil nil) nil
   nil
   (DDLclean_exit subtype "semi_algebraic.meet_max(analytic_equiv.j)"
    "posnat")))
 (DDLclean_exit_TCC2 0
  (DDLclean_exit_TCC2-1 nil 3853593283 ("" (subtype-tcc) nil nil) nil
   nil
   (DDLclean_exit subtype
    "(number_fields.-)(semi_algebraic.meet_max(analytic_equiv.j), 1)"
    "nat")))
 (DDLclean_exit_TCC3 0
  (DDLclean_exit_TCC5-1 nil 3853593283
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (split)
          (("1" (expand "nonempty?")
            (("1" (expand "empty?")
              (("1" (inst -1 "x") (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (expand "bounded_below?")
            (("2" (inst 1 "x0") (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eval const-decl "real" semi_algebraic_def nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (member const-decl "bool" sets nil)
    (dd? const-decl "bool" hp_expr DDL)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil))
   nil
   (DDLclean_exit subtype
    "{xx: reals.real | booleans.AND(reals.<=(analytic_equiv.x0, xx), (booleans.NOT)(semi_algebraic_def.SA(analytic_equiv.j)(analytic_equiv.f(xx))))}"
    "{SS: sets[real].set | booleans.AND(sets[real].nonempty?(SS), bounded_real_defs.bounded_below?(SS))}")))
 (DDLclean_exit 0
  (DDLclean_exit-1 nil 3853507606
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (lemma "clean_exit")
          (("" (typepred "fs")
            (("" (expand "semi_alg")
              (("" (lemma "Analytic_equiv")
                (("" (inst?)
                  (("" (assert)
                    (("" (inst? -3)
                      (("" (inst -3 "x0" "fs_2_Rn(meet_max(j), fs)")
                        (("" (lemma "SAequiv")
                          ((""
                            (case "FORALL(x:real, i: below(meet_max(j))): vec_2_env(meet_max(j) - 1, fs_2_Rn(meet_max(j), fs)(x), env)(i) = nth(fs_2_Rn(meet_max(j), fs)(x),i)")
                            (("1" (copy -1)
                              (("1"
                                (inst
                                 -3
                                 "j"
                                 "vec_2_env(meet_max(j) - 1, fs_2_Rn(meet_max(j), fs)(x0), env)"
                                 "fs_2_Rn(meet_max(j), fs)(x0)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -3 -4 -5 -7)
                                    (("1"
                                      (split)
                                      (("1"
                                        (skeep 1)
                                        (("1"
                                          (inst -1 "x_1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "SAequiv")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "fs_2_Rn(meet_max(j), fs)(x_1)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst? -2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 1 3)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst 1 "eps")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -1 "t")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "{xx: real | x0 <= xx AND NOT join(j)(fs_2_Rn(meet_max(j), fs)(xx))} = {xx: real | x0 <= xx AND NOT SA(j) (vec_2_env(meet_max(j) - 1, fs_2_Rn(meet_max(j), fs)(xx), env))}")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "SAequiv")
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "fs_2_Rn(meet_max(j), fs)(t)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst?
                                                                 -3)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (iff 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "SAequiv")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "fs_2_Rn(meet_max(j), fs)(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst?
                                                                         -4)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "SAequiv")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "fs_2_Rn(meet_max(j), fs)(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst?
                                                                         -4)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "fs_2_Rn(meet_max(j), fs)(xx)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred
                                                         "fs_2_Rn(meet_max(j), fs)(xx)")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 1 2)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (inst 1 "eps")
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (inst -1 "t")
                                                (("3"
                                                  (case
                                                   "{xx: real | x0 <= xx AND NOT join(j)(fs_2_Rn(meet_max(j), fs)(xx))} = {xx: real | x0 <= xx AND NOT SA(j) (vec_2_env(meet_max(j) - 1, fs_2_Rn(meet_max(j), fs)(xx), env))}")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma "SAequiv")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "fs_2_Rn(meet_max(j), fs)(t)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst?
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (decompose-equality
                                                     1)
                                                    (("1"
                                                      (iff)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "SAequiv")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "fs_2_Rn(meet_max(j), fs)(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst?
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "SAequiv")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "fs_2_Rn(meet_max(j), fs)(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst?
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred
                                                         "fs_2_Rn(meet_max(j), fs)(xx)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred
                                                       "fs_2_Rn(meet_max(j), fs)(xx)")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst? -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide - 2 3 4)
                              (("2"
                                (skeep)
                                (("2"
                                  (lemma "fs_2_Rn_nth")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst -1 "i")
                                      (("2"
                                        (decompose-equality)
                                        (("2"
                                          (inst -1 "x")
                                          (("2"
                                            (expand "vec_2_env")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep*)
                              (("3"
                                (typepred "i")
                                (("3"
                                  (typepred
                                   "fs_2_Rn(meet_max(j), fs)(x)")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (clean_exit formula-decl nil poly_comp_analytic Mult_Poly)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic Mult_Poly)
    (SAequiv formula-decl nil semi_algebraic_def nil)
    (TRUE const-decl "bool" booleans nil)
    (fs_2_Rn_nth formula-decl nil analytic_equiv nil)
    (x_1 skolem-const-decl "(d)" analytic_equiv nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (t skolem-const-decl "(d)" analytic_equiv nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (join def-decl "bool" semi_algebraic Mult_Poly)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (t skolem-const-decl "(d)" analytic_equiv nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (env skolem-const-decl "Environment" analytic_equiv nil)
    (fs skolem-const-decl "(DDLAnalytic?(meet_max(j), d, x0))"
     analytic_equiv nil)
    (x0 skolem-const-decl "(d)" analytic_equiv nil)
    (d skolem-const-decl "(dd?)" analytic_equiv nil)
    (j skolem-const-decl "{jj: joining | meet_max(jj) > 0}"
     analytic_equiv nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec_2_env const-decl "Environment" chain_rule_re DDL)
    (Environment type-eq-decl nil hp_def DDL)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (fs_2_Rn def-decl "[real -> VectorN(n)]" analytic_equiv nil)
    (Analytic? const-decl "bool" poly_comp_analytic Mult_Poly)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Analytic_equiv formula-decl nil analytic_equiv nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (dd? const-decl "bool" hp_expr DDL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meet_max def-decl "nat" semi_algebraic Mult_Poly))
   shostak))
 (DDLclean_enter_TCC1 0
  (DDLclean_enter_TCC2-1 nil 3864991062
   ("" (skeep)
    (("" (skeep*)
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "x") (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (expand "bounded_below?")
          (("2" (inst 1 "x0") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr DDL)
    (member const-decl "bool" sets nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (eval const-decl "real" semi_algebraic_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sets nil))
   nil
   (DDLclean_enter subtype
    "{xx: reals.real | booleans.AND(reals.<=(analytic_equiv.x0, xx), semi_algebraic_def.SA(analytic_equiv.j)(analytic_equiv.f(xx)))}"
    "{SS: sets[real].set | booleans.AND(sets[real].nonempty?(SS), bounded_real_defs.bounded_below?(SS))}")))
 (DDLclean_enter 0
  (DDLclean_enter-1 nil 3854026719
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (lemma "clean_enter")
          (("" (typepred "fs")
            (("" (expand "semi_alg")
              (("" (lemma "Analytic_equiv")
                (("" (inst?)
                  (("" (assert)
                    (("" (inst? -3)
                      (("" (inst -3 "x0" "fs_2_Rn(meet_max(j), fs)")
                        (("" (lemma "SAequiv")
                          ((""
                            (case "FORALL(x:real, i: below(meet_max(j))): vec_2_env(meet_max(j) - 1, fs_2_Rn(meet_max(j), fs)(x), env)(i) = nth(fs_2_Rn(meet_max(j), fs)(x),i)")
                            (("1" (copy -1)
                              (("1"
                                (inst
                                 -3
                                 "j"
                                 "vec_2_env(meet_max(j) - 1, fs_2_Rn(meet_max(j), fs)(x0), env)"
                                 "fs_2_Rn(meet_max(j), fs)(x0)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 1 2 -3 -4)
                                    (("1"
                                      (split)
                                      (("1"
                                        (skeep 1)
                                        (("1"
                                          (inst -1 "x_1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "SAequiv")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "fs_2_Rn(meet_max(j), fs)(x_1)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst? -2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 1 3)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst 1 "eps")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -1 "t")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "{xx: real | x0 <= xx AND join(j)(fs_2_Rn(meet_max(j), fs)(xx))} = {xx: real | x0 <= xx AND SA(j) (vec_2_env(meet_max(j) - 1, fs_2_Rn(meet_max(j), fs)(xx), env))}")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "SAequiv")
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "fs_2_Rn(meet_max(j), fs)(t)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst?
                                                                 -3)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (iff 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "SAequiv")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "fs_2_Rn(meet_max(j), fs)(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst?
                                                                         -4)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "SAequiv")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "fs_2_Rn(meet_max(j), fs)(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst?
                                                                         -4)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "fs_2_Rn(meet_max(j), fs)(xx)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred
                                                         "fs_2_Rn(meet_max(j), fs)(xx)")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 1 2)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (inst 1 "eps")
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (inst -1 "t")
                                                (("3"
                                                  (case
                                                   "{xx: real | x0 <= xx AND join(j)(fs_2_Rn(meet_max(j), fs)(xx))} = {xx: real | x0 <= xx AND SA(j) (vec_2_env(meet_max(j) - 1, fs_2_Rn(meet_max(j), fs)(xx), env))}")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma "SAequiv")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "fs_2_Rn(meet_max(j), fs)(t)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst?
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (decompose-equality
                                                     1)
                                                    (("1"
                                                      (iff)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "SAequiv")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "fs_2_Rn(meet_max(j), fs)(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst?
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "SAequiv")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "fs_2_Rn(meet_max(j), fs)(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst?
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred
                                                         "fs_2_Rn(meet_max(j), fs)(xx)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred
                                                       "fs_2_Rn(meet_max(j), fs)(xx)")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst? -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide - 2 3 4)
                              (("2"
                                (skeep)
                                (("2"
                                  (lemma "fs_2_Rn_nth")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst -1 "i")
                                      (("2"
                                        (decompose-equality)
                                        (("2"
                                          (inst -1 "x")
                                          (("2"
                                            (expand "vec_2_env")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep*)
                              (("3"
                                (typepred "i")
                                (("3"
                                  (typepred
                                   "fs_2_Rn(meet_max(j), fs)(x)")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (clean_enter formula-decl nil poly_comp_analytic Mult_Poly)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic Mult_Poly)
    (SAequiv formula-decl nil semi_algebraic_def nil)
    (TRUE const-decl "bool" booleans nil)
    (fs_2_Rn_nth formula-decl nil analytic_equiv nil)
    (x_1 skolem-const-decl "(d)" analytic_equiv nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (t skolem-const-decl "(d)" analytic_equiv nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (join def-decl "bool" semi_algebraic Mult_Poly)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (t skolem-const-decl "(d)" analytic_equiv nil)
    (x!1 skolem-const-decl "real" analytic_equiv nil)
    (env skolem-const-decl "Environment" analytic_equiv nil)
    (fs skolem-const-decl "(DDLAnalytic?(meet_max(j), d, x0))"
     analytic_equiv nil)
    (x0 skolem-const-decl "(d)" analytic_equiv nil)
    (d skolem-const-decl "(dd?)" analytic_equiv nil)
    (j skolem-const-decl "{jj: joining | meet_max(jj) > 0}"
     analytic_equiv nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec_2_env const-decl "Environment" chain_rule_re DDL)
    (Environment type-eq-decl nil hp_def DDL)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (fs_2_Rn def-decl "[real -> VectorN(n)]" analytic_equiv nil)
    (Analytic? const-decl "bool" poly_comp_analytic Mult_Poly)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Analytic_equiv formula-decl nil analytic_equiv nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (dd? const-decl "bool" hp_expr DDL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meet_max def-decl "nat" semi_algebraic Mult_Poly))
   shostak))
 (ODEclean_exit_TCC1 0
  (ODEclean_exit_TCC1-1 nil 3858415121 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def DDL)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def DDL)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (ddl_dom? const-decl "bool" differentiation DDL)
    (dd? const-decl "bool" hp_expr DDL)
    (RealExpr type-eq-decl nil hp_def DDL)
    (MapExpr type-eq-decl nil hp_def DDL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def DDL)
    (ODEs type-eq-decl nil hp_def DDL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ODEs_P_analytic? const-decl "bool" analytic_equiv nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (b!1 skolem-const-decl "posreal" analytic_equiv nil)
    (PP!1 skolem-const-decl "(ddl_dom?)" analytic_equiv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ode!1 skolem-const-decl "(ODEs_P_analytic?(d!1, PP!1))"
     analytic_equiv nil)
    (d!1 skolem-const-decl "(dd?)" analytic_equiv nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (hp const-decl "bool" interval_def ODEs)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (DDLAnalytic? const-decl "bool" analytic_equiv nil)
    (analytic? const-decl "bool" analytic_def Mult_Poly)
    (analytic? const-decl "bool" analytic_def Mult_Poly)
    (analytic_parts? const-decl "bool" analytic_def Mult_Poly)
    (inf_sum const-decl "real" series series)
    (limit const-decl "real" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (powerseries const-decl "sequence[real]" power_series series)
    (ODEs_P? const-decl "bool" differentiation DDL)
    (env_sol const-decl "Environment" ODEs_equiv DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (not_one_element? const-decl "bool" differentiation DDL)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" differentiation DDL)
    (env_at_t? const-decl "bool" hp_expr DDL)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr DDL)
    (solution_odes? const-decl "bool" hp_expr DDL)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr DDL)
    (solution_odes_u? const-decl "bool" hp_expr DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (proj const-decl "bool" differentiation DDL)
    (between? const-decl "bool" differentiation DDL))
   nil
   (ODEclean_exit subtype "analytic_equiv.ode"
    "(ODEs_equiv.ODEs_s?(analytic_equiv.d, analytic_equiv.env))")))
 (ODEclean_exit_TCC2 0
  (ODEclean_exit_TCC2-1 nil 3855669738
   ("" (skeep*)
    (("" (split)
      (("1" (expand "nonempty?")
        (("1" (expand "empty?")
          (("1" (inst -1 "x") (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (expand "bounded_below?")
        (("2" (typepred "d")
          (("2" (expand "dd?") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eval const-decl "real" semi_algebraic_def nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (extend const-decl "R" extend nil)
    (member const-decl "bool" sets nil)
    (env_sol const-decl "Environment" ODEs_equiv DDL)
    (dd? const-decl "bool" hp_expr DDL)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re DDL)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def DDL)
    (full_eval def-decl "real" eval_MultPoly Mult_Poly)
    (max_length def-decl "nat" standard_form_mult_poly Mult_Poly)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (some adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (hp const-decl "bool" interval_def ODEs)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def DDL))
   nil
   (ODEclean_exit subtype
    "extend[real, (analytic_equiv.d), booleans.bool, booleans.FALSE].extend({xx: (analytic_equiv.d) | booleans.AND(reals.<=(analytic_equiv.x0, xx), (booleans.NOT)(semi_algebraic_def.SA(analytic_equiv.j)(analytic_equiv.f(xx))))})"
    "{SS: sets[real].set | booleans.AND(sets[real].nonempty?(SS), bounded_real_defs.bounded_below?(SS))}")))
 (ODEclean_exit 0
  (ODEclean_exit-1 nil 3855669739
   ("" (skeep)
    (("" (assert)
      (("" (case "meet_max(j)=0")
        (("1" (lemma "meet_max_zero")
          (("1" (inst?)
            (("1" (assert)
              (("1" (split)
                (("1" (expand "SA")
                  (("1" (expand "some") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (case "SA(j) = DLTRUE OR SA(j) = DLFALSE")
                  (("1" (hide -2)
                    (("1" (split)
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (replace -1)
                        (("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (flatten)
                      (("2" (lemma "join_composed_null")
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (split)
                              (("1"
                                (lemma "SAequiv")
                                (("1"
                                  (decompose-equality 1)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (inst
                                       -1
                                       "env_2_vec(meet_max(j),x!1)")
                                      (("1"
                                        (inst
                                         -2
                                         "env_2_vec(meet_max(j), x!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "DLBOOL")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred
                                         "env_2_vec(meet_max(j),x!1)")
                                        (("2"
                                          (assert)
                                          (("2" (skeep) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "DLBOOL")
                                (("2"
                                  (decompose-equality 2)
                                  (("2"
                                    (lemma "SAequiv")
                                    (("2"
                                      (inst? -1)
                                      (("2"
                                        (inst
                                         -1
                                         "env_2_vec(meet_max(j),x!1)")
                                        (("1"
                                          (inst
                                           -3
                                           "env_2_vec(meet_max(j), x!1)")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (typepred
                                           "env_2_vec(meet_max(j),x!1)")
                                          (("2"
                                            (assert)
                                            (("2" (skeep) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "clean_exit")
          (("2" (inst? -1)
            (("2" (expand "semi_alg")
              (("2" (lemma "env_SA_ode_analytic")
                (("2" (expand "env_sol")
                  (("2" (inst -1 "env" "j" "d" "x0" "PP" "ode")
                    (("1" (assert)
                      (("1" (hide 1)
                        (("1"
                          (inst -2 "x0"
                           "LAMBDA (t: real): env_2_vec(meet_max(j)-1, env_at_t(ode, fs_sol(d, env, ode), env )(t))")
                          (("1" (lemma "SAequiv")
                            (("1" (inst? -1)
                              (("1"
                                (name
                                 "l"
                                 "LAMBDA (t: real): env_2_vec(meet_max(j)-1, env_at_t(ode, fs_sol(d, env, ode), env )(t))")
                                (("1"
                                  (decompose-equality)
                                  (("1"
                                    (inst -2 "l(x0)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (copy -1)
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (replace -1 -3 rl)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "FORALL (x: (d)): x >= x0 IMPLIES SA(j)(env_at_t(ode, fs_sol(d, env, ode), env)(x))")
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (name
                                                     "vd"
                                                     "extend[real, (d), bool, FALSE] ({xx: (d) | x0 <= xx AND NOT SA(j) (env_at_t(ode, fs_sol(d, env, ode), env) (xx))})")
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (name
                                                         "vr"
                                                         "{xx: real | x0 <= xx AND NOT join(j) (env_2_vec(meet_max(j)-1, env_at_t (ode, fs_sol(d, env, ode), env) (xx)))}")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide
                                                             -3
                                                             -5
                                                             -7)
                                                            (("1"
                                                              (case
                                                               "inf(vr) = inf(vd)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3)
                                                                  (("1"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "SAequiv")
                                                                            (("1"
                                                                              (inst?
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -4
                                                                                 "x")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "l(x)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4
                                                                                     -1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -3
                                                                                       1
                                                                                       rl)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "env_2_vec(meet_max(j)-1, env_at_t(ode, fs_sol(d, env, ode), env)(x))")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "env_2_vec_nth")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (hide
                                                                         1)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "eps")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "SAequiv")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -3
                                                                                         "t_1")
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "env_2_vec(meet_max(j)-1, env_at_t(ode, fs_sol(d, env, ode), env)(t_1))")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "env_2_vec_nth")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (hide
                                                                         1)
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (inst
                                                                             1
                                                                             "eps")
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (inst?)
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     "SAequiv")
                                                                                    (("3"
                                                                                      (inst?)
                                                                                      (("3"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "env_2_vec(meet_max(j)-1, env_at_t(ode, fs_sol(d, env, ode), env)(t_1))")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "env_2_vec_nth")
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 3
                                                                 4
                                                                 -4
                                                                 -3)
                                                                (("2"
                                                                  (lemma
                                                                   "inf_of_subset[real]")
                                                                  (("2"
                                                                    (case
                                                                     "nonempty?[real](vr) AND bounded_below?(vr)")
                                                                    (("1"
                                                                      (case
                                                                       "nonempty?[real](vd) AND bounded_below?(vd)")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "vd"
                                                                         "vr")
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (lemma
                                                                             "glb_inf")
                                                                            (("1"
                                                                              (copy
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "vd")
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "vr")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "inf")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "adherence_inf")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "vr"
                                                                                               "inf(vd)-inf(vr)")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "inf")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "x")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -8
                                                                                                       -1
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "vd(x)")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "glb_is_bound")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "vd"
                                                                                                                 "x")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replace
                                                                                                               -9
                                                                                                               1
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "extend")
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "d(x)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "SAequiv")
                                                                                                                      (("1"
                                                                                                                        (inst?
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "env_2_vec_nth")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "d")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "dd?")
                                                                                                                        (("2"
                                                                                                                          (split)
                                                                                                                          (("1"
                                                                                                                            (skeep)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "closed_interval"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "x0")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "closed_interval"
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "glb(vd)<=b")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "glb_is_bound")
                                                                                                                                                  (("2"
                                                                                                                                                    (reveal
                                                                                                                                                     +)
                                                                                                                                                    (("2"
                                                                                                                                                      (skeep
                                                                                                                                                       5)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "x!1")
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -6
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "closed_interval"
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -4
                                                                                                                                                                 "vd"
                                                                                                                                                                 "x!1")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -15
                                                                                                                                                                   1
                                                                                                                                                                   rl)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "x0")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "inf")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "subset?")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (replace
                                                                                   -6
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -7
                                                                                     -1
                                                                                     rl)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "extend")
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "SAequiv")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "env_2_vec_nth")
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "below_bounded")
                                                                              (("2"
                                                                                (expand
                                                                                 "bounded_below?")
                                                                                (("2"
                                                                                  (skeep
                                                                                   -4)
                                                                                  (("2"
                                                                                    (inst
                                                                                     1
                                                                                     "x")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "lower_bound?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "lower_bound")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (expand
                                                                             "below_bounded")
                                                                            (("3"
                                                                              (expand
                                                                               "bounded_below?")
                                                                              (("3"
                                                                                (skeep
                                                                                 -2)
                                                                                (("3"
                                                                                  (inst
                                                                                   1
                                                                                   "x")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "lower_bound")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "lower_bound?")
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("1"
                                                                            (expand
                                                                             "empty?")
                                                                            (("1"
                                                                              (reveal
                                                                               +)
                                                                              (("1"
                                                                                (skeep
                                                                                 3)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "x")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "extend")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -5
                                                                                         5
                                                                                         rl)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "bounded_below?"
                                                                           1)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "x0")
                                                                            (("2"
                                                                              (expand
                                                                               "lower_bound?")
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "s")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -6
                                                                                     -1
                                                                                     rl)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "extend")
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (reveal
                                                                             +)
                                                                            (("1"
                                                                              (skeep
                                                                               3)
                                                                              (("1"
                                                                                (hide
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "SAequiv")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4
                                                                                           3
                                                                                           rl)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst?
                                                                                               -1)
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "env_2_vec_nth")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "bounded_below?")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "x0")
                                                                          (("2"
                                                                            (expand
                                                                             "lower_bound?")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (typepred
                                                                                 "s")
                                                                                (("2"
                                                                                  (replace
                                                                                   -3
                                                                                   -1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 3
                                                                 4
                                                                 -3
                                                                 -4)
                                                                (("3"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("1"
                                                                      (expand
                                                                       "empty?")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "x")
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               1
                                                                               rl)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "bounded_below?")
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "x0")
                                                                      (("2"
                                                                        (expand
                                                                         "lower_bound?")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (typepred
                                                                             "s")
                                                                            (("2"
                                                                              (replace
                                                                               -3
                                                                               -1
                                                                               rl)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide
                                                                 3
                                                                 4
                                                                 -3)
                                                                (("4"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   rl)
                                                                  (("4"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "nonempty?")
                                                                      (("1"
                                                                        (expand
                                                                         "empty?")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "SAequiv")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "env_2_vec(meet_max(j) - 1, env_at_t(ode, fs_sol(d, env, ode), env)(x))")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "env_2_vec_nth")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "bounded_below?")
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "x0")
                                                                        (("2"
                                                                          (expand
                                                                           "lower_bound?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred
                                                             "env_2_vec(meet_max(j) - 1, env_at_t(ode, fs_sol(d, env, ode), env)(xx))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -1 "x0")
                                      (("2"
                                        (replace -1 1 rl)
                                        (("2"
                                          (typepred
                                           "env_2_vec(meet_max(j) - 1, env_at_t(ode, fs_sol(d, env, ode), env)(x0))")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (lemma "env_2_vec_nth")
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((clean_exit formula-decl nil poly_comp_analytic Mult_Poly)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic Mult_Poly)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Analytic? const-decl "bool" poly_comp_analytic Mult_Poly)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (env_at_t? const-decl "bool" hp_expr DDL)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     DDL)
    (ODEs_s? const-decl "bool" ODEs_equiv DDL)
    (solution_odes_u? const-decl "bool" hp_expr DDL)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     DDL)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (inf const-decl "real" poly_comp_analytic Mult_Poly)
    (t_1 skolem-const-decl "(d)" analytic_equiv nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (t_1 skolem-const-decl "(d)" analytic_equiv nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (x skolem-const-decl "(d)" analytic_equiv nil)
    (env_2_vec_nth formula-decl nil chain_rule_re DDL)
    (inf_of_subset formula-decl nil real_sets reals)
    (x skolem-const-decl "(d)" analytic_equiv nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (x!1 skolem-const-decl "(d)" analytic_equiv nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (hp const-decl "bool" interval_def ODEs)
    (glb_is_bound formula-decl nil real_facts reals)
    (x skolem-const-decl "(vr)" analytic_equiv nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (adherence_inf formula-decl nil real_facts reals)
    (glb_inf formula-decl nil analytic_equiv nil)
    (x skolem-const-decl "real" analytic_equiv nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (vr skolem-const-decl "[real -> boolean]" analytic_equiv nil)
    (vd skolem-const-decl "[real -> bool]" analytic_equiv nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (empty? const-decl "bool" sets nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (eval const-decl "real" semi_algebraic_def nil)
    (x skolem-const-decl "(d)" analytic_equiv nil)
    (join def-decl "bool" semi_algebraic Mult_Poly)
    (<= const-decl "bool" reals nil) (extend const-decl "R" extend nil)
    (env skolem-const-decl "(PP)" analytic_equiv nil)
    (ode skolem-const-decl "(ODEs_P_analytic?(d, PP))" analytic_equiv
     nil)
    (PP skolem-const-decl "(ddl_dom?)" analytic_equiv nil)
    (x0 skolem-const-decl "(d)" analytic_equiv nil)
    (d skolem-const-decl "(dd?)" analytic_equiv nil)
    (l skolem-const-decl "[real -> VectorN(meet_max(j))]"
     analytic_equiv nil)
    (ODEs_P_analytic? const-decl "bool" analytic_equiv nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ODEs type-eq-decl nil hp_def DDL)
    (mapexpr_inj const-decl "bool" hp_def DDL)
    (MapExpr type-eq-decl nil hp_def DDL)
    (RealExpr type-eq-decl nil hp_def DDL)
    (dd? const-decl "bool" hp_expr DDL)
    (ddl_dom? const-decl "bool" differentiation DDL)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (env_SA_ode_analytic formula-decl nil analytic_equiv nil)
    (meet_max_zero formula-decl nil semi_algebraic Mult_Poly)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr DDL)
    (Environment type-eq-decl nil hp_def DDL)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (env_sol const-decl "Environment" ODEs_equiv DDL)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (x!1 skolem-const-decl "[nat -> real]" analytic_equiv nil)
    (j skolem-const-decl "joining" analytic_equiv nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re DDL)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (SAequiv formula-decl nil semi_algebraic_def nil)
    (x!1 skolem-const-decl "[nat -> real]" analytic_equiv nil)
    (join_composed_null formula-decl nil semi_algebraic Mult_Poly)
    (SA const-decl "bool" semi_algebraic_def nil)
    (some adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meet_max def-decl "nat" semi_algebraic Mult_Poly)
    (null_MapExprInj name-judgement "MapExprInj" hp_def DDL))
   shostak)))