(bool_expr_SA_props
 (rel_ineq_TCC1 0
  (rel_ineq_TCC1-1 nil 3877687286 ("" (subtype-tcc) nil nil) nil nil
   (rel_ineq subtype "bool_expr.dl_le" "Birel_Expr")))
 (rel_ineq_TCC2 0
  (rel_ineq_TCC2-1 nil 3877687286 ("" (subtype-tcc) nil nil) nil nil
   (rel_ineq subtype "bool_expr.dl_lt" "Birel_Expr")))
 (rel_ineq_TCC3 0
  (rel_ineq_TCC3-1 nil 3877687286 ("" (subtype-tcc) nil nil) nil nil
   (rel_ineq subtype "bool_expr.dl_ge" "Birel_Expr")))
 (rel_ineq_TCC4 0
  (rel_ineq_TCC4-1 nil 3877687286 ("" (subtype-tcc) nil nil) nil nil
   (rel_ineq subtype "bool_expr.dl_gt" "Birel_Expr")))
 (rel_ineq_TCC5 0
  (rel_ineq_TCC5-1 nil 3877687286 ("" (subtype-tcc) nil nil) nil nil
   (rel_ineq subtype "bool_expr.dl_gt" "Birel_Expr")))
 (rel_equiv 0
  (rel_equiv-1 nil 3863869049
   ("" (skeep)
    (("" (expand "rel")
      (("" (decompose-equality)
        (("" (lift-if)
          (("" (split)
            (("1" (flatten)
              (("1" (decompose-equality -1)
                (("1" (inst?)
                  (("1" (decompose-equality -1)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "-") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (hide 1)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (decompose-equality)
                      (("1" (inst?)
                        (("1" (decompose-equality)
                          (("1" (inst?) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide 1)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (decompose-equality)
                            (("1" (inst?)
                              (("1"
                                (decompose-equality)
                                (("1"
                                  (inst?)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (reveal +)
                            (("2" (typepred "dl_be")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 1 2 3)
                                  (("2"
                                    (decompose-equality)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (decompose-equality)
                                        (("2"
                                          (inst?)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rel const-decl "INEQ" bool_expr_SA_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL))
   shostak))
 (rel_inverse 0
  (rel_inverse-1 nil 3877688052
   ("" (skeep)
    (("" (split)
      (("1" (typepred "dl_be")
        (("1" (split)
          (("1" (replace -1)
            (("1" (assert)
              (("1" (expand "rel")
                (("1" (expand "rel_ineq") (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1)
            (("2" (assert)
              (("2" (expand "rel")
                (("2" (expand "rel_ineq")
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (split)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (split)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (replace -1)
            (("3" (expand "rel")
              (("3" (expand "rel_ineq")
                (("3" (lift-if)
                  (("3" (assert)
                    (("3" (split)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (split)
                            (("1" (grind) nil nil)
                             ("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (grind) nil nil))
          nil))
        nil)
       ("2" (typepred "ineq")
        (("2" (split)
          (("1" (replace -1)
            (("1" (expand "rel")
              (("1" (lift-if)
                (("1" (expand "rel_ineq") (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1)
            (("2" (decompose-equality 1)
              (("2" (expand "rel_ineq")
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (hide 1 3 -1)
                              (("2"
                                (expand "rel")
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (decompose-equality -1)
                                        (("1"
                                          (inst -1 "(x!1,x!2)")
                                          (("1"
                                            (decompose-equality)
                                            (("1"
                                              (expand "cnst")
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA(i:nat): 0")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide 1)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (decompose-equality)
                                              (("1"
                                                (inst -1 "(x!1,x!2)")
                                                (("1"
                                                  (decompose-equality)
                                                  (("1"
                                                    (expand "cnst")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "LAMBDA(i:nat): 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (replace -1)
            (("3" (expand "rel_ineq")
              (("3" (assert)
                (("3" (lift-if)
                  (("3" (split)
                    (("1" (flatten)
                      (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (flatten)
                      (("2" (grind)
                        (("2" (decompose-equality -1)
                          (("2" (decompose-equality)
                            (("2" (inst -1 "(x!1,x!2)")
                              (("2"
                                (decompose-equality -1)
                                (("2"
                                  (expand "cnst")
                                  (("2"
                                    (inst -1 "LAMBDA(i:nat): 0")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (replace -1)
            (("4" (expand "rel_ineq")
              (("4" (lift-if)
                (("4" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (grind)
                          (("1" (hide -1)
                            (("1" (decompose-equality)
                              (("1"
                                (decompose-equality 1)
                                (("1"
                                  (inst -1 "(x!1,x!2)")
                                  (("1"
                                    (decompose-equality)
                                    (("1"
                                      (expand "cnst")
                                      (("1"
                                        (inst -1 "LAMBDA(i:nat): 0")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (grind)
                          (("1" (hide 1 -1)
                            (("1" (decompose-equality)
                              (("1"
                                (decompose-equality 1)
                                (("1"
                                  (inst -1 "(x!1,x!2)")
                                  (("1"
                                    (decompose-equality)
                                    (("1"
                                      (expand "cnst")
                                      (("1"
                                        (inst -1 "LAMBDA(i:nat): 0")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind)
                            (("2" (hide 2 -1)
                              (("2"
                                (decompose-equality)
                                (("2"
                                  (decompose-equality -1)
                                  (("2"
                                    (inst -1 "(x!1,x!2)")
                                    (("2"
                                      (decompose-equality)
                                      (("2"
                                        (expand "cnst")
                                        (("2"
                                          (inst -1 "LAMBDA(i:nat): 0")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2 1 -2)
                            (("3" (decompose-equality)
                              (("3"
                                (decompose-equality)
                                (("3"
                                  (inst -1 "(x!1,x!2)")
                                  (("3"
                                    (decompose-equality)
                                    (("3"
                                      (expand "cnst")
                                      (("3"
                                        (inst -1 "LAMBDA(i:nat): 0")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide 2 3)
                            (("4" (decompose-equality)
                              (("4"
                                (decompose-equality)
                                (("4"
                                  (inst -1 "(x!1,x!2)")
                                  (("4"
                                    (decompose-equality)
                                    (("4"
                                      (expand "cnst")
                                      (("4"
                                        (inst -1 "LAMBDA(i:nat): 0")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (decompose-equality -1)
                            (("5" (hide 1 3)
                              (("5"
                                (decompose-equality)
                                (("5"
                                  (inst -1 "(x!1,x!2)")
                                  (("5"
                                    (decompose-equality)
                                    (("5"
                                      (expand "cnst")
                                      (("5"
                                        (inst -1 "LAMBDA(i:nat): 0")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rel_ineq const-decl "Birel_Expr" bool_expr_SA_props nil)
    (rel const-decl "INEQ" bool_expr_SA_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (cnst const-decl "real" hp_def dL)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (INEQ type-eq-decl nil semi_algebraic mult_poly))
   shostak))
 (sum_e_TCC1 0
  (sum_e_TCC1-1 nil 3865078923 ("" (subtype-tcc) nil nil) nil nil
   (sum_e subtype "bool_expr_SA_props.i"
    "{ii: naturalnumbers.nat | reals.<(ii, (number_fields.+)(1, bool_expr_SA_props.i))}")))
 (sum_e_TCC2 0
  (sum_e_TCC2-1 nil 3865078923
   ("" (skeep) (("" (lemma "every_e") (("" (inst?) nil nil)) nil)) nil)
   ((every_e formula-decl nil vector_arithmetic mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil))
   nil
   (sum_e subtype
    "vector_arithmetic.e((number_fields.+)(1, bool_expr_SA_props.i), bool_expr_SA_props.i)"
    "list[nat]")))
 (sum_e 0
  (sum_e-1 nil 3865078984
   ("" (induct "i")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "sum" 1)
        (("2" (assert)
          (("2" (typepred "e(2 + j, 1 + j)")
            (("2" (assert)
              (("2" (lemma "e_cdr")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (replace -1)
                      (("2" (lemma "nth_e")
                        (("2" (inst -1 "2+j" "1+j" "0")
                          (("2" (assert)
                            (("2" (expand "nth" -1)
                              (("2"
                                (replace -1)
                                (("2"
                                  (replace -5)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "every_e") (("3" (skeep) (("3" (inst?) nil nil)) nil))
      nil))
    nil)
   ((every_e formula-decl nil vector_arithmetic mv_analysis)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nth def-decl "T" list_props nil)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (e_cdr formula-decl nil vector_arithmetic mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sum def-decl "real" standard_form_mult_poly mult_poly)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (single_var_sf_TCC1 0
  (single_var_sf_TCC1-1 nil 3864462596 ("" (subtype-tcc) nil nil) nil
   nil
   (single_var_sf subtype "(number_fields.-)(bool_expr_SA_props.n, 1)"
    "{ii: naturalnumbers.nat | reals.<(ii, bool_expr_SA_props.n)}")))
 (single_var_sf_TCC2 0
  (single_var_sf_TCC2-1 nil 3864462596
   ("" (lemma "every_e") (("" (skeep) (("" (inst?) nil nil)) nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (every_e formula-decl nil vector_arithmetic mv_analysis))
   nil
   (single_var_sf subtype
    "vector_arithmetic.e(bool_expr_SA_props.n, (number_fields.-)(bool_expr_SA_props.n, 1))"
    "list[nat]")))
 (single_var_sf_TCC3 0
  (single_var_sf_TCC3-1 nil 3864462596
   ("" (skeep)
    (("" (expand "mv_standard_form?")
      (("" (split)
        (("1" (propax) nil nil)
         ("2" (split)
          (("1" (expand "minlength?")
            (("1" (split)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (hide 1)
                  (("2" (split)
                    (("1" (propax) nil nil)
                     ("2" (split)
                      (("1" (expand "Unif?")
                        (("1" (skeep)
                          (("1" (typepred "i")
                            (("1" (typepred "j")
                              (("1"
                                (expand "length" (-1 -2))
                                (("1"
                                  (expand "length" (-1 -2))
                                  (("1"
                                    (expand "nth")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 1 "0")
                        (("2" (assert)
                          (("2" (expand "nth")
                            (("2" (lemma "last_is_nth")
                              (("2"
                                (inst?)
                                (("1"
                                  (typepred "e(n,n-1)")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (lemma "nth_e")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -4)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "every_e")
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil)
           ("3" (expand "is_sorted?")
            (("3" (skeep)
              (("3" (expand "length" -1)
                (("3" (expand "length" -1)
                  (("3" (expand "nth") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (expand "simplified?") (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (VectorN type-eq-decl nil matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Unif? const-decl "bool" standard_form_mult_poly mult_poly)
    (last_is_nth formula-decl nil standard_form_mult_poly mult_poly)
    (every_e formula-decl nil vector_arithmetic mv_analysis)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (n skolem-const-decl "posnat" bool_expr_SA_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (minlength? const-decl "bool" standard_form_mult_poly mult_poly)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly mult_poly)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (simplified? const-decl "bool" standard_form_mult_poly mult_poly))
   nil
   (single_var_sf subtype
    "(: (# C := 1, alpha := vector_arithmetic.e(bool_expr_SA_props.n, (number_fields.-)(bool_expr_SA_props.n, 1)) #) :)"
    "(standard_form_mult_poly.mv_standard_form?)")))
 (cnst_sf_TCC1 0
  (cnst_sf_TCC1-1 nil 3864462596
   ("" (subtype-tcc)
    (("1" (expand "nth") (("1" (propax) nil nil)) nil)
     ("2" (expand "nth") (("2" (propax) nil nil)) nil)
     ("3" (expand "nth") (("3" (propax) nil nil)) nil)
     ("4" (expand "nth") (("4" (propax) nil nil)) nil)
     ("5" (expand "nth") (("5" (propax) nil nil)) nil)
     ("6" (expand "nth") (("6" (propax) nil nil)) nil)
     ("7" (expand "nth") (("7" (propax) nil nil)) nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a!1 skolem-const-decl "nzreal" bool_expr_SA_props nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (Unif? const-decl "bool" standard_form_mult_poly mult_poly)
    (/= const-decl "boolean" notequal nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (simplified? const-decl "bool" standard_form_mult_poly mult_poly)
    (is_sorted? const-decl "bool" sorting sorting)
    (allnonzero? const-decl "bool" standard_form_mult_poly mult_poly)
    (minlength? const-decl "bool" standard_form_mult_poly mult_poly)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (cnst_sf subtype
    "(: (# C := bool_expr_SA_props.a, alpha := list_adt[nat].null #) :)"
    "(standard_form_mult_poly.mv_standard_form?)")))
 (val_exists 0
  (val_exists-1 nil 3861362838
   ("" (skeep)
    (("" (decompose-equality)
      (("" (expand "val" 1)
        (("" (expand "eval")
          (("" (expand "max_length")
            (("" (expand "max_length")
              (("" (typepred "e(1 + i, i)")
                (("" (replace -2)
                  (("" (expand "max")
                    (("" (lemma "full_eval_recurs")
                      (("" (inst? -1)
                        (("" (assert)
                          (("" (replace -1)
                            (("" (expand "full_eval" 1 1)
                              ((""
                                (case
                                 "FORALL(l:list[real],i:below(length(l))): full_eval((# C := 1, alpha := e(1 + i, i) #))(l) = nth(l,i)")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (lemma "env_2_vec_nth")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred
                                         "env_2_vec(i+1, x!1)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 -2 -3 2)
                                  (("2"
                                    (induct "l")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (case "i!1=0")
                                          (("1"
                                            (lemma "eval_vals")
                                            (("1"
                                              (inst
                                               -1
                                               "length(e(1 + i!1, i!1))"
                                               "(# C := 1, alpha := e(1 + i!1, i!1) #)"
                                               "cons(cons1_var, cons2_var)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" 1)
                                                    (("1"
                                                      (expand "e" 1)
                                                      (("1"
                                                        (expand
                                                         "hat"
                                                         1)
                                                        (("1"
                                                          (case
                                                           "FORALL(i:nat,l:list[real] |i<=length(l)): full_eval((# C := 1, alpha := zero_vec(i) #))(l) =1")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "i!1")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (induct
                                                               "i")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   "zero_vec")
                                                                  (("1"
                                                                    (lemma
                                                                     "alpha_null_eval")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "full_eval"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (lemma
                                                                             "list_length_n[nat]")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (lemma
                                                                       "eval_vals")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "length(zero_vec(j + 1))"
                                                                         "(# C := 1, alpha := zero_vec(j + 1) #)"
                                                                         "l")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "zero_vec"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "hat"
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "zero_cdr")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -3
                                                                                           "cdr(l)")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "j")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "l")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "every_zero")
                                                                          (("2"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "every_zero")
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skeep)
                                                                (("4"
                                                                  (lemma
                                                                   "every_zero")
                                                                  (("4"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep)
                                                                (("5"
                                                                  (typepred
                                                                   "l")
                                                                  (("5"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep)
                                                                (("6"
                                                                  (typepred
                                                                   "l")
                                                                  (("6"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (lemma
                                                               "every_zero")
                                                              (("3"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (skeep)
                                                            (("4"
                                                              (typepred
                                                               "l")
                                                              (("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "every_e")
                                                (("2" (inst?) nil nil))
                                                nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nth" 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "eval_vals")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "length(e(1 + i!1, i!1))"
                                                   "(# C := 1, alpha := e(1 + i!1, i!1) #)"
                                                   "cons(cons1_var, cons2_var)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand "e" 2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "hat"
                                                           2)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "i!1-1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "every_e")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (lemma "every_e")
                                        (("3" (inst?) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4"
                                        (typepred "l")
                                        (("4"
                                          (typepred "i!1")
                                          (("4"
                                            (typepred
                                             "e(1 + i!1, i!1)")
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (lemma "every_e")
                                    (("3" (inst?) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (skeep)
                                  (("4"
                                    (typepred "i")
                                    (("4"
                                      (typepred "l")
                                      (("4"
                                        (typepred "i!1")
                                        (("4"
                                          (typepred "e(1 + i!1, i!1)")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (dLVar type-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (val const-decl "real" hp_def dL)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def dL)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def dL)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (eval const-decl "real" semi_algebraic_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (< const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (full_eval_recurs formula-decl nil eval_properties mult_poly)
    (full_eval def-decl "real" eval_MultPoly mult_poly)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (cons1_var skolem-const-decl "real" bool_expr_SA_props nil)
    (cons2_var skolem-const-decl "list[real]" bool_expr_SA_props nil)
    (i!1 skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
     bool_expr_SA_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (expt_x1 formula-decl nil exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (i!2 skolem-const-decl "nat" bool_expr_SA_props nil)
    (i!2 skolem-const-decl "nat" bool_expr_SA_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (l skolem-const-decl "{l: list[real] | 0 <= length(l)}"
     bool_expr_SA_props nil)
    (list_length_n formula-decl nil list_lemmas mult_poly)
    (alpha_null_eval formula-decl nil eval_properties mult_poly)
    (every_zero formula-decl nil vector_arithmetic mv_analysis)
    (expt_x0 formula-decl nil exponentiation nil)
    (zero_cdr formula-decl nil vector_arithmetic mv_analysis)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (l skolem-const-decl "{l: list[real] | 1 + j <= length(l)}"
     bool_expr_SA_props nil)
    (j skolem-const-decl "nat" bool_expr_SA_props nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties mult_poly)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (every_e formula-decl nil vector_arithmetic mv_analysis)
    (replace def-decl "list[nat]" eval_MultPoly mult_poly)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (eval_vals formula-decl nil eval_properties mult_poly)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list_length_n def-decl "list[nat]" list_lemmas mult_poly)
    (eval def-decl "monomial" eval_MultPoly mult_poly)
    (list_induction formula-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "nat" bool_expr_SA_props nil)
    (x!1 skolem-const-decl "[nat -> real]" bool_expr_SA_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (env_2_vec_nth formula-decl nil chain_rule_re dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (full_eval const-decl "real" eval_MultPoly mult_poly)
    (below type-eq-decl nil naturalnumbers nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re dL)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_length def-decl "nat" standard_form_mult_poly mult_poly)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil))
   shostak))
 (cnst_exists 0
  (cnst_exists-1 nil 3862058603
   ("" (skeep)
    (("" (expand "eval")
      (("" (assert)
        (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil))
      nil))
    nil)
   ((eval const-decl "real" semi_algebraic_def nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly mult_poly)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re dL)
    (^ def-decl "list[T]" more_list_props structures)
    (list_length_n def-decl "list[nat]" list_lemmas mult_poly)
    (add_lists def-decl "list[nat]" list_lemmas mult_poly)
    (eval def-decl "monomial" eval_MultPoly mult_poly)
    (eval def-decl "MultPoly" eval_MultPoly mult_poly)
    (sum_C def-decl "real" eval_MultPoly mult_poly)
    (full_eval def-decl "real" eval_MultPoly mult_poly)
    (cnst const-decl "real" hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (sf_iff_mp 0
  (sf_iff_mp-1 nil 3863784559
   ("" (skeep)
    (("" (expand "exist_sf?")
      (("" (expand "exist_mp?")
        (("" (split)
          (("1" (flatten) (("1" (skeep) (("1" (inst?) nil nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (skeep)
              (("2" (inst 1 "mv_standard_form(p)")
                (("1" (assert)
                  (("1" (lemma "standard_form_full_eval")
                    (("1" (lemma "eval_equiv_ddl")
                      (("1" (copy -1)
                        (("1" (inst? -1)
                          (("1" (decompose-equality 1)
                            (("1" (decompose-equality -4)
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (name
                                         "l"
                                         "env_2_vec(max_length(p),x!1)")
                                        (("1"
                                          (typepred "l")
                                          (("1"
                                            (case
                                             "FORALL (i: below(max_length(p))): nth(l, i) = x!1(i)")
                                            (("1"
                                              (inst -5 "l")
                                              (("1"
                                                (replace -5)
                                                (("1"
                                                  (hide -5)
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "mv_standard_form(p)"
                                                     "x!1"
                                                     "l")
                                                    (("1"
                                                      (replace -5)
                                                      (("1"
                                                        (hide -5)
                                                        (("1"
                                                          (inst? -5)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "mv_standard_form_max_length")
                                                        (("2"
                                                          (inst -1 "p")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -5
                                                                   1
                                                                   rl)
                                                                  (("2"
                                                                    (lemma
                                                                     "env_2_vec_nth")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (lemma "env_2_vec_nth")
                                                (("2"
                                                  (replace -4 1 rl)
                                                  (("2"
                                                    (inst? -1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (typepred "i")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "standard_form_is_standard")
                  (("2" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exist_sf? const-decl "bool" bool_expr_SA_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (standard_form_is_standard formula-decl nil standard_form_mult_poly
     mult_poly)
    (eval_equiv_ddl formula-decl nil semi_algebraic_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (l skolem-const-decl "VectorN(1 + max_length(p))"
     bool_expr_SA_props nil)
    (x!1 skolem-const-decl "[nat -> real]" bool_expr_SA_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (env_2_vec_nth formula-decl nil chain_rule_re dL)
    (mv_standard_form_max_length formula-decl nil standard_form_extras
     mult_poly)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re dL)
    (max_length def-decl "nat" standard_form_mult_poly mult_poly)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (eval const-decl "real" semi_algebraic_def nil)
    (standard_form_full_eval formula-decl nil standard_form_unique
     mult_poly)
    (mv_standard_form def-decl "MultPoly" standard_form_mult_poly
     mult_poly)
    (p skolem-const-decl "MultPoly" bool_expr_SA_props nil)
    (exist_mp? const-decl "bool" bool_expr_SA_props nil))
   shostak))
 (sf_val 0
  (sf_val-1 nil 3863785388
   ("" (skeep)
    (("" (expand "exist_sf?")
      (("" (name "p" "single_var_sf(i+1)")
        (("" (expand "single_var_sf")
          (("" (lemma "val_exists")
            (("" (inst?)
              (("" (inst 1 "p") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exist_sf? const-decl "bool" bool_expr_SA_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (val_exists formula-decl nil bool_expr_SA_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (single_var_sf const-decl "(mv_standard_form?)" bool_expr_SA_props
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (sf_cnst 0
  (sf_cnst-1 nil 3863785575
   ("" (skeep)
    (("" (case "a=0")
      (("1" (replace -1)
        (("1" (expand "cnst")
          (("1" (expand "exist_sf?")
            (("1" (inst 1 "null")
              (("1" (expand "eval")
                (("1" (assert)
                  (("1" (expand "max_length")
                    (("1" (expand "full_eval") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (name "p" "cnst_sf(a)")
        (("1" (expand "cnst_sf")
          (("1" (expand "exist_sf?")
            (("1" (inst 2 "p")
              (("1" (lemma "cnst_exists")
                (("1" (inst?)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cnst const-decl "real" hp_def dL)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (full_eval def-decl "real" eval_MultPoly mult_poly)
    (max_length def-decl "nat" standard_form_mult_poly mult_poly)
    (eval const-decl "real" semi_algebraic_def nil)
    (exist_sf? const-decl "bool" bool_expr_SA_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (cnst_exists formula-decl nil bool_expr_SA_props nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (cnst_sf const-decl "(mv_standard_form?)" bool_expr_SA_props nil))
   shostak))
 (mp_val 0
  (mp_val-1 nil 3875366613
   ("" (skeep)
    (("" (lemma "sf_val")
      (("" (inst -1 "i")
        (("" (lemma "sf_iff_mp")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sf_val formula-decl nil bool_expr_SA_props nil)
    (sf_iff_mp formula-decl nil bool_expr_SA_props nil)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def dL)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def dL)
    (val const-decl "real" hp_def dL) (dLVar type-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (mp_cnst 0
  (mp_cnst-1 nil 3875366659
   ("" (lemma "sf_cnst")
    (("" (lemma "sf_iff_mp")
      (("" (skeep)
        (("" (inst -2 "a") (("" (inst?) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sf_iff_mp formula-decl nil bool_expr_SA_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cnst const-decl "real" hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sf_cnst formula-decl nil bool_expr_SA_props nil))
   shostak))
 (Re_sum 0
  (Re_sum-1 nil 3861696345
   ("" (skeep)
    (("" (expand "exist_mp?")
      (("" (skeep*)
        (("" (inst 1 "add(p,p!1)")
          (("" (decompose-equality)
            (("" (decompose-equality)
              (("" (decompose-equality)
                (("" (inst -1 "x!1")
                  (("" (inst -2 "x!1")
                    (("" (lemma "add_full_eval")
                      (("" (expand "+" 1)
                        (("" (replace -2)
                          (("" (replace -3)
                            (("" (lemma "eval_equiv_ddl")
                              ((""
                                (lemma "add_max_length")
                                ((""
                                  (inst? -1)
                                  ((""
                                    (name
                                     "n"
                                     "max(max_length(p), max_length(p!1))")
                                    ((""
                                      (case "n=0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (expand "eval" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst? -5)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (copy -3)
                                        (("2"
                                          (copy -1)
                                          (("2"
                                            (inst
                                             -1
                                             "p"
                                             "x!1"
                                             "env_2_vec(n-1,x!1)")
                                            (("1"
                                              (inst
                                               -2
                                               "p!1"
                                               "x!1"
                                               "env_2_vec(n-1,x!1)")
                                              (("1"
                                                (inst
                                                 -5
                                                 "add(p,p!1)"
                                                 "x!1"
                                                 "env_2_vec(n-1,x!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (inst? -6)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   "env_2_vec(n - 1, x!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "env_2_vec_nth")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "env_2_vec(n - 1, x!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "env_2_vec_nth")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst? -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "env_2_vec(n - 1, x!1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (lemma
                                                     "env_2_vec_nth")
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exist_mp? const-decl "bool" bool_expr_SA_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (add_full_eval formula-decl nil standard_form_unique mult_poly)
    (eval_equiv_ddl formula-decl nil semi_algebraic_def nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (env_2_vec_nth formula-decl nil chain_rule_re dL)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "[nat -> real]" bool_expr_SA_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (n skolem-const-decl
     "{k: nat | max_length(p) <= k AND max_length(p!1) <= k}"
     bool_expr_SA_props nil)
    (p!1 skolem-const-decl "MultPoly" bool_expr_SA_props nil)
    (p skolem-const-decl "MultPoly" bool_expr_SA_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (max_length def-decl "nat" standard_form_mult_poly mult_poly)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (add_max_length formula-decl nil standard_form_extras mult_poly)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (eval const-decl "real" semi_algebraic_def nil)
    (RealExpr type-eq-decl nil hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def dL)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Re_prod 0
  (Re_prod-1 nil 3861695976
   ("" (skeep)
    (("" (expand "exist_mp?")
      (("" (skeep*)
        (("" (inst 1 "mp_mult(p,p!1)")
          (("" (decompose-equality)
            (("" (decompose-equality)
              (("" (decompose-equality)
                (("" (expand "*" 1)
                  (("" (inst?)
                    (("" (inst?)
                      (("" (replace -1)
                        (("" (replace -2)
                          (("" (lemma "eval_equiv_ddl")
                            (("" (copy -1)
                              ((""
                                (copy -1)
                                ((""
                                  (inst? -1)
                                  ((""
                                    (lemma "mp_mult_max_length")
                                    ((""
                                      (inst? -1)
                                      ((""
                                        (name
                                         "n"
                                         "max(max_length(p), max_length(p!1))")
                                        ((""
                                          (replace -1)
                                          ((""
                                            (case "n=0")
                                            (("1"
                                              (inst -4 "null")
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (inst? -4)
                                                    (("1"
                                                      (inst -4 "null")
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (hide -4)
                                                          (("1"
                                                            (inst? -4)
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "null")
                                                              (("1"
                                                                (replace
                                                                 -4)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "mult_full_eval")
                                                                    (("1"
                                                                      (inst?
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (skeep)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2" (skeep) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -3
                                               "env_2_vec(n-1,x!1)")
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (inst? -3)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "env_2_vec(n-1,x!1)")
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (inst? -3)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "env_2_vec(n-1,x!1)")
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (lemma
                                                                   "mult_full_eval")
                                                                  (("1"
                                                                    (inst?
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "env_2_vec(n - 1, x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "env_2_vec(n - 1, x!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (lemma
                                                                       "env_2_vec_nth")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "env_2_vec(n - 1, x!1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (lemma
                                                               "env_2_vec_nth")
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "env_2_vec(n - 1, x!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (lemma
                                                       "env_2_vec_nth")
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exist_mp? const-decl "bool" bool_expr_SA_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (mp_mult def-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl
     "{k: nat | max_length(p) <= k AND max_length(p!1) <= k}"
     bool_expr_SA_props nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re dL)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (env_2_vec_nth formula-decl nil chain_rule_re dL)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (p skolem-const-decl "MultPoly" bool_expr_SA_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (x!1 skolem-const-decl "[nat -> real]" bool_expr_SA_props nil)
    (length_null formula-decl nil more_list_props structures)
    (p!1 skolem-const-decl "MultPoly" bool_expr_SA_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_full_eval formula-decl nil standard_form_unique mult_poly)
    (<= const-decl "bool" reals nil)
    (max_length def-decl "nat" standard_form_mult_poly mult_poly)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (mp_mult_max_length formula-decl nil standard_form_extras
     mult_poly)
    (eval_equiv_ddl formula-decl nil semi_algebraic_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (eval const-decl "real" semi_algebraic_def nil)
    (RealExpr type-eq-decl nil hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def dL)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Re_diff 0
  (Re_diff-1 nil 3863528506
   ("" (skeep)
    (("" (case "re1-re2 = re1+(cnst(-1)*re2)")
      (("1" (replace -1)
        (("1" (lemma "Re_sum")
          (("1" (lemma "Re_prod")
            (("1" (inst? -1)
              (("1" (assert)
                (("1" (split -1)
                  (("1" (inst? -2) (("1" (assert) nil nil)) nil)
                   ("2" (expand "exist_mp?" 1)
                    (("2" (lemma "cnst_exists")
                      (("2" (inst? -1)
                        (("2"
                          (inst 1 "(: (# C := -1, alpha := null #) :)")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (decompose-equality)
        (("2" (expand "-")
          (("2" (expand "+")
            (("2" (expand "*")
              (("2" (expand "cnst") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cnst const-decl "real" hp_def dL)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (RealExpr type-eq-decl nil hp_def dL)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Re_sum formula-decl nil bool_expr_SA_props nil)
    (cnst_exists formula-decl nil bool_expr_SA_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (list type-decl nil list_adt nil)
    (exist_mp? const-decl "bool" bool_expr_SA_props nil)
    (Re_prod formula-decl nil bool_expr_SA_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Re_expt 0
  (Re_expt-1 nil 3863528808
   ("" (skeep)
    (("" (induct "n")
      (("1" (assert)
        (("1" (expand "^")
          (("1" (expand "^")
            (("1" (expand "expt")
              (("1" (expand "exist_mp?")
                (("1" (lemma "cnst_exists")
                  (("1" (inst -1 "1")
                    (("1" (expand "cnst")
                      (("1" (replace -1)
                        (("1"
                          (inst 1 "(: (# C := 1, alpha := null #) :)")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "^")
          (("2" (expand "^")
            (("2" (expand "expt" 1)
              (("2" (lemma "Re_prod")
                (("2"
                  (inst -1 "re1"
                   "LAMBDA (t: Environment) -> real: expt(re1(t), j)")
                  (("2" (assert)
                    (("2" (expand "*") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (exist_mp? const-decl "bool" bool_expr_SA_props nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (expt def-decl "real" exponentiation nil)
    (cnst_exists formula-decl nil bool_expr_SA_props nil)
    (cnst const-decl "real" hp_def dL)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (list type-decl nil list_adt nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (Re_prod formula-decl nil bool_expr_SA_props nil))
   shostak))
 (val_cnst_SA 0
  (val_cnst_SA-8 nil 3912520873
   (""
    (deftactic expand_sa
     (then (expand "SA") (for 2 (expand "some")) (expand "ands")
      (for 2 (expand "every")) (expand "evalatom")))
    (("" (skeep)
      (("" (expand "SAable?")
        (("" (expand "SA?")
          (("" (typepred "dl_be")
            (("" (case "a=0")
              (("1" (lemma "val_exists")
                (("1" (inst? -1)
                  (("1" (name "p" "single_var_sf(i+1)")
                    (("1" (expand "single_var_sf")
                      (("1" (typepred "p")
                        (("1" (split -5)
                          (("1" (decompose-equality)
                            (("1" (inst? -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=<=#):):)")
                                  (("1"
                                    (expand_sa)
                                    (("1"
                                      (replace -4)
                                      (("1"
                                        (decompose-equality 1)
                                        (("1"
                                          (decompose-equality)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (expand "cnst" -1 2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -5)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "cnst")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (decompose-equality)
                            (("2" (inst? -1)
                              (("2"
                                (expand "cnst")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=<#):):)")
                                    (("2"
                                      (expand_sa)
                                      (("2"
                                        (replace -3)
                                        (("2"
                                          (replace -4)
                                          (("2"
                                            (replace -5)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (decompose-equality)
                            (("3" (inst? -1)
                              (("3"
                                (replace -1)
                                (("3"
                                  (expand "cnst")
                                  (("3"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=>=#):):)")
                                    (("3"
                                      (expand_sa)
                                      (("3"
                                        (replace -3)
                                        (("3"
                                          (replace -4)
                                          (("3"
                                            (replace -5)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (decompose-equality)
                            (("4" (inst? -1)
                              (("4"
                                (replace -1)
                                (("4"
                                  (expand "cnst")
                                  (("4"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=>#):):)")
                                    (("4"
                                      (expand_sa)
                                      (("4"
                                        (replace -3)
                                        (("4"
                                          (replace -4)
                                          (("4"
                                            (replace -5)
                                            (("4" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (name "p" "add(cnst_sf(-a),single_var_sf(i+1))")
                (("1" (lemma "add_standard_form")
                  (("1" (inst? -1)
                    (("1" (expand "single_var_sf")
                      (("1" (expand "cnst_sf")
                        (("1" (case "max_length(p)=i+1")
                          (("1" (case "eval(p) = val(dlvar(i))-a")
                            (("1" (hide 1)
                              (("1"
                                (split -5)
                                (("1"
                                  (decompose-equality)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "cnst")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             1
                                             "(:(:(#poly:=p, ineq:=<=#):):)")
                                            (("1"
                                              (expand_sa)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (decompose-equality
                                                     1)
                                                    (("1"
                                                      (expand "-")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality)
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand "cnst")
                                          (("2"
                                            (inst
                                             1
                                             "(:(:(#poly:=p, ineq:=<#):):)")
                                            (("1"
                                              (expand_sa)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (expand "-")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (decompose-equality)
                                  (("3"
                                    (inst? -1)
                                    (("3"
                                      (replace -1)
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=>=#):):)")
                                          (("1"
                                            (expand_sa)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (decompose-equality 1)
                                                (("1"
                                                  (expand "-")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (decompose-equality)
                                  (("4"
                                    (inst? -1)
                                    (("4"
                                      (replace -1)
                                      (("4"
                                        (inst
                                         1
                                         "(:(:(#poly:=p, ineq:=>#):):)")
                                        (("1"
                                          (expand_sa)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (decompose-equality 1)
                                              (("1"
                                                (expand "-")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -4 3)
                              (("2"
                                (lemma "val_exists")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (lemma "eval_equiv_ddl")
                                      (("2"
                                        (lemma "add_full_eval")
                                        (("2"
                                          (expand "cnst")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "-")
                                              (("2"
                                                (copy -2)
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (typepred
                                                     "env_2_vec(i,x!1)")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (inst
                                                         -2
                                                         "env_2_vec(i,x!1)")
                                                        (("1"
                                                          (inst? -3)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "env_2_vec(i,x!1)")
                                                            (("1"
                                                              (replace
                                                               -8)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "(: (# C := 1, alpha := e(1 + i, i) #) :)"
                                                                     "x!1"
                                                                     "env_2_vec(i,x!1)")
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "full_eval_recurs")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "(: (# C := -a, alpha := null #) :)"
                                                                             "env_2_vec(i, x!1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "full_eval"
                                                                                   1
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "alpha_null_eval")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "full_eval"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "list_length_n[nat]")
                                                                                          (("2"
                                                                                            (inst?
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "max_length"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "max_length"
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "e(i + 1, i)")
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "max"
                                                                               1)
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "env_2_vec_nth")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i_1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max_length")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "max_length")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "every_e")
                                                                      (("3"
                                                                        (inst?
                                                                         -1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "max_length"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "max_length"
                                                                 1)
                                                                (("2"
                                                                  (typepred
                                                                   "e(i + 1, i)")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (lemma
                                                                 "env_2_vec_nth")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -3 2 3)
                            (("2"
                              (case "p = (: (# C := -a, alpha := zero_vec(1+i) #), (# C := 1, alpha := e(1 + i, i) #) :)")
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "max_length" 1)
                                  (("1"
                                    (expand "max_length" 1)
                                    (("1"
                                      (expand "max_length" 1)
                                      (("1"
                                        (typepred "e(i + 1, i)")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (typepred "zero_vec(1+i)")
                                            (("1"
                                              (replace -2)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case "zero_vec(i+1) = (:0:)^(i+1)")
                                  (("1"
                                    (expand "add" -3)
                                    (("1"
                                      (expand "min_add" -3)
                                      (("1"
                                        (name
                                         "x"
                                         "sort_add((: (# C := -a, alpha := null #) :), (: (# C := 1, alpha := e(1 + i, i) #) :))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "sort_add" -1)
                                            (("1"
                                              (name
                                               "p1"
                                               "single_var_sf(i+1)")
                                              (("1"
                                                (name
                                                 "p2"
                                                 "cnst_sf(-a)")
                                                (("1"
                                                  (expand
                                                   "single_var_sf")
                                                  (("1"
                                                    (expand "cnst_sf")
                                                    (("1"
                                                      (typepred "p1")
                                                      (("1"
                                                        (typepred "p2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 -5
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "sorted_add"
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "max_length"
                                                                     -5)
                                                                    (("1"
                                                                      (expand
                                                                       "max_length"
                                                                       -5)
                                                                      (("1"
                                                                        (typepred
                                                                         "e(i + 1, i)")
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -7)
                                                                            (("1"
                                                                              (lemma
                                                                               "lft_max_on_minlength")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "p1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -7
                                                                                   -1
                                                                                   rl)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max_length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "max_length"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "max"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "lft"
                                                                                               -8)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "lft"
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -9
                                                                                                         -8
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "append_null_left[nat]")
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2
                                                                                                                 -3
                                                                                                                 -10
                                                                                                                 -11)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "sorted_sans_add"
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "list_extensionality[nat]")
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "nth_zero")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -2
                                                                                                                                 "i")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "nth_e")
                                                                                                                                    (("1"
                                                                                                                                      (inst?
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "leq((# C := -a, alpha := zero_vec(1 + i) #), (# C := 1, alpha := e(1 + i, i) #))")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -7)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "sorted_sans_add"
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "minlength?(x)")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2
                                                                                                                                                         -9
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -9)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -9
                                                                                                                                                             1
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (reveal
                                                                                                                                                               -)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -7)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         1
                                                                                                                                                         rl)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "minlength?"
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (split)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (split)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (split)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "Unif?")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (reveal
                                                                                                                                                                         +)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           1
                                                                                                                                                                           2
                                                                                                                                                                           4
                                                                                                                                                                           5
                                                                                                                                                                           6)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "i_1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "j")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -5)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "length"
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "length"
                                                                                                                                                                                         -)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "j=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "i_1=0")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth"
                                                                                                                                                                                               3)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "nth")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "i_1=0")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       1
                                                                                                                                                                       "1")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "nth")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "nth")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "last_is_nth")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "nth_e")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "every_e")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst?
                                                                                                                                                                                     -1)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (typepred
                                                                                                                                       "zero_vec(1+i)")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "leq")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             2
                                                                                                                                             3
                                                                                                                                             4
                                                                                                                                             -)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               -15)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "sum_0")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "sum_e")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (lemma
                                                                                                                                       "every_e")
                                                                                                                                      (("3"
                                                                                                                                        (inst?)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("4"
                                                                                                                                      (lemma
                                                                                                                                       "every_zero")
                                                                                                                                      (("4"
                                                                                                                                        (inst?)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (lemma
                                                                                                                         "every_e")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (lemma
                                                                                                                         "every_zero")
                                                                                                                        (("3"
                                                                                                                          (inst?)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -6
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "minlength?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "Unif?")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "i_1")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "0")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth")
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "i_1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "last_is_nth")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "nth_e")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "list_extensionality[nat]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "zero_vec(1+i)")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (split)
                                              (("1"
                                                (case
                                                 "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (induct "i")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand "^" 1)
                                                      (("2"
                                                        (lemma
                                                         "length_append[nat]")
                                                        (("2"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "FORALL(j:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), 1 + j)))")
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (induct
                                                               "j")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "every_append[number]")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (lemma "nth_zero")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case
                                                         "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), i)))")
                                                        (("1"
                                                          (case
                                                           "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                          (("1"
                                                            (case
                                                             "FORALL(i:nat): FORALL (n: below(1 + i)): 0 = nth((: 0 :) ^ (1 + i), n)")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (induct
                                                               "i")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "n!1")
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "^"
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "append_null_right[nat]")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("2"
                                                                      (case
                                                                       "n!1=0")
                                                                      (("1"
                                                                        (lemma
                                                                         "more_list_props[nat].nth_append")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst?
                                                                             -4)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "more_list_props[nat].nth_append")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -3
                                                                               "j")
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 -1
                                                                                 rl)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "n!1-1")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst?
                                                                             -3)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (typepred
                                                                   "n!1")
                                                                  (("3"
                                                                    (reveal
                                                                     -)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "i!2")
                                                                      (("3"
                                                                        (expand
                                                                         "^"
                                                                         1)
                                                                        (("3"
                                                                          (expand
                                                                           "^"
                                                                           -1)
                                                                          (("3"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             rl)
                                                                            (("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (typepred
                                                                 "n!1")
                                                                (("3"
                                                                  (inst
                                                                   -2
                                                                   "i!1")
                                                                  (("3"
                                                                    (expand
                                                                     "^")
                                                                    (("3"
                                                                      (replace
                                                                       -2
                                                                       1
                                                                       rl)
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             -6
                                                             2
                                                             3
                                                             4)
                                                            (("2"
                                                              (induct
                                                               "i")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "length_append[nat]")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           2
                                                           3
                                                           4
                                                           -)
                                                          (("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "every_append[number]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (^[real]((: 0 :), 1 + i))")
                                        (("1" (inst?) nil nil)
                                         ("2"
                                          (induct "i")
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (expand "^" 1)
                                              (("2"
                                                (lemma
                                                 "every_append[number]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "every_zero")
                                        (("3" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SA? const-decl "bool" semi_algebraic_def nil)
    (cnst const-decl "real" hp_def dL)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def dL)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def dL)
    (val const-decl "real" hp_def dL) (dLVar type-decl nil hp_def dL)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (joining type-eq-decl nil semi_algebraic mult_poly)
    (meeting type-eq-decl nil semi_algebraic mult_poly)
    (atomic_poly type-eq-decl nil semi_algebraic mult_poly)
    (INEQ type-eq-decl nil semi_algebraic mult_poly)
    (eval const-decl "real" semi_algebraic_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (SA const-decl "bool" semi_algebraic_def nil)
    (some adt-def-decl "boolean" list_adt nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (single_var_sf const-decl "(mv_standard_form?)" bool_expr_SA_props
     nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (list type-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (val_exists formula-decl nil bool_expr_SA_props nil)
    (add_standard_form formula-decl nil standard_form_extras mult_poly)
    (max_length def-decl "nat" standard_form_mult_poly mult_poly)
    (eval_equiv_ddl formula-decl nil semi_algebraic_def nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (every_e formula-decl nil vector_arithmetic mv_analysis)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (env_2_vec_nth formula-decl nil chain_rule_re dL)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (i_1 skolem-const-decl
     "below(max_length((: (# C := 1, alpha := e(1 + i, i) #) :)))"
     bool_expr_SA_props nil)
    (full_eval_recurs formula-decl nil eval_properties mult_poly)
    (real_times_real_is_real application-judgement "real" reals nil)
    (full_eval def-decl "real" eval_MultPoly mult_poly)
    (full_eval const-decl "real" eval_MultPoly mult_poly)
    (list_length_n formula-decl nil list_lemmas mult_poly)
    (list_length_n def-decl "list[nat]" list_lemmas mult_poly)
    (alpha_null_eval formula-decl nil eval_properties mult_poly)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (a skolem-const-decl "real" bool_expr_SA_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (x!1 skolem-const-decl "[nat -> real]" bool_expr_SA_props nil)
    (i skolem-const-decl "nat" bool_expr_SA_props nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re dL)
    (add_full_eval formula-decl nil standard_form_unique mult_poly)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (p skolem-const-decl "MultPoly" bool_expr_SA_props nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (^ def-decl "list[T]" more_list_props structures)
    (min_add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (sorted_add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (lft_max_on_minlength formula-decl nil standard_form_extras
     mult_poly)
    (lft def-decl "MultPoly" standard_form_mult_poly mult_poly)
    (append_null_left formula-decl nil more_list_props structures)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (every_zero formula-decl nil vector_arithmetic mv_analysis)
    (sum_e formula-decl nil bool_expr_SA_props nil)
    (sum_0 formula-decl nil standard_form_mult_poly mult_poly)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (last_is_nth formula-decl nil standard_form_mult_poly mult_poly)
    (Unif? const-decl "bool" standard_form_mult_poly mult_poly)
    (leq def-decl "bool" standard_form_mult_poly mult_poly)
    (nth_zero formula-decl nil vector_arithmetic mv_analysis)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (list_extensionality formula-decl nil more_list_props structures)
    (length_null formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (p1 skolem-const-decl "(mv_standard_form?)" bool_expr_SA_props nil)
    (minlength? const-decl "bool" standard_form_mult_poly mult_poly)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (append def-decl "list[T]" list_props nil)
    (j skolem-const-decl "nat" bool_expr_SA_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (every_append formula-decl nil list_props nil)
    (length_append formula-decl nil list_props nil)
    (append_null_right formula-decl nil more_list_props structures)
    (j skolem-const-decl "nat" bool_expr_SA_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (j skolem-const-decl "nat" bool_expr_SA_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (cnst_sf const-decl "(mv_standard_form?)" bool_expr_SA_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (SAable? const-decl "bool" bool_expr_SA_props nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (val_cnst_SA-7 nil 3912520823
   (""
    (deftactic expand_sa nil
     (then (expand "SA") (for 2 (expand "some")) (expand "ands")
      (for 2 (expand "every")) (expand "evalatom")))
    (("" (skeep)
      (("" (expand "SAable?")
        (("" (expand "SA?")
          (("" (typepred "dl_be")
            (("" (case "a=0")
              (("1" (lemma "val_exists")
                (("1" (inst? -1)
                  (("1" (name "p" "single_var_sf(i+1)")
                    (("1" (expand "single_var_sf")
                      (("1" (typepred "p")
                        (("1" (split -5)
                          (("1" (decompose-equality)
                            (("1" (inst? -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=<=#):):)")
                                  (("1"
                                    (expand "SA")
                                    (("1"
                                      (expand "some")
                                      (("1"
                                        (expand "some")
                                        (("1"
                                          (expand "ands")
                                          (("1"
                                            (expand "every")
                                            (("1"
                                              (expand "every")
                                              (("1"
                                                (expand "evalatom")
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (decompose-equality
                                                     1)
                                                    (("1"
                                                      (decompose-equality)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (expand
                                                             "cnst"
                                                             -1
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -5)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "cnst")
                                                                    (("1"
                                                                      (propax)
                                                                      nil)))))))))))))))))))))))))))))))))))))))))))
                           ("2" (decompose-equality)
                            (("2" (inst? -1)
                              (("2"
                                (expand "cnst")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=<#):):)")
                                    (("2"
                                      (expand "SA")
                                      (("2"
                                        (expand "some")
                                        (("2"
                                          (expand "some")
                                          (("2"
                                            (expand "ands")
                                            (("2"
                                              (expand "every")
                                              (("2"
                                                (expand "every")
                                                (("2"
                                                  (expand "evalatom")
                                                  (("2"
                                                    (replace -3)
                                                    (("2"
                                                      (replace -4)
                                                      (("2"
                                                        (replace -5)
                                                        (("2"
                                                          (propax)
                                                          nil)))))))))))))))))))))))))))))))
                           ("3" (decompose-equality)
                            (("3" (inst? -1)
                              (("3"
                                (replace -1)
                                (("3"
                                  (expand "cnst")
                                  (("3"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=>=#):):)")
                                    (("3"
                                      (expand "SA")
                                      (("3"
                                        (expand "some")
                                        (("3"
                                          (expand "some")
                                          (("3"
                                            (expand "ands")
                                            (("3"
                                              (expand "every")
                                              (("3"
                                                (expand "every")
                                                (("3"
                                                  (expand "evalatom")
                                                  (("3"
                                                    (replace -3)
                                                    (("3"
                                                      (replace -4)
                                                      (("3"
                                                        (replace -5)
                                                        (("3"
                                                          (propax)
                                                          nil)))))))))))))))))))))))))))))))
                           ("4" (decompose-equality)
                            (("4" (inst? -1)
                              (("4"
                                (replace -1)
                                (("4"
                                  (expand "cnst")
                                  (("4"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=>#):):)")
                                    (("4"
                                      (expand "SA")
                                      (("4"
                                        (expand "some")
                                        (("4"
                                          (expand "some")
                                          (("4"
                                            (expand "ands")
                                            (("4"
                                              (expand "every")
                                              (("4"
                                                (expand "every")
                                                (("4"
                                                  (expand "evalatom")
                                                  (("4"
                                                    (replace -3)
                                                    (("4"
                                                      (replace -4)
                                                      (("4"
                                                        (replace -5)
                                                        (("4"
                                                          (propax)
                                                          nil)))))))))))))))))))))))))))))))))))))))))))
               ("2" (name "p" "add(cnst_sf(-a),single_var_sf(i+1))")
                (("1" (lemma "add_standard_form")
                  (("1" (inst? -1)
                    (("1" (expand "single_var_sf")
                      (("1" (expand "cnst_sf")
                        (("1" (case "max_length(p)=i+1")
                          (("1" (case "eval(p) = val(dlvar(i))-a")
                            (("1" (hide 1)
                              (("1"
                                (split -5)
                                (("1"
                                  (decompose-equality)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "cnst")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             1
                                             "(:(:(#poly:=p, ineq:=<=#):):)")
                                            (("1"
                                              (expand "SA" 1)
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "some")
                                                  (("1"
                                                    (expand "ands")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "every")
                                                        (("1"
                                                          (expand
                                                           "evalatom")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "-")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))))))))))))))))))
                                             ("2"
                                              (assert)
                                              nil)))))))))))))
                                 ("2"
                                  (decompose-equality)
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand "cnst")
                                          (("2"
                                            (inst
                                             1
                                             "(:(:(#poly:=p, ineq:=<#):):)")
                                            (("1"
                                              (expand "SA" 1)
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "some")
                                                  (("1"
                                                    (expand "ands")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "every")
                                                        (("1"
                                                          (expand
                                                           "evalatom")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "-")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))))))))))))))))
                                             ("2"
                                              (assert)
                                              nil)))))))))))))
                                 ("3"
                                  (decompose-equality)
                                  (("3"
                                    (inst? -1)
                                    (("3"
                                      (replace -1)
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=>=#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "-")
                                                              (("1"
                                                                (assert)
                                                                nil)))))))))))))))))))))
                                           ("2" (assert) nil)))))))))))
                                 ("4"
                                  (decompose-equality)
                                  (("4"
                                    (inst? -1)
                                    (("4"
                                      (replace -1)
                                      (("4"
                                        (inst
                                         1
                                         "(:(:(#poly:=p, ineq:=>#):):)")
                                        (("1"
                                          (expand "SA" 1)
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "ands")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand
                                                       "evalatom")
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "-")
                                                            (("1"
                                                              (assert)
                                                              nil)))))))))))))))))))))
                                         ("2" (assert) nil)))))))))))))
                             ("2" (hide -4 3)
                              (("2"
                                (lemma "val_exists")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (lemma "eval_equiv_ddl")
                                      (("2"
                                        (lemma "add_full_eval")
                                        (("2"
                                          (expand "cnst")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "-")
                                              (("2"
                                                (copy -2)
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (typepred
                                                     "env_2_vec(i,x!1)")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (inst
                                                         -2
                                                         "env_2_vec(i,x!1)")
                                                        (("1"
                                                          (inst? -3)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "env_2_vec(i,x!1)")
                                                            (("1"
                                                              (replace
                                                               -8)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "(: (# C := 1, alpha := e(1 + i, i) #) :)"
                                                                     "x!1"
                                                                     "env_2_vec(i,x!1)")
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "full_eval_recurs")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "(: (# C := -a, alpha := null #) :)"
                                                                             "env_2_vec(i, x!1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "full_eval"
                                                                                   1
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "alpha_null_eval")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "full_eval"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "list_length_n[nat]")
                                                                                          (("2"
                                                                                            (inst?
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))))
                                                                     ("2"
                                                                      (expand
                                                                       "max_length"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "max_length"
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "e(i + 1, i)")
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "max"
                                                                               1)
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "env_2_vec_nth")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i_1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max_length")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "max_length")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))))))))))))))))
                                                                     ("3"
                                                                      (lemma
                                                                       "every_e")
                                                                      (("3"
                                                                        (inst?
                                                                         -1)
                                                                        nil)))))))))))
                                                             ("2"
                                                              (expand
                                                               "max_length"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "max_length"
                                                                 1)
                                                                (("2"
                                                                  (typepred
                                                                   "e(i + 1, i)")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))))))))))
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (lemma
                                                                 "env_2_vec_nth")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  nil)))))))))))))))))))))))))))))))))))))))
                           ("2" (hide -3 2 3)
                            (("2"
                              (case "p = (: (# C := -a, alpha := zero_vec(1+i) #), (# C := 1, alpha := e(1 + i, i) #) :)")
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "max_length" 1)
                                  (("1"
                                    (expand "max_length" 1)
                                    (("1"
                                      (expand "max_length" 1)
                                      (("1"
                                        (typepred "e(i + 1, i)")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (typepred "zero_vec(1+i)")
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (grind)
                                                nil)))))))))))))))))
                               ("2"
                                (hide 2)
                                (("2"
                                  (case "zero_vec(i+1) = (:0:)^(i+1)")
                                  (("1"
                                    (expand "add" -3)
                                    (("1"
                                      (expand "min_add" -3)
                                      (("1"
                                        (name
                                         "x"
                                         "sort_add((: (# C := -a, alpha := null #) :), (: (# C := 1, alpha := e(1 + i, i) #) :))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "sort_add" -1)
                                            (("1"
                                              (name
                                               "p1"
                                               "single_var_sf(i+1)")
                                              (("1"
                                                (name
                                                 "p2"
                                                 "cnst_sf(-a)")
                                                (("1"
                                                  (expand
                                                   "single_var_sf")
                                                  (("1"
                                                    (expand "cnst_sf")
                                                    (("1"
                                                      (typepred "p1")
                                                      (("1"
                                                        (typepred "p2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 -5
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "sorted_add"
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "max_length"
                                                                     -5)
                                                                    (("1"
                                                                      (expand
                                                                       "max_length"
                                                                       -5)
                                                                      (("1"
                                                                        (typepred
                                                                         "e(i + 1, i)")
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -7)
                                                                            (("1"
                                                                              (lemma
                                                                               "lft_max_on_minlength")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "p1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -7
                                                                                   -1
                                                                                   rl)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max_length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "max_length"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "max"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "lft"
                                                                                               -8)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "lft"
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -9
                                                                                                         -8
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "append_null_left[nat]")
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2
                                                                                                                 -3
                                                                                                                 -10
                                                                                                                 -11)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "sorted_sans_add"
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "list_extensionality[nat]")
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "nth_zero")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -2
                                                                                                                                 "i")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "nth_e")
                                                                                                                                    (("1"
                                                                                                                                      (inst?
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil)))))))))))))))))
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "leq((# C := -a, alpha := zero_vec(1 + i) #), (# C := 1, alpha := e(1 + i, i) #))")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -7)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "sorted_sans_add"
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "minlength?(x)")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2
                                                                                                                                                         -9
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -9)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -9
                                                                                                                                                             1
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (reveal
                                                                                                                                                               -)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -7)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil)))))))))))))
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         1
                                                                                                                                                         rl)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "minlength?"
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (split)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (split)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (split)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "Unif?")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (reveal
                                                                                                                                                                         +)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           1
                                                                                                                                                                           2
                                                                                                                                                                           4
                                                                                                                                                                           5
                                                                                                                                                                           6)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "i_1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "j")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -5)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "length"
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "length"
                                                                                                                                                                                         -)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "j=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "i_1=0")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth"
                                                                                                                                                                                               3)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "nth")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil)))))))))
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "i_1=0")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil)))))
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil)))))))))))))))))))))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       1
                                                                                                                                                                       "1")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "nth")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "nth")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "last_is_nth")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "nth_e")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil)))))))))))
                                                                                                                                                                               ("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "every_e")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst?
                                                                                                                                                                                     -1)
                                                                                                                                                                                    nil)))))))))))))
                                                                                                                                                                       ("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))))))))))))))))))))))))))))
                                                                                                                                           ("2"
                                                                                                                                            (grind)
                                                                                                                                            nil)))))))
                                                                                                                                     ("2"
                                                                                                                                      (typepred
                                                                                                                                       "zero_vec(1+i)")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "leq")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             2
                                                                                                                                             3
                                                                                                                                             4
                                                                                                                                             -)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               -15)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "sum_0")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "sum_e")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil)))))))))))))))))))))))))
                                                                                                                                     ("3"
                                                                                                                                      (lemma
                                                                                                                                       "every_e")
                                                                                                                                      (("3"
                                                                                                                                        (inst?)
                                                                                                                                        nil)))
                                                                                                                                     ("4"
                                                                                                                                      (lemma
                                                                                                                                       "every_zero")
                                                                                                                                      (("4"
                                                                                                                                        (inst?)
                                                                                                                                        nil)))))))))))))))))
                                                                                                                       ("2"
                                                                                                                        (lemma
                                                                                                                         "every_e")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          nil)))
                                                                                                                       ("3"
                                                                                                                        (lemma
                                                                                                                         "every_zero")
                                                                                                                        (("3"
                                                                                                                          (inst?)
                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (replace
                                                                                   -6
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "minlength?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "Unif?")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "i_1")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil)))))))))))))
                                                                                                   ("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "0")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth")
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "i_1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "last_is_nth")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "nth_e")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                   ("2"
                                    (lemma "list_extensionality[nat]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "zero_vec(1+i)")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (split)
                                              (("1"
                                                (case
                                                 "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                (("1" (inst?) nil)
                                                 ("2"
                                                  (induct "i")
                                                  (("1" (grind) nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand "^" 1)
                                                      (("2"
                                                        (lemma
                                                         "length_append[nat]")
                                                        (("2"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "FORALL(j:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), 1 + j)))")
                                                            (("1"
                                                              (inst?)
                                                              nil)
                                                             ("2"
                                                              (induct
                                                               "j")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "every_append[number]")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))))))))))
                                                           ("3"
                                                            (grind)
                                                            nil)))))))))))))
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (lemma "nth_zero")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case
                                                         "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), i)))")
                                                        (("1"
                                                          (case
                                                           "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                          (("1"
                                                            (case
                                                             "FORALL(i:nat): FORALL (n: below(1 + i)): 0 = nth((: 0 :) ^ (1 + i), n)")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              nil)
                                                             ("2"
                                                              (induct
                                                               "i")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "n!1")
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "^"
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "append_null_right[nat]")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (grind)
                                                                            nil)))))))))))))
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("2"
                                                                      (case
                                                                       "n!1=0")
                                                                      (("1"
                                                                        (lemma
                                                                         "more_list_props[nat].nth_append")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))))))
                                                                           ("2"
                                                                            (inst?
                                                                             -4)
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (lemma
                                                                         "more_list_props[nat].nth_append")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -3
                                                                               "j")
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 -1
                                                                                 rl)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "n!1-1")
                                                                                      nil)))))))))))
                                                                           ("2"
                                                                            (inst?
                                                                             -3)
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil)))))))))))))
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (typepred
                                                                   "n!1")
                                                                  (("3"
                                                                    (reveal
                                                                     -)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "i!2")
                                                                      (("3"
                                                                        (expand
                                                                         "^"
                                                                         1)
                                                                        (("3"
                                                                          (expand
                                                                           "^"
                                                                           -1)
                                                                          (("3"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             rl)
                                                                            (("3"
                                                                              (propax)
                                                                              nil)))))))))))))))))
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (typepred
                                                                 "n!1")
                                                                (("3"
                                                                  (inst
                                                                   -2
                                                                   "i!1")
                                                                  (("3"
                                                                    (expand
                                                                     "^")
                                                                    (("3"
                                                                      (replace
                                                                       -2
                                                                       1
                                                                       rl)
                                                                      (("3"
                                                                        (propax)
                                                                        nil)))))))))))))
                                                           ("2"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             -6
                                                             2
                                                             3
                                                             4)
                                                            (("2"
                                                              (induct
                                                               "i")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "length_append[nat]")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (inst?)
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide
                                                           2
                                                           3
                                                           4
                                                           -)
                                                          (("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "every_append[number]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))))))))
                                       ("2"
                                        (case
                                         "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (^[real]((: 0 :), 1 + i))")
                                        (("1" (inst?) nil)
                                         ("2"
                                          (induct "i")
                                          (("1" (grind) nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (expand "^" 1)
                                              (("2"
                                                (lemma
                                                 "every_append[number]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil)))))))))))))))
                                       ("3"
                                        (lemma "every_zero")
                                        (("3"
                                          (inst?)
                                          nil)))))))))))))))))))))))))
                 ("2" (assert) nil))))))))))))))
    nil)
   nil nil)
  (val_cnst_SA-6 nil 3912519430
   (""
    (deftactic expand_sa (&optional fnum)
     (then (expand "SA" fnum) (for 2 (expand "some")) (expand "ands")
      (for 2 (expand "every")) (expand "evalatom")))
    (("" (skeep)
      (("" (expand "SAable?")
        (("" (expand "SA?")
          (("" (typepred "dl_be")
            (("" (case "a=0")
              (("1" (lemma "val_exists")
                (("1" (inst? -1)
                  (("1" (name "p" "single_var_sf(i+1)")
                    (("1" (expand "single_var_sf")
                      (("1" (typepred "p")
                        (("1" (split -5)
                          (("1" (decompose-equality)
                            (("1" (inst? -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=<=#):):)")
                                  (("1"
                                    (expand "SA")
                                    (("1"
                                      (expand "some")
                                      (("1"
                                        (expand "some")
                                        (("1"
                                          (expand "ands")
                                          (("1"
                                            (expand "every")
                                            (("1"
                                              (expand "every")
                                              (("1"
                                                (expand "evalatom")
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (decompose-equality
                                                     1)
                                                    (("1"
                                                      (decompose-equality)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (expand
                                                             "cnst"
                                                             -1
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -5)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "cnst")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (decompose-equality)
                            (("2" (inst? -1)
                              (("2"
                                (expand "cnst")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=<#):):)")
                                    (("2"
                                      (expand "SA")
                                      (("2"
                                        (expand "some")
                                        (("2"
                                          (expand "some")
                                          (("2"
                                            (expand "ands")
                                            (("2"
                                              (expand "every")
                                              (("2"
                                                (expand "every")
                                                (("2"
                                                  (expand "evalatom")
                                                  (("2"
                                                    (replace -3)
                                                    (("2"
                                                      (replace -4)
                                                      (("2"
                                                        (replace -5)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (decompose-equality)
                            (("3" (inst? -1)
                              (("3"
                                (replace -1)
                                (("3"
                                  (expand "cnst")
                                  (("3"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=>=#):):)")
                                    (("3"
                                      (expand "SA")
                                      (("3"
                                        (expand "some")
                                        (("3"
                                          (expand "some")
                                          (("3"
                                            (expand "ands")
                                            (("3"
                                              (expand "every")
                                              (("3"
                                                (expand "every")
                                                (("3"
                                                  (expand "evalatom")
                                                  (("3"
                                                    (replace -3)
                                                    (("3"
                                                      (replace -4)
                                                      (("3"
                                                        (replace -5)
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (decompose-equality)
                            (("4" (inst? -1)
                              (("4"
                                (replace -1)
                                (("4"
                                  (expand "cnst")
                                  (("4"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=>#):):)")
                                    (("4"
                                      (expand "SA")
                                      (("4"
                                        (expand "some")
                                        (("4"
                                          (expand "some")
                                          (("4"
                                            (expand "ands")
                                            (("4"
                                              (expand "every")
                                              (("4"
                                                (expand "every")
                                                (("4"
                                                  (expand "evalatom")
                                                  (("4"
                                                    (replace -3)
                                                    (("4"
                                                      (replace -4)
                                                      (("4"
                                                        (replace -5)
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (name "p" "add(cnst_sf(-a),single_var_sf(i+1))")
                (("1" (lemma "add_standard_form")
                  (("1" (inst? -1)
                    (("1" (expand "single_var_sf")
                      (("1" (expand "cnst_sf")
                        (("1" (case "max_length(p)=i+1")
                          (("1" (case "eval(p) = val(dlvar(i))-a")
                            (("1" (hide 1)
                              (("1"
                                (split -5)
                                (("1"
                                  (decompose-equality)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "cnst")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             1
                                             "(:(:(#poly:=p, ineq:=<=#):):)")
                                            (("1"
                                              (expand "SA" 1)
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "some")
                                                  (("1"
                                                    (expand "ands")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "every")
                                                        (("1"
                                                          (expand
                                                           "evalatom")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "-")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality)
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand "cnst")
                                          (("2"
                                            (inst
                                             1
                                             "(:(:(#poly:=p, ineq:=<#):):)")
                                            (("1"
                                              (expand "SA" 1)
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "some")
                                                  (("1"
                                                    (expand "ands")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "every")
                                                        (("1"
                                                          (expand
                                                           "evalatom")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "-")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (decompose-equality)
                                  (("3"
                                    (inst? -1)
                                    (("3"
                                      (replace -1)
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=>=#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "-")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (decompose-equality)
                                  (("4"
                                    (inst? -1)
                                    (("4"
                                      (replace -1)
                                      (("4"
                                        (inst
                                         1
                                         "(:(:(#poly:=p, ineq:=>#):):)")
                                        (("1"
                                          (expand "SA" 1)
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "ands")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand
                                                       "evalatom")
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "-")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -4 3)
                              (("2"
                                (lemma "val_exists")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (lemma "eval_equiv_ddl")
                                      (("2"
                                        (lemma "add_full_eval")
                                        (("2"
                                          (expand "cnst")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "-")
                                              (("2"
                                                (copy -2)
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (typepred
                                                     "env_2_vec(i,x!1)")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (inst
                                                         -2
                                                         "env_2_vec(i,x!1)")
                                                        (("1"
                                                          (inst? -3)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "env_2_vec(i,x!1)")
                                                            (("1"
                                                              (replace
                                                               -8)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "(: (# C := 1, alpha := e(1 + i, i) #) :)"
                                                                     "x!1"
                                                                     "env_2_vec(i,x!1)")
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "full_eval_recurs")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "(: (# C := -a, alpha := null #) :)"
                                                                             "env_2_vec(i, x!1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "full_eval"
                                                                                   1
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "alpha_null_eval")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "full_eval"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "list_length_n[nat]")
                                                                                          (("2"
                                                                                            (inst?
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "max_length"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "max_length"
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "e(i + 1, i)")
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "max"
                                                                               1)
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "env_2_vec_nth")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i_1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max_length")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "max_length")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "every_e")
                                                                      (("3"
                                                                        (inst?
                                                                         -1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "max_length"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "max_length"
                                                                 1)
                                                                (("2"
                                                                  (typepred
                                                                   "e(i + 1, i)")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (lemma
                                                                 "env_2_vec_nth")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -3 2 3)
                            (("2"
                              (case "p = (: (# C := -a, alpha := zero_vec(1+i) #), (# C := 1, alpha := e(1 + i, i) #) :)")
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "max_length" 1)
                                  (("1"
                                    (expand "max_length" 1)
                                    (("1"
                                      (expand "max_length" 1)
                                      (("1"
                                        (typepred "e(i + 1, i)")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (typepred "zero_vec(1+i)")
                                            (("1"
                                              (replace -2)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case "zero_vec(i+1) = (:0:)^(i+1)")
                                  (("1"
                                    (expand "add" -3)
                                    (("1"
                                      (expand "min_add" -3)
                                      (("1"
                                        (name
                                         "x"
                                         "sort_add((: (# C := -a, alpha := null #) :), (: (# C := 1, alpha := e(1 + i, i) #) :))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "sort_add" -1)
                                            (("1"
                                              (name
                                               "p1"
                                               "single_var_sf(i+1)")
                                              (("1"
                                                (name
                                                 "p2"
                                                 "cnst_sf(-a)")
                                                (("1"
                                                  (expand
                                                   "single_var_sf")
                                                  (("1"
                                                    (expand "cnst_sf")
                                                    (("1"
                                                      (typepred "p1")
                                                      (("1"
                                                        (typepred "p2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 -5
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "sorted_add"
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "max_length"
                                                                     -5)
                                                                    (("1"
                                                                      (expand
                                                                       "max_length"
                                                                       -5)
                                                                      (("1"
                                                                        (typepred
                                                                         "e(i + 1, i)")
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -7)
                                                                            (("1"
                                                                              (lemma
                                                                               "lft_max_on_minlength")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "p1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -7
                                                                                   -1
                                                                                   rl)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max_length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "max_length"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "max"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "lft"
                                                                                               -8)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "lft"
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -9
                                                                                                         -8
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "append_null_left[nat]")
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2
                                                                                                                 -3
                                                                                                                 -10
                                                                                                                 -11)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "sorted_sans_add"
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "list_extensionality[nat]")
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "nth_zero")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -2
                                                                                                                                 "i")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "nth_e")
                                                                                                                                    (("1"
                                                                                                                                      (inst?
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "leq((# C := -a, alpha := zero_vec(1 + i) #), (# C := 1, alpha := e(1 + i, i) #))")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -7)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "sorted_sans_add"
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "minlength?(x)")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2
                                                                                                                                                         -9
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -9)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -9
                                                                                                                                                             1
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (reveal
                                                                                                                                                               -)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -7)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         1
                                                                                                                                                         rl)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "minlength?"
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (split)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (split)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (split)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "Unif?")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (reveal
                                                                                                                                                                         +)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           1
                                                                                                                                                                           2
                                                                                                                                                                           4
                                                                                                                                                                           5
                                                                                                                                                                           6)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "i_1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "j")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -5)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "length"
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "length"
                                                                                                                                                                                         -)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "j=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "i_1=0")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth"
                                                                                                                                                                                               3)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "nth")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "i_1=0")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       1
                                                                                                                                                                       "1")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "nth")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "nth")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "last_is_nth")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "nth_e")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "every_e")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst?
                                                                                                                                                                                     -1)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (typepred
                                                                                                                                       "zero_vec(1+i)")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "leq")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             2
                                                                                                                                             3
                                                                                                                                             4
                                                                                                                                             -)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               -15)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "sum_0")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "sum_e")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (lemma
                                                                                                                                       "every_e")
                                                                                                                                      (("3"
                                                                                                                                        (inst?)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("4"
                                                                                                                                      (lemma
                                                                                                                                       "every_zero")
                                                                                                                                      (("4"
                                                                                                                                        (inst?)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (lemma
                                                                                                                         "every_e")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (lemma
                                                                                                                         "every_zero")
                                                                                                                        (("3"
                                                                                                                          (inst?)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -6
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "minlength?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "Unif?")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "i_1")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "0")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth")
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "i_1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "last_is_nth")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "nth_e")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "list_extensionality[nat]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "zero_vec(1+i)")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (split)
                                              (("1"
                                                (case
                                                 "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (induct "i")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand "^" 1)
                                                      (("2"
                                                        (lemma
                                                         "length_append[nat]")
                                                        (("2"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "FORALL(j:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), 1 + j)))")
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (induct
                                                               "j")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "every_append[number]")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (lemma "nth_zero")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case
                                                         "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), i)))")
                                                        (("1"
                                                          (case
                                                           "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                          (("1"
                                                            (case
                                                             "FORALL(i:nat): FORALL (n: below(1 + i)): 0 = nth((: 0 :) ^ (1 + i), n)")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (induct
                                                               "i")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "n!1")
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "^"
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "append_null_right[nat]")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("2"
                                                                      (case
                                                                       "n!1=0")
                                                                      (("1"
                                                                        (lemma
                                                                         "more_list_props[nat].nth_append")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst?
                                                                             -4)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "more_list_props[nat].nth_append")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -3
                                                                               "j")
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 -1
                                                                                 rl)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "n!1-1")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst?
                                                                             -3)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (typepred
                                                                   "n!1")
                                                                  (("3"
                                                                    (reveal
                                                                     -)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "i!2")
                                                                      (("3"
                                                                        (expand
                                                                         "^"
                                                                         1)
                                                                        (("3"
                                                                          (expand
                                                                           "^"
                                                                           -1)
                                                                          (("3"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             rl)
                                                                            (("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (typepred
                                                                 "n!1")
                                                                (("3"
                                                                  (inst
                                                                   -2
                                                                   "i!1")
                                                                  (("3"
                                                                    (expand
                                                                     "^")
                                                                    (("3"
                                                                      (replace
                                                                       -2
                                                                       1
                                                                       rl)
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             -6
                                                             2
                                                             3
                                                             4)
                                                            (("2"
                                                              (induct
                                                               "i")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "length_append[nat]")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           2
                                                           3
                                                           4
                                                           -)
                                                          (("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "every_append[number]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (^[real]((: 0 :), 1 + i))")
                                        (("1" (inst?) nil nil)
                                         ("2"
                                          (induct "i")
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (expand "^" 1)
                                              (("2"
                                                (lemma
                                                 "every_append[number]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "every_zero")
                                        (("3" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (SAable? const-decl "bool" bool_expr_SA_props nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cnst_sf const-decl "(mv_standard_form?)" bool_expr_SA_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (minus_real_is_real application-judgement "real" reals nil)
    (nth_append formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (every_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (minlength? const-decl "bool" standard_form_mult_poly mult_poly)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_null formula-decl nil more_list_props structures)
    (list_extensionality formula-decl nil more_list_props structures)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (nth_zero formula-decl nil vector_arithmetic mv_analysis)
    (leq def-decl "bool" standard_form_mult_poly mult_poly)
    (Unif? const-decl "bool" standard_form_mult_poly mult_poly)
    (last_is_nth formula-decl nil standard_form_mult_poly mult_poly)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum_0 formula-decl nil standard_form_mult_poly mult_poly)
    (sum_e formula-decl nil bool_expr_SA_props nil)
    (every_zero formula-decl nil vector_arithmetic mv_analysis)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (append_null_left formula-decl nil more_list_props structures)
    (lft def-decl "MultPoly" standard_form_mult_poly mult_poly)
    (lft_max_on_minlength formula-decl nil standard_form_extras
     mult_poly)
    (sorted_add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (min_add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (add_full_eval formula-decl nil standard_form_unique mult_poly)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re dL)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (alpha_null_eval formula-decl nil eval_properties mult_poly)
    (list_length_n def-decl "list[nat]" list_lemmas mult_poly)
    (list_length_n formula-decl nil list_lemmas mult_poly)
    (full_eval const-decl "real" eval_MultPoly mult_poly)
    (full_eval def-decl "real" eval_MultPoly mult_poly)
    (real_times_real_is_real application-judgement "real" reals nil)
    (full_eval_recurs formula-decl nil eval_properties mult_poly)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (env_2_vec_nth formula-decl nil chain_rule_re dL)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (every_e formula-decl nil vector_arithmetic mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (eval_equiv_ddl formula-decl nil semi_algebraic_def nil)
    (max_length def-decl "nat" standard_form_mult_poly mult_poly)
    (add_standard_form formula-decl nil standard_form_extras mult_poly)
    (val_exists formula-decl nil bool_expr_SA_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (single_var_sf const-decl "(mv_standard_form?)" bool_expr_SA_props
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (eval const-decl "real" semi_algebraic_def nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (INEQ type-eq-decl nil semi_algebraic mult_poly)
    (atomic_poly type-eq-decl nil semi_algebraic mult_poly)
    (meeting type-eq-decl nil semi_algebraic mult_poly)
    (joining type-eq-decl nil semi_algebraic mult_poly)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dLVar type-decl nil hp_def dL) (val const-decl "real" hp_def dL)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def dL)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def dL)
    (cnst const-decl "real" hp_def dL))
   nil)
  (val_cnst_SA-5 nil 3912519370
   (""
    (deftactic expand_sa (&optional fnum)
     (then (expand "SA" fnum)
      (for 2
       (expand "some|    (" 2 "
"))
      (expand "ands") (for 2 (expand "every")) (expand "evalatom")))
    (("" (skeep)
      (("" (expand "Saable?")
        (("" (expand "SA?")
          (("" (typepred "dl_be")
            (("" (case "a=0")
              (("1" (lemma "val_exists")
                (("1" (inst? -1)
                  (("1" (name "p" "single_var_sf(i+1)")
                    (("1" (expand "single_var_sf")
                      (("1" (typepred "p")
                        (("1" (split -5)
                          (("1" (decompose-equality)
                            (("1" (inst? -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=<=#):):)")
                                  (("1"
                                    (expand "SA")
                                    (("1"
                                      (expand "some")
                                      (("1"
                                        (expand "some")
                                        (("1"
                                          (expand "ands")
                                          (("1"
                                            (expand "every")
                                            (("1"
                                              (expand "every")
                                              (("1"
                                                (expand "evalatom")
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (decompose-equality
                                                     1)
                                                    (("1"
                                                      (decompose-equality)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (expand
                                                             "cnst"
                                                             -1
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -5)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "cnst")
                                                                    (("1"
                                                                      (propax)
                                                                      nil)))))))))))))))))))))))))))))))))))))))))))
                           ("2" (decompose-equality)
                            (("2" (inst? -1)
                              (("2"
                                (expand "cnst")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=<#):):)")
                                    (("2"
                                      (expand "SA")
                                      (("2"
                                        (expand "some")
                                        (("2"
                                          (expand "some")
                                          (("2"
                                            (expand "ands")
                                            (("2"
                                              (expand "every")
                                              (("2"
                                                (expand "every")
                                                (("2"
                                                  (expand "evalatom")
                                                  (("2"
                                                    (replace -3)
                                                    (("2"
                                                      (replace -4)
                                                      (("2"
                                                        (replace -5)
                                                        (("2"
                                                          (propax)
                                                          nil)))))))))))))))))))))))))))))))
                           ("3" (decompose-equality)
                            (("3" (inst? -1)
                              (("3"
                                (replace -1)
                                (("3"
                                  (expand "cnst")
                                  (("3"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=>=#):):)")
                                    (("3"
                                      (expand "SA")
                                      (("3"
                                        (expand "some")
                                        (("3"
                                          (expand "some")
                                          (("3"
                                            (expand "ands")
                                            (("3"
                                              (expand "every")
                                              (("3"
                                                (expand "every")
                                                (("3"
                                                  (expand "evalatom")
                                                  (("3"
                                                    (replace -3)
                                                    (("3"
                                                      (replace -4)
                                                      (("3"
                                                        (replace -5)
                                                        (("3"
                                                          (propax)
                                                          nil)))))))))))))))))))))))))))))))
                           ("4" (decompose-equality)
                            (("4" (inst? -1)
                              (("4"
                                (replace -1)
                                (("4"
                                  (expand "cnst")
                                  (("4"
                                    (inst
                                     1
                                     "(:(:(#poly:=p, ineq:=>#):):)")
                                    (("4"
                                      (expand "SA")
                                      (("4"
                                        (expand "some")
                                        (("4"
                                          (expand "some")
                                          (("4"
                                            (expand "ands")
                                            (("4"
                                              (expand "every")
                                              (("4"
                                                (expand "every")
                                                (("4"
                                                  (expand "evalatom")
                                                  (("4"
                                                    (replace -3)
                                                    (("4"
                                                      (replace -4)
                                                      (("4"
                                                        (replace -5)
                                                        (("4"
                                                          (propax)
                                                          nil)))))))))))))))))))))))))))))))))))))))))))
               ("2" (name "p" "add(cnst_sf(-a),single_var_sf(i+1))")
                (("1" (lemma "add_standard_form")
                  (("1" (inst? -1)
                    (("1" (expand "single_var_sf")
                      (("1" (expand "cnst_sf")
                        (("1" (case "max_length(p)=i+1")
                          (("1" (case "eval(p) = val(dlvar(i))-a")
                            (("1" (hide 1)
                              (("1"
                                (split -5)
                                (("1"
                                  (decompose-equality)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "cnst")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             1
                                             "(:(:(#poly:=p, ineq:=<=#):):)")
                                            (("1"
                                              (expand "SA" 1)
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "some")
                                                  (("1"
                                                    (expand "ands")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "every")
                                                        (("1"
                                                          (expand
                                                           "evalatom")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "-")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))))))))))))))))))
                                             ("2"
                                              (assert)
                                              nil)))))))))))))
                                 ("2"
                                  (decompose-equality)
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand "cnst")
                                          (("2"
                                            (inst
                                             1
                                             "(:(:(#poly:=p, ineq:=<#):):)")
                                            (("1"
                                              (expand "SA" 1)
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "some")
                                                  (("1"
                                                    (expand "ands")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "every")
                                                        (("1"
                                                          (expand
                                                           "evalatom")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "-")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))))))))))))))))
                                             ("2"
                                              (assert)
                                              nil)))))))))))))
                                 ("3"
                                  (decompose-equality)
                                  (("3"
                                    (inst? -1)
                                    (("3"
                                      (replace -1)
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=>=#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "-")
                                                              (("1"
                                                                (assert)
                                                                nil)))))))))))))))))))))
                                           ("2" (assert) nil)))))))))))
                                 ("4"
                                  (decompose-equality)
                                  (("4"
                                    (inst? -1)
                                    (("4"
                                      (replace -1)
                                      (("4"
                                        (inst
                                         1
                                         "(:(:(#poly:=p, ineq:=>#):):)")
                                        (("1"
                                          (expand "SA" 1)
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "ands")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand
                                                       "evalatom")
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "-")
                                                            (("1"
                                                              (assert)
                                                              nil)))))))))))))))))))))
                                         ("2" (assert) nil)))))))))))))
                             ("2" (hide -4 3)
                              (("2"
                                (lemma "val_exists")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (lemma "eval_equiv_ddl")
                                      (("2"
                                        (lemma "add_full_eval")
                                        (("2"
                                          (expand "cnst")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "-")
                                              (("2"
                                                (copy -2)
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (typepred
                                                     "env_2_vec(i,x!1)")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (inst
                                                         -2
                                                         "env_2_vec(i,x!1)")
                                                        (("1"
                                                          (inst? -3)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "env_2_vec(i,x!1)")
                                                            (("1"
                                                              (replace
                                                               -8)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "(: (# C := 1, alpha := e(1 + i, i) #) :)"
                                                                     "x!1"
                                                                     "env_2_vec(i,x!1)")
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "full_eval_recurs")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "(: (# C := -a, alpha := null #) :)"
                                                                             "env_2_vec(i, x!1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "full_eval"
                                                                                   1
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "alpha_null_eval")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "full_eval"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "list_length_n[nat]")
                                                                                          (("2"
                                                                                            (inst?
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))))
                                                                     ("2"
                                                                      (expand
                                                                       "max_length"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "max_length"
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "e(i + 1, i)")
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "max"
                                                                               1)
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "env_2_vec_nth")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i_1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max_length")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "max_length")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))))))))))))))))
                                                                     ("3"
                                                                      (lemma
                                                                       "every_e")
                                                                      (("3"
                                                                        (inst?
                                                                         -1)
                                                                        nil)))))))))))
                                                             ("2"
                                                              (expand
                                                               "max_length"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "max_length"
                                                                 1)
                                                                (("2"
                                                                  (typepred
                                                                   "e(i + 1, i)")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))))))))))
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (lemma
                                                                 "env_2_vec_nth")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  nil)))))))))))))))))))))))))))))))))))))))
                           ("2" (hide -3 2 3)
                            (("2"
                              (case "p = (: (# C := -a, alpha := zero_vec(1+i) #), (# C := 1, alpha := e(1 + i, i) #) :)")
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "max_length" 1)
                                  (("1"
                                    (expand "max_length" 1)
                                    (("1"
                                      (expand "max_length" 1)
                                      (("1"
                                        (typepred "e(i + 1, i)")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (typepred "zero_vec(1+i)")
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (grind)
                                                nil)))))))))))))))))
                               ("2"
                                (hide 2)
                                (("2"
                                  (case "zero_vec(i+1) = (:0:)^(i+1)")
                                  (("1"
                                    (expand "add" -3)
                                    (("1"
                                      (expand "min_add" -3)
                                      (("1"
                                        (name
                                         "x"
                                         "sort_add((: (# C := -a, alpha := null #) :), (: (# C := 1, alpha := e(1 + i, i) #) :))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "sort_add" -1)
                                            (("1"
                                              (name
                                               "p1"
                                               "single_var_sf(i+1)")
                                              (("1"
                                                (name
                                                 "p2"
                                                 "cnst_sf(-a)")
                                                (("1"
                                                  (expand
                                                   "single_var_sf")
                                                  (("1"
                                                    (expand "cnst_sf")
                                                    (("1"
                                                      (typepred "p1")
                                                      (("1"
                                                        (typepred "p2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 -5
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "sorted_add"
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "max_length"
                                                                     -5)
                                                                    (("1"
                                                                      (expand
                                                                       "max_length"
                                                                       -5)
                                                                      (("1"
                                                                        (typepred
                                                                         "e(i + 1, i)")
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -7)
                                                                            (("1"
                                                                              (lemma
                                                                               "lft_max_on_minlength")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "p1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -7
                                                                                   -1
                                                                                   rl)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max_length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "max_length"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "max"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "lft"
                                                                                               -8)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "lft"
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -9
                                                                                                         -8
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "append_null_left[nat]")
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2
                                                                                                                 -3
                                                                                                                 -10
                                                                                                                 -11)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "sorted_sans_add"
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "list_extensionality[nat]")
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "nth_zero")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -2
                                                                                                                                 "i")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "nth_e")
                                                                                                                                    (("1"
                                                                                                                                      (inst?
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil)))))))))))))))))
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "leq((# C := -a, alpha := zero_vec(1 + i) #), (# C := 1, alpha := e(1 + i, i) #))")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -7)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "sorted_sans_add"
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "minlength?(x)")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2
                                                                                                                                                         -9
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -9)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -9
                                                                                                                                                             1
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (reveal
                                                                                                                                                               -)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -7)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil)))))))))))))
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         1
                                                                                                                                                         rl)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "minlength?"
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (split)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (split)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (split)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "Unif?")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (reveal
                                                                                                                                                                         +)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           1
                                                                                                                                                                           2
                                                                                                                                                                           4
                                                                                                                                                                           5
                                                                                                                                                                           6)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "i_1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "j")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -5)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "length"
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "length"
                                                                                                                                                                                         -)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "j=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "i_1=0")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth"
                                                                                                                                                                                               3)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "nth")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil)))))))))
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "i_1=0")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil)))))
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil)))))))))))))))))))))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       1
                                                                                                                                                                       "1")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "nth")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "nth")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "last_is_nth")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "nth_e")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil)))))))))))
                                                                                                                                                                               ("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "every_e")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst?
                                                                                                                                                                                     -1)
                                                                                                                                                                                    nil)))))))))))))
                                                                                                                                                                       ("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))))))))))))))))))))))))))))
                                                                                                                                           ("2"
                                                                                                                                            (grind)
                                                                                                                                            nil)))))))
                                                                                                                                     ("2"
                                                                                                                                      (typepred
                                                                                                                                       "zero_vec(1+i)")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "leq")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             2
                                                                                                                                             3
                                                                                                                                             4
                                                                                                                                             -)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               -15)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "sum_0")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "sum_e")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil)))))))))))))))))))))))))
                                                                                                                                     ("3"
                                                                                                                                      (lemma
                                                                                                                                       "every_e")
                                                                                                                                      (("3"
                                                                                                                                        (inst?)
                                                                                                                                        nil)))
                                                                                                                                     ("4"
                                                                                                                                      (lemma
                                                                                                                                       "every_zero")
                                                                                                                                      (("4"
                                                                                                                                        (inst?)
                                                                                                                                        nil)))))))))))))))))
                                                                                                                       ("2"
                                                                                                                        (lemma
                                                                                                                         "every_e")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          nil)))
                                                                                                                       ("3"
                                                                                                                        (lemma
                                                                                                                         "every_zero")
                                                                                                                        (("3"
                                                                                                                          (inst?)
                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (replace
                                                                                   -6
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "minlength?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "Unif?")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "i_1")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil)))))))))))))
                                                                                                   ("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "0")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth")
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "i_1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "last_is_nth")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "nth_e")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                   ("2"
                                    (lemma "list_extensionality[nat]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "zero_vec(1+i)")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (split)
                                              (("1"
                                                (case
                                                 "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                (("1" (inst?) nil)
                                                 ("2"
                                                  (induct "i")
                                                  (("1" (grind) nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand "^" 1)
                                                      (("2"
                                                        (lemma
                                                         "length_append[nat]")
                                                        (("2"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "FORALL(j:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), 1 + j)))")
                                                            (("1"
                                                              (inst?)
                                                              nil)
                                                             ("2"
                                                              (induct
                                                               "j")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "every_append[number]")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))))))))))
                                                           ("3"
                                                            (grind)
                                                            nil)))))))))))))
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (lemma "nth_zero")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case
                                                         "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), i)))")
                                                        (("1"
                                                          (case
                                                           "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                          (("1"
                                                            (case
                                                             "FORALL(i:nat): FORALL (n: below(1 + i)): 0 = nth((: 0 :) ^ (1 + i), n)")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              nil)
                                                             ("2"
                                                              (induct
                                                               "i")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "n!1")
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "^"
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "append_null_right[nat]")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (grind)
                                                                            nil)))))))))))))
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("2"
                                                                      (case
                                                                       "n!1=0")
                                                                      (("1"
                                                                        (lemma
                                                                         "more_list_props[nat].nth_append")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))))))
                                                                           ("2"
                                                                            (inst?
                                                                             -4)
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (lemma
                                                                         "more_list_props[nat].nth_append")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -3
                                                                               "j")
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 -1
                                                                                 rl)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "n!1-1")
                                                                                      nil)))))))))))
                                                                           ("2"
                                                                            (inst?
                                                                             -3)
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil)))))))))))))
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (typepred
                                                                   "n!1")
                                                                  (("3"
                                                                    (reveal
                                                                     -)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "i!2")
                                                                      (("3"
                                                                        (expand
                                                                         "^"
                                                                         1)
                                                                        (("3"
                                                                          (expand
                                                                           "^"
                                                                           -1)
                                                                          (("3"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             rl)
                                                                            (("3"
                                                                              (propax)
                                                                              nil)))))))))))))))))
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (typepred
                                                                 "n!1")
                                                                (("3"
                                                                  (inst
                                                                   -2
                                                                   "i!1")
                                                                  (("3"
                                                                    (expand
                                                                     "^")
                                                                    (("3"
                                                                      (replace
                                                                       -2
                                                                       1
                                                                       rl)
                                                                      (("3"
                                                                        (propax)
                                                                        nil)))))))))))))
                                                           ("2"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             -6
                                                             2
                                                             3
                                                             4)
                                                            (("2"
                                                              (induct
                                                               "i")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "length_append[nat]")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (inst?)
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide
                                                           2
                                                           3
                                                           4
                                                           -)
                                                          (("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "every_append[number]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))))))))
                                       ("2"
                                        (case
                                         "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (^[real]((: 0 :), 1 + i))")
                                        (("1" (inst?) nil)
                                         ("2"
                                          (induct "i")
                                          (("1" (grind) nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (expand "^" 1)
                                              (("2"
                                                (lemma
                                                 "every_append[number]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil)))))))))))))))
                                       ("3"
                                        (lemma "every_zero")
                                        (("3"
                                          (inst?)
                                          nil)))))))))))))))))))))))))
                 ("2" (assert) nil))))))))))))))
    nil)
   nil nil)
  (val_cnst_SA-4 nil 3912519093
   ("" (skeep)
    (("" (expand "Saable?")
      (("" (expand "SA?")
        (("" (typepred "dl_be")
          (("" (case "a=0")
            (("1" (lemma "val_exists")
              (("1" (inst? -1)
                (("1" (name "p" "single_var_sf(i+1)")
                  (("1" (expand "single_var_sf")
                    (("1" (typepred "p")
                      (("1" (split -5)
                        (("1" (decompose-equality)
                          (("1" (inst? -1)
                            (("1" (replace -1)
                              (("1"
                                (inst
                                 1
                                 "(:(:(#poly:=p, ineq:=<=#):):)")
                                (("1"
                                  (expand "SA")
                                  (("1"
                                    (expand "some")
                                    (("1"
                                      (expand "some")
                                      (("1"
                                        (expand "ands")
                                        (("1"
                                          (expand "every")
                                          (("1"
                                            (expand "every")
                                            (("1"
                                              (expand "evalatom")
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand
                                                           "cnst"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "cnst")
                                                                  (("1"
                                                                    (propax)
                                                                    nil)))))))))))))))))))))))))))))))))))))))))))
                         ("2" (decompose-equality)
                          (("2" (inst? -1)
                            (("2" (expand "cnst")
                              (("2"
                                (replace -1)
                                (("2"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=<#):):)")
                                  (("2"
                                    (expand "SA")
                                    (("2"
                                      (expand "some")
                                      (("2"
                                        (expand "some")
                                        (("2"
                                          (expand "ands")
                                          (("2"
                                            (expand "every")
                                            (("2"
                                              (expand "every")
                                              (("2"
                                                (expand "evalatom")
                                                (("2"
                                                  (replace -3)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (replace -5)
                                                      (("2"
                                                        (propax)
                                                        nil)))))))))))))))))))))))))))))))
                         ("3" (decompose-equality)
                          (("3" (inst? -1)
                            (("3" (replace -1)
                              (("3"
                                (expand "cnst")
                                (("3"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=>=#):):)")
                                  (("3"
                                    (expand "SA")
                                    (("3"
                                      (expand "some")
                                      (("3"
                                        (expand "some")
                                        (("3"
                                          (expand "ands")
                                          (("3"
                                            (expand "every")
                                            (("3"
                                              (expand "every")
                                              (("3"
                                                (expand "evalatom")
                                                (("3"
                                                  (replace -3)
                                                  (("3"
                                                    (replace -4)
                                                    (("3"
                                                      (replace -5)
                                                      (("3"
                                                        (propax)
                                                        nil)))))))))))))))))))))))))))))))
                         ("4" (decompose-equality)
                          (("4" (inst? -1)
                            (("4" (replace -1)
                              (("4"
                                (expand "cnst")
                                (("4"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=>#):):)")
                                  (("4"
                                    (expand "SA")
                                    (("4"
                                      (expand "some")
                                      (("4"
                                        (expand "some")
                                        (("4"
                                          (expand "ands")
                                          (("4"
                                            (expand "every")
                                            (("4"
                                              (expand "every")
                                              (("4"
                                                (expand "evalatom")
                                                (("4"
                                                  (replace -3)
                                                  (("4"
                                                    (replace -4)
                                                    (("4"
                                                      (replace -5)
                                                      (("4"
                                                        (propax)
                                                        nil)))))))))))))))))))))))))))))))))))))))))))
             ("2" (name "p" "add(cnst_sf(-a),single_var_sf(i+1))")
              (("1" (lemma "add_standard_form")
                (("1" (inst? -1)
                  (("1" (expand "single_var_sf")
                    (("1" (expand "cnst_sf")
                      (("1" (case "max_length(p)=i+1")
                        (("1" (case "eval(p) = val(dlvar(i))-a")
                          (("1" (hide 1)
                            (("1" (split -5)
                              (("1"
                                (decompose-equality)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "cnst")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=<=#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "-")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))))))))))))))))))
                                           ("2"
                                            (assert)
                                            nil)))))))))))))
                               ("2"
                                (decompose-equality)
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "cnst")
                                        (("2"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=<#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "-")
                                                              (("1"
                                                                (assert)
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (assert)
                                            nil)))))))))))))
                               ("3"
                                (decompose-equality)
                                (("3"
                                  (inst? -1)
                                  (("3"
                                    (replace -1)
                                    (("3"
                                      (hide -1)
                                      (("3"
                                        (inst
                                         1
                                         "(:(:(#poly:=p, ineq:=>=#):):)")
                                        (("1"
                                          (expand "SA" 1)
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "ands")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand
                                                       "evalatom")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "-")
                                                            (("1"
                                                              (assert)
                                                              nil)))))))))))))))))))))
                                         ("2" (assert) nil)))))))))))
                               ("4"
                                (decompose-equality)
                                (("4"
                                  (inst? -1)
                                  (("4"
                                    (replace -1)
                                    (("4"
                                      (inst
                                       1
                                       "(:(:(#poly:=p, ineq:=>#):):)")
                                      (("1"
                                        (expand "SA" 1)
                                        (("1"
                                          (expand "some")
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "ands")
                                              (("1"
                                                (expand "every")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "evalatom")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (expand "-")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))))))))))))))))
                                       ("2" (assert) nil)))))))))))))
                           ("2" (hide -4 3)
                            (("2" (lemma "val_exists")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (lemma "eval_equiv_ddl")
                                    (("2"
                                      (lemma "add_full_eval")
                                      (("2"
                                        (expand "cnst")
                                        (("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (expand "-")
                                            (("2"
                                              (copy -2)
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (typepred
                                                   "env_2_vec(i,x!1)")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "env_2_vec(i,x!1)")
                                                      (("1"
                                                        (inst? -3)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "env_2_vec(i,x!1)")
                                                          (("1"
                                                            (replace
                                                             -8)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "(: (# C := 1, alpha := e(1 + i, i) #) :)"
                                                                   "x!1"
                                                                   "env_2_vec(i,x!1)")
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "full_eval_recurs")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "(: (# C := -a, alpha := null #) :)"
                                                                           "env_2_vec(i, x!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "full_eval"
                                                                                 1
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "alpha_null_eval")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "full_eval"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "list_length_n[nat]")
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))))))))))))))))))
                                                                   ("2"
                                                                    (expand
                                                                     "max_length"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "max_length"
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "e(i + 1, i)")
                                                                        (("2"
                                                                          (replace
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -3)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "env_2_vec_nth")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "i_1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max_length")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max_length")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil)))))))))))))))))))))))))))))
                                                                   ("3"
                                                                    (lemma
                                                                     "every_e")
                                                                    (("3"
                                                                      (inst?
                                                                       -1)
                                                                      nil)))))))))))
                                                           ("2"
                                                            (expand
                                                             "max_length"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "max_length"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "e(i + 1, i)")
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))))))))))))))
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (lemma
                                                               "env_2_vec_nth")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                nil)))))))))))))))))))))))))))))))))))))))
                         ("2" (hide -3 2 3)
                          (("2"
                            (case "p = (: (# C := -a, alpha := zero_vec(1+i) #), (# C := 1, alpha := e(1 + i, i) #) :)")
                            (("1" (replace -1)
                              (("1"
                                (expand "max_length" 1)
                                (("1"
                                  (expand "max_length" 1)
                                  (("1"
                                    (expand "max_length" 1)
                                    (("1"
                                      (typepred "e(i + 1, i)")
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (typepred "zero_vec(1+i)")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (grind)
                                              nil)))))))))))))))))
                             ("2" (hide 2)
                              (("2"
                                (case "zero_vec(i+1) = (:0:)^(i+1)")
                                (("1"
                                  (expand "add" -3)
                                  (("1"
                                    (expand "min_add" -3)
                                    (("1"
                                      (name
                                       "x"
                                       "sort_add((: (# C := -a, alpha := null #) :), (: (# C := 1, alpha := e(1 + i, i) #) :))")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "sort_add" -1)
                                          (("1"
                                            (name
                                             "p1"
                                             "single_var_sf(i+1)")
                                            (("1"
                                              (name "p2" "cnst_sf(-a)")
                                              (("1"
                                                (expand
                                                 "single_var_sf")
                                                (("1"
                                                  (expand "cnst_sf")
                                                  (("1"
                                                    (typepred "p1")
                                                    (("1"
                                                      (typepred "p2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               -5
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "sorted_add"
                                                                 -5)
                                                                (("1"
                                                                  (expand
                                                                   "max_length"
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "max_length"
                                                                     -5)
                                                                    (("1"
                                                                      (typepred
                                                                       "e(i + 1, i)")
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "max"
                                                                           -7)
                                                                          (("1"
                                                                            (lemma
                                                                             "lft_max_on_minlength")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p1")
                                                                              (("1"
                                                                                (replace
                                                                                 -7
                                                                                 -1
                                                                                 rl)
                                                                                (("1"
                                                                                  (expand
                                                                                   "max_length"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max_length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "max"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lft"
                                                                                             -8)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "lft"
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9
                                                                                                       -8
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "append_null_left[nat]")
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3
                                                                                                               -10
                                                                                                               -11)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "sorted_sans_add"
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "list_extensionality[nat]")
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "nth_zero")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "i")
                                                                                                                              (("1"
                                                                                                                                (inst?
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "nth_e")
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil)))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (case
                                                                                                                                   "leq((# C := -a, alpha := zero_vec(1 + i) #), (# C := 1, alpha := e(1 + i, i) #))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -7)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "sorted_sans_add"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "minlength?(x)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2
                                                                                                                                                       -9
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -9)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -9
                                                                                                                                                           1
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (reveal
                                                                                                                                                             -)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -7)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil)))))))))))))
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       1
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "minlength?"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (split)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (split)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "Unif?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (reveal
                                                                                                                                                                       +)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         1
                                                                                                                                                                         2
                                                                                                                                                                         4
                                                                                                                                                                         5
                                                                                                                                                                         6)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (skeep)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "i_1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "j")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -5)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "length"
                                                                                                                                                                                   -)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "length"
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "j=0")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "i_1=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (grind)
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth"
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil)))))))))
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "i_1=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil)))))
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil)))))))))))))))))))))))))))))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     1
                                                                                                                                                                     "1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nth")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "nth")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "last_is_nth")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst?
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "nth_e")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil)))))))))))
                                                                                                                                                                             ("2"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "every_e")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  nil)))))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil)))))))))))))))))))))))))))))
                                                                                                                                         ("2"
                                                                                                                                          (grind)
                                                                                                                                          nil)))))))
                                                                                                                                   ("2"
                                                                                                                                    (typepred
                                                                                                                                     "zero_vec(1+i)")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "leq")
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2
                                                                                                                                           3
                                                                                                                                           4
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (reveal
                                                                                                                                             -15)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sum_0")
                                                                                                                                              (("2"
                                                                                                                                                (inst?
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "sum_e")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil)))))))))))))))))))))))))
                                                                                                                                   ("3"
                                                                                                                                    (lemma
                                                                                                                                     "every_e")
                                                                                                                                    (("3"
                                                                                                                                      (inst?)
                                                                                                                                      nil)))
                                                                                                                                   ("4"
                                                                                                                                    (lemma
                                                                                                                                     "every_zero")
                                                                                                                                    (("4"
                                                                                                                                      (inst?)
                                                                                                                                      nil)))))))))))))))))
                                                                                                                     ("2"
                                                                                                                      (lemma
                                                                                                                       "every_e")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        nil)))
                                                                                                                     ("3"
                                                                                                                      (lemma
                                                                                                                       "every_zero")
                                                                                                                      (("3"
                                                                                                                        (inst?)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))
                                                                               ("2"
                                                                                (replace
                                                                                 -6
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (expand
                                                                                   "minlength?"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "Unif?")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "i_1")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil)))))))))))))
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "i_1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "last_is_nth")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "nth_e")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (lemma "list_extensionality[nat]")
                                  (("2"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "zero_vec(1+i)")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (split)
                                            (("1"
                                              (case
                                               "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                              (("1" (inst?) nil)
                                               ("2"
                                                (induct "i")
                                                (("1" (grind) nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "^" 1)
                                                    (("2"
                                                      (lemma
                                                       "length_append[nat]")
                                                      (("2"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "FORALL(j:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), 1 + j)))")
                                                          (("1"
                                                            (inst?)
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "j")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "every_append[number]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("3"
                                                          (grind)
                                                          nil)))))))))))))
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (lemma "nth_zero")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (case
                                                       "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), i)))")
                                                      (("1"
                                                        (case
                                                         "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                        (("1"
                                                          (case
                                                           "FORALL(i:nat): FORALL (n: below(1 + i)): 0 = nth((: 0 :) ^ (1 + i), n)")
                                                          (("1"
                                                            (inst? -1)
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (typepred
                                                                 "n!1")
                                                                (("1"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "append_null_right[nat]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "n!1=0")
                                                                    (("1"
                                                                      (lemma
                                                                       "more_list_props[nat].nth_append")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)))))))))
                                                                         ("2"
                                                                          (inst?
                                                                           -4)
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil)))))
                                                                     ("2"
                                                                      (lemma
                                                                       "more_list_props[nat].nth_append")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j")
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               -1
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "n!1-1")
                                                                                    nil)))))))))))
                                                                         ("2"
                                                                          (inst?
                                                                           -3)
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (typepred
                                                                 "n!1")
                                                                (("3"
                                                                  (reveal
                                                                   -)
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "i!2")
                                                                    (("3"
                                                                      (expand
                                                                       "^"
                                                                       1)
                                                                      (("3"
                                                                        (expand
                                                                         "^"
                                                                         -1)
                                                                        (("3"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           rl)
                                                                          (("3"
                                                                            (propax)
                                                                            nil)))))))))))))))))
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "n!1")
                                                              (("3"
                                                                (inst
                                                                 -2
                                                                 "i!1")
                                                                (("3"
                                                                  (expand
                                                                   "^")
                                                                  (("3"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     rl)
                                                                    (("3"
                                                                      (propax)
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4
                                                           -5
                                                           -6
                                                           2
                                                           3
                                                           4)
                                                          (("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "length_append[nat]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (inst?)
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil)))))))))))))))
                                                       ("2"
                                                        (hide 2 3 4 -)
                                                        (("2"
                                                          (induct "i")
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "^"
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "every_append[number]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))))))))))))))))))))))))))
                                     ("2"
                                      (case
                                       "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (^[real]((: 0 :), 1 + i))")
                                      (("1" (inst?) nil)
                                       ("2"
                                        (induct "i")
                                        (("1" (grind) nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (expand "^" 1)
                                            (("2"
                                              (lemma
                                               "every_append[number]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))))))
                                     ("3"
                                      (lemma "every_zero")
                                      (("3"
                                        (inst?)
                                        nil)))))))))))))))))))))))))
               ("2" (assert) nil))))))))))))
    nil)
   nil nil)
  (val_cnst_SA-3 nil 3912517367
   ("" (skeep)
    (("" (expand "Saable?")
      (("" (expand "SA?")
        (("" (typepred "dl_be")
          (("" (case "a=0")
            (("1" (lemma "val_exists")
              (("1" (inst? -1)
                (("1" (name "p" "single_var_sf(i+1)")
                  (("1" (expand "single_var_sf")
                    (("1" (typepred "p")
                      (("1" (split -5)
                        (("1" (decompose-equality)
                          (("1" (inst? -1)
                            (("1" (replace -1)
                              (("1"
                                (inst
                                 1
                                 "(:(:(#poly:=p, ineq:=<=#):):)")
                                (("1"
                                  (expand "SA")
                                  (("1"
                                    (expand "some")
                                    (("1"
                                      (expand "some")
                                      (("1"
                                        (expand "ands")
                                        (("1"
                                          (expand "every")
                                          (("1"
                                            (expand "every")
                                            (("1"
                                              (expand "evalatom")
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand
                                                           "cnst"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "cnst")
                                                                  (("1"
                                                                    (propax)
                                                                    nil)))))))))))))))))))))))))))))))))))))))))))
                         ("2" (decompose-equality)
                          (("2" (inst? -1)
                            (("2" (expand "cnst")
                              (("2"
                                (replace -1)
                                (("2"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=<#):):)")
                                  (("2"
                                    (expand "SA")
                                    (("2"
                                      (expand "some")
                                      (("2"
                                        (expand "some")
                                        (("2"
                                          (expand "ands")
                                          (("2"
                                            (expand "every")
                                            (("2"
                                              (expand "every")
                                              (("2"
                                                (expand "evalatom")
                                                (("2"
                                                  (replace -3)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (replace -5)
                                                      (("2"
                                                        (propax)
                                                        nil)))))))))))))))))))))))))))))))
                         ("3" (decompose-equality)
                          (("3" (inst? -1)
                            (("3" (replace -1)
                              (("3"
                                (expand "cnst")
                                (("3"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=>=#):):)")
                                  (("3"
                                    (expand "SA")
                                    (("3"
                                      (expand "some")
                                      (("3"
                                        (expand "some")
                                        (("3"
                                          (expand "ands")
                                          (("3"
                                            (expand "every")
                                            (("3"
                                              (expand "every")
                                              (("3"
                                                (expand "evalatom")
                                                (("3"
                                                  (replace -3)
                                                  (("3"
                                                    (replace -4)
                                                    (("3"
                                                      (replace -5)
                                                      (("3"
                                                        (propax)
                                                        nil)))))))))))))))))))))))))))))))
                         ("4" (decompose-equality)
                          (("4" (inst? -1)
                            (("4" (replace -1)
                              (("4"
                                (expand "cnst")
                                (("4"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=>#):):)")
                                  (("4"
                                    (expand "SA")
                                    (("4"
                                      (expand "some")
                                      (("4"
                                        (expand "some")
                                        (("4"
                                          (expand "ands")
                                          (("4"
                                            (expand "every")
                                            (("4"
                                              (expand "every")
                                              (("4"
                                                (expand "evalatom")
                                                (("4"
                                                  (replace -3)
                                                  (("4"
                                                    (replace -4)
                                                    (("4"
                                                      (replace -5)
                                                      (("4"
                                                        (propax)
                                                        nil)))))))))))))))))))))))))))))))))))))))))))
             ("2" (name "p" "add(cnst_sf(-a),single_var_sf(i+1))")
              (("1" (lemma "add_standard_form")
                (("1" (inst? -1)
                  (("1" (expand "single_var_sf")
                    (("1" (expand "cnst_sf")
                      (("1" (case "max_length(p)=i+1")
                        (("1" (case "eval(p) = val(i)-a")
                          (("1" (hide 1)
                            (("1" (split -5)
                              (("1"
                                (decompose-equality)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "cnst")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=<=#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "-")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))))))))))))))))))
                                           ("2"
                                            (assert)
                                            nil)))))))))))))
                               ("2"
                                (decompose-equality)
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "cnst")
                                        (("2"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=<#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "-")
                                                              (("1"
                                                                (assert)
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (assert)
                                            nil)))))))))))))
                               ("3"
                                (decompose-equality)
                                (("3"
                                  (inst? -1)
                                  (("3"
                                    (replace -1)
                                    (("3"
                                      (hide -1)
                                      (("3"
                                        (inst
                                         1
                                         "(:(:(#poly:=p, ineq:=>=#):):)")
                                        (("1"
                                          (expand "SA" 1)
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "ands")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand
                                                       "evalatom")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "-")
                                                            (("1"
                                                              (assert)
                                                              nil)))))))))))))))))))))
                                         ("2" (assert) nil)))))))))))
                               ("4"
                                (decompose-equality)
                                (("4"
                                  (inst? -1)
                                  (("4"
                                    (replace -1)
                                    (("4"
                                      (inst
                                       1
                                       "(:(:(#poly:=p, ineq:=>#):):)")
                                      (("1"
                                        (expand "SA" 1)
                                        (("1"
                                          (expand "some")
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "ands")
                                              (("1"
                                                (expand "every")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "evalatom")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (expand "-")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))))))))))))))))
                                       ("2" (assert) nil)))))))))))))
                           ("2" (hide -4 3)
                            (("2" (lemma "val_exists")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (lemma "eval_equiv_ddl")
                                    (("2"
                                      (lemma "add_full_eval")
                                      (("2"
                                        (expand "cnst")
                                        (("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (expand "-")
                                            (("2"
                                              (copy -2)
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (typepred
                                                   "env_2_vec(i,x!1)")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "env_2_vec(i,x!1)")
                                                      (("1"
                                                        (inst? -3)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "env_2_vec(i,x!1)")
                                                          (("1"
                                                            (replace
                                                             -8)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "(: (# C := 1, alpha := e(1 + i, i) #) :)"
                                                                   "x!1"
                                                                   "env_2_vec(i,x!1)")
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "full_eval_recurs")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "(: (# C := -a, alpha := null #) :)"
                                                                           "env_2_vec(i, x!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "full_eval"
                                                                                 1
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "alpha_null_eval")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "full_eval"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "list_length_n[nat]")
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))))))))))))))))))
                                                                   ("2"
                                                                    (expand
                                                                     "max_length"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "max_length"
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "e(i + 1, i)")
                                                                        (("2"
                                                                          (replace
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -3)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "env_2_vec_nth")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "i_1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max_length")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max_length")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil)))))))))))))))))))))))))))))
                                                                   ("3"
                                                                    (lemma
                                                                     "every_e")
                                                                    (("3"
                                                                      (inst?
                                                                       -1)
                                                                      nil)))))))))))
                                                           ("2"
                                                            (expand
                                                             "max_length"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "max_length"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "e(i + 1, i)")
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))))))))))))))
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (lemma
                                                               "env_2_vec_nth")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                nil)))))))))))))))))))))))))))))))))))))))
                         ("2" (hide -3 2 3)
                          (("2"
                            (case "p = (: (# C := -a, alpha := zero_vec(1+i) #), (# C := 1, alpha := e(1 + i, i) #) :)")
                            (("1" (replace -1)
                              (("1"
                                (expand "max_length" 1)
                                (("1"
                                  (expand "max_length" 1)
                                  (("1"
                                    (expand "max_length" 1)
                                    (("1"
                                      (typepred "e(i + 1, i)")
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (typepred "zero_vec(1+i)")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (grind)
                                              nil)))))))))))))))))
                             ("2" (hide 2)
                              (("2"
                                (case "zero_vec(i+1) = (:0:)^(i+1)")
                                (("1"
                                  (expand "add" -3)
                                  (("1"
                                    (expand "min_add" -3)
                                    (("1"
                                      (name
                                       "x"
                                       "sort_add((: (# C := -a, alpha := null #) :), (: (# C := 1, alpha := e(1 + i, i) #) :))")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "sort_add" -1)
                                          (("1"
                                            (name
                                             "p1"
                                             "single_var_sf(i+1)")
                                            (("1"
                                              (name "p2" "cnst_sf(-a)")
                                              (("1"
                                                (expand
                                                 "single_var_sf")
                                                (("1"
                                                  (expand "cnst_sf")
                                                  (("1"
                                                    (typepred "p1")
                                                    (("1"
                                                      (typepred "p2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               -5
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "sorted_add"
                                                                 -5)
                                                                (("1"
                                                                  (expand
                                                                   "max_length"
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "max_length"
                                                                     -5)
                                                                    (("1"
                                                                      (typepred
                                                                       "e(i + 1, i)")
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "max"
                                                                           -7)
                                                                          (("1"
                                                                            (lemma
                                                                             "lft_max_on_minlength")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p1")
                                                                              (("1"
                                                                                (replace
                                                                                 -7
                                                                                 -1
                                                                                 rl)
                                                                                (("1"
                                                                                  (expand
                                                                                   "max_length"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max_length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "max"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lft"
                                                                                             -8)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "lft"
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9
                                                                                                       -8
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "append_null_left[nat]")
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3
                                                                                                               -10
                                                                                                               -11)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "sorted_sans_add"
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "list_extensionality[nat]")
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "nth_zero")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "i")
                                                                                                                              (("1"
                                                                                                                                (inst?
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "nth_e")
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil)))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (case
                                                                                                                                   "leq((# C := -a, alpha := zero_vec(1 + i) #), (# C := 1, alpha := e(1 + i, i) #))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -7)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "sorted_sans_add"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "minlength?(x)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2
                                                                                                                                                       -9
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -9)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -9
                                                                                                                                                           1
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (reveal
                                                                                                                                                             -)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -7)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil)))))))))))))
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       1
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "minlength?"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (split)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (split)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "Unif?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (reveal
                                                                                                                                                                       +)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         1
                                                                                                                                                                         2
                                                                                                                                                                         4
                                                                                                                                                                         5
                                                                                                                                                                         6)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (skeep)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "i_1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "j")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -5)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "length"
                                                                                                                                                                                   -)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "length"
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "j=0")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "i_1=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (grind)
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth"
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil)))))))))
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "i_1=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil)))))
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil)))))))))))))))))))))))))))))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     1
                                                                                                                                                                     "1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nth")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "nth")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "last_is_nth")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst?
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "nth_e")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil)))))))))))
                                                                                                                                                                             ("2"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "every_e")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  nil)))))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil)))))))))))))))))))))))))))))
                                                                                                                                         ("2"
                                                                                                                                          (grind)
                                                                                                                                          nil)))))))
                                                                                                                                   ("2"
                                                                                                                                    (typepred
                                                                                                                                     "zero_vec(1+i)")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "leq")
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2
                                                                                                                                           3
                                                                                                                                           4
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (reveal
                                                                                                                                             -15)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sum_0")
                                                                                                                                              (("2"
                                                                                                                                                (inst?
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "sum_e")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil)))))))))))))))))))))))))
                                                                                                                                   ("3"
                                                                                                                                    (lemma
                                                                                                                                     "every_e")
                                                                                                                                    (("3"
                                                                                                                                      (inst?)
                                                                                                                                      nil)))
                                                                                                                                   ("4"
                                                                                                                                    (lemma
                                                                                                                                     "every_zero")
                                                                                                                                    (("4"
                                                                                                                                      (inst?)
                                                                                                                                      nil)))))))))))))))))
                                                                                                                     ("2"
                                                                                                                      (lemma
                                                                                                                       "every_e")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        nil)))
                                                                                                                     ("3"
                                                                                                                      (lemma
                                                                                                                       "every_zero")
                                                                                                                      (("3"
                                                                                                                        (inst?)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))
                                                                               ("2"
                                                                                (replace
                                                                                 -6
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (expand
                                                                                   "minlength?"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "Unif?")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "i_1")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil)))))))))))))
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "i_1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "last_is_nth")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "nth_e")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (lemma "list_extensionality[nat]")
                                  (("2"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "zero_vec(1+i)")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (split)
                                            (("1"
                                              (case
                                               "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                              (("1" (inst?) nil)
                                               ("2"
                                                (induct "i")
                                                (("1" (grind) nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "^" 1)
                                                    (("2"
                                                      (lemma
                                                       "length_append[nat]")
                                                      (("2"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "FORALL(j:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), 1 + j)))")
                                                          (("1"
                                                            (inst?)
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "j")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "every_append[number]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("3"
                                                          (grind)
                                                          nil)))))))))))))
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (lemma "nth_zero")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (case
                                                       "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), i)))")
                                                      (("1"
                                                        (case
                                                         "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                        (("1"
                                                          (case
                                                           "FORALL(i:nat): FORALL (n: below(1 + i)): 0 = nth((: 0 :) ^ (1 + i), n)")
                                                          (("1"
                                                            (inst? -1)
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (typepred
                                                                 "n!1")
                                                                (("1"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "append_null_right[nat]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "n!1=0")
                                                                    (("1"
                                                                      (lemma
                                                                       "more_list_props[nat].nth_append")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)))))))))
                                                                         ("2"
                                                                          (inst?
                                                                           -4)
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil)))))
                                                                     ("2"
                                                                      (lemma
                                                                       "more_list_props[nat].nth_append")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j")
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               -1
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "n!1-1")
                                                                                    nil)))))))))))
                                                                         ("2"
                                                                          (inst?
                                                                           -3)
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (typepred
                                                                 "n!1")
                                                                (("3"
                                                                  (reveal
                                                                   -)
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "i!2")
                                                                    (("3"
                                                                      (expand
                                                                       "^"
                                                                       1)
                                                                      (("3"
                                                                        (expand
                                                                         "^"
                                                                         -1)
                                                                        (("3"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           rl)
                                                                          (("3"
                                                                            (propax)
                                                                            nil)))))))))))))))))
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "n!1")
                                                              (("3"
                                                                (inst
                                                                 -2
                                                                 "i!1")
                                                                (("3"
                                                                  (expand
                                                                   "^")
                                                                  (("3"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     rl)
                                                                    (("3"
                                                                      (propax)
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4
                                                           -5
                                                           -6
                                                           2
                                                           3
                                                           4)
                                                          (("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "length_append[nat]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (inst?)
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil)))))))))))))))
                                                       ("2"
                                                        (hide 2 3 4 -)
                                                        (("2"
                                                          (induct "i")
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "^"
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "every_append[number]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))))))))))))))))))))))))))
                                     ("2"
                                      (case
                                       "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (^[real]((: 0 :), 1 + i))")
                                      (("1" (inst?) nil)
                                       ("2"
                                        (induct "i")
                                        (("1" (grind) nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (expand "^" 1)
                                            (("2"
                                              (lemma
                                               "every_append[number]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))))))
                                     ("3"
                                      (lemma "every_zero")
                                      (("3"
                                        (inst?)
                                        nil)))))))))))))))))))))))))
               ("2" (assert) nil))))))))))))
    nil)
   nil nil)
  (val_cnst_SA-2 nil 3912517229
   ("" (skeep)
    (("" (expand "Saable?")
      (("" (expand "SA?")
        (("" (typepred "dl_be")
          (("" (case "a=0")
            (("1" (lemma "val_exists")
              (("1" (inst? -1)
                (("1" (name "p" "single_var_sf(i+1)")
                  (("1" (expand "single_var_sf")
                    (("1" (typepred "p")
                      (("1" (split -5)
                        (("1" (decompose-equality)
                          (("1" (inst? -1)
                            (("1" (replace -1)
                              (("1"
                                (inst
                                 1
                                 "(:(:(#poly:=p, ineq:=<=#):):)")
                                (("1"
                                  (expand "SA")
                                  (("1"
                                    (expand "some")
                                    (("1"
                                      (expand "some")
                                      (("1"
                                        (expand "ands")
                                        (("1"
                                          (expand "every")
                                          (("1"
                                            (expand "every")
                                            (("1"
                                              (expand "evalatom")
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand
                                                           "cnst"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "cnst")
                                                                  (("1"
                                                                    (propax)
                                                                    nil)))))))))))))))))))))))))))))))))))))))))))
                         ("2" (decompose-equality)
                          (("2" (inst? -1)
                            (("2" (expand "cnst")
                              (("2"
                                (replace -1)
                                (("2"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=<#):):)")
                                  (("2"
                                    (expand "SA")
                                    (("2"
                                      (expand "some")
                                      (("2"
                                        (expand "some")
                                        (("2"
                                          (expand "ands")
                                          (("2"
                                            (expand "every")
                                            (("2"
                                              (expand "every")
                                              (("2"
                                                (expand "evalatom")
                                                (("2"
                                                  (replace -3)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (replace -5)
                                                      (("2"
                                                        (propax)
                                                        nil)))))))))))))))))))))))))))))))
                         ("3" (decompose-equality)
                          (("3" (inst? -1)
                            (("3" (replace -1)
                              (("3"
                                (expand "cnst")
                                (("3"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=>=#):):)")
                                  (("3"
                                    (expand "SA")
                                    (("3"
                                      (expand "some")
                                      (("3"
                                        (expand "some")
                                        (("3"
                                          (expand "ands")
                                          (("3"
                                            (expand "every")
                                            (("3"
                                              (expand "every")
                                              (("3"
                                                (expand "evalatom")
                                                (("3"
                                                  (replace -3)
                                                  (("3"
                                                    (replace -4)
                                                    (("3"
                                                      (replace -5)
                                                      (("3"
                                                        (propax)
                                                        nil)))))))))))))))))))))))))))))))
                         ("4" (decompose-equality)
                          (("4" (inst? -1)
                            (("4" (replace -1)
                              (("4"
                                (expand "cnst")
                                (("4"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=>#):):)")
                                  (("4"
                                    (expand "SA")
                                    (("4"
                                      (expand "some")
                                      (("4"
                                        (expand "some")
                                        (("4"
                                          (expand "ands")
                                          (("4"
                                            (expand "every")
                                            (("4"
                                              (expand "every")
                                              (("4"
                                                (expand "evalatom")
                                                (("4"
                                                  (replace -3)
                                                  (("4"
                                                    (replace -4)
                                                    (("4"
                                                      (replace -5)
                                                      (("4"
                                                        (propax)
                                                        nil)))))))))))))))))))))))))))))))))))))))))))
             ("2" (name "p" "add(cnst_sf(-a),single_var_sf(i+1))")
              (("1" (lemma "add_standard_form")
                (("1" (inst? -1)
                  (("1" (expand "single_var_sf")
                    (("1" (expand "cnst_sf")
                      (("1" (case "max_length(p)=i+1")
                        (("1" (case "eval(p) = val(i)-a")
                          (("1" (hide 1)
                            (("1" (split -5)
                              (("1"
                                (decompose-equality)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "cnst")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=<=#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "-")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))))))))))))))))))
                                           ("2"
                                            (assert)
                                            nil)))))))))))))
                               ("2"
                                (decompose-equality)
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "cnst")
                                        (("2"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=<#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "-")
                                                              (("1"
                                                                (assert)
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (assert)
                                            nil)))))))))))))
                               ("3"
                                (decompose-equality)
                                (("3"
                                  (inst? -1)
                                  (("3"
                                    (replace -1)
                                    (("3"
                                      (hide -1)
                                      (("3"
                                        (inst
                                         1
                                         "(:(:(#poly:=p, ineq:=>=#):):)")
                                        (("1"
                                          (expand "SA" 1)
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "ands")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand
                                                       "evalatom")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "-")
                                                            (("1"
                                                              (assert)
                                                              nil)))))))))))))))))))))
                                         ("2" (assert) nil)))))))))))
                               ("4"
                                (decompose-equality)
                                (("4"
                                  (inst? -1)
                                  (("4"
                                    (replace -1)
                                    (("4"
                                      (inst
                                       1
                                       "(:(:(#poly:=p, ineq:=>#):):)")
                                      (("1"
                                        (expand "SA" 1)
                                        (("1"
                                          (expand "some")
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "ands")
                                              (("1"
                                                (expand "every")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "evalatom")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (expand "-")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))))))))))))))))
                                       ("2" (assert) nil)))))))))))))
                           ("2" (hide -4 3)
                            (("2" (lemma "val_exists")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (lemma "eval_equiv_ddl")
                                    (("2"
                                      (lemma "add_full_eval")
                                      (("2"
                                        (expand "cnst")
                                        (("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (expand "-")
                                            (("2"
                                              (copy -2)
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (typepred
                                                   "env_2_vec(i,x!1)")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "env_2_vec(i,x!1)")
                                                      (("1"
                                                        (inst? -3)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "env_2_vec(i,x!1)")
                                                          (("1"
                                                            (replace
                                                             -8)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "(: (# C := 1, alpha := e(1 + i, i) #) :)"
                                                                   "x!1"
                                                                   "env_2_vec(i,x!1)")
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "full_eval_recurs")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "(: (# C := -a, alpha := null #) :)"
                                                                           "env_2_vec(i, x!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "full_eval"
                                                                                 1
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "alpha_null_eval")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "full_eval"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "list_length_n[nat]")
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))))))))))))))))))
                                                                   ("2"
                                                                    (expand
                                                                     "max_length"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "max_length"
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "e(i + 1, i)")
                                                                        (("2"
                                                                          (replace
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -3)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "env_2_vec_nth")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "i_1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max_length")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max_length")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil)))))))))))))))))))))))))))))
                                                                   ("3"
                                                                    (lemma
                                                                     "every_e")
                                                                    (("3"
                                                                      (inst?
                                                                       -1)
                                                                      nil)))))))))))
                                                           ("2"
                                                            (expand
                                                             "max_length"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "max_length"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "e(i + 1, i)")
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))))))))))))))
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (lemma
                                                               "env_2_vec_nth")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                nil)))))))))))))))))))))))))))))))))))))))
                         ("2" (hide -3 2 3)
                          (("2"
                            (case "p = (: (# C := -a, alpha := zero_vec(1+i) #), (# C := 1, alpha := e(1 + i, i) #) :)")
                            (("1" (replace -1)
                              (("1"
                                (expand "max_length" 1)
                                (("1"
                                  (expand "max_length" 1)
                                  (("1"
                                    (expand "max_length" 1)
                                    (("1"
                                      (typepred "e(i + 1, i)")
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (typepred "zero_vec(1+i)")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (grind)
                                              nil)))))))))))))))))
                             ("2" (hide 2)
                              (("2"
                                (case "zero_vec(i+1) = (:0:)^(i+1)")
                                (("1"
                                  (expand "add" -3)
                                  (("1"
                                    (expand "min_add" -3)
                                    (("1"
                                      (name
                                       "x"
                                       "sort_add((: (# C := -a, alpha := null #) :), (: (# C := 1, alpha := e(1 + i, i) #) :))")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "sort_add" -1)
                                          (("1"
                                            (name
                                             "p1"
                                             "single_var_sf(i+1)")
                                            (("1"
                                              (name "p2" "cnst_sf(-a)")
                                              (("1"
                                                (expand
                                                 "single_var_sf")
                                                (("1"
                                                  (expand "cnst_sf")
                                                  (("1"
                                                    (typepred "p1")
                                                    (("1"
                                                      (typepred "p2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               -5
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "sorted_add"
                                                                 -5)
                                                                (("1"
                                                                  (expand
                                                                   "max_length"
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "max_length"
                                                                     -5)
                                                                    (("1"
                                                                      (typepred
                                                                       "e(i + 1, i)")
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "max"
                                                                           -7)
                                                                          (("1"
                                                                            (lemma
                                                                             "lft_max_on_minlength")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p1")
                                                                              (("1"
                                                                                (replace
                                                                                 -7
                                                                                 -1
                                                                                 rl)
                                                                                (("1"
                                                                                  (expand
                                                                                   "max_length"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max_length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "max"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lft"
                                                                                             -8)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "lft"
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9
                                                                                                       -8
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "append_null_left[nat]")
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3
                                                                                                               -10
                                                                                                               -11)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "sorted_sans_add"
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "list_extensionality[nat]")
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "nth_zero")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "i")
                                                                                                                              (("1"
                                                                                                                                (inst?
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "nth_e")
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil)))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (case
                                                                                                                                   "leq((# C := -a, alpha := zero_vec(1 + i) #), (# C := 1, alpha := e(1 + i, i) #))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -7)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "sorted_sans_add"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "minlength?(x)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2
                                                                                                                                                       -9
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -9)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -9
                                                                                                                                                           1
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (reveal
                                                                                                                                                             -)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -7)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil)))))))))))))
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       1
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "minlength?"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (split)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (split)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "Unif?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (reveal
                                                                                                                                                                       +)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         1
                                                                                                                                                                         2
                                                                                                                                                                         4
                                                                                                                                                                         5
                                                                                                                                                                         6)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (skeep)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "i_1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "j")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -5)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "length"
                                                                                                                                                                                   -)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "length"
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "j=0")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "i_1=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (grind)
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth"
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil)))))))))
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "i_1=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil)))))
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil)))))))))))))))))))))))))))))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     1
                                                                                                                                                                     "1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nth")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "nth")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "last_is_nth")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst?
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "nth_e")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil)))))))))))
                                                                                                                                                                             ("2"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "every_e")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  nil)))))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil)))))))))))))))))))))))))))))
                                                                                                                                         ("2"
                                                                                                                                          (grind)
                                                                                                                                          nil)))))))
                                                                                                                                   ("2"
                                                                                                                                    (typepred
                                                                                                                                     "zero_vec(1+i)")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "leq")
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2
                                                                                                                                           3
                                                                                                                                           4
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (reveal
                                                                                                                                             -15)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sum_0")
                                                                                                                                              (("2"
                                                                                                                                                (inst?
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "sum_e")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil)))))))))))))))))))))))))
                                                                                                                                   ("3"
                                                                                                                                    (lemma
                                                                                                                                     "every_e")
                                                                                                                                    (("3"
                                                                                                                                      (inst?)
                                                                                                                                      nil)))
                                                                                                                                   ("4"
                                                                                                                                    (lemma
                                                                                                                                     "every_zero")
                                                                                                                                    (("4"
                                                                                                                                      (inst?)
                                                                                                                                      nil)))))))))))))))))
                                                                                                                     ("2"
                                                                                                                      (lemma
                                                                                                                       "every_e")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        nil)))
                                                                                                                     ("3"
                                                                                                                      (lemma
                                                                                                                       "every_zero")
                                                                                                                      (("3"
                                                                                                                        (inst?)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))
                                                                               ("2"
                                                                                (replace
                                                                                 -6
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (expand
                                                                                   "minlength?"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "Unif?")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "i_1")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil)))))))))))))
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "i_1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "last_is_nth")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "nth_e")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (lemma "list_extensionality[nat]")
                                  (("2"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "zero_vec(1+i)")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (split)
                                            (("1"
                                              (case
                                               "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                              (("1" (inst?) nil)
                                               ("2"
                                                (induct "i")
                                                (("1" (grind) nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "^" 1)
                                                    (("2"
                                                      (lemma
                                                       "length_append[nat]")
                                                      (("2"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "FORALL(j:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), 1 + j)))")
                                                          (("1"
                                                            (inst?)
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "j")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "every_append[number]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("3"
                                                          (grind)
                                                          nil)))))))))))))
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (lemma "nth_zero")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (case
                                                       "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), i)))")
                                                      (("1"
                                                        (case
                                                         "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                        (("1"
                                                          (case
                                                           "FORALL(i:nat): FORALL (n: below(1 + i)): 0 = nth((: 0 :) ^ (1 + i), n)")
                                                          (("1"
                                                            (inst? -1)
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (typepred
                                                                 "n!1")
                                                                (("1"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "append_null_right[nat]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "n!1=0")
                                                                    (("1"
                                                                      (lemma
                                                                       "more_list_props[nat].nth_append")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)))))))))
                                                                         ("2"
                                                                          (inst?
                                                                           -4)
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil)))))
                                                                     ("2"
                                                                      (lemma
                                                                       "more_list_props[nat].nth_append")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j")
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               -1
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "n!1-1")
                                                                                    nil)))))))))))
                                                                         ("2"
                                                                          (inst?
                                                                           -3)
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil)))))))))))))
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (typepred
                                                                 "n!1")
                                                                (("3"
                                                                  (reveal
                                                                   -)
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "i!2")
                                                                    (("3"
                                                                      (expand
                                                                       "^"
                                                                       1)
                                                                      (("3"
                                                                        (expand
                                                                         "^"
                                                                         -1)
                                                                        (("3"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           rl)
                                                                          (("3"
                                                                            (propax)
                                                                            nil)))))))))))))))))
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "n!1")
                                                              (("3"
                                                                (inst
                                                                 -2
                                                                 "i!1")
                                                                (("3"
                                                                  (expand
                                                                   "^")
                                                                  (("3"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     rl)
                                                                    (("3"
                                                                      (propax)
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4
                                                           -5
                                                           -6
                                                           2
                                                           3
                                                           4)
                                                          (("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "length_append[nat]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (inst?)
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil)))))))))))))))
                                                       ("2"
                                                        (hide 2 3 4 -)
                                                        (("2"
                                                          (induct "i")
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "^"
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "every_append[number]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))))))))))))))))))))))))))
                                     ("2"
                                      (case
                                       "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (^[real]((: 0 :), 1 + i))")
                                      (("1" (inst?) nil)
                                       ("2"
                                        (induct "i")
                                        (("1" (grind) nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (expand "^" 1)
                                            (("2"
                                              (lemma
                                               "every_append[number]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))))))
                                     ("3"
                                      (lemma "every_zero")
                                      (("3"
                                        (inst?)
                                        nil)))))))))))))))))))))))))
               ("2" (assert) nil))))))))))))
    nil)
   nil nil)
  (val_cnst_SA-1 nil 3865079663
   ("" (skeep)
    (("" (expand "Saable?")
      (("" (expand "SA?")
        (("" (typepred "dl_be")
          (("" (case "a=0")
            (("1" (lemma "val_exists")
              (("1" (inst? -1)
                (("1" (name "p" "single_var_sf(i+1)")
                  (("1" (expand "single_var_sf")
                    (("1" (typepred "p")
                      (("1" (split -5)
                        (("1" (decompose-equality)
                          (("1" (inst? -1)
                            (("1" (replace -1)
                              (("1"
                                (inst
                                 1
                                 "(:(:(#poly:=p, ineq:=<=#):):)")
                                (("1"
                                  (expand "SA")
                                  (("1"
                                    (expand "some")
                                    (("1"
                                      (expand "some")
                                      (("1"
                                        (expand "ands")
                                        (("1"
                                          (expand "every")
                                          (("1"
                                            (expand "every")
                                            (("1"
                                              (expand "evalatom")
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand
                                                           "cnst"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "cnst")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (decompose-equality)
                          (("2" (inst? -1)
                            (("2" (expand "cnst")
                              (("2"
                                (replace -1)
                                (("2"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=<#):):)")
                                  (("2"
                                    (expand "SA")
                                    (("2"
                                      (expand "some")
                                      (("2"
                                        (expand "some")
                                        (("2"
                                          (expand "ands")
                                          (("2"
                                            (expand "every")
                                            (("2"
                                              (expand "every")
                                              (("2"
                                                (expand "evalatom")
                                                (("2"
                                                  (replace -3)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (replace -5)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (decompose-equality)
                          (("3" (inst? -1)
                            (("3" (replace -1)
                              (("3"
                                (expand "cnst")
                                (("3"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=>=#):):)")
                                  (("3"
                                    (expand "SA")
                                    (("3"
                                      (expand "some")
                                      (("3"
                                        (expand "some")
                                        (("3"
                                          (expand "ands")
                                          (("3"
                                            (expand "every")
                                            (("3"
                                              (expand "every")
                                              (("3"
                                                (expand "evalatom")
                                                (("3"
                                                  (replace -3)
                                                  (("3"
                                                    (replace -4)
                                                    (("3"
                                                      (replace -5)
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (decompose-equality)
                          (("4" (inst? -1)
                            (("4" (replace -1)
                              (("4"
                                (expand "cnst")
                                (("4"
                                  (inst
                                   1
                                   "(:(:(#poly:=p, ineq:=>#):):)")
                                  (("4"
                                    (expand "SA")
                                    (("4"
                                      (expand "some")
                                      (("4"
                                        (expand "some")
                                        (("4"
                                          (expand "ands")
                                          (("4"
                                            (expand "every")
                                            (("4"
                                              (expand "every")
                                              (("4"
                                                (expand "evalatom")
                                                (("4"
                                                  (replace -3)
                                                  (("4"
                                                    (replace -4)
                                                    (("4"
                                                      (replace -5)
                                                      (("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (name "p" "add(cnst_sf(-a),single_var_sf(i+1))")
              (("1" (lemma "add_standard_form")
                (("1" (inst? -1)
                  (("1" (expand "single_var_sf")
                    (("1" (expand "cnst_sf")
                      (("1" (case "max_length(p)=i+1")
                        (("1" (case "eval(p) = val(i)-a")
                          (("1" (hide 1)
                            (("1" (split -5)
                              (("1"
                                (decompose-equality)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "cnst")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=<=#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "-")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (decompose-equality)
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "cnst")
                                        (("2"
                                          (inst
                                           1
                                           "(:(:(#poly:=p, ineq:=<#):):)")
                                          (("1"
                                            (expand "SA" 1)
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "some")
                                                (("1"
                                                  (expand "ands")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "evalatom")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "-")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (decompose-equality)
                                (("3"
                                  (inst? -1)
                                  (("3"
                                    (replace -1)
                                    (("3"
                                      (hide -1)
                                      (("3"
                                        (inst
                                         1
                                         "(:(:(#poly:=p, ineq:=>=#):):)")
                                        (("1"
                                          (expand "SA" 1)
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "some")
                                              (("1"
                                                (expand "ands")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "every")
                                                    (("1"
                                                      (expand
                                                       "evalatom")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "-")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (decompose-equality)
                                (("4"
                                  (inst? -1)
                                  (("4"
                                    (replace -1)
                                    (("4"
                                      (inst
                                       1
                                       "(:(:(#poly:=p, ineq:=>#):):)")
                                      (("1"
                                        (expand "SA" 1)
                                        (("1"
                                          (expand "some")
                                          (("1"
                                            (expand "some")
                                            (("1"
                                              (expand "ands")
                                              (("1"
                                                (expand "every")
                                                (("1"
                                                  (expand "every")
                                                  (("1"
                                                    (expand "evalatom")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (expand "-")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -4 3)
                            (("2" (lemma "val_exists")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (lemma "eval_equiv_ddl")
                                    (("2"
                                      (lemma "add_full_eval")
                                      (("2"
                                        (expand "cnst")
                                        (("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (expand "-")
                                            (("2"
                                              (copy -2)
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (typepred
                                                   "env_2_vec(i,x!1)")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "env_2_vec(i,x!1)")
                                                      (("1"
                                                        (inst? -3)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "env_2_vec(i,x!1)")
                                                          (("1"
                                                            (replace
                                                             -8)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "(: (# C := 1, alpha := e(1 + i, i) #) :)"
                                                                   "x!1"
                                                                   "env_2_vec(i,x!1)")
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "full_eval_recurs")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "(: (# C := -a, alpha := null #) :)"
                                                                           "env_2_vec(i, x!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "full_eval"
                                                                                 1
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "alpha_null_eval")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "full_eval"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "list_length_n[nat]")
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "max_length"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "max_length"
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "e(i + 1, i)")
                                                                        (("2"
                                                                          (replace
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -3)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "env_2_vec_nth")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "i_1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max_length")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max_length")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "every_e")
                                                                    (("3"
                                                                      (inst?
                                                                       -1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "max_length"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "max_length"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "e(i + 1, i)")
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (lemma
                                                               "env_2_vec_nth")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -3 2 3)
                          (("2"
                            (case "p = (: (# C := -a, alpha := zero_vec(1+i) #), (# C := 1, alpha := e(1 + i, i) #) :)")
                            (("1" (replace -1)
                              (("1"
                                (expand "max_length" 1)
                                (("1"
                                  (expand "max_length" 1)
                                  (("1"
                                    (expand "max_length" 1)
                                    (("1"
                                      (typepred "e(i + 1, i)")
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (typepred "zero_vec(1+i)")
                                          (("1"
                                            (replace -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (case "zero_vec(i+1) = (:0:)^(i+1)")
                                (("1"
                                  (expand "add" -3)
                                  (("1"
                                    (expand "min_add" -3)
                                    (("1"
                                      (name
                                       "x"
                                       "sort_add((: (# C := -a, alpha := null #) :), (: (# C := 1, alpha := e(1 + i, i) #) :))")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "sort_add" -1)
                                          (("1"
                                            (name
                                             "p1"
                                             "single_var_sf(i+1)")
                                            (("1"
                                              (name "p2" "cnst_sf(-a)")
                                              (("1"
                                                (expand
                                                 "single_var_sf")
                                                (("1"
                                                  (expand "cnst_sf")
                                                  (("1"
                                                    (typepred "p1")
                                                    (("1"
                                                      (typepred "p2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               -5
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "sorted_add"
                                                                 -5)
                                                                (("1"
                                                                  (expand
                                                                   "max_length"
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "max_length"
                                                                     -5)
                                                                    (("1"
                                                                      (typepred
                                                                       "e(i + 1, i)")
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "max"
                                                                           -7)
                                                                          (("1"
                                                                            (lemma
                                                                             "lft_max_on_minlength")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p1")
                                                                              (("1"
                                                                                (replace
                                                                                 -7
                                                                                 -1
                                                                                 rl)
                                                                                (("1"
                                                                                  (expand
                                                                                   "max_length"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max_length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "max"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lft"
                                                                                             -8)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "lft"
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9
                                                                                                       -8
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "append_null_left[nat]")
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3
                                                                                                               -10
                                                                                                               -11)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "sorted_sans_add"
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "list_extensionality[nat]")
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "nth_zero")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "i")
                                                                                                                              (("1"
                                                                                                                                (inst?
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "nth_e")
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (case
                                                                                                                                   "leq((# C := -a, alpha := zero_vec(1 + i) #), (# C := 1, alpha := e(1 + i, i) #))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -7)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "sorted_sans_add"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "minlength?(x)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2
                                                                                                                                                       -9
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -9)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -9
                                                                                                                                                           1
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (reveal
                                                                                                                                                             -)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -7)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       1
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "minlength?"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (split)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (split)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "Unif?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (reveal
                                                                                                                                                                       +)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         1
                                                                                                                                                                         2
                                                                                                                                                                         4
                                                                                                                                                                         5
                                                                                                                                                                         6)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (skeep)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "i_1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "j")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -5)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "length"
                                                                                                                                                                                   -)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "length"
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "j=0")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "i_1=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (grind)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth"
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "i_1=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "nth")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     1
                                                                                                                                                                     "1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nth")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "nth")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "last_is_nth")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst?
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "nth_e")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "every_e")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (typepred
                                                                                                                                     "zero_vec(1+i)")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "leq")
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2
                                                                                                                                           3
                                                                                                                                           4
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (reveal
                                                                                                                                             -15)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sum_0")
                                                                                                                                              (("2"
                                                                                                                                                (inst?
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "sum_e")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (lemma
                                                                                                                                     "every_e")
                                                                                                                                    (("3"
                                                                                                                                      (inst?)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("4"
                                                                                                                                    (lemma
                                                                                                                                     "every_zero")
                                                                                                                                    (("4"
                                                                                                                                      (inst?)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (lemma
                                                                                                                       "every_e")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (lemma
                                                                                                                       "every_zero")
                                                                                                                      (("3"
                                                                                                                        (inst?)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -6
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (expand
                                                                                   "minlength?"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "Unif?")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "i_1")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "i_1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "last_is_nth")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "nth_e")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "list_extensionality[nat]")
                                  (("2"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "zero_vec(1+i)")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (split)
                                            (("1"
                                              (case
                                               "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                              (("1" (inst?) nil nil)
                                               ("2"
                                                (induct "i")
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "^" 1)
                                                    (("2"
                                                      (lemma
                                                       "length_append[nat]")
                                                      (("2"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "FORALL(j:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), 1 + j)))")
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "j")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "every_append[number]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (lemma "nth_zero")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (case
                                                       "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) ((^[real]((: 0 :), i)))")
                                                      (("1"
                                                        (case
                                                         "FORALL(i:nat): 1 + i = length((: 0 :) ^ (1 + i))")
                                                        (("1"
                                                          (case
                                                           "FORALL(i:nat): FORALL (n: below(1 + i)): 0 = nth((: 0 :) ^ (1 + i), n)")
                                                          (("1"
                                                            (inst? -1)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (typepred
                                                                 "n!1")
                                                                (("1"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "append_null_right[nat]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "n!1=0")
                                                                    (("1"
                                                                      (lemma
                                                                       "more_list_props[nat].nth_append")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst?
                                                                           -4)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "more_list_props[nat].nth_append")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j")
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               -1
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "n!1-1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst?
                                                                           -3)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (typepred
                                                                 "n!1")
                                                                (("3"
                                                                  (reveal
                                                                   -)
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "i!2")
                                                                    (("3"
                                                                      (expand
                                                                       "^"
                                                                       1)
                                                                      (("3"
                                                                        (expand
                                                                         "^"
                                                                         -1)
                                                                        (("3"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           rl)
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "n!1")
                                                              (("3"
                                                                (inst
                                                                 -2
                                                                 "i!1")
                                                                (("3"
                                                                  (expand
                                                                   "^")
                                                                  (("3"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     rl)
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4
                                                           -5
                                                           -6
                                                           2
                                                           3
                                                           4)
                                                          (("2"
                                                            (induct
                                                             "i")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "length_append[nat]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 3 4 -)
                                                        (("2"
                                                          (induct "i")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "^"
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "every_append[number]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case
                                       "FORALL(i:nat): every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (^[real]((: 0 :), 1 + i))")
                                      (("1" (inst?) nil nil)
                                       ("2"
                                        (induct "i")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (expand "^" 1)
                                            (("2"
                                              (lemma
                                               "every_append[number]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "every_zero")
                                      (("3" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SAable? const-decl "bool" bool_expr_SA_props nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cnst_sf const-decl "(mv_standard_form?)" bool_expr_SA_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (minus_real_is_real application-judgement "real" reals nil)
    (nth_append formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (every_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (minlength? const-decl "bool" standard_form_mult_poly mult_poly)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_null formula-decl nil more_list_props structures)
    (list_extensionality formula-decl nil more_list_props structures)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (nth_zero formula-decl nil vector_arithmetic mv_analysis)
    (leq def-decl "bool" standard_form_mult_poly mult_poly)
    (Unif? const-decl "bool" standard_form_mult_poly mult_poly)
    (last_is_nth formula-decl nil standard_form_mult_poly mult_poly)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum_0 formula-decl nil standard_form_mult_poly mult_poly)
    (sum_e formula-decl nil bool_expr_SA_props nil)
    (every_zero formula-decl nil vector_arithmetic mv_analysis)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (append_null_left formula-decl nil more_list_props structures)
    (lft def-decl "MultPoly" standard_form_mult_poly mult_poly)
    (lft_max_on_minlength formula-decl nil standard_form_extras
     mult_poly)
    (sorted_add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (min_add const-decl "MultPoly" arithmetic_MultPoly mult_poly)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (add_full_eval formula-decl nil standard_form_unique mult_poly)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re dL)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (alpha_null_eval formula-decl nil eval_properties mult_poly)
    (list_length_n def-decl "list[nat]" list_lemmas mult_poly)
    (list_length_n formula-decl nil list_lemmas mult_poly)
    (full_eval const-decl "real" eval_MultPoly mult_poly)
    (full_eval def-decl "real" eval_MultPoly mult_poly)
    (real_times_real_is_real application-judgement "real" reals nil)
    (full_eval_recurs formula-decl nil eval_properties mult_poly)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (env_2_vec_nth formula-decl nil chain_rule_re dL)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (every_e formula-decl nil vector_arithmetic mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (eval_equiv_ddl formula-decl nil semi_algebraic_def nil)
    (max_length def-decl "nat" standard_form_mult_poly mult_poly)
    (add_standard_form formula-decl nil standard_form_extras mult_poly)
    (val_exists formula-decl nil bool_expr_SA_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (single_var_sf const-decl "(mv_standard_form?)" bool_expr_SA_props
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (eval const-decl "real" semi_algebraic_def nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (INEQ type-eq-decl nil semi_algebraic mult_poly)
    (atomic_poly type-eq-decl nil semi_algebraic mult_poly)
    (meeting type-eq-decl nil semi_algebraic mult_poly)
    (joining type-eq-decl nil semi_algebraic mult_poly)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (val const-decl "real" hp_def dL)
    (cnst const-decl "real" hp_def dL))
   shostak))
 (atomic_be 0
  (atomic_be-1 nil 3863175698
   ("" (skeep)
    (("" (expand "be_SF?")
      (("" (expand "atomic?")
        (("" (expand "exist_sf?")
          (("" (skeep)
            (("" (inst?)
              (("" (expand "evalatom")
                (("" (replace -1 1 rl)
                  (("" (lemma "rel_equiv") (("" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((be_SF? const-decl "bool" bool_expr_SA_props nil)
    (exist_sf? const-decl "bool" bool_expr_SA_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (rel_equiv formula-decl nil bool_expr_SA_props nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (atomic? const-decl "bool" bool_expr_SA_props nil))
   shostak))
 (atom_val_cnst 0
  (atom_val_cnst-2 nil 3912519586
   ("" (skeep)
    (("" (lemma "atomic_be")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (expand "be_SF?")
              (("" (lemma "Re_diff")
                (("" (inst?)
                  (("" (assert)
                    (("" (lemma "sf_val")
                      (("" (lemma "sf_cnst")
                        (("" (inst?)
                          (("" (inst?)
                            (("" (lemma "sf_iff_mp")
                              ((""
                                (copy -1)
                                ((""
                                  (copy -1)
                                  ((""
                                    (inst -1 "val(dlvar(i)) - cnst(a)")
                                    ((""
                                      (assert)
                                      ((""
                                        (inst -1 "val(dlvar(i))")
                                        ((""
                                          (assert)
                                          ((""
                                            (inst -2 "cnst(a)")
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atomic_be formula-decl nil bool_expr_SA_props nil)
    (be_SF? const-decl "bool" bool_expr_SA_props nil)
    (sf_val formula-decl nil bool_expr_SA_props nil)
    (sf_iff_mp formula-decl nil bool_expr_SA_props nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (sf_cnst formula-decl nil bool_expr_SA_props nil)
    (Re_diff formula-decl nil bool_expr_SA_props nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (cnst const-decl "real" hp_def dL)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def dL)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def dL)
    (val const-decl "real" hp_def dL) (dLVar type-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (atom_val_cnst-1 nil 3864131454
   ("" (skeep)
    (("" (lemma "atomic_be")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (expand "be_SF?")
              (("" (lemma "Re_diff")
                (("" (inst?)
                  (("" (assert)
                    (("" (lemma "sf_val")
                      (("" (lemma "sf_cnst")
                        (("" (inst?)
                          (("" (inst?)
                            (("" (lemma "sf_iff_mp")
                              ((""
                                (copy -1)
                                ((""
                                  (copy -1)
                                  ((""
                                    (inst -1 "val(i) - cnst(a)")
                                    ((""
                                      (assert)
                                      ((""
                                        (inst -1 "val(i)")
                                        ((""
                                          (assert)
                                          ((""
                                            (inst -2 "cnst(a)")
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atomic_be formula-decl nil bool_expr_SA_props nil)
    (be_SF? const-decl "bool" bool_expr_SA_props nil)
    (sf_val formula-decl nil bool_expr_SA_props nil)
    (sf_iff_mp formula-decl nil bool_expr_SA_props nil)
    (sf_cnst formula-decl nil bool_expr_SA_props nil)
    (Re_diff formula-decl nil bool_expr_SA_props nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (cnst const-decl "real" hp_def dL)
    (val const-decl "real" hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (SAable_atom 0
  (SAable_atom-1 nil 3863687175
   ("" (skeep)
    (("" (expand "atomic?")
      (("" (expand "SAable?")
        (("" (expand "SA?")
          (("" (skeep)
            ((""
              (inst 1 "(:(: (# poly := p, ineq := rel(dl_be) #) :):)")
              (("" (expand "SA")
                (("" (expand "some")
                  (("" (expand "some")
                    (("" (expand "ands")
                      (("" (expand "every")
                        (("" (expand "every")
                          (("" (expand "evalatom")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atomic? const-decl "bool" bool_expr_SA_props nil)
    (SA? const-decl "bool" semi_algebraic_def nil)
    (INEQ type-eq-decl nil semi_algebraic mult_poly)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (atomic_poly type-eq-decl nil semi_algebraic mult_poly)
    (meeting type-eq-decl nil semi_algebraic mult_poly)
    (joining type-eq-decl nil semi_algebraic mult_poly)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (rel const-decl "INEQ" bool_expr_SA_props nil)
    (some adt-def-decl "boolean" list_adt nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (SAable? const-decl "bool" bool_expr_SA_props nil))
   shostak))
 (and_atom 0
  (and_atom-1 nil 3863781698
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (expand "SA")
        (("" (expand "some")
          (("" (expand "some")
            (("" (expand "ands")
              (("" (expand "every")
                (("" (expand "every")
                  (("" (expand "every") (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLAND const-decl "bool" bool_expr dL)
    (some adt-def-decl "boolean" list_adt nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (SA const-decl "bool" semi_algebraic_def nil))
   shostak))
 (or_atom 0
  (or_atom-1 nil 3863781791
   ("" (skeep)
    (("" (expand "DLOR")
      (("" (expand "SA")
        (("" (expand "some")
          (("" (expand "some")
            (("" (expand "some")
              (("" (expand "ands")
                (("" (expand "every")
                  (("" (expand "every") (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLOR const-decl "bool" bool_expr dL)
    (some adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (SA const-decl "bool" semi_algebraic_def nil))
   shostak))
 (not_atom 0
  (not_atom-1 nil 3863871849
   ("" (skeep)
    (("" (expand "DLNOT")
      (("" (expand "not_join")
        (("" (expand "not_join")
          (("" (expand "negative_atom_meet")
            (("" (expand "negative_atom_meet")
              (("" (expand "cap_join")
                (("" (expand "cap_join")
                  (("" (expand "append_to_each")
                    (("" (expand "append_to_each")
                      (("" (lemma "append_null_right[atomic_poly]")
                        (("" (inst?)
                          (("" (replace -1)
                            ((""
                              (lemma
                               "append_null_right[list[atomic_poly]]")
                              ((""
                                (inst? -1)
                                ((""
                                  (replace -1)
                                  ((""
                                    (expand "SA")
                                    ((""
                                      (expand "some")
                                      ((""
                                        (expand "some")
                                        ((""
                                          (expand "ands")
                                          ((""
                                            (expand "every")
                                            ((""
                                              (expand "every")
                                              ((""
                                                (lemma
                                                 "negative_atom_eval")
                                                ((""
                                                  (expand "evalatom")
                                                  ((""
                                                    (expand
                                                     "atom_eval")
                                                    ((""
                                                      (decompose-equality
                                                       1)
                                                      ((""
                                                        (lemma
                                                         "eval_equiv_ddl")
                                                        ((""
                                                          (copy -1)
                                                          ((""
                                                            (name
                                                             "l"
                                                             "env_2_vec(max_length(a1`poly),x!1)")
                                                            ((""
                                                              (inst
                                                               -2
                                                               "a1`poly"
                                                               "x!1"
                                                               "l")
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "negative_atom(a1)`poly"
                                                                 "x!1"
                                                                 "l")
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "a1"
                                                                   "l")
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (replace
                                                                       -3)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "negative_atom"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         1
                                                                         rl)
                                                                        (("2"
                                                                          (lemma
                                                                           "env_2_vec_nth")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (typepred
                                                                               "i")
                                                                              (("2"
                                                                                (expand
                                                                                 "negative_atom"
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("2"
                                                                      (lemma
                                                                       "env_2_vec_nth")
                                                                      (("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLNOT const-decl "bool" bool_expr dL)
    (negative_atom const-decl "atomic_poly" semi_algebraic mult_poly)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some adt-def-decl "boolean" list_adt nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (eval const-decl "real" semi_algebraic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def dL)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     mult_poly)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a1 skolem-const-decl "atomic_poly" bool_expr_SA_props nil)
    (l skolem-const-decl "VectorN(1 + max_length(a1`poly))"
     bool_expr_SA_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (x!1 skolem-const-decl "[nat -> real]" bool_expr_SA_props nil)
    (env_2_vec_nth formula-decl nil chain_rule_re dL)
    (i skolem-const-decl "below(max_length(negative_atom(a1)`poly))"
       bool_expr_SA_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_length def-decl "nat" standard_form_mult_poly mult_poly)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re dL)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval_equiv_ddl formula-decl nil semi_algebraic_def nil)
    (atom_eval const-decl "bool" semi_algebraic mult_poly)
    (negative_atom_eval formula-decl nil semi_algebraic mult_poly)
    (every adt-def-decl "boolean" list_adt nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (meeting type-eq-decl nil semi_algebraic mult_poly)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (INEQ type-eq-decl nil semi_algebraic mult_poly)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (atomic_poly type-eq-decl nil semi_algebraic mult_poly)
    (append_to_each def-decl "joining" semi_algebraic mult_poly)
    (cap_join def-decl "joining" semi_algebraic mult_poly)
    (negative_atom_meet def-decl "joining" semi_algebraic mult_poly)
    (not_join def-decl "joining" semi_algebraic mult_poly))
   shostak))
 (DLTRUE_SA 0
  (DLTRUE_SA-1 nil 3863178723
   ("" (expand "SA?")
    (("" (inst 1 "(: null:)")
      (("" (expand "SA")
        (("" (expand "some")
          (("" (expand "some")
            (("" (expand "ands")
              (("" (expand "every")
                (("" (decompose-equality) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((INEQ type-eq-decl nil semi_algebraic mult_poly)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (atomic_poly type-eq-decl nil semi_algebraic mult_poly)
    (meeting type-eq-decl nil semi_algebraic mult_poly)
    (joining type-eq-decl nil semi_algebraic mult_poly)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (some adt-def-decl "boolean" list_adt nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (TRUE const-decl "bool" booleans nil)
    (Environment type-eq-decl nil hp_def dL)
    (every adt-def-decl "boolean" list_adt nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (SA? const-decl "bool" semi_algebraic_def nil))
   shostak))
 (DLFALSE_SA 0
  (DLFALSE_SA-1 nil 3863178944
   ("" (expand "SA?")
    (("" (inst 1 "null")
      (("" (expand "SA")
        (("" (expand "some")
          (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((INEQ type-eq-decl nil semi_algebraic mult_poly)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly mult_poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly mult_poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     mult_poly)
    (atomic_poly type-eq-decl nil semi_algebraic mult_poly)
    (meeting type-eq-decl nil semi_algebraic mult_poly)
    (joining type-eq-decl nil semi_algebraic mult_poly)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (some adt-def-decl "boolean" list_adt nil)
    (Environment type-eq-decl nil hp_def dL)
    (FALSE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (SA const-decl "bool" semi_algebraic_def nil)
    (SA? const-decl "bool" semi_algebraic_def nil))
   shostak))
 (DLVC_SA 0
  (DLVC_SA-1 nil 3875009485
   ("" (skeep)
    (("" (lemma "SAable_atom")
      (("" (expand "SAable?")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (lemma "atom_val_cnst") (("" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SAable_atom formula-decl nil bool_expr_SA_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (dLVar type-decl nil hp_def dL) (val const-decl "real" hp_def dL)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def dL)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def dL)
    (cnst const-decl "real" hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (atom_val_cnst formula-decl nil bool_expr_SA_props nil)
    (SAable? const-decl "bool" bool_expr_SA_props nil))
   shostak))
 (DLCV_SA 0
  (DLCV_SA-1 nil 3880463199
   ("" (skeep)
    (("" (lemma "SAable_atom")
      (("" (expand "SAable?")
        (("" (inst?)
          (("" (assert)
            (("" (lemma "atomic_be")
              (("" (inst?)
                (("" (assert)
                  (("" (expand "be_SF?")
                    (("" (lemma "sf_iff_mp")
                      (("" (inst?)
                        (("" (assert)
                          (("" (lemma "Re_diff")
                            (("" (inst?)
                              ((""
                                (assert)
                                ((""
                                  (lemma "mp_cnst")
                                  ((""
                                    (inst?)
                                    ((""
                                      (lemma "mp_val")
                                      ((""
                                        (inst?)
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SAable_atom formula-decl nil bool_expr_SA_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (cnst const-decl "real" hp_def dL) (dLVar type-decl nil hp_def dL)
    (val const-decl "real" hp_def dL)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def dL)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (atomic_be formula-decl nil bool_expr_SA_props nil)
    (sf_iff_mp formula-decl nil bool_expr_SA_props nil)
    (mp_cnst formula-decl nil bool_expr_SA_props nil)
    (mp_val formula-decl nil bool_expr_SA_props nil)
    (Re_diff formula-decl nil bool_expr_SA_props nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (be_SF? const-decl "bool" bool_expr_SA_props nil)
    (SAable? const-decl "bool" bool_expr_SA_props nil))
   shostak))
 (DLEQ_SA 0
  (DLEQ_SA-1 nil 3881227803
   ("" (skeep)
    ((""
      (case "(val(dlvar(i)) = cnst(a)) = (dl_ge(val(dlvar(i)),cnst(a)) AND dl_le(val(dlvar(i)),cnst(a)))")
      (("1" (replace -1)
        (("1" (hide -1)
          (("1" (lemma "andSA?")
            (("1" (inst?)
              (("1" (lemma "DLVC_SA")
                (("1" (inst -1 "i" "a" "dl_le") nil nil)) nil)
               ("2" (lemma "DLVC_SA")
                (("2" (inst -1 "i" "a" "dl_ge") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (decompose-equality) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (DLAND const-decl "bool" bool_expr dL)
    (cnst const-decl "real" hp_def dL)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def dL)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def dL)
    (val const-decl "real" hp_def dL) (dLVar type-decl nil hp_def dL)
    (= const-decl "BoolExpr" bool_expr dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (SA? const-decl "bool" semi_algebraic_def nil)
    (i skolem-const-decl "nat" bool_expr_SA_props nil)
    (a skolem-const-decl "real" bool_expr_SA_props nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (DLVC_SA formula-decl nil bool_expr_SA_props nil)
    (andSA? formula-decl nil semi_algebraic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (Ex_SA_be1 0
  (Ex_SA_be1-2 nil 3912518845
   ("" (lemma "andSA?")
    (("" (inst?)
      (("1" (hide 2)
        (("1" (lemma "SAable_atom")
          (("1" (expand "SAable?")
            (("1" (inst -1 "val(dlvar(1))" "val(dlvar(0))+cnst(7)" ">")
              (("1" (assert)
                (("1" (expand ">" -1)
                  (("1" (hide 2)
                    (("1" (lemma "atomic_be")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (expand "be_SF?")
                              (("1"
                                (lemma "sf_iff_mp")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "Re_diff")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (lemma "Re_sum")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (lemma "mp_val")
                                                    (("1"
                                                      (inst -1 "1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "mp_val")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "0")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "mp_cnst")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "7")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 1 2 3 5)
                  (("2" (decompose-equality)
                    (("2" (decompose-equality) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "DLVC_SA")
        (("2" (inst -1 "0" "0" "<=")
          (("1" (expand "<=" -1) (("1" (propax) nil nil)) nil)
           ("2" (flatten)
            (("2" (decompose-equality)
              (("2" (decompose-equality) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (SA? const-decl "bool" semi_algebraic_def nil)
    (<= const-decl "bool" reals nil) (dLVar type-decl nil hp_def dL)
    (val const-decl "real" hp_def dL)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def dL)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def dL)
    (cnst const-decl "real" hp_def dL) (> const-decl "bool" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (SAable_atom formula-decl nil bool_expr_SA_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (RealExpr type-eq-decl nil hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "BoolExpr" bool_expr dL)
    (< const-decl "bool" reals nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (atomic_be formula-decl nil bool_expr_SA_props nil)
    (be_SF? const-decl "bool" bool_expr_SA_props nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (mp_cnst formula-decl nil bool_expr_SA_props nil)
    (mp_val formula-decl nil bool_expr_SA_props nil)
    (Re_sum formula-decl nil bool_expr_SA_props nil)
    (Re_diff formula-decl nil bool_expr_SA_props nil)
    (sf_iff_mp formula-decl nil bool_expr_SA_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (SAable? const-decl "bool" bool_expr_SA_props nil)
    (<= const-decl "BoolExpr" bool_expr dL)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DLVC_SA formula-decl nil bool_expr_SA_props nil)
    (andSA? formula-decl nil semi_algebraic_def nil))
   nil)
  (Ex_SA_be1-1 nil 3863857781
   ("" (lemma "andSA?")
    (("" (inst?)
      (("1" (hide 2)
        (("1" (lemma "SAable_atom")
          (("1" (expand "SAable?")
            (("1" (inst -1 "val(1)" "val(0)+cnst(7)" ">")
              (("1" (assert)
                (("1" (expand ">" -1)
                  (("1" (hide 2)
                    (("1" (lemma "atomic_be")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (expand "be_SF?")
                              (("1"
                                (lemma "sf_iff_mp")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "Re_diff")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (lemma "Re_sum")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (lemma "mp_val")
                                                    (("1"
                                                      (inst -1 "1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "mp_val")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "0")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "mp_cnst")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "7")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 1 2 3 5)
                  (("2" (decompose-equality)
                    (("2" (decompose-equality) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "DLVC_SA")
        (("2" (inst -1 "0" "0" "<=")
          (("1" (expand "<=" -1) (("1" (propax) nil nil)) nil)
           ("2" (flatten)
            (("2" (decompose-equality)
              (("2" (decompose-equality) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (<= const-decl "bool" reals nil) (val const-decl "real" hp_def dL)
    (cnst const-decl "real" hp_def dL) (> const-decl "bool" reals nil)
    (SAable_atom formula-decl nil bool_expr_SA_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (RealExpr type-eq-decl nil hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "BoolExpr" bool_expr dL)
    (< const-decl "bool" reals nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (atomic_be formula-decl nil bool_expr_SA_props nil)
    (be_SF? const-decl "bool" bool_expr_SA_props nil)
    (mp_cnst formula-decl nil bool_expr_SA_props nil)
    (mp_val formula-decl nil bool_expr_SA_props nil)
    (Re_sum formula-decl nil bool_expr_SA_props nil)
    (Re_diff formula-decl nil bool_expr_SA_props nil)
    (sf_iff_mp formula-decl nil bool_expr_SA_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (SAable? const-decl "bool" bool_expr_SA_props nil)
    (<= const-decl "BoolExpr" bool_expr dL)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DLVC_SA formula-decl nil bool_expr_SA_props nil)
    (andSA? formula-decl nil semi_algebraic_def nil))
   shostak))
 (Ex_SA_be2 0
  (Ex_SA_be2-2 nil 3912518640
   ("" (lemma "andSA?")
    (("" (inst?)
      (("1" (hide 2)
        (("1" (lemma "SAable_atom")
          (("1" (expand "SAable?")
            (("1" (inst -1 "val(dlvar(1))" "val(dlvar(0))+cnst(7)" ">")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (lemma "atomic_be")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (expand "be_SF?")
                            (("1" (lemma "sf_iff_mp")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (lemma "Re_diff")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (lemma "Re_sum")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (lemma "mp_val")
                                                  (("1"
                                                    (inst -1 "1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "mp_val")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "mp_cnst")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "7")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 1 2 3 5)
                  (("2" (decompose-equality)
                    (("2" (decompose-equality) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "DLVC_SA")
        (("2" (inst -1 "0" "0" "<=")
          (("2" (flatten)
            (("2" (decompose-equality)
              (("2" (decompose-equality) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (SA? const-decl "bool" semi_algebraic_def nil)
    (RealExpr type-eq-decl nil hp_def dL)
    (<= const-decl "BoolExpr" bool_expr dL)
    (dLVar type-decl nil hp_def dL) (val const-decl "real" hp_def dL)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def dL)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def dL)
    (cnst const-decl "real" hp_def dL)
    (> const-decl "BoolExpr" bool_expr dL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (SAable_atom formula-decl nil bool_expr_SA_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (sf_iff_mp formula-decl nil bool_expr_SA_props nil)
    (Re_diff formula-decl nil bool_expr_SA_props nil)
    (Re_sum formula-decl nil bool_expr_SA_props nil)
    (mp_val formula-decl nil bool_expr_SA_props nil)
    (mp_cnst formula-decl nil bool_expr_SA_props nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (be_SF? const-decl "bool" bool_expr_SA_props nil)
    (atomic_be formula-decl nil bool_expr_SA_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (SAable? const-decl "bool" bool_expr_SA_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DLVC_SA formula-decl nil bool_expr_SA_props nil)
    (andSA? formula-decl nil semi_algebraic_def nil))
   nil)
  (Ex_SA_be2-1 nil 3863867851
   ("" (lemma "andSA?")
    (("" (inst?)
      (("1" (hide 2)
        (("1" (lemma "SAable_atom")
          (("1" (expand "SAable?")
            (("1" (inst -1 "val(1)" "val(0)+cnst(7)" ">")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (lemma "atomic_be")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (expand "be_SF?")
                            (("1" (lemma "sf_iff_mp")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (lemma "Re_diff")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (lemma "Re_sum")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (lemma "mp_val")
                                                  (("1"
                                                    (inst -1 "1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "mp_val")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "mp_cnst")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "7")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 1 2 3 5)
                  (("2" (decompose-equality)
                    (("2" (decompose-equality) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "DLVC_SA")
        (("2" (inst -1 "0" "0" "<=")
          (("2" (flatten)
            (("2" (decompose-equality)
              (("2" (decompose-equality) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (<= const-decl "BoolExpr" bool_expr dL)
    (val const-decl "real" hp_def dL)
    (cnst const-decl "real" hp_def dL)
    (> const-decl "BoolExpr" bool_expr dL)
    (SAable_atom formula-decl nil bool_expr_SA_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (Birel_Expr type-eq-decl nil bool_expr_SA_props nil)
    (sf_iff_mp formula-decl nil bool_expr_SA_props nil)
    (Re_diff formula-decl nil bool_expr_SA_props nil)
    (Re_sum formula-decl nil bool_expr_SA_props nil)
    (mp_val formula-decl nil bool_expr_SA_props nil)
    (mp_cnst formula-decl nil bool_expr_SA_props nil)
    (be_SF? const-decl "bool" bool_expr_SA_props nil)
    (atomic_be formula-decl nil bool_expr_SA_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (SAable? const-decl "bool" bool_expr_SA_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DLVC_SA formula-decl nil bool_expr_SA_props nil)
    (andSA? formula-decl nil semi_algebraic_def nil))
   shostak)))

