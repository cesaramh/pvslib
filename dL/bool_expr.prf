(bool_expr
 (fresh?_TCC1 0
  (fresh?_TCC1-1 nil 3872071633 ("" (subtype-tcc) nil nil) nil nil
   (fresh? subtype "bool_expr.f" "(list_adt[BoolExpr].cons?)")))
 (fresh?_TCC2 0
  (fresh?_TCC2-1 nil 3872071633 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fresh? const-decl "bool" hp_expr nil))
   nil
   (fresh? termination
           "bool_expr.fresh?(list_adt[BoolExpr].cdr(bool_expr.f))"
           "nil")))
 (fresh_formula_nth 0
  (fresh_formula_nth-1 nil 3872075230
   ("" (induct "f")
    (("1" (skeep*) (("1" (typepred "j") (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (typepred "i")
            (("2" (expand "fresh?" -1)
              (("2" (case "j=0")
                (("1" (expand "nth" 1)
                  (("1" (assert) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (expand "nth" 2)
                  (("2" (assert)
                    (("2" (inst -2 "i" "j-1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons2_var skolem-const-decl "list_adt[BoolExpr].list" bool_expr
     nil)
    (cons1_var skolem-const-decl "BoolExpr" bool_expr nil)
    (i skolem-const-decl "(fresh?(cons(cons1_var, cons2_var)))"
       bool_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (fresh? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (fresh? def-decl "bool" bool_expr nil)
    (Formulas type-eq-decl nil bool_expr nil)
    (list type-decl nil list_adt nil))
   shostak))
 (fresh_be_invar 0
  (fresh_be_invar-1 nil 3875883606
   ("" (induct "k")
    (("1" (skeep)
      (("1" (case "envi= envo")
        (("1" (assert) nil nil) ("2" (decompose-equality) nil nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "envi(j) = envo(j)")
          (("1" (inst -2 "P" "envi" "envo")
            (("1" (assert)
              (("1" (split)
                (("1" (skeep)
                  (("1" (typepred "m")
                    (("1" (case "m=j")
                      (("1" (assert) nil nil)
                       ("2" (inst -3 "m") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "i")
                    (("2" (inst -4 "i") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "P" _ _)
            (("2" (inst -1 "envi" "envo WITH [j := envi(j)]")
              (("2" (split)
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (inst -2 "j")
                      (("1" (assert)
                        (("1" (expand "fresh?")
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "m")
                    (("2" (case "m=j")
                      (("1" (assert) nil nil)
                       ("2" (inst -2 "m")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (typepred "i")
                    (("3" (inst -3 "i") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (m skolem-const-decl "upfrom(j)" bool_expr nil)
    (j skolem-const-decl "nat" bool_expr nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (m skolem-const-decl "upfrom(j)" bool_expr nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (fresh? const-decl "bool" hp_expr nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_not_not 0
  (dl_not_not-1 nil 3784495538
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_not_true 0
  (dl_not_true-1 nil 3784496001
   ("" (decompose-equality) (("" (grind) nil nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil))
   shostak))
 (dl_not_false 0
  (dl_not_false-1 nil 3784496190
   ("" (decompose-equality) (("" (grind) nil nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil))
   shostak))
 (dl_true_and 0
  (dl_true_and-1 nil 3784495587
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLAND const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_and_true 0
  (dl_and_true-1 nil 3784495602
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLAND const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_false_and 0
  (dl_false_and-1 nil 3784495669
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLAND const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_and_false 0
  (dl_and_false-1 nil 3784495675
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLAND const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_true_or 0
  (dl_true_or-1 nil 3784495795
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLOR const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_or_true 0
  (dl_or_true-1 nil 3784495818
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLOR const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_false_or 0
  (dl_false_or-1 nil 3784495824
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLOR const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_or_false 0
  (dl_or_false-1 nil 3784495831
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLOR const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_true_implies 0
  (dl_true_implies-1 nil 3784496073
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_implies_true 0
  (dl_implies_true-1 nil 3784496081
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_false_implies 0
  (dl_false_implies-1 nil 3784496086
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_implies_false 0
  (dl_implies_false-1 nil 3784496091
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (FALSE const-decl "bool" booleans nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_forall_bool 0
  (dl_forall_bool-1 nil 3784501848
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (QBoolExpr type-eq-decl nil hp_def nil)
    (DLFORALL const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_exists_bool 0
  (dl_exists_bool-1 nil 3784501868
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (QBoolExpr type-eq-decl nil hp_def nil)
    (DLEXISTS const-decl "bool" bool_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nqb_to_be_TCC1 0
  (nqb_to_be_TCC1-1 nil 3785867105 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil))
   nil
   (nqb_to_be termination "bool_expr.nqb_to_be(bool_expr.nqb1)"
    "nil")))
 (nqb_to_be_TCC2 0
  (nqb_to_be_TCC2-1 nil 3785867105 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil))
   nil
   (nqb_to_be termination "bool_expr.nqb_to_be(bool_expr.nqb2)"
    "nil")))
 (nqb_to_be_TCC3 0
  (nqb_to_be_TCC3-1 nil 3785867105 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil))
   nil
   (nqb_to_be termination "bool_expr.nqb_to_be(bool_expr.nqb1)"
    "nil")))
 (nqb_to_be_TCC4 0
  (nqb_to_be_TCC4-1 nil 3785867105 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil))
   nil
   (nqb_to_be termination "bool_expr.nqb_to_be(bool_expr.nqb2)"
    "nil")))
 (nqb_to_be_TCC5 0
  (nqb_to_be_TCC5-1 nil 3785867105 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil))
   nil
   (nqb_to_be termination "bool_expr.nqb_to_be(bool_expr.nqb)" "nil")))
 (nqb_normal?_TCC1 0
  (nqb_normal?_TCC1-1 nil 3785867105 ("" (subtype-tcc) nil nil) nil nil
   (nqb_normal? subtype "bool_expr.nqbe"
    "{x: NQBool_adt.NQBool | booleans.OR(NQBool_adt.nqb_and?(x), NQBool_adt.nqb_or?(x))}")))
 (nqb_normal?_TCC2 0
  (nqb_normal?_TCC2-1 nil 3785867105 ("" (subtype-tcc) nil nil) nil nil
   (nqb_normal? subtype "bool_expr.nqbe"
    "{x: NQBool_adt.NQBool | booleans.OR(NQBool_adt.nqb_and?(x), NQBool_adt.nqb_or?(x))}")))
 (normalize_rec_TCC1 0
  (normalize_rec_TCC1-1 nil 3785867105
   ("" (skeep)
    (("" (expand "nqb_normal?") (("" (assert) nil nil)) nil)) nil)
   ((nqb_normal? inductive-decl "bool" bool_expr nil)) nil
   (normalize_rec subtype "bool_expr.nqbe"
    "{nnqbe: bool_expr.NormNQBool | FORALL (env: hp_def.Environment): bool_expr.nqb_to_be(nnqbe)(env) = (booleans.IFF(bool_expr.pos, bool_expr.nqb_to_be(bool_expr.nqbe)(env)))}")))
 (normalize_rec_TCC2 0
  (normalize_rec_TCC2-1 nil 3785867105
   ("" (skeep)
    (("" (expand "nqb_normal?")
      (("" (skeep)
        (("" (assert)
          (("" (expand "nqb_to_be")
            (("" (replaces -1)
              (("" (assert)
                (("" (expand "neg_rel")
                  (("" (lift-if)
                    (("" (case-replace "nqb_eq?(rel)")
                      (("1" (hide 1) (("1" (grind) nil nil)) nil)
                       ("2" (assert)
                        (("2" (case-replace "nqb_neq?(rel)")
                          (("1" (hide-all-but (-1 3))
                            (("1" (grind) nil nil)) nil)
                           ("2" (assert)
                            (("2" (case-replace "nqb_le?(rel)")
                              (("1"
                                (hide-all-but (-1 4))
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case-replace "nqb_lt?(rel)")
                                  (("1"
                                    (hide-all-but (-1 5))
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case-replace "nqb_ge?(rel)")
                                      (("1"
                                        (hide-all-but (-1 6))
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but 7)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nqb_normal? inductive-decl "bool" bool_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (neg_rel const-decl "NQB_REL" bool_expr nil)
    (nqb_eq? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def nil)
    (NQB_REL type-decl nil hp_def nil)
    (= const-decl "BoolExpr" bool_expr nil)
    (/= const-decl "BoolExpr" bool_expr nil)
    (/= const-decl "boolean" notequal nil)
    (nqb_rel const-decl "BoolExpr" bool_expr nil)
    (nqb_neq? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def nil)
    (nqb_le? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "BoolExpr" bool_expr nil)
    (> const-decl "BoolExpr" bool_expr nil)
    (nqb_lt? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "BoolExpr" bool_expr nil)
    (>= const-decl "BoolExpr" bool_expr nil)
    (nqb_ge? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def nil)
    (nqb_to_be def-decl "BoolExpr" bool_expr nil))
   nil
   (normalize_rec subtype
    "NQBool_adt.NQB_rel(bool_expr.neg_rel(bool_expr.rel), bool_expr.r1, bool_expr.r2)"
    "{nnqbe: bool_expr.NormNQBool | FORALL (env: hp_def.Environment): bool_expr.nqb_to_be(nnqbe)(env) = (booleans.IFF(bool_expr.pos, bool_expr.nqb_to_be(bool_expr.nqbe)(env)))}")))
 (normalize_rec_TCC3 0
  (normalize_rec_TCC3-1 nil 3785867105
   ("" (skeep)
    (("" (with-tccs (name-replace "HI1" "v(nqb1, TRUE)"))
      (("" (with-tccs (name-replace "HI2" "v(nqb2, TRUE)"))
        (("" (typepred "HI1")
          (("" (typepred "HI2")
            (("" (expand "nqb_normal?" 1)
              (("" (skeep)
                (("" (insteep)
                  (("" (insteep)
                    (("" (assert)
                      (("" (hide -5)
                        (("" (expand "nqb_to_be" 1)
                          (("" (expand "DLAND")
                            (("" (replaces (-2 -4))
                              ((""
                                (grind)
                                (("1"
                                  (expand "nqb_to_be" -5)
                                  (("1"
                                    (reveal -)
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nqb_to_be" -4)
                                  (("2"
                                    (reveal -)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (reveal -)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (reveal -)
                                  (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (NQBool type-decl nil NQBool_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (nqb_and? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt nil)
    (NQB_AND adt-constructor-decl "[[NQBool, NQBool] -> (nqb_and?)]"
     NQBool_adt nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (nqb_to_be def-decl "BoolExpr" bool_expr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (DLAND const-decl "bool" bool_expr nil))
   nil
   (normalize_rec subtype
    "NQBool_adt.NQB_AND(bool_expr.normalize_rec(bool_expr.nqb1, booleans.TRUE), bool_expr.normalize_rec(bool_expr.nqb2, booleans.TRUE))"
    "{nnqbe: bool_expr.NormNQBool | FORALL (env: hp_def.Environment): bool_expr.nqb_to_be(nnqbe)(env) = (booleans.IFF(bool_expr.pos, bool_expr.nqb_to_be(bool_expr.nqbe)(env)))}")))
 (normalize_rec_TCC4 0
  (normalize_rec_TCC4-2 nil 3785870141
   ("" (skeep)
    (("" (with-tccs (name-replace "HI1" "v(nqb1, FALSE)"))
      (("" (with-tccs (name-replace "HI2" "v(nqb2, FALSE)"))
        (("" (typepred "HI1")
          (("" (typepred "HI2")
            (("" (expand "nqb_normal?" 2)
              (("" (skeep)
                (("" (insteep)
                  (("" (insteep)
                    (("" (assert)
                      (("" (hide 1)
                        (("" (replaces -5)
                          (("" (expand "nqb_to_be" 1)
                            (("" (expand "DLAND")
                              ((""
                                (expand "DLOR")
                                ((""
                                  (replaces (-2 -4))
                                  ((""
                                    (iff)
                                    (("" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (NQBool type-decl nil NQBool_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (nqb_or? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt nil)
    (NQB_OR adt-constructor-decl "[[NQBool, NQBool] -> (nqb_or?)]"
     NQBool_adt nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (nqb_to_be def-decl "BoolExpr" bool_expr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (DLAND const-decl "bool" bool_expr nil)
    (DLOR const-decl "bool" bool_expr nil))
   nil
   (normalize_rec subtype
    "NQBool_adt.NQB_OR(bool_expr.normalize_rec(bool_expr.nqb1, booleans.FALSE), bool_expr.normalize_rec(bool_expr.nqb2, booleans.FALSE))"
    "{nnqbe: bool_expr.NormNQBool | FORALL (env: hp_def.Environment): bool_expr.nqb_to_be(nnqbe)(env) = (booleans.IFF(bool_expr.pos, bool_expr.nqb_to_be(bool_expr.nqbe)(env)))}"))
  (normalize_rec_TCC4-1 nil 3785867105 ("" (subtype-tcc) nil nil) nil
   nil
   (normalize_rec subtype
    "NQBool_adt.NQB_OR(bool_expr.normalize_rec(bool_expr.nqb1, booleans.FALSE), bool_expr.normalize_rec(bool_expr.nqb2, booleans.FALSE))"
    "{nnqbe: bool_expr.NormNQBool | FORALL (env: hp_def.Environment): bool_expr.nqb_to_be(nnqbe)(env) = (booleans.IFF(bool_expr.pos, bool_expr.nqb_to_be(bool_expr.nqbe)(env)))}")))
 (normalize_rec_TCC5 0
  (normalize_rec_TCC5-2 nil 3785870088
   ("" (skeep)
    (("" (with-tccs (name-replace "HI1" "v(nqb1, TRUE)"))
      (("" (with-tccs (name-replace "HI2" "v(nqb2, TRUE)"))
        (("" (typepred "HI1")
          (("" (typepred "HI2")
            (("" (expand "nqb_normal?" 1)
              (("" (skeep)
                (("" (insteep)
                  (("" (insteep)
                    (("" (assert)
                      (("" (hide -5)
                        (("" (expand "nqb_to_be" 1)
                          (("" (expand "DLOR")
                            (("" (replaces (-2 -4))
                              ((""
                                (reveal -)
                                (("" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (NQBool type-decl nil NQBool_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (nqb_or? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt nil)
    (NQB_OR adt-constructor-decl "[[NQBool, NQBool] -> (nqb_or?)]"
     NQBool_adt nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (nqb_to_be def-decl "BoolExpr" bool_expr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (DLOR const-decl "bool" bool_expr nil))
   nil
   (normalize_rec subtype
    "NQBool_adt.NQB_OR(bool_expr.normalize_rec(bool_expr.nqb1, booleans.TRUE), bool_expr.normalize_rec(bool_expr.nqb2, booleans.TRUE))"
    "{nnqbe: bool_expr.NormNQBool | FORALL (env: hp_def.Environment): bool_expr.nqb_to_be(nnqbe)(env) = (booleans.IFF(bool_expr.pos, bool_expr.nqb_to_be(bool_expr.nqbe)(env)))}"))
  (normalize_rec_TCC5-1 nil 3785867105 ("" (subtype-tcc) nil nil) nil
   nil
   (normalize_rec subtype
    "NQBool_adt.NQB_OR(bool_expr.normalize_rec(bool_expr.nqb1, booleans.TRUE), bool_expr.normalize_rec(bool_expr.nqb2, booleans.TRUE))"
    "{nnqbe: bool_expr.NormNQBool | FORALL (env: hp_def.Environment): bool_expr.nqb_to_be(nnqbe)(env) = (booleans.IFF(bool_expr.pos, bool_expr.nqb_to_be(bool_expr.nqbe)(env)))}")))
 (normalize_rec_TCC6 0
  (normalize_rec_TCC6-2 nil 3785870445
   ("" (skeep)
    (("" (with-tccs (name-replace "HI1" "v(nqb1, FALSE)"))
      (("" (with-tccs (name-replace "HI2" "v(nqb2, FALSE)"))
        (("" (typepred "HI1")
          (("" (typepred "HI2")
            (("" (expand "nqb_normal?" 2)
              (("" (skeep)
                (("" (insteep)
                  (("" (insteep)
                    (("" (assert)
                      (("" (hide 1)
                        (("" (replaces -5)
                          (("" (expand "nqb_to_be" 1)
                            (("" (expand "DLAND")
                              ((""
                                (expand "DLOR")
                                ((""
                                  (replaces (-2 -4))
                                  ((""
                                    (iff)
                                    (("" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (NQBool type-decl nil NQBool_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (nqb_and? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt nil)
    (NQB_AND adt-constructor-decl "[[NQBool, NQBool] -> (nqb_and?)]"
     NQBool_adt nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (nqb_to_be def-decl "BoolExpr" bool_expr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (DLAND const-decl "bool" bool_expr nil)
    (DLOR const-decl "bool" bool_expr nil))
   nil
   (normalize_rec subtype
    "NQBool_adt.NQB_AND(bool_expr.normalize_rec(bool_expr.nqb1, booleans.FALSE), bool_expr.normalize_rec(bool_expr.nqb2, booleans.FALSE))"
    "{nnqbe: bool_expr.NormNQBool | FORALL (env: hp_def.Environment): bool_expr.nqb_to_be(nnqbe)(env) = (booleans.IFF(bool_expr.pos, bool_expr.nqb_to_be(bool_expr.nqbe)(env)))}"))
  (normalize_rec_TCC6-1 nil 3785867105 ("" (subtype-tcc) nil nil) nil
   nil
   (normalize_rec subtype
    "NQBool_adt.NQB_AND(bool_expr.normalize_rec(bool_expr.nqb1, booleans.FALSE), bool_expr.normalize_rec(bool_expr.nqb2, booleans.FALSE))"
    "{nnqbe: bool_expr.NormNQBool | FORALL (env: hp_def.Environment): bool_expr.nqb_to_be(nnqbe)(env) = (booleans.IFF(bool_expr.pos, bool_expr.nqb_to_be(bool_expr.nqbe)(env)))}")))
 (normalize_rec_TCC7 0
  (normalize_rec_TCC7-1 nil 3785867105
   ("" (skeep*)
    (("" (with-tccs (name-replace "HI" "v(nqb,NOT pos)"))
      (("" (typepred "HI")
        (("" (hide -1)
          (("" (inst? -)
            (("" (replaces -)
              (("" (expand "nqb_to_be" 1 2)
                (("" (expand "DLNOT")
                  (("" (iff) (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (NQBool type-decl nil NQBool_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nqb_to_be def-decl "BoolExpr" bool_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (normalize_rec subtype
    "bool_expr.normalize_rec(bool_expr.nqb, (booleans.NOT)(bool_expr.pos))"
    "{nnqbe: bool_expr.NormNQBool | FORALL (env: hp_def.Environment): bool_expr.nqb_to_be(nnqbe)(env) = (booleans.IFF(bool_expr.pos, bool_expr.nqb_to_be(bool_expr.nqbe)(env)))}")))
 (normalize_TCC1 0
  (normalize_TCC1-1 nil 3785867105
   ("" (skeep)
    (("" (typepred "normalize_rec(nqbe, TRUE)")
      (("" (decompose-equality 1) nil nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (normalize_rec def-decl "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}" bool_expr
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nqb_to_be def-decl "BoolExpr" bool_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NQBool type-decl nil NQBool_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (normalize subtype
    "bool_expr.normalize_rec(bool_expr.nqbe, booleans.TRUE)"
    "{nnqbe: bool_expr.NormNQBool | bool_expr.nqb_to_be(nnqbe) = bool_expr.nqb_to_be(bool_expr.nqbe)}"))))