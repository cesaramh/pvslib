(bound_variables_def
 (bv_me_TCC1 0
  (bv_me_TCC1-2 nil 3876385144
   ("" (skeep) (("" (expand "every") (("" (propax) nil nil)) nil)) nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)) nil
   (bv_me subtype "list_adt[real].null" "list[nat]"))
  (bv_me_TCC1-1 nil 3876385031 ("" (subtype-tcc) nil nil) nil nil
   (bv_me subtype "list_adt[real].null" "list[nat]")))
 (bv_me_TCC2 0
  (bv_me_TCC2-1 nil 3876385031 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (bv_me subtype "bound_variables_def.L"
    "(list_adt[MapExpr].cons?)")))
 (bv_me_TCC3 0
  (bv_me_TCC3-2 nil 3876385164
   ("" (skeep)
    (("" (typepred "L")
      (("" (lemma "cdr_is_MapExprInj") (("" (inst?) nil nil)) nil))
      nil))
    nil)
   ((MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (bv_me subtype "list_adt[MapExpr].cdr(bound_variables_def.L)"
    "MapExprInj"))
  (bv_me_TCC3-1 nil 3876385031 ("" (subtype-tcc) nil nil) nil nil
   (bv_me subtype "list_adt[MapExpr].cdr(bound_variables_def.L)"
    "MapExprInj")))
 (bv_me_TCC4 0
  (bv_me_TCC4-1 nil 3876385031 ("" (termination-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (bv_me termination
    "bound_variables_def.bv_me(list_adt[MapExpr].cdr(bound_variables_def.L))"
    "nil")))
 (bv_me_TCC5 0
  (bv_me_TCC5-2 nil 3876385288
   ("" (skeep)
    (("" (expand "every")
      (("" (split 2)
        (("1" (assert) nil nil)
         ("2" (assert)
          (("2" (typepred "v(cdr(L))") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (dLVar type-decl nil hp_def nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (bv_me subtype
    "list_adt[real].cons(hp_def.dlvar_index(list_adt[MapExpr].car(bound_variables_def.L)`1), bound_variables_def.bv_me(list_adt[MapExpr].cdr(bound_variables_def.L)))"
    "list[nat]"))
  (bv_me_TCC5-1 nil 3876385031 ("" (subtype-tcc) nil nil) nil nil
   (bv_me subtype
    "list_adt[real].cons(hp_def.dlvar_index(list_adt[MapExpr].car(bound_variables_def.L)`1), bound_variables_def.bv_me(list_adt[MapExpr].cdr(bound_variables_def.L)))"
    "list[nat]")))
 (BV_TCC1 0
  (BV_TCC1-1 nil 3876385031
   ("" (skeep) (("" (expand "every") (("" (propax) nil nil)) nil)) nil)
   nil nil (BV subtype "list_adt[real].null" "list[nat]")))
 (BV_TCC2 0
  (BV_TCC2-1 nil 3876385031 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size def-decl "posnat" hp_expr nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (BV termination
    "bound_variables_def.BV(HP_adt.stm1(bound_variables_def.h))"
    "nil")))
 (BV_TCC3 0
  (BV_TCC3-1 nil 3876385031 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size def-decl "posnat" hp_expr nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (BV termination
    "bound_variables_def.BV(HP_adt.stm2(bound_variables_def.h))"
    "nil")))
 (BV_TCC4 0
  (BV_TCC4-1 nil 3876385031 ("" (termination-tcc) nil nil)
   ((size def-decl "posnat" hp_expr nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (BV termination
    "bound_variables_def.BV(HP_adt.stm(bound_variables_def.h))"
    "nil")))
 (BV_TCC5 0
  (BV_TCC5-1 nil 3876385031 ("" (subtype-tcc) nil nil) nil nil
   (BV subtype "list_adt[real].null" "list[nat]")))
 (bv_me_nth_TCC1 0
  (bv_me_nth_TCC1-1 nil 3876385500
   ("" (induct "L")
    (("1" (assert) nil nil)
     ("2" (assert)
      (("2" (skeep) (("2" (typepred "j") (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "mapexpr_inj_cons")
        (("3" (inst?)
          (("3" (assert)
            (("3" (skeep)
              (("3" (expand "bv_me" 1)
                (("3" (expand "length" 1)
                  (("3" (typepred "j")
                    (("3" (expand "length" -1)
                      (("3" (case "j=0")
                        (("1" (assert) nil nil)
                         ("2" (inst -3 "j-1")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mapexpr_inj_cons formula-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (bv_me def-decl "list[nat]" bound_variables_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (bv_me_nth subtype "bound_variables_def.j"
    "below[length[nat](bv_me(L))]")))
 (bv_me_nth 0
  (bv_me_nth-1 nil 3876385362
   ("" (induct "L")
    (("1" (assert) nil nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (typepred "j")
          (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (lemma "cdr_is_MapExprInj")
          (("3" (inst -1 "cons(cons1_var,cons2_var)")
            (("3" (assert)
              (("3" (case "j=0")
                (("1" (expand "bv_me" 1)
                  (("1" (expand "nth" 1) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (expand "nth" 2)
                  (("2" (assert)
                    (("2" (inst -2 "j-1")
                      (("2" (assert)
                        (("2" (expand "bv_me" 2)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (induct "L")
        (("1" (assert)
          (("1" (skeep)
            (("1" (typepred "j") (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (typepred "j")
              (("2" (lemma "cdr_is_MapExprInj")
                (("2" (inst -1 "cons(cons1_var,cons2_var)")
                  (("2" (assert)
                    (("2" (expand "bv_me" 1 1)
                      (("2" (assert)
                        (("2" (expand "length" 1 1)
                          (("2" (assert)
                            (("2" (expand "length" -2)
                              (("2"
                                (inst -3 "j-1")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (bv_me def-decl "list[nat]" bound_variables_def nil))
   shostak))
 (BV_implies_not_fresh 0
  (BV_implies_not_fresh-1 nil 3876385802
   ("" (induct "h")
    (("1"
      (case "FORALL (l:list[MapExpr]): mapexpr_inj(l) IMPLIES          
      FORALL (j: nat):
           (EXISTS (i: below(length(BV(ASSIGN(l))))):
              j = nth(BV(ASSIGN(l)), i))
            IMPLIES (NOT fresh_hp?(ASSIGN(l))(j))")
      (("1" (skeep*)
        (("1" (inst? -1)
          (("1" (assert)
            (("1" (insteep)
              (("1" (split -1)
                (("1" (propax) nil nil) ("2" (inst? 1) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "l")
          (("1" (assert)
            (("1" (skeep)
              (("1" (skeep)
                (("1" (typepred "i")
                  (("1" (expand "BV")
                    (("1" (expand "bv_me")
                      (("1" (expand "length") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (lemma "mapexpr_inj_cons")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (skeep)
                      (("2" (expand "nth" -4)
                        (("2" (expand "BV")
                          (("2" (expand "bv_me" -4)
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1"
                                  (expand "fresh_hp?")
                                  (("1"
                                    (expand "fresh_li?" -5)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst -3 "j")
                                    (("2"
                                      (expand "fresh_hp?")
                                      (("2"
                                        (expand "fresh_li?" -5)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst 2 "i-1")
                                              (("2"
                                                (typepred "i")
                                                (("2"
                                                  (expand "BV")
                                                  (("2"
                                                    (expand "bv_me" -1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2"
      (case "FORALL (l:list[MapExpr], DIFF2_var: BoolExpr): mapexpr_inj(l) IMPLIES 
         FORALL (j: nat):
           (EXISTS (i: below(length(BV(DIFF(l,DIFF2_var))))):
              j = nth(BV(DIFF(l, DIFF2_var)), i))
            IMPLIES (NOT fresh_hp?(DIFF(l, DIFF2_var))(j))")
      (("1" (skeep*)
        (("1" (inst? -1)
          (("1" (assert)
            (("1" (insteep)
              (("1" (split -1)
                (("1" (propax) nil nil) ("2" (insteep) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "l")
          (("1" (assert)
            (("1" (skeep)
              (("1" (skeep)
                (("1" (skeep)
                  (("1" (typepred "i")
                    (("1" (expand "BV")
                      (("1" (expand "bv_me")
                        (("1" (expand "length")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep*)
              (("2" (lemma "mapexpr_inj_cons")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (expand "BV")
                      (("2" (expand "bv_me" -4)
                        (("2" (expand "nth" -4)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "fresh_hp?" -6)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "fresh_li?")
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (inst -3 "DIFF2_var")
                                  (("2"
                                    (inst -3 "j")
                                    (("2"
                                      (expand "fresh_hp?")
                                      (("2"
                                        (expand "fresh_li?" -5)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst 2 "i-1")
                                              (("2"
                                                (typepred "i")
                                                (("2"
                                                  (expand "BV")
                                                  (("2"
                                                    (expand "bv_me" -1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep*)
      (("3" (typepred "i")
        (("3" (expand "BV")
          (("3" (expand "length") (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (expand "BV" -3)
            (("4" (lemma "nth_append[nat]")
              (("4" (inst? -1)
                (("4" (typepred "i")
                  (("4" (expand "BV" -1)
                    (("4" (lemma "length_append[nat]")
                      (("4" (inst?)
                        (("4" (assert)
                          (("4" (replaces -3)
                            (("4" (lift-if)
                              (("4"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst -5 "j")
                                    (("1"
                                      (expand "fresh_hp?" -7)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1" (inst 1 "i") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst -5 "j")
                                    (("2"
                                      (expand "fresh_hp?" -6)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             2
                                             "i - length(BV(SEQ1_var))")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep*)
      (("5" (expand "BV" -3)
        (("5" (lemma "nth_append[nat]")
          (("5" (inst?)
            (("5" (lemma "length_append[nat]")
              (("5" (inst?)
                (("5" (replace -1 :dir rl)
                  (("5" (typepred "i")
                    (("5" (expand "BV" -1)
                      (("5" (assert)
                        (("5" (replaces -3)
                          (("5" (lift-if)
                            (("5" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst -5 "j")
                                  (("1"
                                    (expand "fresh_hp?" -7)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1" (inst 1 "i") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (inst -5 "j")
                                  (("2"
                                    (expand "fresh_hp?" -6)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           2
                                           "i - length(BV(UNION1_var))")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (skeep)
          (("6" (expand "BV" -2)
            (("6" (inst -1 "j")
              (("6" (assert)
                (("6" (expand "fresh_hp?" -3)
                  (("6" (assert) (("6" (inst 1 "i") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (skeep)
        (("7" (skeep)
          (("7" (typepred "i")
            (("7" (expand "BV")
              (("7" (expand "length")
                (("7" (expand "length")
                  (("7" (expand "nth" -2)
                    (("7" (assert)
                      (("7" (expand "fresh_hp?")
                        (("7" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ANY adt-constructor-decl "[dLVar -> (any?)]" HP_adt nil)
    (any? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (UNION adt-constructor-decl "[[HP, HP] -> (union?)]" HP_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (bv_me def-decl "list[nat]" bound_variables_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mapexpr_inj_cons formula-decl nil hp_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fresh_li? inductive-decl "bool" hp_expr nil)
    (HP_induction formula-decl nil HP_adt nil)
    (fresh_hp? inductive-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (BV def-decl "list[nat]" bound_variables_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HP type-decl nil HP_adt nil))
   nil))
 (BV_invar 0
  (BV_invar-1 nil 3876387037
   ("" (induct "a")
    (("1" (skeep*)
      (("1" (expand "BV")
        (("1" (expand "semantic_rel")
          (("1" (flatten)
            (("1" (hide -1)
              (("1" (inst -2 "k")
                (("1" (assert) nil nil)
                 ("2" (expand "not_in_map")
                  (("2" (skeep)
                    (("2" (lemma "nth_member[nat]")
                      (("2" (inst?)
                        (("2" (lemma "bv_me_nth")
                          (("2" (inst?)
                            (("2" (inst -2 "i")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (hide -1)
        (("2" (expand "BV")
          (("2" (expand "semantic_rel")
            (("2" (assert)
              (("2" (skeep)
                (("2" (expand "semantic_rel_diff")
                  (("2" (skeep*)
                    (("2" (expand "env_at_t?")
                      (("2" (flatten)
                        (("2" (inst -1 "k")
                          (("2" (expand "not_in_map")
                            (("2" (skeep)
                              (("2"
                                (lemma "nth_member[nat]")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (lemma "bv_me_nth")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (inst -2 "i")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep*)
      (("3" (expand "semantic_rel")
        (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (skeep*)
      (("4" (expand "BV" 2)
        (("4" (lemma "member_append_r[nat]")
          (("4" (lemma "member_append_l[nat]")
            (("4" (inst?)
              (("4" (assert)
                (("4" (inst?)
                  (("4" (assert)
                    (("4" (expand "semantic_rel" -3)
                      (("4" (skeep)
                        (("4" (inst -1 "envi" "env" "k")
                          (("4" (inst -2 "env" "envo" "k")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep*)
      (("5" (expand "semantic_rel" -3)
        (("5" (expand "BV" 2)
          (("5" (lemma "member_append_l[nat]")
            (("5" (lemma "member_append_r[nat]")
              (("5" (inst?)
                (("5" (assert)
                  (("5" (inst?)
                    (("5" (assert)
                      (("5" (split)
                        (("1" (inst -2 "envi" "envo" "k")
                          (("1" (assert) nil nil)) nil)
                         ("2" (inst -3 "envi" "envo" "k")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (expand "BV" 2)
        (("6" (lemma "semantic_rel_star_bounded_star")
          (("6" (inst?)
            (("6" (assert)
              (("6" (skeep)
                (("6" (hide -3)
                  (("6"
                    (case "FORALL(i:nat, envi,envo:Environment, k:nat): semantic_rel(BSTAR(STAR1_var, i))(envi)(envo) AND (FORALL (envi, envo: Environment, k: nat):
                                            semantic_rel(STAR1_var)(envi)(envo) AND envi(k) /= envo(k) IMPLIES
                                     member(k, BV(STAR1_var))) AND envi(k) /= envo(k) IMPLIES member(k, BV(STAR1_var))")
                    (("1" (inst?)
                      (("1" (inst -1 "k") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide - 2 3)
                      (("2" (induct "i")
                        (("1" (skeep*)
                          (("1" (expand "BSTAR")
                            (("1" (expand "semantic_rel")
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep*)
                          (("2" (expand "BSTAR" -2)
                            (("2" (expand "semantic_rel" -2)
                              (("2"
                                (split)
                                (("1"
                                  (expand "semantic_rel" -1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (copy -4)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (inst -1 "k!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -3
                                               "env"
                                               "envo!1"
                                               "k!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -2)
                                  (("2"
                                    (inst -2 "k!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "BV")
        (("7" (expand "semantic_rel")
          (("7" (inst -1 "k") (("7" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((semantic_rel_star_bounded_star formula-decl nil
     bounded_star_semantics nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (member_append_r formula-decl nil more_list_props structures)
    (member_append_l formula-decl nil more_list_props structures)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (DIFF1_var skolem-const-decl "ODEs" bound_variables_def nil)
    (k skolem-const-decl "nat" bound_variables_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (TRUE const-decl "bool" booleans nil)
    (nth_member formula-decl nil more_list_props structures)
    (bv_me_nth formula-decl nil bound_variables_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bv_me def-decl "list[nat]" bound_variables_def nil)
    (k skolem-const-decl "nat" bound_variables_def nil)
    (ASSIGN1_var skolem-const-decl "Assigns" bound_variables_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (HP_induction formula-decl nil HP_adt nil)
    (BV def-decl "list[nat]" bound_variables_def nil)
    (member def-decl "bool" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HP type-decl nil HP_adt nil))
   shostak))
 (bvs?_TCC1 0
  (bvs?_TCC1-1 nil 3878592557 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (bvs? subtype "bound_variables_def.me"
    "(list_adt[MapExpr].cons?)")))
 (bvs?_TCC2 0
  (bvs?_TCC2-1 nil 3878592557
   ("" (skeep)
    (("" (lemma "cdr_is_MapExprInj") (("" (inst?) nil nil)) nil)) nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (bvs? subtype "list_adt[MapExpr].cdr(bound_variables_def.me)"
    "MapExprInj")))
 (bvs?_TCC3 0
  (bvs?_TCC3-1 nil 3878592557 ("" (termination-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bv? const-decl "bool" bound_variables_def nil))
   nil
   (bvs? termination
    "bound_variables_def.bvs?(bound_variables_def.hp)(list_adt[MapExpr].cdr(bound_variables_def.me))"
    "nil"))))