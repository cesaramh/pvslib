(more_derivative_props
 (IMP_derivative_props_TCC1 0
  (IMP_derivative_props_TCC1-1 nil 3869642926
   ("" (lemma "connected_domain") (("" (propax) nil nil)) nil)
   ((connected_domain formula-decl nil more_derivative_props nil)) nil
   (IMP_derivative_props assuming
    "analysis@derivative_props[T].derivative_props"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_derivative_props_TCC2 0
  (IMP_derivative_props_TCC2-1 nil 3869642926
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil more_derivative_props nil)) nil
   (IMP_derivative_props assuming
    "analysis@derivative_props[T].derivative_props"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (deriv_linear_TCC1 0
  (deriv_linear_TCC1-1 nil 3869642926
   ("" (lemma "connected_deriv_domain[T]")
    (("" (assert)
      (("" (lemma "connected_domain")
        (("" (lemma "not_one_element") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((not_one_element formula-decl nil more_derivative_props nil)
    (connected_domain formula-decl nil more_derivative_props nil)
    (connected_deriv_domain formula-decl nil deriv_domain_def analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" more_derivative_props nil)
    (T formal-nonempty-subtype-decl nil more_derivative_props nil))
   nil
   (deriv_linear assuming "analysis@derivatives[T].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_linear 0
  (deriv_linear-1 nil 3869643050
   ("" (skeep)
    (("" (lemma "derivs_equal")
      (("" (case "EXISTS(a,b:T): a <b")
        (("1" (skeep -1)
          (("1" (inst -2 "a" "b" "f" "LAMBDA (x: T): m * (x - t) + y")
            (("1" (assert)
              (("1" (split -2)
                (("1" (skeep)
                  (("1" (copy -1)
                    (("1" (case "c=0")
                      (("1" (replace -1)
                        (("1" (expand "const_fun" -2)
                          (("1" (decompose-equality 1)
                            (("1" (decompose-equality -2)
                              (("1"
                                (inst -1 "x!1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "+" 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (decompose-equality -1)
                          (("2" (inst -1 "t")
                            (("2" (expand "+" -1)
                              (("2"
                                (expand "const_fun" -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (deriv "LAMBDA (x: T): x * m - m * t + y")
                    (("2" (decompose-equality -5)
                      (("2" (inst -1 "x_1")
                        (("2" (expand "const_fun" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (derivable 1) nil nil))
            nil))
          nil)
         ("2" (hide -1)
          (("2" (lemma "not_one_element")
            (("2" (expand "not_one_element?" -1)
              (("2" (assert)
                (("2" (assert)
                  (("2" (name "c" "choose[T]({t:T | TRUE})")
                    (("1" (inst -2 "c")
                      (("1" (skeep -2)
                        (("1" (case "c < y!1")
                          (("1" (inst 2 "c" "y!1") nil nil)
                           ("2" (inst 3 "y!1" "c")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nonempty?" 1)
                      (("2" (expand "empty?" -1)
                        (("2" (lemma "nonempty_ax[T]")
                          (("2" (skeep -1)
                            (("2" (inst -1 "x")
                              (("2"
                                (expand "member" 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-subtype-decl nil more_derivative_props nil)
    (T_pred const-decl "[real -> boolean]" more_derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivs_equal formula-decl nil derivative_props analysis)
    (nonempty_ax formula-decl nil decl_params nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (not_one_element formula-decl nil more_derivative_props nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops analysis)
    (derivable_const application-judgement "deriv_fun" deriv_sign
     analysis)
    (derivable_const application-judgement "deriv_fun[T]"
     sqrt_derivative_lam analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (d__52 skolem-const-decl "[T -> real]" more_derivative_props nil)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (deriv_const_lam formula-decl nil derivatives_lam analysis)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (deriv_scal2_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal2_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_const_lam formula-decl nil derivatives_lam analysis)
    (derivable_sub_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_sub_lam formula-decl nil derivatives_lam analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m skolem-const-decl "real" more_derivative_props nil)
    (t skolem-const-decl "T" more_derivative_props nil)
    (y skolem-const-decl "real" more_derivative_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil))
   shostak)))