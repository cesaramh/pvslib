(sem_rel_diff_star
 (sem_rel_diff_hp_bstar_TCC1 0
  (sem_rel_diff_hp_bstar_TCC1-1 nil 3904986457
   ("" (subtype-tcc) nil nil) ((dd? const-decl "bool" hp_expr dL)) nil
   (sem_rel_diff_hp_bstar subtype "interval_def.hp(0)"
    "(hp_expr.dd?)")))
 (sem_rel_diff_hp_bstar 0
  (sem_rel_diff_hp_bstar-1 nil 3904986460
   ("" (skeep)
    (("" (skeep)
      (("" (induct "i")
        (("1" (flatten)
          (("1" (expand "BSTAR")
            (("1" (expand "semantic_rel")
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (expand "BSTAR" -2)
              (("2" (expand "semantic_rel" -2)
                (("2" (expand "semantic_rel" -2)
                  (("2" (skeep)
                    (("2" (expand "semantic_rel" 1)
                      (("2" (expand "BSTAR" 1)
                        (("2" (assert)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "BSTAR")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "semantic_rel")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "BSTAR" -3)
                                    (("2"
                                      (expand "semantic_rel" 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "semantic_rel" -3)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand
                                               "semantic_rel"
                                               -1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 2 "env_1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide
                                                       (3 4 1 -2 -3))
                                                      (("1"
                                                        (typepred "fs")
                                                        (("1"
                                                          (expand
                                                           "semantic_rel")
                                                          (("1"
                                                            (skeep*)
                                                            (("1"
                                                              (expand
                                                               "semantic_rel_diff")
                                                              (("1"
                                                                (skeep*)
                                                                (("1"
                                                                  (typepred
                                                                   "fs!1")
                                                                  (("1"
                                                                    (typepred
                                                                     "fs!2")
                                                                    (("1"
                                                                      (typepred
                                                                       "D!1")
                                                                      (("1"
                                                                        (expand
                                                                         "dd?")
                                                                        (("1"
                                                                          (case
                                                                           "env_at_t?(odes, fs, envi, r!1)(env)")
                                                                          (("1"
                                                                            (hide
                                                                             -8)
                                                                            (("1"
                                                                              (lemma
                                                                               "solution_odes_u_init")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "odes"
                                                                                 "fs"
                                                                                 "fs!1"
                                                                                 "envi"
                                                                                 "D"
                                                                                 "r"
                                                                                 "r!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "env_at_t(odes, fs, envi)(r!1)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "env")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "r!1")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "r")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "env_at_t(odes, fs, envi)(r!1 + r)")
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "env_at_t(odes, fs!1, env)(r)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "env_1")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -9)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "D")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "dd?")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "hp(0)")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "r!1+r"
                                                                                                                 "fs")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skeep)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "t")
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "env!1")
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "t<=r!1")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -22
                                                                                                                             "t"
                                                                                                                             "env!1")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "env_at_t?")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -3
                                                                                                                                         "k")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "solution_odes_u?")
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -27
                                                                                                                                               "fs!2"
                                                                                                                                               "D!1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -27
                                                                                                                                                   "k"
                                                                                                                                                   "t")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (split
                                                                                                                                                     -21)
                                                                                                                                                    (("1"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "closed_interval")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "hp")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "hp")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 (1
                                                                                                                                                  -21))
                                                                                                                                                (("2"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("2"
                                                                                                                                                    (split)
                                                                                                                                                    (("1"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "closed_interval")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "hp")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -16)
                                                                                                                                    (("1"
                                                                                                                                      (skeep)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (inst
                                                                                                                             -20
                                                                                                                             "t-r!1"
                                                                                                                             "env!1")
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "solution_odes_u_init")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "odes"
                                                                                                                                 "fs"
                                                                                                                                 "fs!1"
                                                                                                                                 "envi"
                                                                                                                                 "D"
                                                                                                                                 "t-r!1"
                                                                                                                                 "r!1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -13)
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       "env_at_t(odes, fs, envi)(t)")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -2
                                                                                                                                         "env!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "hp")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       -15)
                                                                                                                                      (("1"
                                                                                                                                        (skeep)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "closed_interval")
                                                                                                                                            (("1"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (split
                                                                                                                                   -4)
                                                                                                                                  (("1"
                                                                                                                                    (skeep)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "closed_interval")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "hp")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (typepred
                                                                                                                               "r")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "closed_interval")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "hp")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       -5)
                                                                                                                                      (("1"
                                                                                                                                        (skeep)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "hp")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "closed_interval")
                                                                                                                        (("2"
                                                                                                                          (split)
                                                                                                                          (("1"
                                                                                                                            (skeep)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (skeep)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (skeep)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "r!1")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "D!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "dd?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "hp")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "closed_interval")
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              -2
                                                                              -4
                                                                              -7))
                                                                            (("2"
                                                                              (expand
                                                                               "env_at_t?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -4
                                                                                         "k")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "solution_odes_u?")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -4
                                                                                               "fs!2"
                                                                                               "D!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -4
                                                                                                   "k"
                                                                                                   "r!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "D!1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "dd?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "hp")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "closed_interval")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (inst 2 "env")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_diff const-decl "bool" hp_expr dL)
    (env_at_t? const-decl "bool" hp_expr dL)
    (solution_odes_u_init formula-decl nil solution_odes_props dL)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (unary_minus_dist formula-decl nil continuous_linear analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr dL)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr dL)
    (solution_odes? const-decl "bool" hp_expr dL)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr dL) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (solution_odes_u? const-decl "bool" hp_expr dL)
    (hp const-decl "bool" interval_def ODEs)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ODEs type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (BSTAR def-decl "HP" bounded_star_semantics dL)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (HP type-decl nil HP_adt dL) (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   shostak))
 (sem_rel_diff_hp_bstar_con 0
  (sem_rel_diff_hp_bstar_con-1 nil 3904990876
   ("" (skeep*)
    (("" (expand "BSTAR" 1)
      (("" (inst 1 "1")
        (("" (assert)
          (("" (expand "semantic_rel" 1)
            (("" (flatten)
              (("" (expand "BSTAR")
                (("" (expand "semantic_rel" 1)
                  (("" (inst 1 "envo")
                    (("" (assert)
                      (("" (expand "semantic_rel" 1)
                        (("" (expand "DLBOOL") (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BSTAR def-decl "HP" bounded_star_semantics dL)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (Environment type-eq-decl nil hp_def dL)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   shostak))
 (sem_rel_diff_hp 0
  (sem_rel_diff_hp-1 nil 3904990667
   ("" (skeep*)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "sem_rel_diff_hp_bstar")
          (("1" (lemma "semantic_rel_star_bounded_star")
            (("1" (inst?)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (inst -2 "odes" "P" "envi" "envo" "fs" "i")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "semantic_rel_star_bounded_star_con")
          (("2" (lemma "sem_rel_diff_hp_bstar_con")
            (("2" (inst?)
              (("2" (inst -1 "fs")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "semantic_rel" -3)
                          (("2" (skeep)
                            (("2" (expand "semantic_rel_diff")
                              (("2"
                                (skeep*)
                                (("2"
                                  (inst -4 "0" "envi")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "fs!1")
                                      (("1"
                                        (expand "solution_odes_u?")
                                        (("1"
                                          (expand "solution_odes?")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "D")
                                    (("2"
                                      (expand "dd?")
                                      (("2"
                                        (typepred "r")
                                        (("2"
                                          (expand "closed_interval")
                                          (("2"
                                            (expand "hp")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sem_rel_diff_hp_bstar formula-decl nil sem_rel_diff_star nil)
    (HP type-decl nil HP_adt dL)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (ODEs type-eq-decl nil hp_def dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (dd? const-decl "bool" hp_expr dL)
    (solution_odes_u? const-decl "bool" hp_expr dL)
    (hp const-decl "bool" interval_def ODEs)
    (semantic_rel_star_bounded_star formula-decl nil
     bounded_star_semantics dL)
    (semantic_rel_star_bounded_star_con formula-decl nil
     bounded_star_semantics dL)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (semantic_rel_diff const-decl "bool" hp_expr dL)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (env_at_t? const-decl "bool" hp_expr dL)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (solution_odes? const-decl "bool" hp_expr dL)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (/= const-decl "boolean" notequal nil)
    (not_in_map const-decl "bool" hp_def dL)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MapExprInj type-eq-decl nil hp_def dL)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sem_rel_diff_hp_bstar_con formula-decl nil sem_rel_diff_star nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   shostak))
 (sem_rel_diff_hp_env 0
  (sem_rel_diff_hp_env-1 nil 3905008812
   ("" (skeep*)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "sem_rel_diff_hp_bstar")
          (("1" (lemma "semantic_rel_star_bounded_star")
            (("1" (inst?)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (inst -2 "odes" "P" "envi" "envo" "fs" "i")
                    (("1" (assert)
                      (("1" (expand "semantic_rel" -2)
                        (("1" (skeep)
                          (("1" (expand "semantic_rel" -2)
                            (("1" (skeep)
                              (("1"
                                (expand "semantic_rel_diff" -2)
                                (("1"
                                  (skeep*)
                                  (("1"
                                    (inst -3 "0" "envi")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "env_at_t?" 1)
                                        (("1"
                                          (typepred "fs!1")
                                          (("1"
                                            (expand
                                             "solution_odes_u?"
                                             -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (expand
                                                   "solution_odes?"
                                                   -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "r")
                                      (("2"
                                        (hide -2 -3 -4)
                                        (("2"
                                          (hide 2 3 4)
                                          (("2"
                                            (grind)
                                            (("1"
                                              (typepred "D")
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (typepred "D")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "semantic_rel_star_bounded_star_con")
          (("2" (lemma "sem_rel_diff_hp_bstar_con")
            (("2" (inst?)
              (("2" (inst -1 "fs")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sem_rel_diff_hp_bstar formula-decl nil sem_rel_diff_star nil)
    (HP type-decl nil HP_adt dL)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (ODEs type-eq-decl nil hp_def dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (solution_odes? const-decl "bool" hp_expr dL)
    (fs!1 skolem-const-decl "(solution_odes_u?(D, odes, envi))"
     sem_rel_diff_star nil)
    (envi skolem-const-decl "Environment" sem_rel_diff_star nil)
    (odes skolem-const-decl "ODEs" sem_rel_diff_star nil)
    (r skolem-const-decl "(D)" sem_rel_diff_star nil)
    (D skolem-const-decl "(dd?)" sem_rel_diff_star nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (env_at_t? const-decl "bool" hp_expr dL)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic_rel_diff const-decl "bool" hp_expr dL)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (dd? const-decl "bool" hp_expr dL)
    (solution_odes_u? const-decl "bool" hp_expr dL)
    (hp const-decl "bool" interval_def ODEs)
    (semantic_rel_star_bounded_star formula-decl nil
     bounded_star_semantics dL)
    (semantic_rel_star_bounded_star_con formula-decl nil
     bounded_star_semantics dL)
    (sem_rel_diff_hp_bstar_con formula-decl nil sem_rel_diff_star nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   shostak))
 (star_diff_hp 0
  (star_diff_hp-1 nil 3904991034
   ("" (skeep*)
    (("" (expand "ALLRUNS")
      (("" (decompose-equality)
        (("" (iff)
          (("" (inst -1 "x!1")
            (("" (expand "DLAND")
              (("" (split)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (lemma "sem_rel_diff_hp")
                            (("1" (inst?)
                              (("1"
                                (inst -1 "fs(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst -2 "envo")
                        (("2" (assert)
                          (("2" (lemma "sem_rel_diff_hp")
                            (("2" (inst?)
                              (("2"
                                (inst -1 "fs(x!1)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ALLRUNS const-decl "bool" bool_expr dL)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (dd? const-decl "bool" hp_expr dL)
    (solution_odes_u? const-decl "bool" hp_expr dL)
    (hp const-decl "bool" interval_def ODEs)
    (sem_rel_diff_hp formula-decl nil sem_rel_diff_star nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ODEs type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt dL)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (HP type-decl nil HP_adt dL)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DLAND const-decl "bool" bool_expr dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   shostak)))