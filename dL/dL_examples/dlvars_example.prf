(dl_vars_variables
 (dlvars_swap 0
  (dlvars_swap-1 nil 3912459347
   ("" (skeep) (("" (dl-assignb) (("" (dl-grind) nil nil)) nil)) nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (val const-decl "real" hp_def dL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (= const-decl "BoolExpr" bool_expr dL)
    (cnst const-decl "real" hp_def dL)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (dl_assignb formula-decl nil dynamic_logic dL)
    (Assigns type-eq-decl nil hp_def dL)
    (DLAND const-decl "bool" bool_expr dL)
    (gamma__369 skolem-const-decl "(cons?[BoolExpr])" dl_vars_variables
     nil)
    (delta__370 skolem-const-decl "(null?[BoolExpr])" dl_vars_variables
     nil)
    (distinct_var? def-decl "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}" hp_def dL)
    (pairwise_distinct_vars? def-decl "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     hp_def dL)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     substitution dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (dl_sub_and formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_sub_eq formula-decl nil substitution dL)
    (dl_subre_const formula-decl nil substitution dL)
    (dl_subre_val formula-decl nil substitution dL)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (iterate_left const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (nth def-decl "T" list_props nil)
    (for const-decl "T" for_iterate structures)
    (length def-decl "nat" list_props nil)
    (\|- const-decl "bool" dynamic_logic dL)
    (delta__372 skolem-const-decl "(null?[BoolExpr])" dl_vars_variables
     nil)
    (gamma__371 skolem-const-decl "(cons?[BoolExpr])" dl_vars_variables
     nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (dl_andR formula-decl nil dynamic_logic dL))
   shostak))
 (var_mapexpr_inj 0
  (var_mapexpr_inj-1 nil 3912541226
   ("" (skeep*) (("" (dl-mapexpr_inj) nil nil)) nil)
   ((dLVar type-decl nil hp_def dL)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (distinct_var? def-decl "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}" hp_def dL)
    (pairwise_distinct_vars? def-decl "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     hp_def dL)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (mapexpr_inj_distinct_vars formula-decl nil hp_def dL)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))(dl_vars_parameters
              (dlvars_swap 0
               (dlvars_swap-1 nil 3913235561
                ("" (dl-assignb) (("" (dl-grind) nil nil)) nil)
                ((dl_andR formula-decl nil dynamic_logic dL)
                 (Formulas type-eq-decl nil bool_expr dL)
                 (gamma__379 skolem-const-decl "(cons?[BoolExpr])"
                  dl_vars_parameters nil)
                 (delta__380 skolem-const-decl "(null?[BoolExpr])"
                  dl_vars_parameters nil)
                 (\|- const-decl "bool" dynamic_logic dL)
                 (length def-decl "nat" list_props nil)
                 (for const-decl "T" for_iterate structures)
                 (nth def-decl "T" list_props nil)
                 (for_it def-decl
                  "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
                  for_iterate structures)
                 (iterate_left const-decl "T" for_iterate structures)
                 (real_plus_real_is_real application-judgement "real"
                  reals nil)
                 (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def
                  dL)
                 (IF const-decl "[boolean, T, T -> T]" if_def nil)
                 (dl_subre_val formula-decl nil substitution dL)
                 (dl_subre_const formula-decl nil substitution dL)
                 (dl_sub_eq formula-decl nil substitution dL)
                 (Substitution type-eq-decl nil substitution dL)
                 (dl_sub_and formula-decl nil substitution dL)
                 (null_MapExprInj name-judgement "MapExprInj" hp_def
                  dL)
                 (SUB_MapVar def-decl
                  "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
                  substitution dL)
                 (delta__378 skolem-const-decl "(null?[BoolExpr])"
                  dl_vars_parameters nil)
                 (gamma__377 skolem-const-decl "(cons?[BoolExpr])"
                  dl_vars_parameters nil)
                 (DLAND const-decl "bool" bool_expr dL)
                 (Assigns type-eq-decl nil hp_def dL)
                 (dl_assignb formula-decl nil dynamic_logic dL)
                 (- const-decl "[numfield -> numfield]" number_fields
                    nil)
                 (numfield nonempty-type-eq-decl nil number_fields nil)
                 (cnst const-decl "real" hp_def dL)
                 (= const-decl "BoolExpr" bool_expr dL)
                 (= const-decl "[T, T -> boolean]" equalities nil)
                 (BoolExpr type-eq-decl nil hp_def dL)
                 (boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (bijective? const-decl "bool" functions nil)
                 (id const-decl "(bijective?[T, T])" identity nil)
                 (TRUE const-decl "bool" booleans nil)
                 (minus_odd_is_odd application-judgement "odd_int"
                  integers nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (dLVar type-decl nil hp_def dL)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (Environment type-eq-decl nil hp_def dL)
                 (RealExpr type-eq-decl nil hp_def dL)
                 (MapExpr type-eq-decl nil hp_def dL)
                 (list type-decl nil list_adt nil)
                 (mapexpr_inj const-decl "bool" hp_def dL)
                 (cons? adt-recognizer-decl "[list -> boolean]"
                  list_adt nil)
                 (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                       list_adt nil)
                 (x formal-const-decl "dLVar" dl_vars_parameters nil)
                 (+ const-decl "[T -> real]" real_fun_ops reals)
                 (val const-decl "real" hp_def dL)
                 (y formal-const-decl "dLVar" dl_vars_parameters nil)
                 (z formal-const-decl "dLVar" dl_vars_parameters nil)
                 (null adt-constructor-decl "(null?)" list_adt nil)
                 (null? adt-recognizer-decl "[list -> boolean]"
                  list_adt nil))
                shostak))
              (var_mapexpr_inj 0
               (var_mapexpr_inj-1 nil 3913235580
                ("" (skeep)
                 (("" (dl-mapexpr_inj :lemma "distinct_vars") nil nil))
                 nil)
                ((dLVar type-decl nil hp_def dL)
                 (number nonempty-type-decl nil numbers nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (Environment type-eq-decl nil hp_def dL)
                 (RealExpr type-eq-decl nil hp_def dL)
                 (MapExpr type-eq-decl nil hp_def dL)
                 (list type-decl nil list_adt nil)
                 (cons? adt-recognizer-decl "[list -> boolean]"
                  list_adt nil)
                 (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                       list_adt nil)
                 (z formal-const-decl "dLVar" dl_vars_parameters nil)
                 (y formal-const-decl "dLVar" dl_vars_parameters nil)
                 (x formal-const-decl "dLVar" dl_vars_parameters nil)
                 (TRUE const-decl "bool" booleans nil)
                 (pairwise_distinct_vars? def-decl "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
                  hp_def dL)
                 (distinct_var? def-decl "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}" hp_def dL)
                 (distinct_vars formula-decl nil dl_vars_parameters
                  nil)
                 (map adt-def-decl "list[T1]" list_adt_map nil)
                 (mapexpr_inj_distinct_vars formula-decl nil hp_def
                  dL))
                shostak)))(dl_vars_constants
                           (dlvars_swap 0
                            (dlvars_swap-1 nil 3913235645
                             ("" (dl-assignb) (("" (dl-grind) nil nil))
                              nil)
                             ((dl_andR formula-decl nil dynamic_logic
                               dL)
                              (Formulas type-eq-decl nil bool_expr dL)
                              (gamma__387 skolem-const-decl
                               "(cons?[BoolExpr])" dl_vars_constants
                               nil)
                              (delta__388 skolem-const-decl
                               "(null?[BoolExpr])" dl_vars_constants
                               nil)
                              (\|- const-decl "bool" dynamic_logic dL)
                              (length def-decl "nat" list_props nil)
                              (for const-decl "T" for_iterate
                               structures)
                              (nth def-decl "T" list_props nil)
                              (for_it def-decl
                               "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
                               for_iterate structures)
                              (iterate_left const-decl "T" for_iterate
                               structures)
                              (real_plus_real_is_real
                               application-judgement "real" reals nil)
                              (dlvar_index adt-accessor-decl
                               "[dLVar -> nat]" hp_def dL)
                              (IF const-decl "[boolean, T, T -> T]"
                               if_def nil)
                              (dl_subre_val formula-decl nil
                               substitution dL)
                              (dl_subre_const formula-decl nil
                               substitution dL)
                              (dl_sub_eq formula-decl nil substitution
                               dL)
                              (Substitution type-eq-decl nil
                               substitution dL)
                              (dl_sub_and formula-decl nil substitution
                               dL)
                              (null_MapExprInj name-judgement
                               "MapExprInj" hp_def dL)
                              (SUB_MapVar def-decl
                               "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
                               substitution dL)
                              (delta__386 skolem-const-decl
                               "(null?[BoolExpr])" dl_vars_constants
                               nil)
                              (gamma__385 skolem-const-decl
                               "(cons?[BoolExpr])" dl_vars_constants
                               nil)
                              (DLAND const-decl "bool" bool_expr dL)
                              (Assigns type-eq-decl nil hp_def dL)
                              (dl_assignb formula-decl nil
                               dynamic_logic dL)
                              (- const-decl "[numfield -> numfield]"
                                 number_fields nil)
                              (numfield nonempty-type-eq-decl nil
                               number_fields nil)
                              (cnst const-decl "real" hp_def dL)
                              (= const-decl "BoolExpr" bool_expr dL)
                              (= const-decl "[T, T -> boolean]"
                                 equalities nil)
                              (BoolExpr type-eq-decl nil hp_def dL)
                              (boolean nonempty-type-decl nil booleans
                               nil)
                              (bool nonempty-type-eq-decl nil booleans
                               nil)
                              (bijective? const-decl "bool" functions
                               nil)
                              (id const-decl "(bijective?[T, T])"
                                  identity nil)
                              (TRUE const-decl "bool" booleans nil)
                              (minus_odd_is_odd application-judgement
                               "odd_int" integers nil)
                              (NOT const-decl "[bool -> bool]" booleans
                               nil)
                              (dLVar type-decl nil hp_def dL)
                              (number nonempty-type-decl nil numbers
                                      nil)
                              (number_field_pred const-decl
                               "[number -> boolean]" number_fields nil)
                              (number_field nonempty-type-from-decl nil
                               number_fields nil)
                              (real_pred const-decl
                                         "[number_field -> boolean]"
                                         reals nil)
                              (real nonempty-type-from-decl nil reals
                               nil)
                              (rational_pred const-decl
                                             "[real -> boolean]"
                                             rationals nil)
                              (rational nonempty-type-from-decl nil
                                        rationals nil)
                              (integer_pred const-decl
                                            "[rational -> boolean]"
                                            integers nil)
                              (int nonempty-type-eq-decl nil integers
                               nil)
                              (>= const-decl "bool" reals nil)
                              (nat nonempty-type-eq-decl nil
                               naturalnumbers nil)
                              (Environment type-eq-decl nil hp_def dL)
                              (RealExpr type-eq-decl nil hp_def dL)
                              (MapExpr type-eq-decl nil hp_def dL)
                              (list type-decl nil list_adt nil)
                              (mapexpr_inj const-decl "bool" hp_def dL)
                              (cons? adt-recognizer-decl
                               "[list -> boolean]" list_adt nil)
                              (cons adt-constructor-decl
                                    "[[T, list] -> (cons?)]" list_adt
                                    nil)
                              (x const-decl "dLVar" dl_vars_constants
                               nil)
                              (+ const-decl "[T -> real]" real_fun_ops
                                 reals)
                              (val const-decl "real" hp_def dL)
                              (y const-decl "dLVar" dl_vars_constants
                               nil)
                              (z const-decl "dLVar" dl_vars_constants
                               nil)
                              (null adt-constructor-decl "(null?)"
                                    list_adt nil)
                              (null? adt-recognizer-decl
                               "[list -> boolean]" list_adt nil))
                             shostak))
                           (var_mapexpr_inj 0
                            (var_mapexpr_inj-1 nil 3913235659
                             ("" (skeep)
                              ((""
                                (dl-mapexpr_inj)
                                (("" (grind) nil nil))
                                nil))
                              nil)
                             ((pairwise_distinct_vars? def-decl
                               "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
                               hp_def dL)
                              (distinct_var? def-decl "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}" hp_def dL)
                              (TRUE const-decl "bool" booleans nil)
                              (map adt-def-decl "list[T1]" list_adt_map
                                   nil)
                              (dLVar type-decl nil hp_def dL)
                              (number nonempty-type-decl nil numbers
                                      nil)
                              (boolean nonempty-type-decl nil booleans
                               nil)
                              (number_field_pred const-decl
                               "[number -> boolean]" number_fields nil)
                              (number_field nonempty-type-from-decl nil
                               number_fields nil)
                              (real_pred const-decl
                                         "[number_field -> boolean]"
                                         reals nil)
                              (real nonempty-type-from-decl nil reals
                               nil)
                              (rational_pred const-decl
                                             "[real -> boolean]"
                                             rationals nil)
                              (rational nonempty-type-from-decl nil
                                        rationals nil)
                              (integer_pred const-decl
                                            "[rational -> boolean]"
                                            integers nil)
                              (int nonempty-type-eq-decl nil integers
                               nil)
                              (bool nonempty-type-eq-decl nil booleans
                               nil)
                              (>= const-decl "bool" reals nil)
                              (nat nonempty-type-eq-decl nil
                               naturalnumbers nil)
                              (Environment type-eq-decl nil hp_def dL)
                              (RealExpr type-eq-decl nil hp_def dL)
                              (MapExpr type-eq-decl nil hp_def dL)
                              (list type-decl nil list_adt nil)
                              (cons? adt-recognizer-decl
                               "[list -> boolean]" list_adt nil)
                              (cons adt-constructor-decl
                                    "[[T, list] -> (cons?)]" list_adt
                                    nil)
                              (z const-decl "dLVar" dl_vars_constants
                               nil)
                              (y const-decl "dLVar" dl_vars_constants
                               nil)
                              (x const-decl "dLVar" dl_vars_constants
                               nil)
                              (mapexpr_inj_distinct_vars formula-decl
                               nil hp_def dL))
                             shostak)))