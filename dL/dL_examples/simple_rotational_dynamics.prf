(simple_rotational_dynamics
 (srd 0
  (srd-1 nil 3877421693
   ("" (skeep)
    (("" (beta)
      (("" (dl-flatten)
        (("" (dl-diffinv)
          (("1" (dl-assert) nil nil) ("2" (dl-assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NQBool type-decl nil NQBool_adt dL)
    (nqb_normal? inductive-decl "bool" bool_expr dL)
    (NormNQBool type-eq-decl nil bool_expr dL)
    (nqb_to_be def-decl "BoolExpr" bool_expr dL)
    (normalize const-decl
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}"
     bool_expr dL)
    (NQB_REL type-decl nil hp_def dL)
    (nqb_rel? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt dL)
    (NQB_rel adt-constructor-decl
     "[[NQB_REL, RealExpr, RealExpr] -> (nqb_rel?)]" NQBool_adt dL)
    (nqb_eq? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def dL)
    (nqb_eq adt-constructor-decl "(nqb_eq?)" hp_def dL)
    (nqb_rel const-decl "BoolExpr" bool_expr dL)
    (dl_dI_dlTRUE formula-decl nil dynamic_logic dL)
    (ddl_dom? const-decl "bool" differentiation dL)
    (normalize_rec def-decl
     "{nnqbe: NormNQBool | FORALL (env: Environment): nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}"
     bool_expr dL)
    (dl_axiom formula-decl nil dynamic_logic dL)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveL formula-decl nil dynamic_logic dL)
    (derivable_M_nqbool? inductive-decl "bool" chain_rule_re dL)
    (diff_re_sum formula-decl nil diff_re_props dL)
    (max_var const-decl "nat" hp_def dL)
    (diff_re? const-decl "bool" chain_rule_re dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (diff_re_pow formula-decl nil diff_re_props dL)
    (diff_re_cnst formula-decl nil diff_re_props dL)
    (diff_re_val formula-decl nil diff_re_props dL)
    (dl_true_DDL formula-decl nil differentiation dL)
    (dl_trueL formula-decl nil dynamic_logic dL)
    (SUB_DIFT const-decl "BoolExpr" differentiation dL)
    (DIFT def-decl "BoolExpr" differentiation dL)
    (dl_dift_plus formula-decl nil differentiation dL)
    (ddt def-decl "RealExpr" differentiation dL)
    (dl_derivable_up_pow formula-decl nil differentiation dL)
    (ddl_dom_upto? const-decl "bool" differentiation dL)
    (derivable_up? const-decl "bool" differentiation dL)
    (dl_derivable_up_val formula-decl nil differentiation dL)
    (dl_dift_pow formula-decl nil differentiation dL)
    (dl_dift_val formula-decl nil differentiation dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (max_var_max formula-decl nil hp_def dL)
    (length_singleton formula-decl nil more_list_props structures)
    (dl_derivable_up_cnst formula-decl nil differentiation dL)
    (dl_dift_const formula-decl nil differentiation dL)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (iterate_left const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (\|- const-decl "bool" dynamic_logic dL)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (val const-decl "real" hp_def dL)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (dLVar type-decl nil hp_def dL)
    (bijective? const-decl "bool" functions nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (dl_impliesR formula-decl nil dynamic_logic dL)
    (Formulas type-eq-decl nil bool_expr dL)
    (= const-decl "BoolExpr" bool_expr dL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (cnst const-decl "real" hp_def dL) (HP type-decl nil HP_adt dL)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (ODEs type-eq-decl nil hp_def dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (DLBOOL const-decl "bool" bool_expr dL))
   shostak)))