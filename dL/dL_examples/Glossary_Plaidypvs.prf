(Glossary_Plaidypvs
 (dl_axiom_example 0
  (dl_axiom_example-1 nil 3913238948
   ("" (then (skeep) (dl-axiom 3)) nil) nil shostak))
 (dl_andL_example 0
  (dl_andL_example-1 nil 3913238948
   ("" (then (skeep) (dl-andL) (dl-axiom)) nil) nil shostak))
 (dl_andR_example 0
  (dl_andR_example-1 nil 3913238949
   (""
    (then (skeep) (dl-flatten)
     (spread (dl-andR) ((dl-axiom) (dl-assert))))
    nil)
   nil shostak))
 (dl_anyb_example 0
  (dl_anyb_example-1 nil 3913238949
   (""
    (then (skeep) (dl-anyb) (dl-skolem "X") (dl-subs) (dl-flatten)
     (dl-assert))
    nil)
   nil shostak))
 (dl_anyd_example 0
  (dl_anyd_example-1 nil 3913238950
   (""
    (then (skeep) (dl-anyd) (dl-inst "1") (dl-subs)
     (spread (dl-andR) ((dl-assert) (dl-assert))))
    nil)
   nil shostak))
 (dl_assert_example 0
  (dl_assert_example-1 nil 3913238950
   ("" (then (skeep) (beta) (dl-assert)) nil) nil shostak))
 (dl_assignb_example 0
  (dl_assignb_example-1 nil 3913238951
   ("" (then (skeep) (dl-assignb) (dl-assert)) nil) nil shostak))
 (dl_assignd_example 0
  (dl_assignd_example-1 nil 3913238951
   ("" (then (skeep) (dl-assignd) (dl-assert)) nil) nil shostak))
 (dl_boxd_example 0
  (dl_boxd_example-1 nil 3913238951 ("" (then (skeep) (dl-assert)) nil)
   nil shostak))
 (dl_choiceb_example 0
  (dl_choiceb_example-1 nil 3913238952
   (""
    (then (skeep) (dl-choiceb)
     (spread (dl-andR) ((dl-assert) (dl-assert))))
    nil)
   nil shostak))
 (dl_choiced_example 0
  (dl_choiced_example-1 nil 3913238952
   (""
    (then (skeep) (dl-choiced) (dl-ground) (dl-hide 2) (dl-assignd)
     (dl-assert))
    nil)
   nil shostak))
 (dl_composeb_example 0
  (dl_composeb_example-1 nil 3913238952
   (""
    (then (skeep) (dl-composeb) (dl-assignb) (dl-testb) (dl-flatten)
     (dl-assert))
    nil)
   nil shostak))
 (dl_composed_example 0
  (dl_composed_example-1 nil 3913238953
   (""
    (then (skeep) (dl-flatten) (dl-composed) (rewrite "dl_testd")
     (dl-assignd) (dl-assert))
    nil)
   nil shostak))
 (dl_case_example 0
  (dl_case_example-1 nil 3913238953
   (""
    (then (skeep)
     (spread (dl-case "cnst(c) >= cnst(0)")
      ((then (dl-choiceb) (spread (dl-andR) ((dl-assert) (dl-assert))))
       (dl-assert))))
    nil)
   nil shostak))
 (dl_diffcase_example 0
  (dl_diffcase_example-1 nil 3913238954
   (""
    (then (skeep) (dl-flatten)
     (spread (dl-diffcase "val(x) ^ 2 > cnst(5)")
      ((dl-assert) (dl-assert))))
    nil)
   nil shostak))
 (dl_diffghost_example 0
  (dl_diffghost_example-1 nil 3913238954
   (""
    (then (skeep) (beta) (dl-flatten)
     (spread
      (dl-diffghost "cnst(-1/2)" "cnst(0)" "G"
       "val(x)*val(G)^2=cnst(1)")
      ((then (dl-instf "div_safe_re(cnst(1),val(x)^^(1/2))")
        (dl-composeb) (dl-assignb) (dl-subf)
        (spread (dl-diffinv)
         ((spread (grind :exclude "^^")
           ((grind) (then (lemma "sqrt_hathat") (grind))))
          (dl-assert))))
       (dl-assert) (dl-assert))))
    nil)
   nil shostak))
 (dl_diffinit_example 0
  (dl_diffinit_example-1 nil 3913238954
   ("" (then (skeep) (dl-diffinit)) nil) nil shostak))
 (dl_diffinv_example 0
  (dl_diffinv_example-1 nil 3913238955
   ("" (then (skeep) (dl-flatten) (dl-diffinv) (dl-assert)) nil) nil
   shostak))
 (dl_falseL_example 0
  (dl_falseL_example-1 nil 3913238955
   ("" (then (skeep) (dl-falseL)) nil) nil shostak))
 (dl_flatten_example 0
  (dl_flatten_example-1 nil 3913238956
   ("" (then (skeep) (dl-flatten) (dl-assert)) nil) nil shostak))
 (dl_g_example 0
  (dl_g_example-1 nil 3913238956
   ("" (then (skeep) (dl-Gb) (dl-assert)) nil) nil shostak))
 (dl_ghost_example 0
  (dl_ghost_example-1 nil 3913238956
   (""
    (then (skeep) (dl-flatten) (dl-ghost "val(x)*val(y)") (dl-diffinv)
     (dl-assert))
    nil)
   nil shostak))
 (dl_grind_example 0
  (dl_grind_example-1 nil 3913238957 ("" (then (skeep) (dl-grind)) nil)
   nil shostak))
 (dl_ground_example 0
  (dl_ground_example-1 nil 3913238957
   ("" (then (skeep) (spread (dl-ground) ((dl-assert) (dl-assert))))
    nil)
   nil shostak))
 (dl_hide_example 0
  (dl_hide_example-1 nil 3913238957
   (""
    (then (skeep) (dl-flatten) (dl-hide -2) (dl-hide + :but 3)
     (dl-hide -2) (dl-assert))
    nil)
   nil shostak))
 (dl_hiderest_example 0
  (dl_hiderest_example-1 nil 3913238958
   ("" (then (skeep) (dl-flatten) (dl-hiderest (-1 3)) (dl-assert))
    nil)
   nil shostak))
 (dl_iff_example 0
  (dl_iff_example-1 nil 3913238958
   ("" (then (skeep) (spread (dl-iffR) ((dl-assert) (dl-assert)))) nil)
   nil shostak))
 (dl_inst_example 0
  (dl_inst_example-1 nil 3913238959
   ("" (then (skeep) (dl-inst "-1") (dl-flatten) (dl-assert)) nil) nil
   shostak))
 (dl_impliesL_example 0
  (dl_impliesL_example-1 nil 3913238959
   ("" (then (skeep) (dl-impliesL)) nil) nil shostak))
 (dl_impliesR_example 0
  (dl_impliesR_example-1 nil 3913238959
   ("" (then (skeep) (dl-impliesR)) nil) nil shostak))
 (dl_iterated_example 0
  (dl_iterated_example-1 nil 3913238960
   ("" (then (skeep) (dl-flatten) (dl-iterated) (dl-assert)) nil) nil
   shostak))
 (dl_K_example 0
  (dl_K_example-1 nil 3913238960
   (""
    (then (skeep) (dl-K) (dl-assert-pairwise_distinct_vars?)
     (dl-assert))
    nil)
   nil shostak))
 (dl_loop_example 0
  (dl_loop_example-1 nil 3913238961
   (""
    (then (skeep) (dl-assert-pairwise_distinct_vars?) (dl-flatten)
     (spread (dl-loop "val(x)>=cnst(1) and val(y) >=cnst(1)")
      ((dl-assert) (dl-assert) (then (dl-assignb) (dl-assert)))))
    nil)
   nil shostak))
 (dl_Mb_example 0
  (dl_Mb_example-1 nil 3913238961
   ("" (then (skeep) (dl-Mb) (dl-assert)) nil) nil shostak))
 (dl_monob_example 0
  (dl_monob_example-1 nil 3913238961
   (""
    (then (skeep) (dl-assert-pairwise_distinct_vars?) (dl-flatten)
     (spread (dl-monob "val(x) = cnst(0) AND val(y) = cnst(c)")
      ((dl-assert) (dl-assert))))
    nil)
   nil shostak))
 (dl_move_example 0
  (dl_move_example-1 nil 3913238962
   ("" (then (skeep) (dl-flatten) (dl-move -2) (dl-move 2) (dl-assert))
    nil)
   nil shostak))
 (dl_notL_example 0
  (dl_notL_example-1 nil 3913238962 ("" (then (skeep) (dl-notL)) nil)
   nil shostak))
 (dl_notR_example 0
  (dl_notR_example-1 nil 3913238962 ("" (then (skeep) (dl-notR)) nil)
   nil shostak))
 (dl_orL_example 0
  (dl_orL_example-1 nil 3913238963 ("" (then (skeep) (dl-orL)) nil) nil
   shostak))
 (dl_orR_example 0
  (dl_orR_example-1 nil 3913238963 ("" (then (skeep) (dl-orR)) nil) nil
   shostak))
 (dl_pp_example 0
  (dl_pp_example-1 nil 3913238964
   ("" (then (skeep) (dl-pp) (dl-assert)) nil) nil shostak))
 (dl_skolem_example 0
  (dl_skolem_example-1 nil 3913238964
   ("" (then (skeep) (dl-skolem) (dl-assert)) nil) nil shostak))
 (dl_solve_example1 0
  (dl_solve_example1-1 nil 3913238964
   ("" (then (skeep) (dl-flatten) (dl-solve) (dl-assert)) nil) nil
   shostak))
 (dl_solve_example2 0
  (dl_solve_example2-1 nil 3913238965
   (""
    (then (skeep) (dl-solve) (dl-inst "t") (dl-flatten) (dl-ground)
     (dl-assert))
    nil)
   nil shostak))
 (dl_subs_example 0
  (dl_subs_example-1 nil 3913238965
   (""
    (then (skeep) (dl-assert-pairwise_distinct_vars?) (dl-flatten)
     (dl-subs) (dl-assert))
    nil)
   nil shostak))
 (dl_testb_example 0
  (dl_testb_example-1 nil 3913238966
   ("" (then (skeep) (dl-flatten) (dl-testb) (dl-assert)) nil) nil
   shostak))
 (dl_testd_example 0
  (dl_testd_example-1 nil 3913238966
   ("" (then (skeep) (dl-flatten) (dl-assert)) nil) nil shostak))
 (dl_trueR_example 0
  (dl_trueR_example-1 nil 3913238966 ("" (then (skeep) (dl-trueR)) nil)
   nil shostak))
 (dl_Vb_example 0
  (dl_Vb_example-1 nil 3913238967
   (""
    (then (skeep) (dl-assert-pairwise_distinct_vars?) (dl-flatten)
     (dl-Vb) (dl-assert))
    nil)
   nil shostak))
 (dl_weak_example 0
  (dl_weak_example-1 nil 3913238967
   (""
    (then (skeep) (dl-flatten)
     (spread (dl-weak "val(y)=cnst(25)") ((dl-assert) (dl-assert))))
    nil)
   nil shostak)))