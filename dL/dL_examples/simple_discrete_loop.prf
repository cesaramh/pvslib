(simple_discrete_loop
 (discrete_loop 0
  (discrete_loop-1 nil 3867791601
   ("" (dl-flatten)
    (("" (dl-loop "val(x) >= val(y) AND val(y) >= cnst(0)")
      (("1" (dl-assert) nil nil) ("2" (dl-assert) nil nil)
       ("3" (dl-assert) nil nil))
      nil))
    nil)
   ((dl_loop formula-decl nil dynamic_logic dL)
    (dl_axiom formula-decl nil dynamic_logic dL)
    (dl_andR formula-decl nil dynamic_logic dL)
    (\|- const-decl "bool" dynamic_logic dL)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (iterate_left const-decl "T" for_iterate structures)
    (SUB const-decl "bool" substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_assignb formula-decl nil dynamic_logic dL)
    (dl_composeb formula-decl nil dynamic_logic dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (dl_subre_minus formula-decl nil substitution dL)
    (dl_subre_prod_scal1 formula-decl nil substitution dL)
    (dl_sub_and formula-decl nil substitution dL)
    (dl_sub_ge formula-decl nil substitution dL)
    (SUB_Re const-decl "real" substitution dL)
    (dl_subre_val formula-decl nil substitution dL)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     substitution dL)
    (dl_subre_const formula-decl nil substitution dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveL formula-decl nil dynamic_logic dL)
    (dl_andL formula-decl nil dynamic_logic dL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (val const-decl "real" hp_def dL)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (dLVar type-decl nil hp_def dL)
    (bijective? const-decl "bool" functions nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (dl_impliesR formula-decl nil dynamic_logic dL)
    (Formulas type-eq-decl nil bool_expr dL)
    (DLAND const-decl "bool" bool_expr dL)
    (>= const-decl "BoolExpr" bool_expr dL)
    (cnst const-decl "real" hp_def dL)
    (<= const-decl "BoolExpr" bool_expr dL)
    (HP type-decl nil HP_adt dL)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (Assigns type-eq-decl nil hp_def dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL))
   shostak)))