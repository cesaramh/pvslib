(fresh_props
 (fresh_re_cnst 0
  (fresh_re_cnst-1 nil 3867749924
   ("" (skeep)
    (("" (expand "fresh?" 1)
      (("" (skeep) (("" (expand "cnst" 1) (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   (nil (cnst const-decl "real" hp_def nil)) shostak))
 (fresh_re_val 0
  (fresh_re_val-1 nil 3868695245
   ("" (skeep)
    (("" (expand "fresh?")
      (("" (skeep) (("" (expand "val") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   (nil (val const-decl "real" hp_def nil)) shostak))
 (fresh_re_sum 0
  (fresh_re_sum-1 nil 3868695247
   ("" (skeep)
    (("" (expand "fresh?")
      (("" (skeep)
        (("" (expand "+" 1)
          (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (fresh_re_minus 0
  (fresh_re_minus-1 nil 3868695250
   ("" (skeep)
    (("" (expand "fresh?")
      (("" (skeep)
        (("" (expand "-")
          (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (fresh_re_prod 0
  (fresh_re_prod-1 nil 3868695253
   ("" (skeep)
    (("" (expand "fresh?")
      (("" (skeep)
        (("" (inst?)
          (("" (inst?) (("" (expand "*") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (fresh_re_div_safe 0
  (fresh_re_div_safe-1 nil 3876631930
   ("" (skeep)
    (("" (expand "fresh?")
      (("" (skeep)
        (("" (insteep)
          (("" (insteep)
            (("" (expand "div_safe_re")
              (("" (expand "div_safe")
                (("" (replace -1 :hide? t)
                  (("" (replace -1 :hide? t) (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_safe_re const-decl "real" hp_def nil)
    (div_safe const-decl "real" reals_safe_ops reals))
   shostak))
 (fresh_re_sqrt_safe 0
  (fresh_re_sqrt_safe-1 nil 3876632991
   ("" (skeep)
    (("" (expand "fresh?")
      (("" (skeep)
        (("" (insteep)
          (("" (expand "sqrt_safe_re")
            (("" (expand "sqrt_safe")
              (("" (replace -1 :hide? t) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sqrt_safe const-decl "nnreal" reals_safe_ops reals)
    (sqrt_safe_re const-decl "real" hp_def nil))
   shostak))
 (fresh_re_pow 0
  (fresh_re_pow-1 nil 3868695258
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "^")
        (("1" (expand "^")
          (("1" (expand "expt")
            (("1" (lemma "fresh_re_cnst")
              (("1" (inst -1 "1" "i")
                (("1" (expand "cnst") (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "^")
          (("2" (expand "^")
            (("2" (expand "expt" 1)
              (("2" (lemma "fresh_re_prod")
                (("2" (inst? -2)
                  (("2" (assert)
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (fresh_re_prod formula-decl nil fresh_props nil)
    (^ const-decl "real" exponentiation nil)
    (fresh_re_cnst formula-decl nil fresh_props nil)
    (cnst const-decl "real" hp_def nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "[T -> real]" real_fun_ops reals) nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (fresh_re_exp 0
  (fresh_re_exp-1 nil 3867918539
   ("" (skeep)
    (("" (expand "fresh?")
      (("" (skeep)
        (("" (inst -1 "env" "r")
          (("" (expand "^^" 1)
            (("" (expand "expt" 1)
              (("" (lift-if 1)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (lift-if 1) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (expt const-decl "real" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^^ const-decl "RealExpr" differentiation nil))
   shostak))
 (fresh_re_expt 0
  (fresh_re_expt-1 nil 3881879405
   ("" (skeep)
    (("" (expand "fresh?")
      (("" (skeep)
        (("" (inst?) (("" (expand "expt") (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   (nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Integral const-decl "real" integral_def analysis)
    (ln const-decl "real" ln_exp lnexp)
    (^^ const-decl "nnreal" expt lnexp)
    (expt const-decl "real" differentiation nil))
   shostak))
 (not_fresh_re_val 0
  (not_fresh_re_val-1 nil 3867919303
   ("" (skeep)
    (("" (expand "fresh?")
      (("" (name "x" "LAMBDA(j:nat): 0")
        (("" (inst -2 "x" "1")
          (("" (expand "val") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   (nil (Environment type-eq-decl nil hp_def nil)
    (val const-decl "real" hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even? const-decl "bool" integers nil)
    (even_nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (fresh_be_DLTRUE 0
  (fresh_be_DLTRUE-1 nil 3867757381
   ("" (skeep)
    (("" (expand "fresh?") (("" (skeep) (("" (grind) nil nil)) nil))
      nil))
    nil)
   (nil (DLBOOL const-decl "bool" bool_expr nil)) shostak))
 (fresh_be_DLFALSE 0
  (fresh_be_DLFALSE-1 nil 3867757410 ("" (grind) nil nil)
   ((DLBOOL const-decl "bool" bool_expr nil) nil) shostak))
 (fresh_be_eq 0
  (fresh_be_eq-1 nil 3867757430 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (= const-decl "BoolExpr" bool_expr nil) nil)
   shostak))
 (fresh_be_neq 0
  (fresh_be_neq-1 nil 3867757439 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (/= const-decl "boolean" notequal nil)
    (/= const-decl "BoolExpr" bool_expr nil) nil)
   shostak))
 (fresh_be_le 0
  (fresh_be_le-1 nil 3867757449 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (<= const-decl "BoolExpr" bool_expr nil) nil)
   shostak))
 (fresh_be_lt 0
  (fresh_be_lt-1 nil 3867757457 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (< const-decl "BoolExpr" bool_expr nil) nil)
   shostak))
 (fresh_be_ge 0
  (fresh_be_ge-1 nil 3867757467 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (>= const-decl "BoolExpr" bool_expr nil) nil)
   shostak))
 (fresh_be_gt 0
  (fresh_be_gt-1 nil 3867757476 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (> const-decl "BoolExpr" bool_expr nil) nil)
   shostak))
 (fresh_be_or 0
  (fresh_be_or-1 nil 3867757485 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (DLOR const-decl "bool" bool_expr nil))
   shostak))
 (fresh_be_and 0
  (fresh_be_and-1 nil 3867757500 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (DLAND const-decl "bool" bool_expr nil))
   shostak))
 (fresh_be_implies 0
  (fresh_be_implies-1 nil 3867757512 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (DLIMPLIES const-decl "bool" bool_expr nil))
   shostak))
 (fresh_be_not 0
  (fresh_be_not-1 nil 3867757521 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (DLNOT const-decl "bool" bool_expr nil))
   shostak))
 (fresh_be_IFF 0
  (fresh_be_IFF-1 nil 3867757531 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (DLIFF const-decl "BoolExpr" bool_expr nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (DLAND const-decl "bool" bool_expr nil))
   shostak))
 (fresh_fs_sol 0
  (fresh_fs_sol-2 nil 3903446689
   ("" (skeep)
    (("" (typepred "fs")
      (("" (lemma "fresh_mapexpr_inj")
        (("" (inst?)
          (("" (inst -1 "i" _)
            (("" (expand "mapexpr_inj")
              (("" (inst -1 "cnst(0)")
                (("" (expand "solution_odes_u?")
                  (("" (flatten)
                    (("" (split)
                      (("1" (expand "solution_odes?")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (expand "env_at_t?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -3 "k")
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (typepred "k")
                                        (("1"
                                          (inst -2 "0" "k+1")
                                          (("1"
                                            (expand "nth" -2)
                                            (("1"
                                              (decompose-equality 2)
                                              nil
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil)
                                           ("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "env_1")
                                  (("2"
                                    (inst
                                     -5
                                     "t"
                                     "env_1 WITH [(i):=env(i)]")
                                    (("1"
                                      (expand "sol_at_t?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -5 "k")
                                          (("1"
                                            (replace -5)
                                            (("1"
                                              (lemma
                                               "fresh_mapexp_nth_2")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst -1 "i")
                                                  (("1"
                                                    (expand
                                                     "fresh?"
                                                     -1)
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 -6 -5 -4 -3)
                                      (("2"
                                        (expand "env_at_t?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -1 "i_1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case "i_1=i")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst -2 "k")
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "0"
                                                       "k+1")
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (decompose-equality
                                                           2)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep*)
                        (("2" (inst -4 "ff" "S")
                          (("2" (split)
                            (("1" (inst?) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "solution_odes?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split)
                                      (("1"
                                        (expand "env_at_t?")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -2 "k")
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst -4 "0" "k+1")
                                                (("1"
                                                  (expand "nth" -4)
                                                  (("1"
                                                    (decompose-equality
                                                     2)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (expand "sol_at_t?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst
                                               -3
                                               "t!1"
                                               "env_1 WITH [(i):=r]")
                                              (("1"
                                                (inst -3 "k")
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (lemma
                                                     "fresh_mapexp_nth_2")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst -1 "i")
                                                        (("1"
                                                          (expand
                                                           "fresh?"
                                                           -1)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "env_1")
                                                  (("2"
                                                    (hide
                                                     -2
                                                     -3
                                                     -5
                                                     -6
                                                     -7)
                                                    (("2"
                                                      (expand
                                                       "env_at_t?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (typepred
                                                               "i_1")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "i_1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "k!1")
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "0"
                                                                   "k!1+1")
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -3)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       2)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes_u? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dLVar type-decl nil hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dLVar_dlvar_extensionality formula-decl nil hp_def nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (not_in_map const-decl "bool" hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (sol_at_t? const-decl "bool" hp_expr nil)
    (fresh_mapexp_nth_2 formula-decl nil hp_expr nil) nil nil nil nil
    nil nil nil (solution_odes? const-decl "bool" hp_expr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil nil
    nil nil nil (/= const-decl "boolean" notequal nil) nil
    (TRUE const-decl "bool" booleans nil)
    (cnst const-decl "real" hp_def nil) nil nil
    (fresh_li? inductive-decl "bool" hp_expr nil)
    (Assigns type-eq-decl nil hp_def nil)
    (fresh_mapexpr_inj formula-decl nil hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil)
  (fresh_fs_sol-1 nil 3867759086
   ("" (skeep)
    (("" (typepred "fs")
      (("" (lemma "fresh_mapexpr_inj")
        (("" (inst?)
          (("" (inst -1 "i" _)
            (("" (expand "mapexpr_inj")
              (("" (inst -1 "cnst(0)")
                (("" (expand "solution_odes_u?")
                  (("" (flatten)
                    (("" (split)
                      (("1" (expand "solution_odes?")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (expand "env_at_t?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -3 "k")
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (typepred "k")
                                        (("1"
                                          (inst -2 "0" "k+1")
                                          (("1"
                                            (expand "nth" -2)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil)
                                           ("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "env_1")
                                  (("2"
                                    (inst
                                     -5
                                     "t"
                                     "env_1 WITH [(i):=env(i)]")
                                    (("1"
                                      (expand "sol_at_t?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -5 "k")
                                          (("1"
                                            (replace -5)
                                            (("1"
                                              (lemma
                                               "fresh_mapexp_nth_2")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst -1 "i")
                                                  (("1"
                                                    (expand
                                                     "fresh?"
                                                     -1)
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 -6 -5 -4 -3)
                                      (("2"
                                        (expand "env_at_t?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -1 "i_1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case "i_1=i")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst -2 "k")
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "0"
                                                       "k+1")
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep*)
                        (("2" (inst -4 "ff" "S")
                          (("2" (split)
                            (("1" (inst?) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "solution_odes?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split)
                                      (("1"
                                        (expand "env_at_t?")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -2 "k")
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst -4 "0" "k+1")
                                                (("1"
                                                  (expand "nth" -4)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (expand "sol_at_t?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst
                                               -3
                                               "t!1"
                                               "env_1 WITH [(i):=r]")
                                              (("1"
                                                (inst -3 "k")
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (lemma
                                                     "fresh_mapexp_nth_2")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst -1 "i")
                                                        (("1"
                                                          (expand
                                                           "fresh?"
                                                           -1)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "env_1")
                                                  (("2"
                                                    (hide
                                                     -2
                                                     -3
                                                     -5
                                                     -6
                                                     -7)
                                                    (("2"
                                                      (expand
                                                       "env_at_t?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (typepred
                                                               "i_1")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "i_1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "k!1")
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "0"
                                                                   "k!1+1")
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -3)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes_u? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (not_in_map const-decl "bool" hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (fresh_mapexp_nth_2 formula-decl nil hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (cnst const-decl "real" hp_def nil)
    (fresh_li? inductive-decl "bool" hp_expr nil)
    (Assigns type-eq-decl nil hp_def nil)
    (fresh_mapexpr_inj formula-decl nil hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (fresh_bstar_semantic_rel 0
  (fresh_bstar_semantic_rel-1 nil 3870728439
   ("" (induct "j")
    (("1" (skeep)
      (("1" (expand "BSTAR" 1)
        (("1" (expand "semantic_rel" 1)
          (("1" (assert)
            (("1" (expand "DLBOOL" 1)
              (("1" (assert)
                (("1" (expand "semantic_rel" -3)
                  (("1" (expand "BSTAR" -) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (expand "BSTAR" 1)
            (("2" (expand "BSTAR" -4)
              (("2" (expand "semantic_rel" 1)
                (("2" (flatten)
                  (("2" (expand "semantic_rel" -4)
                    (("2" (inst-cp -1 "hp" "i" "envi" "envo" "r")
                      (("2" (assert)
                        (("2" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (assert)
                            (("2" (expand "semantic_rel" -4)
                              (("2"
                                (skeep -4)
                                (("2"
                                  (expand "semantic_rel" 2 1)
                                  (("2"
                                    (inst 2 "env WITH [ i := r ] ")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst-cp -3 "r" "envi" "env")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             -1
                                             "hp"
                                             "i"
                                             "env"
                                             "envo"
                                             "r")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (fresh_hp? inductive-decl "bool" hp_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (fresh_be_semantic_rel 0
  (fresh_be_semantic_rel-1 nil 3870513224
   ("" (induct "hp")
    (("1" (skeep)
      (("1" (hide -1)
        (("1" (skeep)
          (("1" (expand "semantic_rel")
            (("1" (flatten)
              (("1" (split 1)
                (("1" (skeep)
                  (("1" (typepred "i_1")
                    (("1" (inst -3 "i_1")
                      (("1" (assert)
                        (("1" (lemma "fresh_assign_nth")
                          (("1" (inst?)
                            (("1" (inst -1 "i")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "fresh?" -1)
                                      (("1"
                                        (inst -1 "envi" "r")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "fresh_hp?" -2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst -3 "i_1")
                    (("2" (assert)
                      (("2" (case "i_1=i")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (hide -1)
        (("2" (expand "semantic_rel")
          (("2" (flatten)
            (("2" (split -2)
              (("1" (hide 2)
                (("1" (flatten)
                  (("1" (expand "fresh_hp?")
                    (("1" (flatten)
                      (("1" (hide -3) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 1)
                (("2" (skeep*)
                  (("2" (inst 1 "D")
                    (("2" (expand "semantic_rel_diff")
                      (("2" (skeep)
                        (("2" (skeep)
                          (("2" (inst 1 "r!1")
                            (("2" (lemma "fresh_fs_sol")
                              (("2"
                                (inst
                                 -1
                                 "D"
                                 "DIFF1_var"
                                 _
                                 _
                                 _
                                 _)
                                (("2"
                                  (typepred "fs")
                                  (("2"
                                    (inst -2 "envi" "i" "r" "fs")
                                    (("2"
                                      (inst 1 "fs")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (expand "env_at_t?")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -3 "i_1")
                                                  (("1"
                                                    (case "i_1 = i")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -4 "k")
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (lemma
                                                       "fresh_assign_nth")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (inst -1 "i")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "fresh?"
                                                               -1)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "fresh_hp?"
                                                             -6)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (typepred "env")
                                            (("2"
                                              (inst
                                               -5
                                               "t"
                                               "env WITH [i := envi(i)]")
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (expand
                                                   "fresh_hp?"
                                                   -7)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "fresh?"
                                                       -8)
                                                      (("1"
                                                        (inst
                                                         -8
                                                         "env"
                                                         "envi(i)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "env_at_t?" 1)
                                                (("2"
                                                  (expand
                                                   "env_at_t?"
                                                   -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "i_1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "i_1 = i")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst -2 "k")
                                                          (("2"
                                                            (replace
                                                             -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "fresh_assign_nth")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "i")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "fresh?"
                                                                           -1)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "fresh_hp?"
                                                                       -6)
                                                                      (("2"
                                                                        (flatten)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma "fresh_fs_sol")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (expand "fresh_hp?" -4)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep*)
      (("3" (expand "semantic_rel")
        (("3" (expand "fresh_hp?" -1)
          (("3" (expand "fresh?" -1)
            (("3" (inst -1 "envi" "r")
              (("3" (assert)
                (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (expand "semantic_rel" 1)
          (("4" (expand "semantic_rel" -4)
            (("4" (skeep -4)
              (("4" (inst 1 "env WITH [ i := r ]")
                (("4" (inst -1 "i" "envi" "env" "r")
                  (("4" (assert)
                    (("4" (split 1)
                      (("1" (assert)
                        (("1" (expand "fresh_hp?" -2)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (inst -2 "i" "env" "envo" "r")
                        (("2" (assert)
                          (("2" (expand "fresh_hp?" -2)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (expand "semantic_rel" 1)
          (("5" (expand "semantic_rel" -4)
            (("5" (flatten)
              (("5" (inst -1 "i" "envi" "envo" "r")
                (("5" (inst -2 "i" "envi" "envo" "r")
                  (("5" (assert)
                    (("5" (expand "fresh_hp?" -1)
                      (("5" (flatten) (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (lemma "semantic_rel_star_bounded_star_con")
          (("6" (lemma "semantic_rel_star_bounded_star")
            (("6" (inst -1 "STAR1_var" "envi" "envo")
              (("6" (assert)
                (("6" (skeep -1)
                  (("6" (lemma "fresh_bstar_semantic_rel")
                    (("6"
                      (inst -1 "STAR1_var" "i" "i!1" "envi" "envo" "r")
                      (("6" (assert)
                        (("6" (split -1)
                          (("1"
                            (lemma
                             "semantic_rel_star_bounded_star_con")
                            (("1"
                              (inst -1 "STAR1_var"
                               "envi WITH [ i := r]"
                               "envo WITH [ i := r]" "i!1")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "fresh_hp?" -4)
                            (("2" (propax) nil nil)) nil)
                           ("3" (assert)
                            (("3" (skeep)
                              (("3"
                                (inst -4 "i" "env1" "env2" "r!1")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "fresh_hp?" -4)
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "semantic_rel")
        (("7" (expand "fresh_hp?" -1)
          (("7" (skeep)
            (("7" (inst -1 "i_1")
              (("7" (assert) (("7" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_star_bounded_star_con formula-decl nil
     bounded_star_semantics nil)
    (fresh_bstar_semantic_rel formula-decl nil fresh_props nil)
    (semantic_rel_star_bounded_star formula-decl nil
     bounded_star_semantics nil)
    (TRUE const-decl "bool" booleans nil)
    (fresh? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (fresh_fs_sol formula-decl nil fresh_props nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (fs skolem-const-decl "(solution_odes_u?(D, DIFF1_var, envi))"
     fresh_props nil)
    (i skolem-const-decl "nat" fresh_props nil)
    (r skolem-const-decl "real" fresh_props nil)
    (envi skolem-const-decl "Environment" fresh_props nil)
    (DIFF1_var skolem-const-decl "ODEs" fresh_props nil)
    (D skolem-const-decl "(dd?)" fresh_props nil)
    (env skolem-const-decl
     "(env_at_t?(DIFF1_var, fs, envi WITH [i := r], t))" fresh_props
     nil)
    (t skolem-const-decl "{t: (D) | t <= r!1}" fresh_props nil)
    (r!1 skolem-const-decl "(D)" fresh_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (fresh_assign_nth formula-decl nil hp_expr nil)
    (fresh_li? inductive-decl "bool" hp_expr nil)
    (ASSIGN1_var skolem-const-decl "Assigns" fresh_props nil)
    (i skolem-const-decl "nat" fresh_props nil)
    (fresh? const-decl "bool" hp_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (HP_induction formula-decl nil HP_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (fresh_hp? inductive-decl "bool" hp_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HP type-decl nil HP_adt nil))
   shostak))
 (fresh_be_allruns 0
  (fresh_be_allruns-1 nil 3867758706
   ("" (skeep)
    (("" (lemma "fresh_be_semantic_rel")
      (("" (expand "fresh?" 1)
        (("" (skeep)
          (("" (iff 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (expand "ALLRUNS")
                  (("1" (skeep)
                    (("1"
                      (inst -3 "hp" "i" "env WITH [ i := r]" "envo"
                       "env(i)")
                      (("1" (assert)
                        (("1" (expand "fresh? " -5)
                          (("1" (inst -1 "envo WITH [ i := env(i)]")
                            (("1" (assert)
                              (("1"
                                (inst -5 "envo" "env(i)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "env = env WITH [i := env(i)]")
                                    (("1"
                                      (hide 2 3)
                                      (("1"
                                        (hide -4)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (replace -1 -2 rl)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "ALLRUNS")
                  (("2" (skeep)
                    (("2" (inst -3 "hp" "i" "env" "envo" "r")
                      (("2" (assert)
                        (("2" (inst -1 "envo WITH [ i := r]")
                          (("2" (assert)
                            (("2" (expand "fresh?" -5)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fresh_be_semantic_rel formula-decl nil fresh_props nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil)
   shostak))
 (fresh_be_allruns_e 0
  (fresh_be_allruns_e-1 nil 3868613614
   ("" (skeep)
    (("" (expand "fresh?")
      (("" (skeep)
        (("" (iff 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "ALLRUNS_E")
                (("1" (flatten)
                  (("1" (split 1)
                    (("1" (skeep)
                      (("1" (lemma "fresh_be_semantic_rel")
                        (("1" (inst?)
                          (("1" (inst -1 "envo")
                            (("1" (assert)
                              (("1"
                                (inst 1 "envo WITH [ i := r]")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (skeep)
                        (("2" (lemma "fresh_be_semantic_rel")
                          (("2"
                            (inst -1 "hp" "i" "env WITH [ i := r]"
                             "envo" "env(i)")
                            (("2" (assert)
                              (("2"
                                (inst -4 "envo WITH [ i := env(i)]")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -4)
                                    (("1"
                                      (inst? -6)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case
                                         "env = env WITH [i := env(i)]")
                                        (("1"
                                          (replace -1 -2 rl)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "ALLRUNS_E")
                (("2" (flatten)
                  (("2" (split 1)
                    (("1" (skeep)
                      (("1" (inst 1 "envo WITH [ i := env(i) ]")
                        (("1" (assert)
                          (("1" (lemma "fresh_be_semantic_rel")
                            (("1"
                              (inst -1 "hp" "i" "env WITH [ i := r]"
                               "envo" "env(i)")
                              (("1"
                                (assert)
                                (("1"
                                  (case "env = env WITH [i := env(i)]")
                                  (("1"
                                    (replace -1 -2 rl)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (lemma "fresh_be_semantic_rel")
                        (("2" (inst -1 "hp" "i" "env" "envo" "r")
                          (("2" (assert)
                            (("2" (inst -4 "envo WITH [ i := r]")
                              (("2"
                                (assert)
                                (("2"
                                  (inst -6 "envo" "r")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (= const-decl "[T, T -> boolean]" equalities nil)
    (HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (fresh_be_semantic_rel formula-decl nil fresh_props nil)
    (ALLRUNS_E const-decl "bool" bool_expr nil))
   shostak))
 (fresh_be_someruns 0
  (fresh_be_someruns-1 nil 3868613615
   ("" (skeep)
    (("" (expand "fresh?" 1)
      (("" (skeep)
        (("" (iff 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "SOMERUNS")
                (("1" (lemma "fresh_be_semantic_rel")
                  (("1" (skeep)
                    (("1" (inst 1 "envo WITH [ i := r]")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (expand "fresh?" -5)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "SOMERUNS")
                (("2" (skeep)
                  (("2" (inst 1 "envo WITH [ i := env(i) ] ")
                    (("2" (assert)
                      (("2" (lemma "fresh_be_semantic_rel")
                        (("2"
                          (inst -1 "hp" "i" "env WITH [ i := r]"
                           "envo " "env(i)")
                          (("2" (assert)
                            (("2" (case "env = env WITH [i := env(i)]")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 -2 rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "fresh?" -6)
                                      (("1"
                                        (inst -6 "envo" "env(i)")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_be_semantic_rel formula-decl nil fresh_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (SOMERUNS const-decl "bool" bool_expr nil))
   shostak)))