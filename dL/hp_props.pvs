%% All properties in this file are proved using the semantic relation
%% Some of these properties could be easily proved using the dL deduction rules.

hp_props : THEORY
BEGIN

  IMPORTING bool_expr

  %% x := a
  assign1_prop : LEMMA
   FORALL (x:dLVar,a:RealExpr,envi,envo:Environment): 
      LET
        P0 : HP = ASSIGN((: x << a :))
      IN
      semantic_rel(P0)(envi)(envo) IFF
      envo = envi WITH [(dlvar_index(x)) := a(envi)]

  %% x := a, y := b
  assign_prop : LEMMA
    FORALL (x:dLVar,y:(different_var?(x)),a,b:RealExpr,envi,envo:Environment):
      LET
        P0 : HP = ASSIGN((: x << a, y << b :))
      IN
      semantic_rel(P0)(envi)(envo) IFF
      envo = envi WITH [(dlvar_index(x)) := a(envi), (dlvar_index(y)) := b(envi)]

  %% x := a, y := b <==> y := b, x := a
  assign_comm : LEMMA 
    FORALL (x:dLVar,y:(different_var?(x)),a,b:RealExpr,envi,envo:Environment):
      LET
        P0 : HP = ASSIGN((: x << a, y << b :)),
	P1 : HP = ASSIGN((: y << b, x << a :))
      IN
      semantic_rel(P0)(envi)(envo) IFF
      semantic_rel(P1)(envi)(envo) 

  %% x := a U y := b
  union_prop: LEMMA 
    FORALL (x,y:dLVar,a,b:RealExpr,envi,envo:Environment): 
      LET
	A1 : HP = ASSIGN((: x << a :)),
	A2 : HP = ASSIGN((: y << b :)),
	P0 : HP = UNION(A1,A2)
      IN
      semantic_rel(P0)(envi)(envo) IFF
      (envo = envi WITH [(dlvar_index(x)) := a(envi)] OR envo = envi WITH [(dlvar_index(y)) := b(envi)])

  %% x := a U x := a
  union_prop_xx: LEMMA 
    FORALL (x:dLVar,a:RealExpr,envi,envo:Environment): 
      LET
	A1 : HP = ASSIGN((: x << a :)),
	A2 : HP = ASSIGN((: x << a :)),
	P0 : HP = UNION(A1,A2)
      IN
      semantic_rel(P0)(envi)(envo) IFF
      envo = envi WITH [(dlvar_index(x)) := a(envi)]

  %% x := a U x := a <==> x := a
  union_id: LEMMA
    FORALL (x:dLVar,a:RealExpr,envi,envo:Environment): 
      LET
	A1 : HP = ASSIGN((: x << a :)),
	A2 : HP = ASSIGN((: x << a :)),
	P0 : HP = UNION(A1,A2)
      IN
      semantic_rel(P0)(envi)(envo) IFF
      semantic_rel(A1)(envi)(envo)

  %% x := a U y := b <==> y := b U x := a
  union_comm: LEMMA
    FORALL (x,y:dLVar,a,b:RealExpr,envi,envo:Environment): 
      LET
	A1 : HP = ASSIGN((: x << a :)),
	A2 : HP = ASSIGN((: y << b :)),
	P0 : HP = UNION(A1,A2),
	P1 : HP = UNION(A2,A1)
      IN
      semantic_rel(P0)(envi)(envo) IFF
      semantic_rel(P1)(envi)(envo)

  %% x := a; y := b
  seq_prop: LEMMA 
   FORALL (x,y:dLVar,a,b:RealExpr, envi,envo: Environment):
      LET
	A1 : HP = ASSIGN( (: x << a :)),
	A2 : HP = ASSIGN( (: y << b :)),
	P0 : HP = SEQ(A1,A2)
      IN
      semantic_rel(P0)(envi)(envo) IFF
      LET enva = envi WITH [(dlvar_index(x)) := a(envi)] IN
      envo = enva WITH [(dlvar_index(y)):= b(enva)]

  %% ? b
  test_prop : LEMMA
    FORALL (b:BoolExpr,envi,envo:Environment): 
      LET
        P0 : HP = TEST(b)
      IN
      semantic_rel(P0)(envi)(envo) IFF
      (b(envi) AND envo=envi)

  %% hp ; ? b
  %% test ensures any condition after any program!
  test_prop_ensures : LEMMA
    FORALL (hp:HP,b:BoolExpr,envi,envo:Environment):
      LET
        P0 : HP = SEQ(hp,TEST(b))
      IN
        semantic_rel(P0)(envi)(envo) IMPLIES
	b(envo)

  %% hp ; ? FALSE
  %% Due to vacuity, testing false at the end of any program satifies any condition!
  test_prop_vacuity : LEMMA
    FORALL (hp:HP,b:BoolExpr,envi,envo:Environment):
      LET
        P0 : HP = SEQ(hp,TEST(DLFALSE))
      IN
        semantic_rel(P0)(envi)(envo) IMPLIES
	b(envo)

  %% x' = c 
  diff_prop: LEMMA
   FORALL (x:dLVar,c:real,be:BoolExpr,envi,envo:Environment):
    LET
      P0 : HP = DIFF((: x << cnst(c) :),be)
    IN
    semantic_rel(P0)(envi)(envo) IFF
       EXISTS (t:nnreal) : FORALL(r:nnreal): r <= t IMPLIES
          LET env = envi WITH [(dlvar_index(x)) := c*r + envi(dlvar_index(x))] IN
	  be(env) AND
	  (r=0 IMPLIES env = envi) AND
	  (r=t IMPLIES env = envo)

  IMPORTING ints@closed_int_ops

  %% ( x:= x+1 )* (initial value is an integer)
  star_prop: LEMMA
    FORALL (x:dLVar,envi,envo: Environment):
      integer?(val(x)(envi)) IMPLIES
      LET
        P0 : HP = STAR( ASSIGN( (: x << val(x) + 1 :) ))
      IN
        semantic_rel(P0)(envi)(envo) IFF
	(val(x)(envo) >= val(x)(envi) AND
	 integer?(val(x)(envo)) AND
	 eq_env_but_at(envi,envo,dlvar_index(x)))

  IMPORTING bounded_star_semantics

  %% WHILE(x<k,x:=x+1) (initial value is an integer less or equal than k
  while_prop :LEMMA
    FORALL (x:dLVar, k:int, envi,envo: Environment):
      integer?(val(x)(envi)) AND
      val(x)(envi) <= k IMPLIES
      LET P0 = WHILE(val(x) < cnst(k),ASSIGN((: x << val(x)+1 :)))
      IN
        semantic_rel(P0)(envi)(envo) IFF
	  envo = envi WITH [(dlvar_index(x)) := k]

  %% ANY(x,P) 
  any_prop : LEMMA
    FORALL (x:dLVar,P:BoolExpr,envi,envo:Environment):
      LET
        P0 : HP = ANY(x,P)
      IN
      semantic_rel(P0)(envi)(envo) IFF
      (eq_env_but_at(envi,envo,dlvar_index(x)) AND
       P(envo))


END hp_props
