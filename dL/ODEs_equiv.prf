(ODEs_equiv
 (Re_TCC1 0
  (Re_TCC1-1 nil 3790433059 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_null formula-decl nil more_list_props structures))
   nil
   (Re subtype "list_adt[real].null"
    "matrices.VectorN(list_props[MapExpr].length(ODEs_equiv.odes))")))
 (Re_TCC2 0
  (Re_TCC2-1 nil 3790433059
   ("" (skeep)
    (("" (skeep) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil (Re subtype "ODEs_equiv.odes" "(list_adt[MapExpr].cons?)")))
 (Re_TCC3 0
  (Re_TCC3-1 nil 3790433059
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "cdr_is_MapExprInj") (("" (inst?) nil nil)) nil))
      nil))
    nil)
   ((ODEs type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil (Re subtype "list_adt[MapExpr].cdr(ODEs_equiv.odes)" "ODEs")))
 (Re_TCC4 0
  (Re_TCC4-1 nil 3790433059
   ("" (skeep)
    (("" (skeep)
      (("" (expand "length" 2 2) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (Re termination
    "ODEs_equiv.Re(list_adt[MapExpr].cdr(ODEs_equiv.odes))" "nil")))
 (Re_TCC5 0
  (Re_TCC5-1 nil 3790433059
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (expand "length" 2 1)
          (("" (assert)
            (("" (grind)
              (("" (expand "length" 2 2) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (Re subtype
    "list_adt[real].cons(ODEs_equiv.re(ODEs_equiv.env), ODEs_equiv.Re(list_adt[MapExpr].cdr(ODEs_equiv.odes))(ODEs_equiv.env))"
    "matrices.VectorN(list_props[MapExpr].length(ODEs_equiv.odes))")))
 (Re_TCC6 0
  (Re_TCC6-1 nil 3790433059 ("" (skeep) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil (Re subtype "ODEs_equiv.odes" "(list_adt[MapExpr].cons?)")))
 (Re_nth_TCC1 0
  (Re_nth_TCC1-1 nil 3790528906 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (Re_nth subtype "ODEs_equiv.k"
    "below[length[real](Re(odes)(env))]")))
 (Re_nth 0
  (Re_nth-1 nil 3790528934
   ("" (induct "odes")
    (("1" (skeep) (("1" (assert) nil nil)) nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (grind)
          (("2" (grind)
            (("2" (typepred "k")
              (("2" (expand "length" -1) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (lemma "cdr_is_MapExprInj")
          (("3" (inst -1 "cons(cons1_var,cons2_var)")
            (("3" (assert)
              (("3" (case "k=0")
                (("1" (replace -1)
                  (("1" (expand "nth")
                    (("1" (expand "Re" 1) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2)
                  (("2" (assert)
                    (("2" (expand "Re" 2)
                      (("2" (inst -2 "env" "k-1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (assert) (("4" (skeep) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ODEs type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Re def-decl "VectorN(length(odes))" ODEs_equiv nil))
   shostak))
 (env_vec_TCC1 0
  (env_vec_TCC1-1 nil 3790440226
   ("" (skeep)
    (("" (lemma "cdr_is_MapExprInj") (("" (inst?) nil nil)) nil)) nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (env_vec subtype "list_adt[MapExpr].cdr(ODEs_equiv.odes)" "ODEs")))
 (env_vec_TCC2 0
  (env_vec_TCC2-1 nil 3790440226
   ("" (skeep)
    (("" (expand "length" 2 2)
      (("" (lift-if 2)
        (("" (split 2)
          (("1" (flatten) (("1" (assert) (("1" (grind) nil nil)) nil))
            nil)
           ("2" (flatten) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (env_vec termination
    "ODEs_equiv.env_vec(list_adt[MapExpr].cdr(ODEs_equiv.odes))"
    "nil")))
 (env_vec_TCC3 0
  (env_vec_TCC3-1 nil 3790440226
   ("" (skeep) (("" (expand "length" 2) (("" (grind) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (env_vec subtype
    "list_adt[real].cons(ODEs_equiv.env(list_adt[MapExpr].car(ODEs_equiv.odes)`1), ODEs_equiv.env_vec(list_adt[MapExpr].cdr(ODEs_equiv.odes))(ODEs_equiv.env))"
    "matrices.VectorN(list_props[MapExpr].length(ODEs_equiv.odes))")))
 (env_vec_nth_TCC1 0
  (env_vec_nth_TCC1-1 nil 3790440586 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (env_vec_nth subtype "ODEs_equiv.i"
    "below[length[real](env_vec(odes)(env))]")))
 (env_vec_nth 0
  (env_vec_nth-1 nil 3790440608
   ("" (induct "odes")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (assert)
          (("3" (lemma "cdr_is_MapExprInj")
            (("3" (inst -1 "cons(cons1_var,cons2_var)")
              (("3" (assert)
                (("3" (skeep)
                  (("3" (case "i=0")
                    (("1" (replace -1)
                      (("1" (expand "nth" 1)
                        (("1" (assert)
                          (("1" (expand "env_vec" 1 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (inst -2 "env")
                        (("2" (inst -2 "i-1")
                          (("1" (expand "nth" 2)
                            (("1" (expand "env_vec" 2)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (typepred "i")
                            (("2" (expand "length" -1 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "i")
            (("4" (typepred "env_vec(odes)(env)")
              (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ODEs type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (VectorN type-eq-decl nil matrices matrices)
    (env_vec def-decl "VectorN(length(odes))" ODEs_equiv nil))
   shostak))
 (r2v_2_fs_TCC1 0
  (r2v_2_fs_TCC1-1 nil 3790435006 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (r2v_2_fs assuming "ODEs@r2v_def[(ODEs_equiv.d)].r2v_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(r2v_def.d)")))
 (r2v_2_fs_TCC2 0
  (r2v_2_fs_TCC2-1 nil 3790435006
   ("" (skeep) (("" (lemma "ci_connected") (("" (inst?) nil nil)) nil))
    nil)
   ((ci_connected formula-decl nil interval_def ODEs)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil
   (r2v_2_fs assuming "ODEs@r2v_analysis[(ODEs_equiv.d)].r2v_analysis"
    "connected: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].connected?")))
 (r2v_2_fs_TCC3 0
  (r2v_2_fs_TCC3-1 nil 3790521920
   ("" (skeep)
    (("" (lemma "ci_not_one_element") (("" (inst?) nil nil)) nil)) nil)
   ((ci_not_one_element formula-decl nil interval_def ODEs)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil
   (r2v_2_fs assuming "ODEs@r2v_analysis[(ODEs_equiv.d)].r2v_analysis"
    "not_one_element: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].not_one_element?")))
 (r2v_2_fs_TCC4 0
  (r2v_2_fs_TCC4-1 nil 3790521920 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def ODEs)
    (derivable? const-decl "bool" r2v_analysis ODEs)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def ODEs)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (r2v_2_fs subtype
    "r2v_def[(ODEs_equiv.d)].nth(ODEs_equiv.v, ODEs_equiv.i)"
    "{ff: [(ODEs_equiv.d) -> reals.real] | derivatives[(ODEs_equiv.d)].derivable?(ff)}")))
 (r2v_2_fs_TCC5 0
  (r2v_2_fs_TCC5-1 nil 3790521920 ("" (assuming-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (r2v_2_fs assuming
    "ODEs@r2v_diff_extension[(ODEs_equiv.d)].r2v_diff_extension"
    "closed_interval: ASSUMPTION interval_def.closed_interval?(r2v_diff_extension.d)")))
 (fs_2_r2v_TCC1 0
  (fs_2_r2v_TCC1-1 nil 3790590805 ("" (subtype-tcc) nil nil) nil nil
   (fs_2_r2v subtype "0" "naturalnumbers.below(ODEs_equiv.n)")))
 (fs_2_r2v_TCC2 0
  (fs_2_r2v_TCC2-1 nil 3790590805 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (fs_2_r2v subtype "(: ODEs_equiv.fs(0)(ODEs_equiv.r) :)"
    "matrices.VectorN(ODEs_equiv.n)")))
 (fs_2_r2v_TCC3 0
  (fs_2_r2v_TCC3-1 nil 3790590805 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (fs_2_r2v subtype
    "restrict[real, (ODEs_equiv.d), (list_adt[real].cons?)].restrict(LAMBDA (r: reals.real): (: ODEs_equiv.fs(0)(r) :))"
    "r2v_def[(ODEs_equiv.d)].r2v_n(ODEs_equiv.n)")))
 (fs_2_r2v_TCC4 0
  (fs_2_r2v_TCC4-1 nil 3790590805 ("" (subtype-tcc) nil nil) nil nil
   (fs_2_r2v subtype "0" "naturalnumbers.below(ODEs_equiv.n)")))
 (fs_2_r2v_TCC5 0
  (fs_2_r2v_TCC5-1 nil 3790590805 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (fs_2_r2v subtype "(number_fields.-)(ODEs_equiv.n, 1)" "posnat")))
 (fs_2_r2v_TCC6 0
  (fs_2_r2v_TCC6-1 nil 3790590805 ("" (subtype-tcc) nil nil) nil nil
   (fs_2_r2v subtype "(number_fields.+)(ODEs_equiv.i, 1)"
    "naturalnumbers.below(ODEs_equiv.n)")))
 (fs_2_r2v_TCC7 0
  (fs_2_r2v_TCC7-1 nil 3790590805 ("" (termination-tcc) nil nil) nil
   nil
   (fs_2_r2v termination
    "ODEs_equiv.fs_2_r2v((number_fields.-)(ODEs_equiv.n, 1), ODEs_equiv.d, LAMBDA (i: naturalnumbers.below((number_fields.-)(ODEs_equiv.n, 1))): LAMBDA (r: reals.real): ODEs_equiv.fs((number_fields.+)(i, 1))(r))"
    "nil")))
 (fs_2_r2v_TCC8 0
  (fs_2_r2v_TCC8-1 nil 3790590805
   ("" (skeep)
    (("" (assert)
      (("" (inst 2 "n-1") (("" (skeep) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (fs_2_r2v subtype
    "ODEs_equiv.fs_2_r2v((number_fields.-)(ODEs_equiv.n, 1), ODEs_equiv.d, LAMBDA (i: naturalnumbers.below((number_fields.-)(ODEs_equiv.n, 1))): LAMBDA (r: reals.real): ODEs_equiv.fs((number_fields.+)(i, 1))(r))"
    "r2v[(d)]")))
 (fs_2_r2v_TCC9 0
  (fs_2_r2v_TCC9-1 nil 3790590805
   ("" (skeep)
    (("" (skeep)
      ((""
        (typepred
         "(cons[d] (restrict[real, (d), real](fs(0)), v(n - 1, d, LAMBDA (i: below(n - 1)): LAMBDA (r: real): fs(i + 1)(r))) (x1))")
        (("1"
          (typepred
           "(cons[d] (restrict[real, (d), real](fs(0)), v(n - 1, d, LAMBDA (i: below(n - 1)): LAMBDA (r: real): fs(i + 1)(r))))")
          (("1" (expand "length" 2 1)
            (("1" (assert)
              (("1" (lift-if 2)
                (("1" (split 2)
                  (("1" (flatten)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "cons" 2 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def ODEs)
    (cons const-decl "r2v" r2v_def ODEs)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def ODEs)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (fs_2_r2v subtype
    "r2v_def[(ODEs_equiv.d)].cons(restrict[real, (ODEs_equiv.d), real].restrict(ODEs_equiv.fs(0)), ODEs_equiv.fs_2_r2v((number_fields.-)(ODEs_equiv.n, 1), ODEs_equiv.d, LAMBDA (i: naturalnumbers.below((number_fields.-)(ODEs_equiv.n, 1))): LAMBDA (r: reals.real): ODEs_equiv.fs((number_fields.+)(i, 1))(r)))"
    "r2v_def[(ODEs_equiv.d)].r2v_n(ODEs_equiv.n)")))
 (fs_2_f2v_nth_TCC1 0
  (fs_2_f2v_nth_TCC1-1 nil 3790591157 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" r2v_def ODEs))
   nil
   (fs_2_f2v_nth subtype "ODEs_equiv.i"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def[ODEs_equiv.d].length(ODEs_equiv.fs_2_r2v(ODEs_equiv.n, ODEs_equiv.d, ODEs_equiv.fs)))}")))
 (fs_2_f2v_nth 0
  (fs_2_f2v_nth-1 nil 3790591220
   ("" (induct "n")
    (("1" (skeep) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (case "j=0")
            (("1" (assert)
              (("1" (hide -2)
                (("1" (replace -1)
                  (("1" (expand "fs_2_r2v" 1 1)
                    (("1" (assert)
                      (("1" (decompose-equality 1)
                        (("1" (expand "nth" 1)
                          (("1" (expand "restrict" 1)
                            (("1" (assert)
                              (("1"
                                (expand "nth" 1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "i=0")
                (("1" (replace -1)
                  (("1" (expand "nth" 2)
                    (("1" (assert)
                      (("1" (decompose-equality 2)
                        (("1" (expand "restrict" 1)
                          (("1" (expand "fs_2_r2v" 1)
                            (("1" (expand "nth" 1 1)
                              (("1"
                                (expand "cons" 1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "restrict" 1 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (decompose-equality 3)
                  (("2" (expand "restrict" 1)
                    (("2" (expand "fs_2_r2v" 1 1)
                      (("2" (expand "nth" 1 1)
                        (("2" (expand "cons" 1 1)
                          (("2" (expand "nth" 1 1)
                            (("2"
                              (inst -1 "d"
                               "LAMBDA (i: below(j)): LAMBDA (r: real): fs(1 + i)(r)"
                               "i-1")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "restrict" -1)
                                  (("2"
                                    (decompose-equality -1)
                                    (("2"
                                      (inst -1 "x!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "nth" -1 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (assert)
            (("4" (typepred "i")
              (("4" (expand "length" 1 1) (("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons const-decl "r2v" r2v_def ODEs)
    (below type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (nth const-decl "[(d) -> real]" r2v_def ODEs)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def ODEs)
    (length const-decl "nat" r2v_def ODEs)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def ODEs)
    (fs_2_r2v def-decl "r2v_n[(d)](n)" ODEs_equiv nil))
   shostak))
 (fs_2_f2v_eq_TCC1 0
  (fs_2_f2v_eq_TCC1-1 nil 3852830725 ("" (subtype-tcc) nil nil) nil nil
   (fs_2_f2v_eq subtype "ODEs_equiv.r"
    "{b: reals.real | reals.<(0, b)}")))
 (fs_2_f2v_eq_TCC2 0
  (fs_2_f2v_eq_TCC4-1 nil 3852830725
   ("" (skeep)
    (("" (lemma "ci_nonempty")
      (("" (inst?)
        (("" (lemma "ci_ci") (("" (inst -1 "0" "r") nil nil)) nil))
        nil))
      nil))
    nil)
   ((ci_nonempty formula-decl nil interval_def ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (fs_2_f2v_eq assuming
    "ODEs@r2v_analysis[interval_def.closed_interval(0, ODEs_equiv.r)].r2v_analysis"
    "non_empty: ASSUMPTION sets[real].nonempty?(r2v_analysis.d)")))
 (fs_2_f2v_eq_TCC3 0
  (fs_2_f2v_eq_TCC3-1 nil 3852830867 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (connected? const-decl "bool" deriv_domain_def analysis))
   nil
   (fs_2_f2v_eq assuming
    "ODEs@r2v_analysis[interval_def.closed_interval(0, ODEs_equiv.r)].r2v_analysis"
    "connected: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].connected?")))
 (fs_2_f2v_eq_TCC4 0
  (fs_2_f2v_eq_TCC4-1 nil 3852830867
   ("" (skeep)
    (("" (lemma "ci_not_one_element")
      (("" (lemma "ci_ci")
        (("" (inst -1 "0" "r") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((ci_not_one_element formula-decl nil interval_def ODEs)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (ci_ci formula-decl nil interval_def ODEs))
   nil
   (fs_2_f2v_eq assuming
    "ODEs@r2v_analysis[interval_def.closed_interval(0, ODEs_equiv.r)].r2v_analysis"
    "not_one_element: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].not_one_element?")))
 (fs_2_f2v_eq_TCC5 0
  (fs_2_f2v_eq_TCC2-1 nil 3852830725
   ("" (skeep)
    (("" (lemma "ci_ci") (("" (inst -1 "0" "r") nil nil)) nil)) nil)
   ((ci_ci formula-decl nil interval_def ODEs)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (fs_2_f2v_eq subtype "interval_def.closed_interval(0, ODEs_equiv.r)"
    "(interval_def.closed_interval?)")))
 (fs_2_f2v_eq_TCC6 0
  (fs_2_f2v_eq_TCC3-1 nil 3852830725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (nth const-decl "[(d) -> real]" r2v_def ODEs)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" r2v_analysis ODEs)
    (length const-decl "nat" r2v_def ODEs)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (fs_2_f2v_eq subtype "ODEs_equiv.i"
    "naturalnumbers.below(r2v_def[interval_def.closed_interval(0, ODEs_equiv.r)].length(restrict[real, (interval_def.closed_interval(0, ODEs_equiv.r)), matrices.VectorN(ODEs_equiv.n)].restrict(ODEs_equiv.y)))")))
 (fs_2_f2v_eq 0
  (fs_2_f2v_eq-1 nil 3852830988
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (with-tccs (decompose-equality -1))
            (("1" (typepred "t")
              (("1" (inst -3 "t")
                (("1" (expand "r2v_2_fs" 1)
                  (("1" (expand "ext_d" 1)
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (typepred "d_b")
                            (("1" (assert)
                              (("1"
                                (expand "restrict" 1)
                                (("1"
                                  (inst-cp -5 "0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -5 "r")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "closed_interval" 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "ci_ci")
                              (("2" (inst -1 "0" "r") nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (typepred "d_b")
                                    (("1"
                                      (inst-cp -5 "r")
                                      (("1"
                                        (inst-cp -5 "0")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "closed_interval")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "ci_ci")
                                      (("2" (inst -1 "0" "r") nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "restrict" 2)
                                      (("2"
                                        (expand "nth" 2)
                                        (("2"
                                          (lemma "fs_2_f2v_nth")
                                          (("2"
                                            (lemma
                                             "list_extensionality")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst -2 "i")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (inst? -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "i")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "restrict"
                                                                     -)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (typepred
                                                                         "t")
                                                                        (("1"
                                                                          (typepred
                                                                           "d_b")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -5
                                                                             "0")
                                                                            (("1"
                                                                              (inst-cp
                                                                               -5
                                                                               "r")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -5
                                                                                     "t")
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -15)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "t")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "ci_nonempty")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "closed_interval(0,r)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "ci_nonempty")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "closed_interval(0,r)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (lemma
                                                                                         "ci_nonempty")
                                                                                        (("4"
                                                                                          (inst
                                                                                           -1
                                                                                           "closed_interval(0,r)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (lemma
                                                                                         "ci_nonempty")
                                                                                        (("5"
                                                                                          (inst
                                                                                           -1
                                                                                           "closed_interval(0,r)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "ci_ci")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "0"
                                                                               "r")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "closed_interval")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (decompose-equality 1)
          (("2" (lemma "list_extensionality")
            (("2" (inst?)
              (("2" (assert)
                (("2" (hide 2)
                  (("2" (skeep)
                    (("2" (inst -1 "n_1" _)
                      (("2" (inst -1 "x!1")
                        (("1" (lemma "fs_2_f2v_nth")
                          (("1"
                            (inst -1 "n" "closed_interval(0,r)" "fs"
                             "n_1")
                            (("1" (expand "restrict")
                              (("1"
                                (decompose-equality -1)
                                (("1"
                                  (inst -1 "x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth" -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "r2v_2_fs" -2)
                                          (("1"
                                            (expand "ext_d" -2)
                                            (("1"
                                              (lift-if -2)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (typepred "x!1")
                                                    (("1"
                                                      (typepred "d_b")
                                                      (("1"
                                                        (inst -5 "x!1")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma "ci_ci")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (typepred "d_b")
                                                    (("1"
                                                      (inst -5 "x!1")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "fs_2_f2v_nth")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "n"
                                                               "closed_interval(0,r)"
                                                               "fs"
                                                               "n_1")
                                                              (("1"
                                                                (decompose-equality
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (typepred
                                                                           "x!1")
                                                                          (("1"
                                                                            (typepred
                                                                             "d_b")
                                                                            (("1"
                                                                              (inst
                                                                               -5
                                                                               "x!1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replace
                                                                                   -8
                                                                                   -16)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -15
                                                                                     2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         2
                                                                                         2)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "ci_nonempty")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma "ci_ci")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "ci_nonempty")
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x!1")
                          (("2" (expand "closed_interval" -1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (r2v_2_fs const-decl "real" ODEs_equiv nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fs_2_f2v_nth formula-decl nil ODEs_equiv nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (ci_nonempty formula-decl nil interval_def ODEs)
    (list_extensionality formula-decl nil more_list_props structures)
    (nth const-decl "[(d) -> real]" r2v_def ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension ODEs)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext_d const-decl "{ff: [real -> real] |
   derivable?[real](ff) AND
    (FORALL (x: (d)):
       ff(x) = f(x) AND deriv[real](ff, x) = deriv[(d)](f, x))}"
     r2v_diff_extension ODEs)
    (real_times_real_is_real application-judgement "real" reals nil)
    (fs_2_r2v def-decl "r2v_n[(d)](n)" ODEs_equiv nil)
    (r2v_n type-eq-decl nil r2v_def ODEs)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def ODEs)
    (length const-decl "nat" r2v_def ODEs)
    (VectorN type-eq-decl nil matrices matrices)
    (restrict const-decl "R" restrict nil))
   shostak))
 (Odes_f_TCC1 0
  (Odes_f_TCC1-1 nil 3790435983 ("" (subtype-tcc) nil nil) nil nil
   (Odes_f subtype "ODEs_equiv.i" "below[length[real](v)]")))
 (cont_f?_TCC1 0
  (cont_f?_TCC1-1 nil 3790436494 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (cont_f? subtype "ODEs_equiv.r" "{b: reals.real | reals.<(0, b)}")))
 (cont_f?_TCC2 0
  (cont_f?_TCC2-1 nil 3790436494
   ("" (skeep)
    (("" (expand "closed_interval?" 3)
      (("" (inst 3 "0" "r")
        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (cont_f? subtype "interval_def.closed_interval(0, ODEs_equiv.r)"
    "(interval_def.closed_interval?)")))
 (cont_f?_TCC3 0
  (cont_f?_TCC3-1 nil 3790436494 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (cont_f? subtype "list_props[MapExpr].length(ODEs_equiv.odes)"
    "posnat")))
 (cont_f?_TCC4 0
  (cont_f?_TCC4-1 nil 3790436494 ("" (assuming-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (cont_f? assuming
    "ODEs@ODE_continuous_def[interval_def.closed_interval(0, ODEs_equiv.r)].ODE_continuous_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_continuous_def.d)")))
 (cont_f?_TCC5 0
  (cont_f?_TCC5-1 nil 3790436494 ("" (assuming-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (connected? const-decl "bool" deriv_domain_def analysis))
   nil
   (cont_f? assuming
    "ODEs@ODE_continuous_def[interval_def.closed_interval(0, ODEs_equiv.r)].ODE_continuous_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_continuous_def.d)].connected?")))
 (cont_f?_TCC6 0
  (cont_f?_TCC6-1 nil 3790436494
   ("" (skeep)
    (("" (lemma "ci_not_one_element")
      (("" (inst -1 "closed_interval(0,r)")
        (("1" (assert)
          (("1" (expand "closed_interval?" 1)
            (("1" (inst 1 "0" "r") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((ci_not_one_element formula-decl nil interval_def ODEs)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (cont_f? assuming
    "ODEs@ODE_continuous_def[interval_def.closed_interval(0, ODEs_equiv.r)].ODE_continuous_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_continuous_def.d)].not_one_element?")))
 (max_diff_TCC1 0
  (max_diff_TCC2-1 nil 3791651925 ("" (subtype-tcc) nil nil) nil nil
   (max_diff subtype "0" "naturalnumbers.below(ODEs_equiv.k)")))
 (max_diff_TCC2 0
  (max_diff_TCC2-1 nil 3791653364
   ("" (skeep)
    (("" (split 1)
      (("1" (skeep)
        (("1" (typepred "i")
          (("1" (case "NOT i=0")
            (("1" (assert) nil nil)
             ("2" (replace -1)
              (("2" (typepred "y1" "y2")
                (("2" (expand "const?")
                  (("2" (inst -1 "0")
                    (("2" (inst -2 "0")
                      (("2" (skeep)
                        (("2" (skeep)
                          (("2" (inst-cp -1 "0")
                            (("2" (inst-cp -3 "0")
                              (("2"
                                (inst-cp -1 "r")
                                (("2"
                                  (inst -4 "r")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (inst 1 "0") nil nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (const? const-decl "bool" ODEs_equiv nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (max_diff subtype
    "real_defs.abs((number_fields.-)(ODEs_equiv.y1(0)(0), ODEs_equiv.y2(0)(0)))"
    "{x: real_types.nnreal | booleans.AND(FORALL (i: naturalnumbers.below(ODEs_equiv.k), r: reals.real): reals.<=(real_defs.abs((number_fields.-)(ODEs_equiv.y1(i)(r), ODEs_equiv.y2(i)(r))), x), EXISTS (i: naturalnumbers.below(ODEs_equiv.k)): x = real_defs.abs((number_fields.-)(ODEs_equiv.y1(i)(0), ODEs_equiv.y2(i)(0))))}")))
 (max_diff_TCC3 0
  (max_diff_TCC1-1 nil 3791651925
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (max_diff subtype "0" "naturalnumbers.below(ODEs_equiv.k)")))
 (max_diff_TCC4 0
  (max_diff_TCC3-1 nil 3791651925 ("" (subtype-tcc) nil nil) nil nil
   (max_diff subtype "(number_fields.+)(ODEs_equiv.i, 1)"
    "naturalnumbers.below(ODEs_equiv.k)")))
 (max_diff_TCC5 0
  (max_diff_TCC4-1 nil 3791651925 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (const? const-decl "bool" ODEs_equiv nil))
   nil
   (max_diff subtype
    "(LAMBDA (i: naturalnumbers.below((number_fields.-)(ODEs_equiv.k, 1))): ODEs_equiv.y1((number_fields.+)(i, 1)))"
    "(ODEs_equiv.const?((number_fields.-)(ODEs_equiv.k, 1)))")))
 (max_diff_TCC6 0
  (max_diff_TCC5-1 nil 3791651925 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (const? const-decl "bool" ODEs_equiv nil))
   nil
   (max_diff subtype
    "(LAMBDA (i: naturalnumbers.below((number_fields.-)(ODEs_equiv.k, 1))): ODEs_equiv.y2((number_fields.+)(i, 1)))"
    "(ODEs_equiv.const?((number_fields.-)(ODEs_equiv.k, 1)))")))
 (max_diff_TCC7 0
  (max_diff_TCC6-1 nil 3791651925 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (const? const-decl "bool" ODEs_equiv nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (max_diff subtype "(number_fields.-)(ODEs_equiv.k, 1)" "posnat")))
 (max_diff_TCC8 0
  (max_diff_TCC7-1 nil 3791651925 ("" (termination-tcc) nil nil) nil
   nil
   (max_diff termination
    "ODEs_equiv.max_diff((number_fields.-)(ODEs_equiv.k, 1))" "nil")))
 (max_diff_TCC9 0
  (max_diff_TCC8-1 nil 3791651925
   ("" (skeep)
    (("" (split 2)
      (("1" (skeep)
        (("1" (typepred "i_1")
          (("1" (case "i_1=0")
            (("1" (replace -1)
              (("1" (typepred "y1" "y2")
                (("1" (expand "const?")
                  (("1" (inst -1 "0")
                    (("1" (inst -2 "0")
                      (("1" (skeep)
                        (("1" (skeep)
                          (("1" (inst-cp -1 "r")
                            (("1" (inst -1 "0")
                              (("1"
                                (inst-cp -3 "0")
                                (("1"
                                  (inst -3 "r")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (typepred
                 " v(k - 1) (LAMBDA (i: below(k - 1)): y1(1 + i), LAMBDA (i: below(k - 1)): y2(1 + i))")
                (("1" (inst -2 "i_1-1" "r") (("1" (assert) nil nil))
                  nil)
                 ("2" (hide 2 3)
                  (("2" (typepred "y2")
                    (("2" (hide -2 2)
                      (("2" (expand "const?")
                        (("2" (skeep)
                          (("2" (inst -1 "1+i_1!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2 3)
                  (("3" (typepred "y1")
                    (("3" (hide -2 2)
                      (("3" (expand "const?")
                        (("3" (skeep)
                          (("3" (inst -1 "1+i_1!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (case " max(abs(y1(0)(0) - y2(0)(0)), v(k - 1) (LAMBDA (i: below(k - 1)): y1(i + 1), LAMBDA (i: below(k - 1)): y2(i + 1))) = abs(y1(0)(0) - y2(0)(0)) ")
        (("1" (inst 1 "0") nil nil)
         ("2" (assert)
          (("2"
            (typepred
             "v(k - 1) (LAMBDA (i: below(k - 1)): y1(1 + i), LAMBDA (i: below(k - 1)): y2(1 + i))")
            (("2" (skeep -3)
              (("2" (inst 2 "1+i_1")
                (("2" (assert)
                  (("2" (expand "max" 2 1)
                    (("2" (assert)
                      (("2" (lift-if 2)
                        (("2" (split 2)
                          (("1" (flatten) nil nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "max" 3)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil)
         ("4" (hide 2)
          (("4" (typepred "y2")
            (("4" (expand "const?")
              (("4" (skeep) (("4" (inst -1 "1+i_1") nil nil)) nil))
              nil))
            nil))
          nil)
         ("5" (typepred "y1")
          (("5" (expand "const?")
            (("5" (hide 2 3)
              (("5" (skeep) (("5" (inst -1 "1+i_1") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (const? const-decl "bool" ODEs_equiv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (max_diff subtype
    "real_defs.max(real_defs.abs((number_fields.-)(ODEs_equiv.y1(0)(0), ODEs_equiv.y2(0)(0))), ODEs_equiv.max_diff((number_fields.-)(ODEs_equiv.k, 1))((LAMBDA (i: naturalnumbers.below((number_fields.-)(ODEs_equiv.k, 1))): ODEs_equiv.y1((number_fields.+)(i, 1))), (LAMBDA (i: naturalnumbers.below((number_fields.-)(ODEs_equiv.k, 1))): ODEs_equiv.y2((number_fields.+)(i, 1)))))"
    "{x: real_types.nnreal | booleans.AND(FORALL (i: naturalnumbers.below(ODEs_equiv.k), r: reals.real): reals.<=(real_defs.abs((number_fields.-)(ODEs_equiv.y1(i)(r), ODEs_equiv.y2(i)(r))), x), EXISTS (i: naturalnumbers.below(ODEs_equiv.k)): x = real_defs.abs((number_fields.-)(ODEs_equiv.y1(i)(0), ODEs_equiv.y2(i)(0))))}")))
 (max_diff_norm_inf_TCC1 0
  (max_diff_norm_inf_TCC1-1 nil 3791712338 ("" (subtype-tcc) nil nil)
   nil nil
   (max_diff_norm_inf subtype "ODEs_equiv.i"
    "below[length[real](y1)]")))
 (max_diff_norm_inf_TCC2 0
  (max_diff_norm_inf_TCC2-1 nil 3791712338
   ("" (skeep)
    (("" (expand "const?")
      (("" (skeep)
        (("" (inst 1 "nth(y1,i_1)") (("" (skeep) nil nil)) nil)) nil))
      nil))
    nil)
   ((const? const-decl "bool" ODEs_equiv nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (max_diff_norm_inf subtype
    "LAMBDA (i: naturalnumbers.below(ODEs_equiv.k)): LAMBDA (r: reals.real): list_props[real].nth(ODEs_equiv.y1, i)"
    "(ODEs_equiv.const?(ODEs_equiv.k))")))
 (max_diff_norm_inf_TCC3 0
  (max_diff_norm_inf_TCC3-1 nil 3791712338 ("" (subtype-tcc) nil nil)
   nil nil
   (max_diff_norm_inf subtype "ODEs_equiv.i"
    "below[length[real](y2)]")))
 (max_diff_norm_inf_TCC4 0
  (max_diff_norm_inf_TCC4-1 nil 3791712338
   ("" (skeep)
    (("" (expand "const?")
      (("" (skeep)
        (("" (inst 1 "nth(y2,i_1)") (("" (skeep) nil nil)) nil)) nil))
      nil))
    nil)
   ((const? const-decl "bool" ODEs_equiv nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (max_diff_norm_inf subtype
    "LAMBDA (i: naturalnumbers.below(ODEs_equiv.k)): LAMBDA (r: reals.real): list_props[real].nth(ODEs_equiv.y2, i)"
    "(ODEs_equiv.const?(ODEs_equiv.k))")))
 (max_diff_norm_inf_TCC5 0
  (max_diff_norm_inf_TCC6-1 nil 3791712338
   ("" (skeep)
    (("" (typepred "y1-y2" "y1" "y2") (("" (assert) nil nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   nil
   (max_diff_norm_inf subtype
    "(matrices.-)(ODEs_equiv.y1, ODEs_equiv.y2)"
    "(list_adt[real].cons?)")))
 (max_diff_norm_inf 0
  (max_diff_norm_inf-1 nil 3791712585
   ("" (induct "k")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (assert)
          (("1" (skeep)
            (("1" (hide -2)
              (("1" (expand "norm_inf" 1)
                (("1" (replace -1)
                  (("1" (expand "max_diff" 1)
                    (("1" (expand "nth" 1)
                      (("1" (expand "norm_inf" 1)
                        (("1" (expand "abs" 1 2)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "max" 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "-")
                                          (("1"
                                            (expand "sub" 1)
                                            (("1"
                                              (expand "scal")
                                              (("1"
                                                (expand "scal")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "add")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "y1"
                                                             "y2")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (typepred "y1-y2" "y1" "y2")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (expand "max_diff" 2)
              (("2" (expand "norm_inf" 2)
                (("2" (expand "norm_inf" 2)
                  (("2" (expand "abs" 2 2)
                    (("2" (lift-if)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "max" 1 2)
                              (("1"
                                (lift-if 1)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (typepred "y1-y2" "y1" "y2")
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "max" 2 2)
                            (("2" (lift-if 2)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (typepred "y1-y2" "y1" "y2")
                                    (("1"
                                      (hide -1 -3 -5)
                                      (("1"
                                        (expand "length" -4)
                                        (("1"
                                          (typepred
                                           "abs(cdr(y1 - y2))")
                                          (("1"
                                            (replace -4 -3)
                                            (("1"
                                              (replace -5 -3)
                                              (("1"
                                                (expand "max" -3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -3)
                                                    (("1"
                                                      (replace -3 -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case
                                       "abs(car(y1 - y2)) = abs(nth(y1, 0) - nth(y2, 0))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (case
                                             " max_diff(j) (LAMBDA (i_1: below(j)): LAMBDA (r: real): nth(y1, 1 + i_1), LAMBDA (i_1: below(j)): LAMBDA (r: real): nth(y2, 1 + i_1)) = max(abs(cdr(y1 - y2)))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (inst
                                                 -2
                                                 "cdr(y1)"
                                                 "cdr(y2)")
                                                (("1"
                                                  (expand
                                                   "norm_inf"
                                                   -2)
                                                  (("1"
                                                    (expand
                                                     "norm_inf"
                                                     -2)
                                                    (("1"
                                                      (lemma "cdr_sub")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "y1"
                                                         "y2")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "max_diff(j) (LAMBDA (i_1: below(j)): LAMBDA (r: real): nth(y1, 1 + i_1), LAMBDA (i_1: below(j)): LAMBDA (r: real): nth(y2, 1 + i_1)) = max_diff(j) (LAMBDA (i: below(j)): LAMBDA (r: real): nth(cdr(y1), i), LAMBDA (i: below(j)): LAMBDA (r: real): nth(cdr(y2), i))")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                (("3"
                                                                  (hide
                                                                   2)
                                                                  (("3"
                                                                    (expand
                                                                     "const?"
                                                                     1)
                                                                    (("3"
                                                                      (hide
                                                                       -)
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst
                                                                           1
                                                                           "nth(cdr(y2),i_1)")
                                                                          (("1"
                                                                            (skeep)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "i_1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "y2")
                                                                                (("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skeep
                                                                 1)
                                                                (("4"
                                                                  (typepred
                                                                   "i")
                                                                  (("4"
                                                                    (typepred
                                                                     "y2")
                                                                    (("4"
                                                                      (expand
                                                                       "length"
                                                                       -2)
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (expand
                                                                 "const?")
                                                                (("5"
                                                                  (skeep)
                                                                  (("5"
                                                                    (inst
                                                                     1
                                                                     "nth(cdr(y1),i_1)")
                                                                    (("1"
                                                                      (skeep)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "y1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep)
                                                                (("6"
                                                                  (typepred
                                                                   "y1")
                                                                  (("6"
                                                                    (expand
                                                                     "length"
                                                                     -2)
                                                                    (("6"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "y2")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -2)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  (("3"
                                                    (typepred "y1")
                                                    (("3"
                                                      (expand
                                                       "length"
                                                       -2)
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (hide 2 3)
                                                (("3"
                                                  (expand "const?" 1)
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst
                                                       1
                                                       "nth(y2,1+i)")
                                                      (("3"
                                                        (skeep)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide 2 3)
                                              (("4"
                                                (expand "const?" 1)
                                                (("4"
                                                  (skeep)
                                                  (("4"
                                                    (inst
                                                     1
                                                     "nth(y1,i+1)")
                                                    (("4"
                                                      (skeep)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand "nth" 1)
                                            (("2"
                                              (lemma "car_sub")
                                              (("2"
                                                (inst -1 "y1" "y2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "y1-y2" "y1" "y2") (("4" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (expand "const?" 1)
            (("5" (skeep)
              (("5" (inst 1 "nth(y2,i_1)") (("5" (skeep) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (skeep)
        (("6" (skeep)
          (("6" (expand "const?" 1)
            (("6" (skeep)
              (("6" (inst 1 "nth(y1,i_1)") (("6" (skeep) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr_sub formula-decl nil vector_arithmetic mv_analysis)
    (car_sub formula-decl nil vector_arithmetic mv_analysis)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (length_singleton formula-decl nil more_list_props structures)
    (max def-decl "real" norms mv_analysis)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (max_diff def-decl "{x: nnreal |
   (FORALL (i: below(k), r: real): abs(y1(i)(r) - y2(i)(r)) <= x) AND
    EXISTS (i: below(k)): x = abs(y1(i)(0) - y2(i)(0))}" ODEs_equiv
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (const? const-decl "bool" ODEs_equiv nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (cdr_TCC1 0
  (cdr_TCC1-1 nil 3791546637 ("" (subtype-tcc) nil nil) nil nil
   (cdr subtype "(number_fields.+)(ODEs_equiv.i, 1)"
        "naturalnumbers.below(ODEs_equiv.k)")))
 (cdr_TCC2 0
  (cdr_TCC2-1 nil 3791546637 ("" (subtype-tcc) nil nil) nil nil
   (cdr subtype
        "LAMBDA (i: naturalnumbers.below((number_fields.-)(ODEs_equiv.k, 1))): ODEs_equiv.f((number_fields.+)(i, 1))"
        "{ff: [naturalnumbers.below((number_fields.-)(ODEs_equiv.k, 1)) -> [reals.real -> reals.real]] | FORALL (i: naturalnumbers.below((number_fields.-)(ODEs_equiv.k, 1))): ff(i) = ODEs_equiv.f((number_fields.+)(1, i))}")))
 (cdr_const_TCC1 0
  (cdr_const_TCC1-1 nil 3791550831 ("" (subtype-tcc) nil nil)
   ((const? const-decl "bool" ODEs_equiv nil)) nil
   (cdr_const subtype "(number_fields.-)(ODEs_equiv.k, 1)" "nat")))
 (cdr_const 0
  (cdr_const-1 nil 3791550884
   ("" (skeep)
    (("" (typepred "cdr(k)(f)")
      (("" (expand "const?")
        (("" (skeep)
          (("" (inst -2 "i+1")
            (("" (skeep)
              (("" (inst 1 "c")
                (("" (skeep)
                  (("" (inst -2 "x")
                    (("" (inst -1 "i") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr const-decl "{ff: [below(k - 1) -> [real -> real]] |
   FORALL (i: below(k - 1)): ff(i) = f(i + 1)}" ODEs_equiv nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (const? const-decl "bool" ODEs_equiv nil))
   shostak))
 (Lip_ODEs?_TCC1 0
  (Lip_ODEs?_TCC1-1 nil 3794922437
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "dd?" -1)
        (("" (split -1)
          (("1" (skeep)
            (("1" (lemma "ci_ci")
              (("1" (assert)
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ci_ci formula-decl nil interval_def ODEs)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (Lip_ODEs? assuming
    "ODEs@r2v_continuous_extension[(ODEs_equiv.D)].r2v_continuous_extension"
    "closed_interval: ASSUMPTION interval_def.closed_interval?(r2v_continuous_extension.d)")))
 (Lip_ODEs?_TCC2 0
  (Lip_ODEs?_TCC2-1 nil 3794922437 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil
   (Lip_ODEs? subtype "r2v_continuous_extension[(ODEs_equiv.D)].d_b"
    "(list_adt[real].cons?)")))
 (Lip_ODEs?_TCC3 0
  (Lip_ODEs?_TCC3-1 nil 3794922437
   ("" (skeep)
    (("" (typepred "d_b[D]")
      (("1" (grind) nil nil)
       ("2" (lemma "Lip_ODEs?_TCC1")
        (("2" (inst?)
          (("2" (inst -1 "odes") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension ODEs)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (Lip_ODEs?_TCC1 assuming-tcc nil ODEs_equiv nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (Lip_ODEs? subtype
    "list_adt[real].cdr(r2v_continuous_extension[(ODEs_equiv.D)].d_b)"
    "(list_adt[real].cons?)")))
 (Lip_ODEs?_TCC4 0
  (Lip_ODEs?_TCC4-1 nil 3794922437
   ("" (skeep)
    (("" (typepred "d_b[D]")
      (("1" (typepred "D")
        (("1" (expand "dd?" -1)
          (("1" (split -1)
            (("1" (skeep)
              (("1" (replace -1)
                (("1" (inst -6 "0")
                  (("1" (flatten)
                    (("1" (expand "closed_interval")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (typepred "D")
        (("2" (expand "dd?" -1)
          (("2" (split -1)
            (("1" (skeep)
              (("1" (lemma "ci_ci")
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension ODEs)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (ci_ci formula-decl nil interval_def ODEs)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (Lip_ODEs? subtype
    "list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension[(ODEs_equiv.D)].d_b))"
    "nnreal")))
 (Lip_DDL_ODEs 0
  (Lip_DDL_ODEs-1 nil 3791654477
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "Lip?")
          (("1" (expand "Lip_ODEs?" -1)
            (("1" (assert)
              (("1" (flatten)
                (("1" (split -1)
                  (("1" (lemma "Lip_entry_equiv[closed_interval(0,r)]")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "Lip_entry?" 1)
                          (("1" (skeep)
                            (("1" (inst -1 "i")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "L")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -1 "t")
                                      (("1"
                                        (inst
                                         -1
                                         "LAMBDA(i:below(length(odes))): (LAMBDA(r:real): nth(y1,i))"
                                         "LAMBDA(i:below(length(odes))): (LAMBDA(r:real): nth(y2,i))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "Odes_f" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "Re_nth")
                                                (("1"
                                                  (inst-cp
                                                   -1
                                                   "odes"
                                                   "env_at_t(odes, LAMBDA (i: below(length(odes))): LAMBDA (r: real): nth(y1, i), envi) (t)"
                                                   "i")
                                                  (("1"
                                                    (replace -2 1)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "odes"
                                                         "env_at_t(odes, LAMBDA (i: below(length(odes))): LAMBDA (r: real): nth(y2, i), envi) (t)"
                                                         "i")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (case
                                                             " max_diff(length(odes)) (LAMBDA (i: below(length(odes))): (LAMBDA (r: real): nth(y1, i)), LAMBDA (i: below(length(odes))): (LAMBDA (r: real): nth(y2, i))) = norm_inf(length(odes))(y1 - y2)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (lemma
                                                                   "max_diff_norm_inf")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "length(odes)"
                                                                     "y1"
                                                                     "y2")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide -)
                                                              (("3"
                                                                (hide
                                                                 2)
                                                                (("3"
                                                                  (expand
                                                                   "const?"
                                                                   1)
                                                                  (("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (inst
                                                                       1
                                                                       "nth(y2,i_1)")
                                                                      (("3"
                                                                        (skeep)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide -)
                                                              (("4"
                                                                (hide
                                                                 2
                                                                 3
                                                                 4)
                                                                (("4"
                                                                  (expand
                                                                   "const?"
                                                                   1)
                                                                  (("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (inst
                                                                       1
                                                                       "nth(y1, i_1)")
                                                                      (("4"
                                                                        (skeep)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3 4)
                                          (("2"
                                            (expand "const?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst 1 "nth(y2,i_1)")
                                                (("2" (skeep) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2 3 4)
                                          (("3"
                                            (expand "const?")
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (inst 1 "nth(y1,i_1)")
                                                (("3" (skeep) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2 3)
                                          (("2"
                                            (typepred "t")
                                            (("2"
                                              (expand
                                               "closed_interval"
                                               -1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (lemma "ci_not_one_element")
                        (("2" (inst -1 "closed_interval(0,r)") nil
                          nil))
                        nil))
                      nil)
                     ("3" (hide -1)
                      (("3" (lemma "ci_connected")
                        (("3" (inst -1 "closed_interval(0,r)") nil
                          nil))
                        nil))
                      nil)
                     ("4" (hide -1)
                      (("4" (lemma "ci_nonempty")
                        (("4" (inst -1 "closed_interval(0,r)") nil
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "Lip?")
          (("2" (expand "Lip_ODEs?")
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (expand "Lip_d?")
                    (("2" (skeep)
                      (("2" (inst -1 "norm_inf(length(odes))")
                        (("2" (skeep)
                          (("2" (inst 1 "L")
                            (("2" (skeep)
                              (("2"
                                (skeep)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "max_diff_norm_inf")
                                    (("2"
                                      (inst -1 "length(odes)" _ _)
                                      (("2"
                                        (inst
                                         -1
                                         "fs_2_r2v(length(odes),closed_interval(0,r),y1)(0)"
                                         _)
                                        (("1"
                                          (inst
                                           -1
                                           "fs_2_r2v(length(odes),closed_interval(0,r),y2)(0)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -2 "t" _ _)
                                              (("1"
                                                (inst
                                                 -2
                                                 "fs_2_r2v(length(odes),closed_interval(0,r),y1)(0)"
                                                 "fs_2_r2v(length(odes),closed_interval(0,r),y2)(0)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 -2 rl)
                                                    (("1"
                                                      (case
                                                       "NOT y1 = LAMBDA (i: below(length(odes))): LAMBDA (r_1: real): nth(fs_2_r2v(length(odes), closed_interval(0, r), y1) (0), i)")
                                                      (("1"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (lemma
                                                               "fs_2_f2v_nth")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "length(odes)"
                                                                 "closed_interval(0,r)"
                                                                 "y1"
                                                                 "x!1")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "0")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (typepred
                                                                             "y1")
                                                                            (("1"
                                                                              (expand
                                                                               "const?")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "0")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         -1
                                                         -3
                                                         rl)
                                                        (("2"
                                                          (case
                                                           "NOT y2 = LAMBDA (i: below(length(odes))): LAMBDA (r_1: real): nth(fs_2_r2v(length(odes), closed_interval(0, r), y2) (0), i)")
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "fs_2_f2v_nth")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "length(odes)"
                                                                       "closed_interval(0,r)"
                                                                       "y2"
                                                                       "x!1")
                                                                      (("1"
                                                                        (expand
                                                                         "restrict")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "y2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "const?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "x!2")
                                                                                          (("1"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "ci_nonempty")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "ci_ci")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "0"
                                                                                       "r")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "ci_ci")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "0"
                                                                       "r")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "closed_interval"
                                                                     1)
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (lemma
                                                                     "ci_ci")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (lemma
                                                                     "ci_ci")
                                                                    (("3"
                                                                      (inst?)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           "closed_interval"
                                                                           1)
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1
                                                             -4
                                                             rl)
                                                            (("2"
                                                              (expand
                                                               "Odes_f")
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -4
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -2
                                                                   -4
                                                                   rl)
                                                                  (("2"
                                                                    (lemma
                                                                     "Re_nth")
                                                                    (("2"
                                                                      (lemma
                                                                       "norm_inf_nth_ineq")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "(Re(odes)(env_at_t(odes, y1, envi)(t)) - Re(odes)(env_at_t(odes, y2, envi)(t)))"
                                                                         "k")
                                                                        (("1"
                                                                          (hide
                                                                           -5)
                                                                          (("1"
                                                                            (inst-cp
                                                                             -2
                                                                             "odes"
                                                                             "env_at_t(odes, y1, envi)(t)"
                                                                             "k")
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "odes"
                                                                               "env_at_t(odes, y2, envi)(t)"
                                                                               "k")
                                                                              (("1"
                                                                                (case
                                                                                 "nth((Re(odes)(env_at_t(odes, y1, envi)(t)) - Re(odes)(env_at_t(odes, y2, envi)(t))), k) = nth(Re(odes)(env_at_t(odes, y1, envi)(t)),k) - nth(Re(odes)(env_at_t(odes, y2, envi)(t)), k)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       -2)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -4
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "norm_inf"
                                                                                           -7)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "-"
                                                                                       1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nth_sum")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "sub"
                                                                                           1)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "Re(odes)(env_at_t(odes, y1, envi)(t))"
                                                                                             " scal(-1, Re(odes)(env_at_t(odes, y2, envi)(t)))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "k")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "+"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nth_dist")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "Re(odes)(env_at_t(odes, y2, envi)(t))"
                                                                                                         "-1"
                                                                                                         "k")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "*"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "Re(odes)(env_at_t(odes, y2, envi)(t))")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "scal(-1, Re(odes)(env_at_t(odes, y2, envi)(t)))")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (typepred
                                                                                                 "(env_at_t(odes, y1, envi)(t))")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -2
                                                                             -3
                                                                             -4)
                                                                            (("2"
                                                                              (typepred
                                                                               "k")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "(Re(odes)(env_at_t(odes, y1, envi)(t)) - Re(odes)(env_at_t(odes, y2, envi)(t)))"
                                                                                   "Re(odes)(env_at_t(odes, y1, envi)(t))"
                                                                                   "Re(odes)(env_at_t(odes, y2, envi)(t))")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -)
                                                (("2"
                                                  (typepred "t")
                                                  (("2"
                                                    (expand
                                                     "closed_interval"
                                                     1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "ci_ci")
                                            (("2" (inst?) nil nil))
                                            nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (expand
                                               "closed_interval"
                                               1)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "ci_ci")
                                          (("2" (inst?) nil nil))
                                          nil)
                                         ("3"
                                          (expand "closed_interval" 1)
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Lip? const-decl "bool" ODEs_equiv nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ci_nonempty formula-decl nil interval_def ODEs)
    (ci_connected formula-decl nil interval_def ODEs)
    (ci_not_one_element formula-decl nil interval_def ODEs)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def ODEs)
    (Odes_f const-decl "VectorN(length(odes))" ODEs_equiv nil)
    (Lip_entry? const-decl "bool" ODE_Lipschitz_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_diff_norm_inf formula-decl nil ODEs_equiv nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max_diff def-decl "{x: nnreal |
   (FORALL (i: below(k), r: real): abs(y1(i)(r) - y2(i)(r)) <= x) AND
    EXISTS (i: below(k)): x = abs(y1(i)(0) - y2(i)(0))}" ODEs_equiv
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Re_nth formula-decl nil ODEs_equiv nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (const? const-decl "bool" ODEs_equiv nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (Lip_entry_equiv formula-decl nil ODE_Lipschitz_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (fs_2_f2v_nth formula-decl nil ODEs_equiv nil)
    (nth const-decl "[(d) -> real]" r2v_def ODEs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (length const-decl "nat" r2v_def ODEs)
    (r2v type-eq-decl nil r2v_def ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (norm_inf_nth_ineq formula-decl nil norms mv_analysis)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (Re def-decl "VectorN(length(odes))" ODEs_equiv nil)
    (r2v_n type-eq-decl nil r2v_def ODEs)
    (fs_2_r2v def-decl "r2v_n[(d)](n)" ODEs_equiv nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def ODEs)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (cont_DDL_ODEs 0
  (cont_DDL_ODEs-1 nil 3791546395
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "cont_ODEs?")
          (("1" (expand "cont_f?")
            (("1" (assert)
              (("1" (flatten)
                (("1" (lemma "cont_entry_v[closed_interval(0,r)]")
                  (("1" (expand "cont_d?" 3)
                    (("1" (skeep)
                      (("1"
                        (inst -1
                         "LAMBDA(x:(closed_interval(0,r))): Odes_f(closed_interval(0, r), odes, envi)(x, y1)")
                        (("1" (assert)
                          (("1" (expand "contD?")
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 "p")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "contp?")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -1 "n1" "n2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "n2")
                                                (("1"
                                                  (expand "length" 1 1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split 1)
                          (("1" (inst 1 "length(odes)")
                            (("1" (skeep) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (expand "continuous?" 1)
                            (("2" (hide 2 3 4)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "Odes_f")
                                  (("2"
                                    (lemma "Re_nth")
                                    (("2"
                                      (expand "continuous?" 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "cont_ODEs?")
                                          (("2"
                                            (expand "continuous?" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -2 "x0")
                                                (("1"
                                                  (typepred "x0")
                                                  (("1"
                                                    (inst -3 "i")
                                                    (("1"
                                                      (typepred "y1")
                                                      (("1"
                                                        (inst
                                                         -5
                                                         "epsilon"
                                                         _)
                                                        (("1"
                                                          (inst
                                                           -5
                                                           "LAMBDA(i:below(length(odes))): (LAMBDA(x:real): nth[real](y1,i))")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "del")
                                                              (("1"
                                                                (skeep
                                                                 1)
                                                                (("1"
                                                                  (inst
                                                                   -6
                                                                   "x_1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "odes"
                                                                         "env_at_t(odes, LAMBDA (i: below(length(odes))): LAMBDA (r: real): IF i = 0 THEN car(y1) ELSE nth(cdr(y1), i - 1) ENDIF, envi) (x_1)"
                                                                         "i")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -4
                                                                             1)
                                                                            (("1"
                                                                              (reveal
                                                                               -)
                                                                              (("1"
                                                                                (hide
                                                                                 -2
                                                                                 -3
                                                                                 -4
                                                                                 -5
                                                                                 -6
                                                                                 -7)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "odes"
                                                                                   " (env_at_t(odes, LAMBDA (i: below(length(odes))): LAMBDA (r: real): IF i = 0 THEN car(y1) ELSE nth(cdr(y1), i - 1) ENDIF, envi) (x0))"
                                                                                   "i")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -7
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -7
                                                                                           4)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i!1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "y1")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (hide
                                                                             -)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "y1"
                                                                                   "i!1")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2
                                                                                     -3
                                                                                     rl)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       -3)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "x_1")
                                                                      (("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "closed_interval"
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "const?"
                                                               1)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "nth(y1,i_1)")
                                                                  (("2"
                                                                    (skeep)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (hide -)
                                                        (("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (typepred "x0")
                                                    (("2"
                                                      (expand
                                                       "closed_interval"
                                                       -1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert) (("3" (grind) nil nil)) nil))
                          nil)
                         ("3" (skeep)
                          (("3" (assert)
                            (("3" (lemma "ci_ci")
                              (("3" (inst -1 "0" "r") nil nil)) nil))
                            nil))
                          nil)
                         ("4" (skeep) (("4" (assert) nil nil)) nil)
                         ("5" (typepred "r") (("5" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "ci_not_one_element")
                    (("2" (hide -2 2 3 4)
                      (("2" (inst -1 "closed_interval(0,r)")
                        (("1" (lemma "ci_ci")
                          (("1" (inst -1 "0" "r") nil nil)) nil)
                         ("2" (assert)
                          (("2" (typepred "r")
                            (("2" (assert)
                              (("2"
                                (reveal +)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "ci_connected")
                    (("3" (hide -2 2 4)
                      (("3" (inst -1 "closed_interval(0,r)")
                        (("1" (lemma "ci_ci")
                          (("1" (inst -1 "0" "r") nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma "ci_nonempty")
                    (("4" (inst -1 "closed_interval(0,r)") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "cont_f?")
          (("2" (expand "cont_ODEs?")
            (("2" (skeep)
              (("2" (expand "cont_ODEs?")
                (("2" (case "length(odes)=0")
                  (("1" (skeep 1)
                    (("1" (typepred "k") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (assert)
                    (("2" (case "r=0")
                      (("1" (skeep)
                        (("1" (skeep)
                          (("1" (inst 2 "1")
                            (("1" (skeep)
                              (("1"
                                (typepred "t1" "t")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "NOT t1=t")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (skeep)
                          (("2" (skeep)
                            (("2"
                              (lemma
                               "cont_v_entry[closed_interval(0,r)]")
                              (("1"
                                (expand "cont_d?" -2)
                                (("1"
                                  (typepred "y")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -3
                                       "fs_2_r2v(length(odes), closed_interval(0,r), y)(0)")
                                      (("1"
                                        (inst
                                         -2
                                         "Lambda(x:(closed_interval(0,r))): Odes_f(closed_interval(0, r), odes, envi) (x, fs_2_r2v(length(odes), closed_interval(0, r), y)(0))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (hide -2 -3)
                                              (("1"
                                                (expand
                                                 "continuous?"
                                                 -1)
                                                (("1"
                                                  (inst -1 "k")
                                                  (("1"
                                                    (expand
                                                     "continuous?"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "continuous?"
                                                       -1)
                                                      (("1"
                                                        (inst -1 "t")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "eps")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               3
                                                               "delta")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "t1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "Odes_f")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "Re_nth")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -2
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -2
                                                                               3)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "odes"
                                                                                 "env_at_t(odes, LAMBDA (i: below(length(odes))): LAMBDA (r_1: real): nth(fs_2_r2v(length(odes), closed_interval(0, r), y) (0), i), envi) (t1)"
                                                                                 "k")
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   -3)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "odes"
                                                                                     "env_at_t(odes, LAMBDA (i: below(length(odes))): LAMBDA (r_1: real): nth(fs_2_r2v(length(odes), closed_interval(0, r), y) (0), i), envi) (t)"
                                                                                     "k")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "fs_2_f2v_nth")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2
                                                                                             -3)
                                                                                            (("1"
                                                                                              (case
                                                                                               "y = (LAMBDA (i: below(length(odes))): LAMBDA (r_1: real): nth(fs_2_r2v(length(odes), closed_interval(0, r), y) (0), i))")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "fs_2_f2v_nth")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "length(odes)"
                                                                                                         "closed_interval(0,r)"
                                                                                                         "y"
                                                                                                         "x!1")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "restrict")
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "0")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   -1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "y")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "const?"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "x!1")
                                                                                                                          (("1"
                                                                                                                            (skeep)
                                                                                                                            (("1"
                                                                                                                              (inst-cp
                                                                                                                               -1
                                                                                                                               "x!2")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "0")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "ci_nonempty")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "closed_interval(0,r)")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "ci_ci")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "0"
                                                                                                           "r")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (lemma
                                                                                                       "ci_ci")
                                                                                                      (("3"
                                                                                                        (inst?)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             -2
                                                                                                             -3)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "closed_interval"
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (skeep)
                                                                                                    (("3"
                                                                                                      (hide
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "ci_ci")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (skeep)
                                                                                                    (("4"
                                                                                                      (expand
                                                                                                       "closed_interval"
                                                                                                       1)
                                                                                                      (("4"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skeep)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (skeep)
                                                                                                (("4"
                                                                                                  (lemma
                                                                                                   "ci_ci")
                                                                                                  (("4"
                                                                                                    (hide
                                                                                                     -2
                                                                                                     -3)
                                                                                                    (("4"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("5"
                                                                                                (assert)
                                                                                                (("5"
                                                                                                  (skeep)
                                                                                                  (("5"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("5"
                                                                                                      (expand
                                                                                                       "closed_interval"
                                                                                                       1)
                                                                                                      (("5"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (lemma
                                                                                         "ci_ci")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (hide
                                                                                             -2
                                                                                             -3)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "0"
                                                                                               "r")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (skeep)
                                                                                        (("4"
                                                                                          (expand
                                                                                           "closed_interval"
                                                                                           1)
                                                                                          (("4"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (hide
                                                                                     -)
                                                                                    (("3"
                                                                                      (lemma
                                                                                       "ci_ci")
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (assert)
                                                                                  (("4"
                                                                                    (skeep)
                                                                                    (("4"
                                                                                      (hide
                                                                                       -)
                                                                                      (("4"
                                                                                        (expand
                                                                                         "closed_interval"
                                                                                         1)
                                                                                        (("4"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "closed_interval"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "closed_interval"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "Odes_f")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3 4)
                                              (("2"
                                                (expand "contD?")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -2 "p")
                                                    (("2"
                                                      (expand "contp?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "n1"
                                                           "n2")
                                                          (("2"
                                                            (typepred
                                                             "n2")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "Odes_f")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3 4)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (inst 1 "length(odes)")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2 3 4)
                                          (("3"
                                            (hide -1 -2)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (lemma "ci_ci")
                                                (("3" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (assert)
                                          (("4"
                                            (skeep)
                                            (("4"
                                              (lemma "ci_ci")
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (expand
                                                     "closed_interval"
                                                     1)
                                                    (("4"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "ci_ci")
                                        (("2" (inst?) nil nil))
                                        nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (expand "closed_interval" 1)
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "ci_not_one_element")
                                (("2"
                                  (inst -1 "closed_interval(0,r)")
                                  nil
                                  nil))
                                nil)
                               ("3"
                                (lemma "ci_connected")
                                (("3"
                                  (inst -1 "closed_interval(0,r)")
                                  nil
                                  nil))
                                nil)
                               ("4"
                                (lemma "ci_nonempty")
                                (("4"
                                  (inst -1 "closed_interval(0,r)")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (cont_entry_v formula-decl nil r2v_analysis ODEs)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (ci_ci formula-decl nil interval_def ODEs)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (const? const-decl "bool" ODEs_equiv nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (nth const-decl "[(d) -> real]" r2v_def ODEs)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Re_nth formula-decl nil ODEs_equiv nil)
    (Re def-decl "VectorN(length(odes))" ODEs_equiv nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms mv_analysis)
    (length const-decl "nat" r2v_def ODEs)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (length def-decl "nat" list_props nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Odes_f const-decl "VectorN(length(odes))" ODEs_equiv nil)
    (r2v type-eq-decl nil r2v_def ODEs)
    (continuous? const-decl "bool" r2v_analysis ODEs)
    (cons? const-decl "bool" r2v_def ODEs)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cont_d? const-decl "bool" ODE_continuous_def ODEs)
    (ci_not_one_element formula-decl nil interval_def ODEs)
    (ci_connected formula-decl nil interval_def ODEs)
    (ci_nonempty formula-decl nil interval_def ODEs)
    (cont_f? const-decl "bool" ODEs_equiv nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cont_v_entry formula-decl nil r2v_analysis ODEs)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (r2v_n type-eq-decl nil r2v_def ODEs)
    (fs_2_r2v def-decl "r2v_n[(d)](n)" ODEs_equiv nil)
    (fs_2_f2v_nth formula-decl nil ODEs_equiv nil)
    (restrict const-decl "R" restrict nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (diff_sol_Lip_TCC1 0
  (diff_sol_Lip_TCC1-1 nil 3793029607 ("" (subtype-tcc) nil nil)
   ((closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (Odes_f const-decl "VectorN(length(odes))" ODEs_equiv nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (cont_d? const-decl "bool" ODE_continuous_def ODEs)
    (cont_f? const-decl "bool" ODEs_equiv nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def ODEs)
    (Lip? const-decl "bool" ODEs_equiv nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (diff_sol_Lip subtype "ODEs_equiv.r"
    "{b: reals.real | reals.<(0, b)}")))
 (diff_sol_Lip_TCC2 0
  (diff_sol_Lip_TCC2-1 nil 3793029607
   ("" (skeep)
    (("" (expand "dd?" 1)
      (("" (flatten) (("" (inst 1 "r") nil nil)) nil)) nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_sol_Lip subtype
    "interval_def.closed_interval(0, ODEs_equiv.r)" "(hp_expr.dd?)")))
 (diff_sol_Lip 0
  (diff_sol_Lip-2 nil 3790598227
   ("" (skeep)
    (("" (expand "cont_f?")
      (("" (expand "Lip?" -2)
        (("" (assert)
          (("" (case "length(odes)=0")
            (("1" (assert)
              (("1" (hide -2 -3)
                (("1"
                  (inst 1
                   "LAMBDA(i:below(length(odes))): LAMBDA(r:real): 1")
                  (("1" (expand "solution_odes_u?" 1 1)
                    (("1" (assert)
                      (("1" (split 1)
                        (("1" (expand "solution_odes?" 1)
                          (("1" (split 1)
                            (("1" (expand "derivable_odes?" 1)
                              (("1" (skeep 1) nil nil)) nil)
                             ("2" (expand "env_at_t?" 1)
                              (("2" (skeep) nil nil)) nil)
                             ("3" (skeep)
                              (("3"
                                (expand "sol_at_t?" 1)
                                (("3" (skeep) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep) (("2" (skeep) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "derivable_odes?" 1)
                    (("2" (skeep) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "r=0")
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (lemma "unique_solution_restrict")
                    (("2" (lemma "ci_ci")
                      (("2" (lemma "ci_deriv_domain")
                        (("2" (lemma "ci_connected")
                          (("2" (lemma "ci_not_one_element")
                            (("2" (inst -4 "0" "r")
                              (("2"
                                (inst -3 "closed_interval(0,r)")
                                (("2"
                                  (inst -2 "closed_interval(0,r)")
                                  (("2"
                                    (inst -1 "closed_interval(0,r)")
                                    (("2"
                                      (case
                                       "car(d_b[(closed_interval(0,r))]) = 0")
                                      (("1"
                                        (case
                                         "car(cdr(d_b[(closed_interval(0,r))])) = r")
                                        (("1"
                                          (inst
                                           -7
                                           "0"
                                           "r"
                                           "length(odes)"
                                           "(Odes_f(closed_interval(0, r), odes, envi))"
                                           "env_vec(odes)(envi)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep -7)
                                              (("1"
                                                (typepred "y")
                                                (("1"
                                                  (name
                                                   "ody"
                                                   "r2v_2_fs(closed_interval(0,r),y)")
                                                  (("1"
                                                    (case
                                                     "NOT dd?(closed_interval(0,r))")
                                                    (("1"
                                                      (expand "dd?" 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst 1 "r")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "ci_nonempty")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "closed_interval(0,r)")
                                                        (("2"
                                                          (case
                                                           "NOT FORALL (x: nat): x < length[closed_interval(0, r)](y) IFF x < length[MapExpr](odes)")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (typepred
                                                               "odes")
                                                              (("1"
                                                                (typepred
                                                                 "y")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "NOT( car(d_b[(closed_interval(0,r))]) = 0 AND car(cdr(d_b[(closed_interval(0,r))])) = r)")
                                                            (("1"
                                                              (typepred
                                                               "d_b[(closed_interval(0, r))]")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (reveal
                                                                 -)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -14
                                                                     "r")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "ivt_s_unique?"
                                                                         -15)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "derivable_odes?(closed_interval(0, r), length(odes))(ody)")
                                                                              (("1"
                                                                                (inst
                                                                                 3
                                                                                 "ody")
                                                                                (("1"
                                                                                  (expand
                                                                                   "solution_odes_u?"
                                                                                   3)
                                                                                  (("1"
                                                                                    (split
                                                                                     3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "solution_odes?"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "env_at_t?"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "ody"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "r2v_2_fs"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "ext_d"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -15
                                                                                                       -17)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "ivt_s?"
                                                                                                         -15)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "list_extensionality")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "y(0)"
                                                                                                               "env_vec(odes)(envi)")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "k")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "nth"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -2
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "env_vec_nth")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sol_at_t?"
                                                                                             1
                                                                                             1)
                                                                                            (("3"
                                                                                              (skeep)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "restrict"
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (case
                                                                                                   "NOT (LAMBDA (s: (closed_interval(0, r))): ody(k)(s)) = nth(y,k)")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "ody"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -15
                                                                                                       -17)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "r2v_2_fs"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (decompose-equality
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ext_d"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "closed_interval"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "derivable?"
                                                                                                             -8)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -8
                                                                                                               "k")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -18
                                                                                                       -16)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "ivt_s?"
                                                                                                         -16)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "od_sol?"
                                                                                                             -16)
                                                                                                            (("2"
                                                                                                              (decompose-equality
                                                                                                               -16)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "t")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "od_fx"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "Odes_f"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "list_extensionality")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "Re(odes) (env_at_t(odes, LAMBDA (i: below(length(odes))): LAMBDA (r: real): nth(y(t), i), envi) (t))"
                                                                                                                         "deriv(y)(t)")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "k")
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "deriv_nth[(closed_interval(0, r))]")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "y"
                                                                                                                                       "k")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "Re_nth")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "odes"
                                                                                                                                             "env"
                                                                                                                                             "k")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "env = env_at_t(odes, LAMBDA (i: below(length(odes))): LAMBDA (r: real): nth(y(t), i), envi) (t)")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     -4
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2
                                                                                                                                                       1
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         -5
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -5
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -5
                                                                                                                                                             1
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -5
                                                                                                                                                               1
                                                                                                                                                               lr)
                                                                                                                                                              (("1"
                                                                                                                                                                (decompose-equality
                                                                                                                                                                 -3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -1
                                                                                                                                                                   "t")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "nth"
                                                                                                                                                                     -1
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   -2
                                                                                                                                                   -3)
                                                                                                                                                  (("2"
                                                                                                                                                    (hide
                                                                                                                                                     2
                                                                                                                                                     3
                                                                                                                                                     4)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "env_at_t(odes, LAMBDA (i: below(length(odes))): LAMBDA (r: real): nth(y(t), i), envi) (t)")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -2
                                                                                                                                                         "env")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide
                                                                                                                                                           -4)
                                                                                                                                                          (("2"
                                                                                                                                                            (hide
                                                                                                                                                             -3)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "env")
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 -2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "env_at_t?")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (split
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skeep)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -2
                                                                                                                                                                           "k!1")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "ody"
                                                                                                                                                                               -2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "r2v_2_fs"
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -2
                                                                                                                                                                                   1
                                                                                                                                                                                   rl)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "ext_d"
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (typepred
                                                                                                                                                                                         "t")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "closed_interval"
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (flatten)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "nth"
                                                                                                                                                                                                   1
                                                                                                                                                                                                   2)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("3"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1
                                                                                                                                 lr)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "(LAMBDA (t: (closed_interval(0, r))): y(t)) = y")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (decompose-equality
                                                                                                                                       1)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "t")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "closed_interval"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (case
                                                                                                                 "(LAMBDA (t: (closed_interval(0, r))): y(t)) = y")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (decompose-equality
                                                                                                                   1)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "length(y(0))")
                                                                                                                (("3"
                                                                                                                  (skeep)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (skeep)
                                                                                                    (("4"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -17)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "S")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "dd?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (skeep
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "ci_ci")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "0"
                                                                                                     "b")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "ci_nonempty")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "S")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "ci_not_one_element")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "S")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "ci_connected")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "S")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "ci_deriv_domain")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "S")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "S")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "ivt_s_unique?"
                                                                                                                               -24)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -25)
                                                                                                                                (("1"
                                                                                                                                  (skeep
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "ci_ci")
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "b>r")
                                                                                                                                      (("1"
                                                                                                                                        (decompose-equality
                                                                                                                                         -9)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -10
                                                                                                                                           "b")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "b")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "closed_interval"
                                                                                                                                                 -)
                                                                                                                                                (("1"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "ci_deriv_domain")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "closed_interval(0,b)")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "ci_connected")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "closed_interval(0,b)")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "ci_not_one_element")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "closed_interval(0,b)")
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "derivable?(fs_2_r2v(length(odes),closed_interval(0,b),ff))")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -28
                                                                                                                                                         "b")
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -29
                                                                                                                                                             "fs_2_r2v(length(odes),closed_interval(0,b),ff)")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -29)
                                                                                                                                                                (("1"
                                                                                                                                                                  (decompose-equality
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "t")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "list_extensionality")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "y(t)"
                                                                                                                                                                         "fs_2_r2v(length(odes), closed_interval(0, b), ff)(t)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -2
                                                                                                                                                                                   "i")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "t")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "ody"
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "r2v_2_fs"
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "ext_d"
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (typepred
                                                                                                                                                                                                 "t")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -16
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "closed_interval"
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "nth"
                                                                                                                                                                                                             2
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -4
                                                                                                                                                                                                               2)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 " fs_2_f2v_nth")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "length(odes)"
                                                                                                                                                                                                                   "closed_interval(0,b)"
                                                                                                                                                                                                                   "ff"
                                                                                                                                                                                                                   "i")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (decompose-equality
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                       "t")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "nth"
                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                           2)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "restrict"
                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "closed_interval")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -28
                                                                                                                                                                   -29
                                                                                                                                                                   -30)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "ivt_s?"
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "solution_odes?"
                                                                                                                                                                       -13)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "od_sol?"
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (decompose-equality
                                                                                                                                                                               1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "od_fx"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "Odes_f"
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "sol_at_t?"
                                                                                                                                                                                     -15)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (name
                                                                                                                                                                                       "envv"
                                                                                                                                                                                       "env_at_t(odes, LAMBDA (i: below(length(odes))): LAMBDA (r: real): nth(fs_2_r2v(length(odes), closed_interval(0, b), ff) (x!1), i), envi)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -16
                                                                                                                                                                                           "x!1"
                                                                                                                                                                                           "envv(x!1)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "list_extensionality")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst?)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (split
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (typepred
                                                                                                                                                                                                         "(Re(odes)(envv(x!1)))")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -2)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (typepred
                                                                                                                                                                                                             "deriv[closed_interval(0, b)] (fs_2_r2v(length[MapExpr](odes), closed_interval(0, b), ff))")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "length"
                                                                                                                                                                                                               -2
                                                                                                                                                                                                               1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "length"
                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                 3)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (skeep
                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (inst-cp
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     "x!1")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                       "choose[real](closed_interval(0, b))")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (skeep)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "deriv_nth[closed_interval(0,b)]")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -1
                                                                                                                                                                                                             "n")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (decompose-equality
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                 "x!1")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "nth"
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                       " fs_2_f2v_nth")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                         "length(odes)"
                                                                                                                                                                                                                         "closed_interval(0,b)"
                                                                                                                                                                                                                         "ff"
                                                                                                                                                                                                                         "n")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                           1)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                             -18
                                                                                                                                                                                                                             "n")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                                               "Re_nth")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                     -19
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     rl)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                         "deriv_subtype_dd[(ODEs_equiv.S),(closed_interval(0,b))]")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                           "restrict"
                                                                                                                                                                                                                                           1)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                                             "LAMBDA (s: (S)): ff(n)(s)")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (split
                                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (decompose-equality
                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                                                     "x!1")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "restrict"
                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "derivable?"
                                                                                                                                                                                                                                                       -8)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                                         -8
                                                                                                                                                                                                                                                         "n")
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                                                           " fs_2_f2v_nth")
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                                                             -6)
                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                               "derivable?"
                                                                                                                                                                                                                                                               -9)
                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                                 "derivable?"
                                                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                                                                     -9
                                                                                                                                                                                                                                                                     "x")
                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                                                       -10
                                                                                                                                                                                                                                                                       -11
                                                                                                                                                                                                                                                                       -12
                                                                                                                                                                                                                                                                       -13
                                                                                                                                                                                                                                                                       -14
                                                                                                                                                                                                                                                                       -15
                                                                                                                                                                                                                                                                       -16
                                                                                                                                                                                                                                                                       -17
                                                                                                                                                                                                                                                                       -18
                                                                                                                                                                                                                                                                       -19
                                                                                                                                                                                                                                                                       -20
                                                                                                                                                                                                                                                                       -21
                                                                                                                                                                                                                                                                       -22
                                                                                                                                                                                                                                                                       -23
                                                                                                                                                                                                                                                                       -24
                                                                                                                                                                                                                                                                       -25
                                                                                                                                                                                                                                                                       -26
                                                                                                                                                                                                                                                                       -27
                                                                                                                                                                                                                                                                       -28
                                                                                                                                                                                                                                                                       -29
                                                                                                                                                                                                                                                                       -30
                                                                                                                                                                                                                                                                       -31
                                                                                                                                                                                                                                                                       -32
                                                                                                                                                                                                                                                                       -33
                                                                                                                                                                                                                                                                       -34
                                                                                                                                                                                                                                                                       -35)
                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                                                         -2
                                                                                                                                                                                                                                                                         -3
                                                                                                                                                                                                                                                                         -4
                                                                                                                                                                                                                                                                         -5
                                                                                                                                                                                                                                                                         -6
                                                                                                                                                                                                                                                                         -7
                                                                                                                                                                                                                                                                         -8)
                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                           "derivable?")
                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                                                             "restrict")
                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                               "convergent?")
                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                (skeep)
                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                                                                   "l")
                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                     "convergence")
                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                       "convergence")
                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                          (split
                                                                                                                                                                                                                                                                                           1)
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                                                                             "adh")
                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                              (skeep)
                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                                                                                 "e!1")
                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                                                                                     "x2")
                                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                                                                                                                       "x2")
                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                                         "A")
                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                                                                            (skeep)
                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                              (inst
                                                                                                                                                                                                                                                                                               -2
                                                                                                                                                                                                                                                                                               "epsilon")
                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                (skeep)
                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                                                                                   "delta")
                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                    (skeep)
                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                                                                                       -4
                                                                                                                                                                                                                                                                                                       "x2")
                                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                                                           "NQ")
                                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                                            (propax)
                                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                                                                                        (typepred
                                                                                                                                                                                                                                                                                                         "x2")
                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                                                           "A")
                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                                                     2
                                                                                                                                                                                                                                                     3
                                                                                                                                                                                                                                                     4
                                                                                                                                                                                                                                                     5
                                                                                                                                                                                                                                                     6)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                                                       -2
                                                                                                                                                                                                                                                       -3
                                                                                                                                                                                                                                                       -4
                                                                                                                                                                                                                                                       -6
                                                                                                                                                                                                                                                       -7
                                                                                                                                                                                                                                                       -8
                                                                                                                                                                                                                                                       -9
                                                                                                                                                                                                                                                       -10
                                                                                                                                                                                                                                                       -11
                                                                                                                                                                                                                                                       -12
                                                                                                                                                                                                                                                       -13
                                                                                                                                                                                                                                                       -14
                                                                                                                                                                                                                                                       -15
                                                                                                                                                                                                                                                       -16
                                                                                                                                                                                                                                                       -17
                                                                                                                                                                                                                                                       -18
                                                                                                                                                                                                                                                       -19
                                                                                                                                                                                                                                                       -20
                                                                                                                                                                                                                                                       -21
                                                                                                                                                                                                                                                       -22
                                                                                                                                                                                                                                                       -23
                                                                                                                                                                                                                                                       -24
                                                                                                                                                                                                                                                       -25
                                                                                                                                                                                                                                                       -26
                                                                                                                                                                                                                                                       -27
                                                                                                                                                                                                                                                       -28
                                                                                                                                                                                                                                                       -29
                                                                                                                                                                                                                                                       30
                                                                                                                                                                                                                                                       -31
                                                                                                                                                                                                                                                       -32
                                                                                                                                                                                                                                                       -33)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                           "derivable?")
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                                                             "n")
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                                                                               " fs_2_f2v_nth")
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                     "restrict")
                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                         "derivable?")
                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                          (skeep)
                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                                                                             "x")
                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                               "derivable?")
                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                                                 "convergent?")
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                                                                     "l")
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                       "convergence")
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                         "convergence")
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (split)
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                                                                             "adh")
                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                (skeep)
                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                                                                                   "e!1")
                                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                                    (skeep)
                                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                                                                                       1
                                                                                                                                                                                                                                                                                                       "x2")
                                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                                                                                        (typepred
                                                                                                                                                                                                                                                                                                         "x2")
                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                                                           "A")
                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                                                                            (skeep)
                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                              (inst
                                                                                                                                                                                                                                                                                               -2
                                                                                                                                                                                                                                                                                               "epsilon")
                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                (skeep)
                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                                                                                   "delta")
                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                    (skeep)
                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                                                                                       -4
                                                                                                                                                                                                                                                                                                       "x2")
                                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                                                           "NQ")
                                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                                            (propax)
                                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                                                                                        (typepred
                                                                                                                                                                                                                                                                                                         "x2")
                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                                                           "A")
                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                                 "length"
                                                                                                                                                                                                                                                                 1
                                                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (hide
                                                                                                                                                                                                               -)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "length"
                                                                                                                                                                                                                   1
                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (typepred
                                                                                                                                                                                               "envv(x!1)")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "env_at_t?"
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     -2)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (split
                                                                                                                                                                                                       1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (skeep)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "env_at_t?"
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (flatten)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "i!1")
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (skeep)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "env_at_t?"
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (flatten)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -2
                                                                                                                                                                                                               "k")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 rl)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                   " fs_2_f2v_nth")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (inst?)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                       "k")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (decompose-equality
                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                           "x!1")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "nth"
                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                               -1
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "restrict"
                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (skeep)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "deriv[closed_interval(0, b)] (fs_2_r2v(length[MapExpr](odes), closed_interval(0, b), ff))")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (skeep
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "length"
                                                                                                                                                                                         -2
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "length"
                                                                                                                                                                                           -2
                                                                                                                                                                                           3)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst-cp
                                                                                                                                                                                             -1
                                                                                                                                                                                             "x_1")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -1
                                                                                                                                                                                               "choose[real](closed_interval(0, b))")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("3"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (typepred
                                                                                                                                                                                   "x")
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "closed_interval"
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("3"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "closed_interval"
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("3"
                                                                                                                                                                                            (propax)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "env_at_t?"
                                                                                                                                                                             -14)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "list_extensionality")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -1
                                                                                                                                                                                 " fs_2_r2v(length(odes), closed_interval(0, b), ff)(0)"
                                                                                                                                                                                 "env_vec(odes)(envi)")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (skeep)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             " fs_2_f2v_nth")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -1
                                                                                                                                                                                               "length(odes)"
                                                                                                                                                                                               "closed_interval(0,b)"
                                                                                                                                                                                               "ff"
                                                                                                                                                                                               "n")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (decompose-equality
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   "0")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "nth"
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "restrict"
                                                                                                                                                                                                         1)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           -15
                                                                                                                                                                                                           "n")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -15
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                               "env_vec_nth")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide
                                                                                                                                                         -27
                                                                                                                                                         -28
                                                                                                                                                         -29)
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -19
                                                                                                                                                           -13
                                                                                                                                                           rl)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "solution_odes?"
                                                                                                                                                             -12)
                                                                                                                                                            (("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 -13
                                                                                                                                                                 -14)
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -13)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "derivable_odes?"
                                                                                                                                                                     -12)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "derivable?"
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (skeep)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -12
                                                                                                                                                                           "i!1")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             " fs_2_f2v_nth")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "length(odes)"
                                                                                                                                                                               "closed_interval(0, b)"
                                                                                                                                                                               "ff"
                                                                                                                                                                               "i!1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "restrict")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -14
                                                                                                                                                                                       -15
                                                                                                                                                                                       -16
                                                                                                                                                                                       -17
                                                                                                                                                                                       -18
                                                                                                                                                                                       -19
                                                                                                                                                                                       -20
                                                                                                                                                                                       -21
                                                                                                                                                                                       -22
                                                                                                                                                                                       -23
                                                                                                                                                                                       -24
                                                                                                                                                                                       -25
                                                                                                                                                                                       -26)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "derivable?")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (skeep)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -13
                                                                                                                                                                                             "x")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "derivable?")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "convergent?")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst
                                                                                                                                                                                                     1
                                                                                                                                                                                                     "l")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "convergence")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "convergence")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (flatten)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (split
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "adh")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (skeep)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -13
                                                                                                                                                                                                                   "e!1")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (skeep)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                       1
                                                                                                                                                                                                                       "x2")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "A")
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (typepred
                                                                                                                                                                                                                           "x2")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "A")
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (skeep)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                 -14
                                                                                                                                                                                                                 "epsilon")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                     1
                                                                                                                                                                                                                     "delta")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (skeep)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                         -16
                                                                                                                                                                                                                         "x2")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "NQ")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (typepred
                                                                                                                                                                                                                           "x2")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "A")
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               -)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "i!1")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "length"
                                                                                                                                                                                   -1
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "hp"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "r+1")
                                                                                                  (("2"
                                                                                                    (decompose-equality
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "r+1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "closed_interval"
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -15
                                                                                 -16
                                                                                 -17
                                                                                 -18)
                                                                                (("2"
                                                                                  (replace
                                                                                   -6
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "derivable_odes?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "restrict"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "r2v_2_fs"
                                                                                           1)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT (LAMBDA (s: (closed_interval(0, r))): ext_d[closed_interval(0, r)](nth(y, k))(s)) = nth(y,k)")
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ext_d"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "closed_interval")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "derivable?"
                                                                                                 -7)
                                                                                                (("2"
                                                                                                  (skeep
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -7
                                                                                                     "k")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "derivable?"
                                                                                                 -8)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -8
                                                                                                   "k")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (hide
                                                                                               2)
                                                                                              (("4"
                                                                                                (skeep
                                                                                                 1)
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "derivable?"
                                                                                                   -7)
                                                                                                  (("4"
                                                                                                    (inst
                                                                                                     -7
                                                                                                     "k")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("5"
                                                                                              (skeep)
                                                                                              (("5"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1)
                                                                                                (("5"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (typepred
                                             "d_b[(closed_interval(0, r))]")
                                            (("2"
                                              (inst -5 "r")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "closed_interval"
                                                     -)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (typepred
                                             "d_b[(closed_interval(0, r))]")
                                            (("3"
                                              (expand "length" -2)
                                              (("3"
                                                (expand "length" -2)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (typepred
                                           "d_b[(closed_interval(0, r))]")
                                          (("2"
                                            (inst -5 "0")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "closed_interval"
                                                 -)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred
                                         "d_b[(closed_interval(0, r))]")
                                        (("1"
                                          (expand "length" -)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil)
                                       ("4" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cont_f? const-decl "bool" ODEs_equiv nil)
    (ci_ci formula-decl nil interval_def ODEs)
    (ci_connected formula-decl nil interval_def ODEs)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension ODEs)
    (env_vec def-decl "VectorN(length(odes))" ODEs_equiv nil)
    (Odes_f const-decl "VectorN(length(odes))" ODEs_equiv nil)
    (cont_d? const-decl "bool" ODE_continuous_def ODEs)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def ODEs)
    (od_f type-eq-decl nil ODE_def ODEs)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length const-decl "nat" r2v_def ODEs)
    (r2v_2_fs const-decl "real" ODEs_equiv nil)
    (ci_nonempty formula-decl nil interval_def ODEs)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fs_2_r2v def-decl "r2v_n[(d)](n)" ODEs_equiv nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (choose const-decl "(p)" sets nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (fs_2_f2v_nth formula-decl nil ODEs_equiv nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (hp const-decl "bool" interval_def ODEs)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     ODEs)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def ODEs)
    (Re_nth formula-decl nil ODEs_equiv nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_nth formula-decl nil r2v_analysis ODEs)
    (Re def-decl "VectorN(length(odes))" ODEs_equiv nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (restrict const-decl "R" restrict nil)
    (ext_d const-decl "{ff: [real -> real] |
   derivable?[real](ff) AND
    (FORALL (x: (d)):
       ff(x) = f(x) AND deriv[real](ff, x) = deriv[(d)](f, x))}"
     r2v_diff_extension ODEs)
    (nth const-decl "[(d) -> real]" r2v_def ODEs)
    (env_vec_nth formula-decl nil ODEs_equiv nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (ivt_s_unique? const-decl "bool" ODE_def ODEs)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (r2v_n type-eq-decl nil r2v_def ODEs)
    (derivable? const-decl "bool" r2v_analysis ODEs)
    (r2v type-eq-decl nil r2v_def ODEs)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ci_not_one_element formula-decl nil interval_def ODEs)
    (ci_deriv_domain formula-decl nil interval_def ODEs)
    (unique_solution_restrict formula-decl nil
     ODE_solution_existence_uniqueness ODEs)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (dd? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (Lip? const-decl "bool" ODEs_equiv nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil)
  (diff_sol_Lip-1 nil 3790437382
   ("" (skeep)
    (("" (expand "cont_f?")
      (("" (expand "Lip?" -2)
        (("" (assert)
          (("" (case "length(odes)=0")
            (("1" (assert)
              (("1" (hide -2 -3)
                (("1"
                  (inst 1
                   "LAMBDA(i:below(length(odes))): LAMBDA(r:real): 1")
                  (("1" (expand "diff_sol_uniq?" 1 1)
                    (("1" (assert)
                      (("1" (split 1)
                        (("1" (expand "solution_odes?" 1)
                          (("1" (split 1)
                            (("1" (expand "derivable_odes?" 1)
                              (("1" (skeep 1) nil nil)) nil)
                             ("2" (expand "env_at_t?" 1)
                              (("2" (skeep) nil nil)) nil)
                             ("3" (skeep)
                              (("3"
                                (skeep)
                                (("3"
                                  (expand "sol_at_t?" 1)
                                  (("3" (skeep) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep) (("2" (skeep) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "derivable_odes?" 1)
                    (("2" (skeep) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "r=0")
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (lemma "unique_solution")
                    (("2"
                      (inst -1 "closed_interval(0,r)" "length(odes)"
                       "(Odes_f(closed_interval(0, r), odes, envi))"
                       "env_vec(odes)(envi)")
                      (("2" (skeep)
                        (("2"
                          (inst 3 "r2v_2_fs(closed_interval(0,r),y)")
                          (("1" (expand "diff_sol_uniq?" 3)
                            (("1" (split 3)
                              (("1"
                                (expand "solution_odes?" 1 1)
                                (("1"
                                  (expand "ivt_s_unique?" -1)
                                  (("1"
                                    (hide -2 -3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (expand "derivable_odes?" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "y")
                                              (("1"
                                                (expand
                                                 "derivable?"
                                                 -1)
                                                (("1"
                                                  (expand
                                                   "r2v_2_fs"
                                                   1
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "NOT (LAMBDA (r_1: real) -> real:
                   ext_d[closed_interval(0, r)](nth(y, k))(r_1)) =  ext_d[closed_interval(0, r)](nth(y, k))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (expand
                                                               "closed_interval?"
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "0"
                                                                 "r")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -)
                                                            (("2"
                                                              (lemma
                                                               "ci_nonempty")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (expand
                                                                   "closed_interval?"
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "0"
                                                                     "r")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (inst -1 "k")
                                                        nil
                                                        nil)
                                                       ("4"
                                                        (assert)
                                                        (("4"
                                                          (typepred
                                                           "k")
                                                          (("4"
                                                            (expand
                                                             "length"
                                                             1
                                                             1)
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (hide -)
                                                        (("5"
                                                          (expand
                                                           "closed_interval?"
                                                           1)
                                                          (("5"
                                                            (inst
                                                             1
                                                             "0"
                                                             "r")
                                                            (("5"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (lemma
                                                         "ci_nonempty")
                                                        (("6"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "env_at_t?" 1 1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "r2v_2_fs" 1 1)
                                              (("2"
                                                (expand "ext_d" 1)
                                                (("2"
                                                  (typepred
                                                   "d_b[(closed_interval(0,r))]")
                                                  (("1"
                                                    (hide -6)
                                                    (("1"
                                                      (hide -6)
                                                      (("1"
                                                        (inst-cp
                                                         -5
                                                         "0")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (split
                                                                 -6)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (reveal
                                                                       -)
                                                                      (("1"
                                                                        (hide
                                                                         -4
                                                                         -5
                                                                         -6)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "ivt_s?"
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (lemma
                                                                                 "env_vec_nth")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "odes"
                                                                                   "envi"
                                                                                   "k")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "list_extensionality")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       " y(car(d_b[closed_interval(0, r)]))"
                                                                                       "env_vec(odes)(envi)")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "k")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "(car(d_b[closed_interval(0, r)]))=0")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   -2
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "closed_interval"
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "closed_interval?"
                                                                                           1)
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             "0"
                                                                                             "r")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "closed_interval?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "closed_interval"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "closed_interval"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "closed_interval?"
                                                       1)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "0"
                                                         "r")
                                                        (("2"
                                                          (expand
                                                           "closed_interval?"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "closed_interval"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (expand "ivt_s?" -1)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand "od_sol?" -1)
                                                  (("3"
                                                    (expand
                                                     "sol_at_t?"
                                                     1
                                                     1)
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (expand
                                                         "r2v_2_fs"
                                                         1
                                                         1)
                                                        (("3"
                                                          (case
                                                           "NOT (LAMBDA (r_1: real) -> real:
                   ext_d[closed_interval(0, r)](nth(y, k))(r_1)) =  ext_d[closed_interval(0, r)](nth(y, k))")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "closed_interval?"
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "0"
                                                                 "r")
                                                                (("1"
                                                                  (expand
                                                                   "closed_interval?"
                                                                   1)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (expand
                                                                       "closed_interval"
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "ci_nonempty")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (expand
                                                                   "closed_interval?"
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "0"
                                                                     "r")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "t")
                                                                (("2"
                                                                  (typepred
                                                                   "ext_d[closed_interval(0, r)](nth(y, k))")
                                                                  (("2"
                                                                    (hide
                                                                     -6
                                                                     -7
                                                                     -8)
                                                                    (("2"
                                                                      (inst
                                                                       -2
                                                                       "t")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "deriv"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             1)
                                                                            (("1"
                                                                              (hide
                                                                               -6)
                                                                              (("1"
                                                                                (reveal
                                                                                 -)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "od_fx(length(odes), (Odes_f(closed_interval(0, r), odes, envi)), y)
              (t) = deriv(y)(t)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "od_fx"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "Odes_f"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -5
                                                                                               -6)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -3
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "list_extensionality")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "Re(odes)
        (env_at_t(odes,
                  LAMBDA (i: below(length(odes))):
                    LAMBDA (r: real): nth(y(t), i),
                  envi)
                 (t))"
                                                                                                       "deriv(y)(t)")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -2
                                                                                                                 "k")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "deriv_nth[(closed_interval(0, r))]")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "y"
                                                                                                                     "k")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "Re_nth")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "odes"
                                                                                                                           "env"
                                                                                                                           "k")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "env = env_at_t(odes,
                         LAMBDA (i: below(length(odes))):
                           LAMBDA (r: real): nth(y(t), i),
                         envi)
                        (t)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   -4
                                                                                                                                   rl)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -2
                                                                                                                                       1
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         -5
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -5
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -5
                                                                                                                                               1
                                                                                                                                               rl)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -5
                                                                                                                                                 1
                                                                                                                                                 lr)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -4
                                                                                                                                                   -5
                                                                                                                                                   -6
                                                                                                                                                   -7
                                                                                                                                                   -8
                                                                                                                                                   -9
                                                                                                                                                   -10)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -1
                                                                                                                                                     -4
                                                                                                                                                     -5)
                                                                                                                                                    (("1"
                                                                                                                                                      (decompose-equality
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "t")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "deriv"
                                                                                                                                                               -1
                                                                                                                                                               2)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1
                                                                                                                                                                   1
                                                                                                                                                                   rl)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "nth"
                                                                                                                                                                     1
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide
                                                                                                                                                         -2
                                                                                                                                                         -3)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           2
                                                                                                                                                           3
                                                                                                                                                           4)
                                                                                                                                                          (("2"
                                                                                                                                                            (postpone)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (lemma
                                                                                                                                                         "ci_not_one_element")
                                                                                                                                                        (("3"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "closed_interval?"
                                                                                                                                                             1)
                                                                                                                                                            (("3"
                                                                                                                                                              (inst
                                                                                                                                                               1
                                                                                                                                                               "0"
                                                                                                                                                               "r")
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("4"
                                                                                                                                                        (lemma
                                                                                                                                                         "ci_connected")
                                                                                                                                                        (("4"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("4"
                                                                                                                                                            (expand
                                                                                                                                                             "closed_interval?"
                                                                                                                                                             1)
                                                                                                                                                            (("4"
                                                                                                                                                              (inst
                                                                                                                                                               1
                                                                                                                                                               "0"
                                                                                                                                                               "r")
                                                                                                                                                              (("4"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("5"
                                                                                                                                                        (lemma
                                                                                                                                                         "ci_nonempty")
                                                                                                                                                        (("5"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("5"
                                                                                                                                                            (expand
                                                                                                                                                             "closed_interval?"
                                                                                                                                                             1)
                                                                                                                                                            (("5"
                                                                                                                                                              (inst
                                                                                                                                                               1
                                                                                                                                                               "0"
                                                                                                                                                               "r")
                                                                                                                                                              (("5"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -5
                                                                                                                                   -6
                                                                                                                                   -7
                                                                                                                                   -8
                                                                                                                                   -9
                                                                                                                                   -10
                                                                                                                                   -11)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -3
                                                                                                                                     -4)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "env_at_t(odes,
                LAMBDA (i: below(length(odes))):
                  LAMBDA (r: real): nth(y(t), i),
                envi)
               (t)")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -2
                                                                                                                                         "env")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2
                                                                                                                                           3
                                                                                                                                           4
                                                                                                                                           5)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             -2
                                                                                                                                             -3)
                                                                                                                                            (("2"
                                                                                                                                              (typepred
                                                                                                                                               "env")
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -2)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "env_at_t?")
                                                                                                                                                  (("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (split
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -2
                                                                                                                                                           "k!1")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "r2v_2_fs"
                                                                                                                                                               -2
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (case
                                                                                                                                                                 "closed_interval(0,r)(t)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "ext_d"
                                                                                                                                                                   -3)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (case
                                                                                                                                                                     "car(d_b[(closed_interval(0, r))])=0 AND car(cdr(d_b[(closed_interval(0, r))]))=r")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "nth"
                                                                                                                                                                           -5
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide
                                                                                                                                                                       -3)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "(d_b[(closed_interval(0, r))])")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst-cp
                                                                                                                                                                           -5
                                                                                                                                                                           "0")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -7)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (split
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (grind)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (inst-cp
                                                                                                                                                                                         -7
                                                                                                                                                                                         "r")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (split
                                                                                                                                                                                               -9)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (hide
                                                                                                                                                                         -3)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (grind)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "(d_b[(closed_interval(0, r))])")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (grind)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "(d_b[(closed_interval(0, r))])")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (grind)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("4"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("4"
                                                                                                                                                                        (hide
                                                                                                                                                                         -4)
                                                                                                                                                                        (("4"
                                                                                                                                                                          (expand
                                                                                                                                                                           "closed_interval?"
                                                                                                                                                                           1)
                                                                                                                                                                          (("4"
                                                                                                                                                                            (inst
                                                                                                                                                                             1
                                                                                                                                                                             "0"
                                                                                                                                                                             "r")
                                                                                                                                                                            (("4"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "t")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "closed_interval"
                                                                                                                                                                       1
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (hide
                                                                                                                                 -)
                                                                                                                                (("3"
                                                                                                                                  (skeep)
                                                                                                                                  (("3"
                                                                                                                                    (typepred
                                                                                                                                     "i")
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "k")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "ci_not_one_element")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "closed_interval(0,r)")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "closed_interval?"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "0"
                                                                                                                 "r")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (lemma
                                                                                                         "ci_connected")
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "closed_interval(0,r)")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "closed_interval?"
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "0"
                                                                                                               "r")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (lemma
                                                                                                         "ci_nonempty")
                                                                                                        (("4"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "closed_interval(0,r)")
                                                                                                          (("4"
                                                                                                            (expand
                                                                                                             "closed_interval?"
                                                                                                             1)
                                                                                                            (("4"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "0"
                                                                                                               "r")
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("5"
                                                                                                        (hide
                                                                                                         -)
                                                                                                        (("5"
                                                                                                          (skeep)
                                                                                                          (("5"
                                                                                                            (typepred
                                                                                                             "i")
                                                                                                            (("5"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -4
                                                                                           -5)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3
                                                                                               4)
                                                                                              (("2"
                                                                                                (decompose-equality
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "t")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "t")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "d_b[closed_interval(0, r)]")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -5
                                                                                                         "0")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -6)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "closed_interval"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "ci_not_one_element")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "closed_interval(0,r)")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (lemma
                                                                                                   "ci_connected")
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "closed_interval(0,r)")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (lemma
                                                                                                   "ci_nonempty")
                                                                                                  (("4"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "closed_interval(0,r)")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("5"
                                                                                                  (expand
                                                                                                   "closed_interval?"
                                                                                                   1)
                                                                                                  (("5"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "0"
                                                                                                     "r")
                                                                                                    (("5"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("6"
                                                                                                  (expand
                                                                                                   "closed_interval?"
                                                                                                   1)
                                                                                                  (("6"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "0"
                                                                                                     "r")
                                                                                                    (("6"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (lemma
                                                                                           "ci_not_one_element")
                                                                                          (("3"
                                                                                            (hide
                                                                                             -2
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9
                                                                                             -10
                                                                                             -11
                                                                                             -12)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "closed_interval(0,r)")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "closed_interval?"
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "0"
                                                                                                   "r")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (hide
                                                                                           -)
                                                                                          (("4"
                                                                                            (lemma
                                                                                             "ci_connected")
                                                                                            (("4"
                                                                                              (inst
                                                                                               -1
                                                                                               "closed_interval(0,r)")
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "closed_interval?"
                                                                                                 1)
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "0"
                                                                                                   "r")
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "closed_interval"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide -3)
                                                            (("3"
                                                              (typepred
                                                               "y")
                                                              (("3"
                                                                (expand
                                                                 "derivable?"
                                                                 -1)
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "k")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide -)
                                                            (("4"
                                                              (typepred
                                                               "k")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   1)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (expand
                                                             "closed_interval?"
                                                             1)
                                                            (("5"
                                                              (inst
                                                               1
                                                               "0"
                                                               "r")
                                                              (("5"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("6"
                                                            (hide -)
                                                            (("6"
                                                              (lemma
                                                               "ci_nonempty")
                                                              (("6"
                                                                (inst
                                                                 -1
                                                                 "closed_interval(0,r)")
                                                                (("6"
                                                                  (expand
                                                                   "closed_interval?"
                                                                   1)
                                                                  (("6"
                                                                    (inst
                                                                     1
                                                                     "0"
                                                                     "r")
                                                                    (("6"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep 1)
                                (("2"
                                  (expand "ivt_s_unique?" -2)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst
                                       -3
                                       "fs_2_r2v(length(odes),closed_interval(0,r),g)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -3)
                                          (("1"
                                            (skeep 1)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "t")
                                                (("1"
                                                  (lemma
                                                   "list_extensionality")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "y(t)"
                                                     "fs_2_r2v(length(odes), closed_interval(0, r), g)(t)")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "i")
                                                            (("1"
                                                              (expand
                                                               "r2v_2_fs"
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "fs_2_f2v_nth")
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "length(odes)"
                                                                     "closed_interval(0,r)"
                                                                     "g"
                                                                     "i")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "t")
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "restrict"
                                                                               -2)
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 1
                                                                                 rl)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "ext_d[closed_interval(0, r)](nth(y, i))")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -9
                                                                                     -10)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "t")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "closed_interval?"
                                                                                       1)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "0"
                                                                                         "r")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     -)
                                                                                    (("3"
                                                                                      (lemma
                                                                                       "ci_nonempty")
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         "closed_interval(0,r)")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "closed_interval?"
                                                                                           1)
                                                                                          (("3"
                                                                                            (inst
                                                                                             1
                                                                                             "0"
                                                                                             "r")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "ci_nonempty")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "closed_interval(0,r)")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "t")
                                                  (("2"
                                                    (expand
                                                     "closed_interval"
                                                     1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -3 -4)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (expand "ivt_s?" 1)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (expand
                                                     "od_sol?"
                                                     1)
                                                    (("1"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "solution_odes?"
                                                         -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (typepred
                                                             "x!1")
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "x!1")
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "env_at_t(odes,g,envi)(x!1)")
                                                                (("1"
                                                                  (hide
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "sol_at_t?"
                                                                     -4)
                                                                    (("1"
                                                                      (lemma
                                                                       "list_extensionality")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "od_fx(length(odes), (Odes_f(closed_interval(0, r), odes, envi)),
            fs_2_r2v(length(odes), closed_interval(0, r), g))
           (x!1)"
                                                                         "deriv(fs_2_r2v(length(odes), closed_interval(0, r), g))(x!1)")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "od_fx(length(odes),
                   (Odes_f(closed_interval(0, r), odes, envi)),
                   fs_2_r2v(length(odes), closed_interval(0, r), g))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "(ODEs@r2v_analysis
                    [ODEs@interval_def.closed_interval(0, r)].deriv
                    (fs_2_r2v(list_props[hp_def.MapExpr].length(odes),
                              ODEs@interval_def.closed_interval(0, r), g))
                    (x!1))")
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "(ODEs@r2v_analysis
                    [ODEs@interval_def.closed_interval(0, r)].deriv
                    (fs_2_r2v(list_props[hp_def.MapExpr].length(odes),
                              ODEs@interval_def.closed_interval(0, r), g))
                    )")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -3)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 2
                                                                                                 3)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -4
                                                                                                   -5
                                                                                                   -6
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -3
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "length(od_fx(length(odes),
                   (Odes_f(closed_interval(0, r), odes, envi)),
                   fs_2_r2v(length(odes), closed_interval(0, r), g))
                  (x!1)) = length(odes)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -3
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "fs_2_r2v(list_props[hp_def.MapExpr].length(odes),
                         ODEs@interval_def.closed_interval(0, r), g)
                        (sets[reals.real].choose
                             (ODEs@interval_def.closed_interval(0, r)))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -5
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (skeep
                                                                                                                         -4)
                                                                                                                        (("1"
                                                                                                                          (inst-cp
                                                                                                                           -4
                                                                                                                           "x!1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -4
                                                                                                                               "sets[reals.real].choose
                         (ODEs@interval_def.closed_interval(0, r))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "ci_not_one_element")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "closed_interval(0,r)")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (lemma
                                                                                         "ci_connected")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "closed_interval(0,r)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (lemma
                                                                                         "ci_nonempty")
                                                                                        (("4"
                                                                                          (inst
                                                                                           -1
                                                                                           "closed_interval(0,r)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep
                                                                                   1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "deriv_nth[closed_interval(0,r)]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "fs_2_r2v(length(odes), closed_interval(0, r), g)"
                                                                                           "n")
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "od_fx"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "Odes_f"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "Re_nth")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "odes"
                                                                                                           _
                                                                                                           _)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "env_at_t(odes,
                      LAMBDA (i: below(length(odes))):
                        LAMBDA (r_1: real):
                          nth(fs_2_r2v(length(odes),
                                       closed_interval(0, r),
                                       g)
                                      (x!1),
                              i),
                      envi)
                     (x!1)"
                                                                                                             "n")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -6
                                                                                                                   "n")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "fs_2_f2v_nth")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "length(odes)"
                                                                                                                         "closed_interval(0,r)"
                                                                                                                         "g"
                                                                                                                         "n")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "x!1")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "restrict"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "deriv_subtype[real,(closed_interval(0,r))]")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "g(n)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (decompose-equality
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "x!1")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "restrict"
                                                                                                                                             -1
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               1
                                                                                                                                               lr)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "NOT env_at_t(odes, g, envi)(x!1) = (env_at_t(odes,
                    LAMBDA (i: below(length(odes))):
                      LAMBDA (r_1: real):
                        nth(fs_2_r2v(length(odes), closed_interval(0, r), g)
                                    (x!1),
                            i),
                    envi)
                   (x!1))")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "env_at_t"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (decompose-equality
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (lift-if
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "fs_2_f2v_nth")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "length(odes)"
                                                                                                                                                                 "closed_interval(0,r)"
                                                                                                                                                                 "g"
                                                                                                                                                                 "sets
                    [naturalnumbers.below(list_props[hp_def.MapExpr].length
                                          (odes))].choose
                    ({kk:
                        naturalnumbers.below(list_props
                                             [hp_def.MapExpr].length
                                             (odes)) |
                        equalities[[naturalnumbers.nat, hp_def.RealExpr]].=
                            ((x!2,
                              list_props[hp_def.MapExpr].nth(odes, kk)`2),
                             list_props[hp_def.MapExpr].nth(odes, kk))})")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "restrict"
                                                                                                                                                                     -1
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (decompose-equality
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "x!1")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -1
                                                                                                                                                                           2
                                                                                                                                                                           rl)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               -)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "nth"
                                                                                                                                                                                 2
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         3
                                                                                                                                                                         4
                                                                                                                                                                         5
                                                                                                                                                                         6)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "nonempty?"
                                                                                                                                                                             1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "not_in_map"
                                                                                                                                                                               1
                                                                                                                                                                               1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "empty?"
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -1
                                                                                                                                                                                     "i")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "member"
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (decompose-equality
                                                                                                                                                                                         1)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("3"
                                                                                                                                                                        (hide
                                                                                                                                                                         -)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (hide
                                                                                                                                                                           2
                                                                                                                                                                           3
                                                                                                                                                                           4
                                                                                                                                                                           5
                                                                                                                                                                           6)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "ci_nonempty")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "closed_interval(0,r)")
                                                                                                                                                                              (("3"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "closed_interval?"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   1
                                                                                                                                                                                   "0"
                                                                                                                                                                                   "r")
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("4"
                                                                                                                                                                        (hide
                                                                                                                                                                         2
                                                                                                                                                                         3
                                                                                                                                                                         4
                                                                                                                                                                         5
                                                                                                                                                                         6)
                                                                                                                                                                        (("4"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "x!2")
                                                                                                                                                                          (("4"
                                                                                                                                                                            (reveal
                                                                                                                                                                             +)
                                                                                                                                                                            (("4"
                                                                                                                                                                              (hide
                                                                                                                                                                               2
                                                                                                                                                                               3)
                                                                                                                                                                              (("4"
                                                                                                                                                                                (hide
                                                                                                                                                                                 2
                                                                                                                                                                                 3
                                                                                                                                                                                 4
                                                                                                                                                                                 5
                                                                                                                                                                                 6)
                                                                                                                                                                                (("4"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -)
                                                                                                                                                                                  (("4"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "nonempty?"
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("4"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "empty?"
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("4"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "not_in_map"
                                                                                                                                                                                         1
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("4"
                                                                                                                                                                                          (skeep)
                                                                                                                                                                                          (("4"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -2
                                                                                                                                                                                             "i")
                                                                                                                                                                                            (("4"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "member"
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("4"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("4"
                                                                                                                                                                                                  (decompose-equality
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   3
                                                                                                                                                                   4
                                                                                                                                                                   5
                                                                                                                                                                   6)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     -)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nonempty?"
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "not_in_map"
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (skeep)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "empty?"
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "i")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "member"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (decompose-equality
                                                                                                                                                                                   1)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       -)
                                                                                                                                                      (("2"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("3"
                                                                                                                                                      (hide
                                                                                                                                                       -)
                                                                                                                                                      (("3"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("3"
                                                                                                                                                          (hide
                                                                                                                                                           3
                                                                                                                                                           4
                                                                                                                                                           5)
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "nonempty?"
                                                                                                                                                             2)
                                                                                                                                                            (("3"
                                                                                                                                                              (expand
                                                                                                                                                               "not_in_map"
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (expand
                                                                                                                                                                 "empty?"
                                                                                                                                                                 -1)
                                                                                                                                                                (("3"
                                                                                                                                                                  (skeep)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (inst
                                                                                                                                                                     -2
                                                                                                                                                                     "i_1")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (expand
                                                                                                                                                                       "member"
                                                                                                                                                                       1)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (decompose-equality
                                                                                                                                                                         1)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (replace
                                                                                                                                                   -1
                                                                                                                                                   1
                                                                                                                                                   rl)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (hide
                                                                                                                                                   2)
                                                                                                                                                  (("3"
                                                                                                                                                    (hide
                                                                                                                                                     -)
                                                                                                                                                    (("3"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("3"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "ci_not_one_element")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "closed_interval(0,r)")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "closed_interval?"
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   1
                                                                                                                                                   "0"
                                                                                                                                                   "r")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (postpone)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (typepred
                                                                                                                                         "g")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "derivable_odes?"
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "n")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (postpone)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (hide
                                                                                                                                         -)
                                                                                                                                        (("4"
                                                                                                                                          (lemma
                                                                                                                                           "ci_not_one_element")
                                                                                                                                          (("4"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "closed_interval(0,r)")
                                                                                                                                            (("4"
                                                                                                                                              (expand
                                                                                                                                               "closed_interval?"
                                                                                                                                               1)
                                                                                                                                              (("4"
                                                                                                                                                (inst
                                                                                                                                                 1
                                                                                                                                                 "0"
                                                                                                                                                 "r")
                                                                                                                                                (("4"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (hide
                                                                                               -)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "ci_not_one_element")
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "closed_interval(0,r)")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (lemma
                                                                                               "ci_connected")
                                                                                              (("4"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "closed_interval(0,r)")
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("5"
                                                                                              (lemma
                                                                                               "ci_nonempty")
                                                                                              (("5"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "closed_interval(0,r)")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3
                                                                                               4)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "n")
                                                                                                (("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "ci_not_one_element")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "closed_interval(0,r)")
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (lemma
                                                                                             "ci_connected")
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "closed_interval(0,r)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (lemma
                                                                                             "ci_nonempty")
                                                                                            (("4"
                                                                                              (inst
                                                                                               -1
                                                                                               "closed_interval(0,r)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "ci_not_one_element")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "closed_interval(0,r)")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (lemma
                                                                             "ci_connected")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "closed_interval(0,r)")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (assert)
                                                                          (("4"
                                                                            (lemma
                                                                             "ci_nonempty")
                                                                            (("4"
                                                                              (inst
                                                                               -1
                                                                               "closed_interval(0,r)")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "closed_interval"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skeep 1)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand
                                                             "derivable?"
                                                             1)
                                                            (("3"
                                                              (skeep)
                                                              (("3"
                                                                (lemma
                                                                 "fs_2_f2v_nth")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "length(odes)"
                                                                   "closed_interval(0,r)"
                                                                   "g"
                                                                   "i")
                                                                  (("1"
                                                                    (typepred
                                                                     "g")
                                                                    (("1"
                                                                      (expand
                                                                       "derivable_odes?"
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "i")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict"
                                                                           -2)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "derivable_subtype[real,(closed_interval(0,r))]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "g(i)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "restrict"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "ci_not_one_element")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "closed_interval(0,r)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "i")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (skeep)
                                                        (("4"
                                                          (lemma
                                                           "ci_not_one_element")
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "closed_interval(0,r)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (skeep)
                                                        (("5"
                                                          (lemma
                                                           "ci_connected")
                                                          (("5"
                                                            (inst
                                                             -1
                                                             "closed_interval(0,r)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (skeep)
                                                        (("6"
                                                          (lemma
                                                           "ci_not_one_element")
                                                          (("6"
                                                            (inst
                                                             -1
                                                             "closed_interval(0,r)")
                                                            (("6"
                                                              (lemma
                                                               "ci_nonempty")
                                                              (("6"
                                                                (inst
                                                                 -1
                                                                 "closed_interval(0,r)")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("7"
                                                        (expand
                                                         "closed_interval?"
                                                         1)
                                                        (("7"
                                                          (assert)
                                                          (("7"
                                                            (skeep)
                                                            (("7"
                                                              (inst
                                                               1
                                                               "0"
                                                               "r")
                                                              (("7"
                                                                (expand
                                                                 "closed_interval?"
                                                                 1)
                                                                (("7"
                                                                  (skeep)
                                                                  (("7"
                                                                    (assert)
                                                                    (("7"
                                                                      (expand
                                                                       "closed_interval"
                                                                       1)
                                                                      (("7"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "env_vec_nth")
                                                      (("2"
                                                        (lemma
                                                         "fs_2_f2v_nth")
                                                        (("2"
                                                          (lemma
                                                           "list_extensionality")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "fs_2_r2v(length(odes), closed_interval(0, r), g)
              (car(d_b[closed_interval(0, r)]))"
                                                             "env_vec(odes)(envi)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "length(odes)"
                                                                     "closed_interval(0, r)"
                                                                     "g"
                                                                     "n")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict"
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "car(d_b[closed_interval(0, r)]) =0")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -2)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "odes"
                                                                                     "envi"
                                                                                     "n")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "solution_odes?"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "env_at_t?"
                                                                                             -4)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -4
                                                                                               "n")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -)
                                                                              (("2"
                                                                                (typepred
                                                                                 "d_b[closed_interval(0, r)]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -5
                                                                                   "0")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               -)
                                                                              (("3"
                                                                                (expand
                                                                                 "closed_interval?"
                                                                                 1)
                                                                                (("3"
                                                                                  (inst
                                                                                   1
                                                                                   "0"
                                                                                   "r")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (expand
                                                                             "closed_interval"
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "ci_nonempty")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "closed_interval(0,r)")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "closed_interval?"
                                                               1)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "0"
                                                                 "r")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -)
                                        (("2"
                                          (hide 2 3 4)
                                          (("2"
                                            (expand "derivable?" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (lemma "fs_2_f2v_nth")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "length(odes)"
                                                   "closed_interval(0,r)"
                                                   "g"
                                                   "i")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand
                                                       "restrict"
                                                       1)
                                                      (("1"
                                                        (typepred "g")
                                                        (("1"
                                                          (expand
                                                           "derivable_odes?"
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "i")
                                                            (("1"
                                                              (lemma
                                                               "derivable_subtype[real,(closed_interval(0,r))]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "g(i)")
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "restrict"
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (lemma
                                                                     "ci_not_one_element")
                                                                    (("4"
                                                                      (inst
                                                                       -1
                                                                       "closed_interval(0,r)")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split 1)
                            (("1" (skeep)
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "length" -1 1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "length" 1 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "derivable_odes?" 1 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "r2v_2_fs" 1 1)
                                  (("2"
                                    (case
                                     "NOT (LAMBDA (r_1: real) -> real:
                   ext_d[closed_interval(0, r)](nth(y, k))(r_1)) =  ext_d[closed_interval(0, r)](nth(y, k))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (decompose-equality 1)
                                        (("1"
                                          (hide -)
                                          (("1"
                                            (expand
                                             "closed_interval?"
                                             1)
                                            (("1"
                                              (inst 1 "0" "r")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "ci_nonempty")
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1 1)
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (typepred "y")
                                      (("3"
                                        (expand "derivable?" -1)
                                        (("3" (inst -1 "k") nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (assert)
                                      (("4"
                                        (expand "length" 1 1)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (hide -)
                                      (("5"
                                        (expand "closed_interval?" 1)
                                        (("5"
                                          (inst 1 "0" "r")
                                          (("5" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (hide -)
                                      (("6"
                                        (lemma "ci_nonempty")
                                        (("6"
                                          (inst?)
                                          (("6"
                                            (expand
                                             "closed_interval?"
                                             1)
                                            (("6"
                                              (inst 1 "0" "r")
                                              (("6" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (diff_sol_eq_TCC1 0
  (diff_sol_eq_TCC1-1 nil 3793029607 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (diff_sol_eq subtype "ODEs_equiv.r"
    "{b: reals.real | reals.<(0, b)}")))
 (diff_sol_eq_TCC2 0
  (diff_sol_eq_TCC2-1 nil 3793029607
   ("" (skeep*)
    (("" (expand "dd?" 1)
      (("" (flatten) (("" (inst 1 "r") nil nil)) nil)) nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_sol_eq subtype "interval_def.closed_interval(0, ODEs_equiv.r)"
    "(hp_expr.dd?)")))
 (diff_sol_eq 0
  (diff_sol_eq-1 nil 3791720199
   ("" (lemma "diff_sol_Lip")
    (("" (skeep)
      (("" (inst?)
        (("" (assert)
          (("" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (lemma "cont_DDL_ODEs")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil)
             ("3" (hide 2)
              (("3" (lemma "Lip_DDL_ODEs")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (Lip_DDL_ODEs formula-decl nil ODEs_equiv nil)
    (nnreal type-eq-decl nil real_types nil)
    (cont_DDL_ODEs formula-decl nil ODEs_equiv nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (diff_sol_Lip formula-decl nil ODEs_equiv nil))
   shostak))
 (fs_sol_TCC1 0
  (fs_sol_TCC4-1 nil 3794649310
   (""
    (inst 1 "LAMBDA(D:(dd?), env:Environment, ode: (ODEs_s?(D,env))):
           choose({y:(derivable_odes?(D,length(ode))) | solution_odes_u?(D,ode,env)(y)})")
    (("" (skeep)
      (("" (expand "nonempty?" 1)
        (("" (expand "empty?")
          (("" (typepred "ode")
            (("" (expand "ODEs_s?" -2)
              (("" (skeep)
                (("" (inst -3 "fs")
                  (("" (inst -2 "D")
                    (("1" (expand "member" 1) (("1" (propax) nil nil))
                      nil)
                     ("2" (skeep 1) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Environment type-eq-decl nil hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (fs_sol existence ""
    "[d: [D: (hp_expr.dd?), envi: hp_def.Environment, (ODEs_equiv.ODEs_s?(D, envi))] -> (hp_expr.solution_odes_u?(d`1, d`3, d`2))]")))
 (ODEs_s_sub_TCC1 0
  (ODEs_s_sub_TCC1-1 nil 3882275915 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (ODEs_s_sub subtype "ODEs_equiv.r"
    "{b: reals.real | reals.<(0, b)}")))
 (ODEs_s_sub_TCC2 0
  (ODEs_s_sub_TCC2-2 nil 3882276432
   ("" (skeep)
    (("" (expand "dd?")
      (("" (flatten)
        (("" (inst 1 "r")
          (("" (assert)
            (("" (typepred "r")
              (("" (typepred "D")
                (("" (expand "dd?")
                  (("" (split -1)
                    (("1" (skeep)
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1" (expand "closed_interval")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (expand "hp")
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (ODEs_s_sub subtype
    "(interval_def.closed_interval(0, ODEs_equiv.r))" "(hp_expr.dd?)"))
  (ODEs_s_sub_TCC2-1 nil 3882275915 ("" (subtype-tcc) nil nil) nil nil
   (ODEs_s_sub subtype
    "(interval_def.closed_interval(0, ODEs_equiv.r))"
    "(hp_expr.dd?)")))
 (ODEs_s_sub 0
  (ODEs_s_sub-1 nil 3882276466
   ("" (skeep)
    (("" (expand "ODEs_s?")
      (("" (skeep)
        (("" (inst 1 "fs")
          (("1" (expand "solution_odes_u?")
            (("1" (flatten)
              (("1" (split 1)
                (("1" (hide -2)
                  (("1" (expand "solution_odes?")
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (split 1)
                          (("1" (typepred "fs")
                            (("1" (expand "derivable_odes?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 "k")
                                  (("1"
                                    (lemma
                                     "derivable_subtype[(D),(closed_interval(0,r))]")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (expand "restrict")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (lemma "ci_deriv_domain")
                                            (("3"
                                              (inst
                                               -1
                                               "(closed_interval(0,r))")
                                              (("1"
                                                (lemma "ci_ci")
                                                (("1" (inst?) nil nil))
                                                nil)
                                               ("2"
                                                (typepred "r")
                                                (("2"
                                                  (typepred "D")
                                                  (("2"
                                                    (expand "dd?" -1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (expand
                                                             "closed_interval")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (expand "hp")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (lemma "ci_not_one_element")
                                          (("4"
                                            (inst
                                             -1
                                             "(closed_interval(0,r))")
                                            (("1"
                                              (lemma "ci_ci")
                                              (("1" (inst?) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "r")
                                                (("2"
                                                  (typepred "D")
                                                  (("2"
                                                    (expand "dd?" -1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (expand
                                                             "closed_interval")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (expand
                                                             "hp")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "dd_noe")
                                      (("2" (inst?) nil nil))
                                      nil)
                                     ("3"
                                      (lemma "dd_deriv_domain")
                                      (("3" (inst?) nil nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4"
                                        (lemma "dd_ci")
                                        (("4" (inst?) nil nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (assert)
                                      (("5"
                                        (typepred "r")
                                        (("5"
                                          (typepred "D")
                                          (("5"
                                            (expand "dd?" -1)
                                            (("5"
                                              (split -1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (expand
                                                     "closed_interval")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (expand "hp")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst -2 "t" "env")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "sol_at_t?")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -2 "k")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "deriv_subtype_dd[(D),(closed_interval(0,r))]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "restrict")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (decompose-equality
                                                       -1)
                                                      (("1"
                                                        (inst -1 "t")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "fs")
                                                  (("2"
                                                    (expand
                                                     "derivable_odes?"
                                                     -1)
                                                    (("2"
                                                      (inst -1 "k")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (assert)
                                                (("3"
                                                  (lemma
                                                   "ci_deriv_domain")
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "(closed_interval(0,r))")
                                                    (("1"
                                                      (lemma "ci_ci")
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "r")
                                                      (("2"
                                                        (typepred "D")
                                                        (("2"
                                                          (expand
                                                           "dd?"
                                                           -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "closed_interval")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "hp")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (lemma
                                                 "ci_not_one_element")
                                                (("4"
                                                  (inst
                                                   -1
                                                   "(closed_interval(0,r))")
                                                  (("1"
                                                    (lemma "ci_ci")
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "r")
                                                      (("2"
                                                        (typepred "D")
                                                        (("2"
                                                          (expand
                                                           "dd?"
                                                           -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "closed_interval")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "hp")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "dd_noe")
                                            (("2" (inst?) nil nil))
                                            nil)
                                           ("3"
                                            (lemma "dd_deriv_domain")
                                            (("3" (inst?) nil nil))
                                            nil)
                                           ("4"
                                            (skeep)
                                            (("4"
                                              (lemma "dd_ci")
                                              (("4" (inst?) nil nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (assert)
                                            (("5"
                                              (typepred "r")
                                              (("5"
                                                (typepred "D")
                                                (("5"
                                                  (expand "dd?" -1)
                                                  (("5"
                                                    (split -1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "closed_interval")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (expand "hp")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "dd_ci")
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst -3 "ff" "S")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (skeep)
                        (("2" (typepred "S")
                          (("2" (inst -2 "x")
                            (("2" (typepred "r")
                              (("2"
                                (typepred "D")
                                (("2"
                                  (expand "dd?" -1)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "closed_interval")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (expand "hp")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "closed_interval")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (typepred "fs")
              (("2" (hide -2)
                (("2" (expand "derivable_odes?")
                  (("2" (skeep)
                    (("2" (inst -1 "k")
                      (("2"
                        (lemma
                         "derivable_subtype[(D),(closed_interval(0,r))]")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (split -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "restrict")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma "ci_deriv_domain")
                                  (("2"
                                    (inst -1 "(closed_interval(0,r))")
                                    (("1"
                                      (lemma "ci_ci")
                                      (("1" (inst?) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "r")
                                      (("2"
                                        (typepred "D")
                                        (("2"
                                          (expand "dd?" -1)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand
                                                   "closed_interval")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (expand "hp")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "ci_not_one_element")
                                (("3"
                                  (inst -1 "(closed_interval(0,r))")
                                  (("1"
                                    (lemma "ci_ci")
                                    (("1" (inst?) nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "r")
                                      (("2"
                                        (typepred "D")
                                        (("2"
                                          (expand "dd?" -1)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand
                                                   "closed_interval")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (expand "hp")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "dd_noe") (("2" (inst?) nil nil))
                          nil)
                         ("3" (lemma "dd_deriv_domain")
                          (("3" (inst?) nil nil)) nil)
                         ("4" (skeep)
                          (("4" (lemma "dd_ci") (("4" (inst?) nil nil))
                            nil))
                          nil)
                         ("5" (assert)
                          (("5" (typepred "r")
                            (("5" (typepred "D")
                              (("5"
                                (expand "dd?" -1)
                                (("5"
                                  (split -1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "closed_interval")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (expand "hp")
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_ci formula-decl nil hp_expr nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (dd_noe formula-decl nil hp_expr nil)
    (restrict const-decl "R" restrict nil)
    (ci_not_one_element formula-decl nil interval_def ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ci_deriv_domain formula-decl nil interval_def ODEs)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil))
 (fs_sol_sub_TCC1 0
  (fs_sol_sub_TCC1-1 nil 3794904612
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "dd?")
        (("" (split -1)
          (("1" (skeep)
            (("1" (typepred "r")
              (("1" (replace -3 -1)
                (("1" (expand "closed_interval")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (typepred "r")
            (("2" (replace -3)
              (("2" (expand "hp") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def ODEs)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (fs_sol_sub subtype "ODEs_equiv.r"
    "{b: reals.real | reals.<(0, b)}")))
 (fs_sol_sub_TCC2 0
  (fs_sol_sub_TCC2-1 nil 3794904612
   ("" (skeep)
    (("" (expand "dd?" 1)
      (("" (flatten)
        (("" (inst?)
          (("" (assert)
            (("" (typepred "r")
              (("" (typepred "D")
                (("" (expand "dd?" -1)
                  (("" (split -1)
                    (("1" (skeep)
                      (("1" (replace -1)
                        (("1" (expand "closed_interval")
                          (("1" (assert)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (expand "hp")
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (fs_sol_sub subtype
    "(interval_def.closed_interval(0, ODEs_equiv.r))"
    "(hp_expr.dd?)")))
 (fs_sol_sub_TCC3 0
  (fs_sol_sub_TCC3-1 nil 3794904612
   ("" (skeep)
    (("" (typepred "odes")
      (("" (lemma "ODEs_s_sub")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (ODEs_s_sub formula-decl nil ODEs_equiv nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (fs_sol_sub subtype "ODEs_equiv.odes"
    "(ODEs_equiv.ODEs_s?((interval_def.closed_interval(0, ODEs_equiv.r)), ODEs_equiv.envi))")))
 (fs_sol_sub 0
  (fs_sol_sub-1 nil 3794924209
   ("" (skeep*)
    (("" (typepred "fs_sol(D, envi, odes)")
      (("" (typepred "fs_sol((closed_interval(0, r)), envi, odes)")
        (("" (expand "solution_odes_u?")
          (("" (flatten)
            (("" (typepred "x")
              ((""
                (inst -5 "fs_sol((closed_interval(0, r)), envi, odes)"
                 "(closed_interval(0, r))")
                (("1" (assert)
                  (("1" (inst -5 "k" "x") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (hide -)
                    (("2" (skeep)
                      (("2" (typepred "x!1")
                        (("2" (typepred "r")
                          (("2" (typepred "D")
                            (("2" (expand "dd?")
                              (("2"
                                (split -1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "closed_interval")
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (expand "hp")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "closed_interval" -4)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (env_sol_sub_TCC1 0
  (env_sol_sub_TCC1-1 nil 3794904612 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (env_sol_sub subtype "ODEs_equiv.r"
    "{b: reals.real | reals.<(0, b)}")))
 (env_sol_sub_TCC2 0
  (env_sol_sub_TCC2-1 nil 3794904612 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil (env_sol_sub subtype "ODEs_equiv.x" "(ODEs_equiv.D)")))
 (env_sol_sub_TCC3 0
  (env_sol_sub_TCC3-1 nil 3794904612
   ("" (skeep)
    (("" (expand "dd?")
      (("" (flatten)
        (("" (inst 1 "r")
          (("" (typepred "r" "D")
            (("" (expand "dd?")
              (("" (split -3)
                (("1" (flatten)
                  (("1" (skeep)
                    (("1" (replace -1)
                      (("1" (expand "closed_interval")
                        (("1" (assert)
                          (("1" (flatten) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -1)
                  (("2" (expand "hp")
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (env_sol_sub subtype
    "(interval_def.closed_interval(0, ODEs_equiv.r))"
    "(hp_expr.dd?)")))
 (env_sol_sub_TCC4 0
  (env_sol_sub_TCC4-1 nil 3794904612
   ("" (skeep)
    (("" (lemma "ODEs_s_sub")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((ODEs_s_sub formula-decl nil ODEs_equiv nil)
    (/= const-decl "boolean" notequal nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (env_sol_sub subtype "ODEs_equiv.odes"
    "(ODEs_equiv.ODEs_s?((interval_def.closed_interval(0, ODEs_equiv.r)), ODEs_equiv.envi))")))
 (env_sol_sub 0
  (env_sol_sub-1 nil 3794925372
   ("" (skeep)
    (("" (expand "env_sol")
      (("" (lemma "fs_sol_sub")
        (("" (inst?)
          ((""
            (typepred
             "env_at_t(odes, fs_sol((closed_interval(0, r)), envi, odes), envi)(x)")
            ((""
              (inst -2
               "env_at_t(odes, fs_sol(D, envi, odes), envi)(x)")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (expand "env_at_t?")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (split 1)
                        (("1" (skeep)
                          (("1" (inst -1 "i")
                            (("1" (assert)
                              (("1"
                                (typepred
                                 " env_at_t(odes, fs_sol(D, envi, odes), envi)(x)")
                                (("1"
                                  (expand "env_at_t?" -1)
                                  (("1"
                                    (flatten)
                                    (("1" (inst -1 "i") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (skeep)
                            (("2" (hide -1)
                              (("2"
                                (typepred
                                 "env_at_t(odes, fs_sol(D, envi, odes), envi)(x)")
                                (("2"
                                  (expand "env_at_t?" -1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst -2 "k")
                                      (("2"
                                        (inst -4 "k")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -5 "k" "x")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((env_sol const-decl "Environment" ODEs_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (fs_sol_sub formula-decl nil ODEs_equiv nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_odes_sub 0
  (solution_odes_sub-1 nil 3873460917
   ("" (skeep*)
    (("" (expand "solution_odes?")
      (("" (flatten)
        (("" (lemma "dd_deriv_domain")
          (("" (lemma "dd_noe")
            (("" (inst-cp -1 "S")
              (("" (inst -1 "D")
                (("" (inst-cp -3 "S")
                  (("" (inst -3 "D")
                    (("" (split 1)
                      (("1" (expand "derivable_odes?")
                        (("1" (skeep)
                          (("1" (inst -5 "k")
                            (("1" (expand "restrict")
                              (("1"
                                (lemma
                                 "deriv_subtype_eq[(D),(ODEs_equiv.S)]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil)
                                 ("3" (propax) nil nil)
                                 ("4"
                                  (typepred "S")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (skeep)
                                      (("4"
                                        (inst -2 "x")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil)
                       ("3" (skeep)
                        (("3" (inst -7 "t" "env")
                          (("1" (expand "sol_at_t?")
                            (("1" (skeep)
                              (("1"
                                (inst -7 "k")
                                (("1"
                                  (expand "restrict")
                                  (("1"
                                    (lemma
                                     "deriv_subtype_eq[(D),(ODEs_equiv.S)]")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (decompose-equality -2)
                                                (("1"
                                                  (inst -1 "t")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "derivable_odes?")
                                              (("2"
                                                (inst -5 "k")
                                                (("2"
                                                  (expand "restrict")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil)
                                     ("4"
                                      (typepred "S")
                                      (("4"
                                        (skeep)
                                        (("4"
                                          (inst -2 "x")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "t" "S")
                            (("2" (inst -3 "t")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes? const-decl "bool" hp_expr nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_subtype_eq formula-decl nil derivatives_subtype analysis)
    (below type-eq-decl nil naturalnumbers nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (dd_noe formula-decl nil hp_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_odes_subset 0
  (solution_odes_subset-1 nil 3867189154
   ("" (skeep)
    (("" (lemma "solution_odes_sub")
      (("" (inst -1 "D" "odes" "envi" "fs" "S")
        (("" (expand "solution_odes_u?")
          (("" (flatten)
            (("" (split 1)
              (("1" (assert) nil nil)
               ("2" (skeep)
                (("2" (inst -4 "ff" "S_1")
                  (("1" (assert) nil nil)
                   ("2" (hide 2)
                    (("2" (typepred "S_1" "S" "D")
                      (("2" (skeep)
                        (("2" (inst -2 "x")
                          (("2" (inst -4 "x") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes_sub formula-decl nil ODEs_equiv nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (odes_hp_s_TCC1 0
  (odes_hp_s_TCC1-1 nil 3882279020 ("" (subtype-tcc) nil nil)
   ((dd? const-decl "bool" hp_expr nil)) nil
   (odes_hp_s subtype "interval_def.hp(0)" "(hp_expr.dd?)")))
 (odes_hp_s_TCC2 0
  (odes_hp_s_TCC2-1 nil 3882279020 ("" (subtype-tcc) nil nil) nil nil
   (odes_hp_s subtype "ODEs_equiv.b"
    "{b: reals.real | reals.<(0, b)}")))
 (odes_hp_s_TCC3 0
  (odes_hp_s_TCC3-1 nil 3882279020 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal type-eq-decl nil real_types nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dd? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs))
   nil
   (odes_hp_s subtype "interval_def.closed_interval(0, ODEs_equiv.b)"
    "(hp_expr.dd?)")))
 (odes_hp_s 0
  (odes_hp_s-1 nil 3882279137
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "odes")
        (("" (expand "ODEs_s?" 1)
          (("" (lemma "diff_sol_eq")
            (("" (inst?)
              (("" (assert)
                (("" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (hide 2)
                    (("2" (expand "cont_ODEs?")
                      (("2" (expand "cont_ODEs?")
                        (("2" (expand "cont_ODEs?")
                          (("2" (skeep)
                            (("2" (inst -2 "t")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -2 "k")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -2 "eps" "y")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "del")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -3 "t1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "t1")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (typepred "t")
                                  (("2"
                                    (hide -3 -4)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (expand "Lip_ODEs?" -3)
                      (("3" (expand "Lip_ODEs?" -3)
                        (("3" (inst -3 "b") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (const? const-decl "bool" ODEs_equiv nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (diff_sol_eq formula-decl nil ODEs_equiv nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (fs_sol_hp_TCC1 0
  (fs_sol_hp_TCC2-1 nil 3882277829 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dd? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs))
   nil
   (fs_sol_hp subtype "interval_def.closed_interval(0, 1)"
    "(hp_expr.dd?)")))
 (fs_sol_hp_TCC2 0
  (fs_sol_hp_TCC4-1 nil 3882277574
   ("" (skeep)
    (("" (typepred "odes")
      (("" (expand "ODEs_s?")
        (("" (lemma "diff_sol_eq")
          (("" (inst?)
            (("" (assert)
              (("" (split -1)
                (("1" (propax) nil nil)
                 ("2" (hide 2)
                  (("2" (expand "cont_ODEs?")
                    (("2" (expand "cont_ODEs?")
                      (("2" (expand "cont_ODEs?")
                        (("2" (skeep)
                          (("2" (inst -2 "t!1")
                            (("1" (skeep)
                              (("1"
                                (inst -2 "k!1")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -2 "eps" "y")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "del")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -3 "t1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred "t1")
                                                (("2"
                                                  (hide -4 -5)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "t!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (expand "Lip_ODEs?" -3)
                    (("3" (expand "Lip_ODEs?" -3)
                      (("3" (inst -3 "1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((hp const-decl "bool" interval_def ODEs)
    (dd? const-decl "bool" hp_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (diff_sol_eq formula-decl nil ODEs_equiv nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (const? const-decl "bool" ODEs_equiv nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (fs_sol_hp subtype "ODEs_equiv.odes"
    "(ODEs_equiv.ODEs_s?(interval_def.closed_interval(0, 1), ODEs_equiv.envi))")))
 (fs_sol_hp_TCC3 0
  (fs_sol_hp_TCC2-1 nil 3882277574 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (fs_sol_hp subtype "(number_fields.+)(ODEs_equiv.t, 1)"
    "{b: reals.real | reals.<(0, b)}")))
 (fs_sol_hp_TCC4 0
  (fs_sol_hp_TCC3-1 nil 3882277574 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dd? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs))
   nil
   (fs_sol_hp subtype
    "interval_def.closed_interval(0, (number_fields.+)(ODEs_equiv.t, 1))"
    "(hp_expr.dd?)")))
 (fs_sol_hp_TCC5 0
  (fs_sol_hp_TCC6-1 nil 3882277829
   ("" (skeep)
    (("" (typepred "odes")
      (("" (expand "ODEs_s?")
        (("" (lemma "diff_sol_eq")
          (("" (inst?)
            (("1" (assert)
              (("1" (split -1)
                (("1" (propax) nil nil)
                 ("2" (hide 2)
                  (("2" (expand "cont_ODEs?")
                    (("2" (expand "cont_ODEs?")
                      (("2" (expand "cont_ODEs?")
                        (("2" (skeep)
                          (("2" (inst -2 "t_1")
                            (("1" (skeep)
                              (("1"
                                (inst -2 "k!1")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -2 "eps" "y")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "del")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -3 "t1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred "t1")
                                                (("2"
                                                  (hide -4 -5)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "t_1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (expand "Lip_ODEs?" -3)
                    (("3" (expand "Lip_ODEs?" -3)
                      (("3" (inst -3 "1+t") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((hp const-decl "bool" interval_def ODEs)
    (dd? const-decl "bool" hp_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (diff_sol_eq formula-decl nil ODEs_equiv nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (const? const-decl "bool" ODEs_equiv nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (fs_sol_hp subtype "ODEs_equiv.odes"
    "(ODEs_equiv.ODEs_s?(interval_def.closed_interval(0, (number_fields.+)(ODEs_equiv.t, 1)), ODEs_equiv.envi))")))
 (fs_sol_hp_fs_TCC1 0
  (fs_sol_hp_fs_TCC4-1 nil 3882277574
   ("" (skeep) (("" (lemma "odes_hp_s") (("" (inst?) nil nil)) nil))
    nil)
   ((odes_hp_s formula-decl nil ODEs_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (fs_sol_hp_fs subtype "ODEs_equiv.odes"
    "(ODEs_equiv.ODEs_s?(interval_def.closed_interval(0, ODEs_equiv.b), ODEs_equiv.envi))")))
 (fs_sol_hp_fs 0
  (fs_sol_hp_fs-1 nil 3882279651
   ("" (skeep)
    (("" (skeep)
      (("" (expand "fs_sol_hp" 1)
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (typepred "b")
                (("1" (case "b =1 ")
                  (("1" (assert) nil nil)
                   ("2" (typepred "b2")
                    (("2" (expand "closed_interval" -1)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma "fs_sol_sub")
                (("2" (typepred "b2")
                  (("2" (typepred "b")
                    (("2" (case "1+b2=b")
                      (("1" (assert) nil nil)
                       ("2" (case "1+b2>b")
                        (("1"
                          (inst -5 "closed_interval(0,1+b2)" "envi"
                           "odes" "b" "k" "b2")
                          (("1" (hide 4) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2"
                          (inst -4 "closed_interval(0,b)" "envi" "odes"
                           "1+b2" "k" "b2")
                          (("1" (assert) nil nil)
                           ("2" (hide 5) (("2" (grind) nil nil)) nil)
                           ("3" (hide 5) (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (/= const-decl "boolean" notequal nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (fs_sol_sub formula-decl nil ODEs_equiv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (fs_sol_hp const-decl "real" ODEs_equiv nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (fs_sol_hp_sol 0
  (fs_sol_hp_sol-1 nil 3882280292
   ("" (skeep)
    (("" (expand "solution_odes?" 1)
      ((""
        (case "NOT derivable_odes?(hp(0), length(odes))(fs_sol_hp(envi, odes))")
        (("1" (hide 2)
          (("1" (expand "derivable_odes?" 1)
            (("1" (skeep)
              (("1" (expand "restrict" 1)
                (("1" (expand "derivable?" 1)
                  (("1" (skeep)
                    (("1"
                      (lemma
                       "derivable_subtype_del[(hp(0)),(closed_interval(0,x+1))]")
                      (("1"
                        (inst -1
                         "LAMBDA (s: (hp(0))): fs_sol_hp(envi, odes)(k)(s)"
                         _ _)
                        (("1"
                          (inst -1
                           "LAMBDA(s:(closed_interval(0,1+x))): fs_sol(closed_interval(0,1+x),envi,odes)(k)(s)"
                           "x")
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (typepred
                                     "  fs_sol(closed_interval(0, 1 + x), envi, odes)")
                                    (("1"
                                      (expand "solution_odes_u?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "solution_odes?" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "derivable_odes?"
                                               -1)
                                              (("1"
                                                (inst -1 "k")
                                                (("1"
                                                  (expand
                                                   "restrict"
                                                   -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "derivable?"
                                                       -1)
                                                      (("1"
                                                        (inst -1 "x")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "odes_hp_s")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "x")
                                            (("2"
                                              (expand "hp" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "dd?" 1)
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (inst 1 "1+x")
                                          (("3"
                                            (typepred "x")
                                            (("3"
                                              (expand "hp")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "ci_deriv_domain")
                              (("2"
                                (inst -1 "(closed_interval(0,1+x))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "ci_ci")
                                    (("1" (inst?) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lemma "ci_not_one_element")
                              (("3"
                                (inst -1 "(closed_interval(0,1+x))")
                                (("1"
                                  (lemma "ci_ci")
                                  (("1" (inst?) nil nil))
                                  nil)
                                 ("2"
                                  (typepred "x")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (lemma "fs_sol_hp_fs")
                              (("4"
                                (inst?)
                                (("1"
                                  (decompose-equality 1)
                                  (("1"
                                    (lemma "odes_hp_s")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (typepred "x")
                                            (("1"
                                              (hide 2 3)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "dd?" 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst 1 "1+x")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "x")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep)
                                    (("3"
                                      (hide -1)
                                      (("3"
                                        (hide 2)
                                        (("3"
                                          (typepred "x")
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide -1)
                                    (("4"
                                      (hide 2)
                                      (("4"
                                        (typepred "x")
                                        (("4" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 3)
                                  (("2"
                                    (typepred "x")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (split 1)
                              (("1"
                                (expand "closed_interval" 1)
                                (("1"
                                  (typepred "x")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "extend" 1)
                                (("2"
                                  (expand "fullset" 1)
                                  (("2"
                                    (inst 1 "1")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (split 1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (typepred "x")
                                          (("2"
                                            (expand
                                             "closed_interval"
                                             1)
                                            (("2"
                                              (expand "abs" -2)
                                              (("2"
                                                (typepred "y")
                                                (("2"
                                                  (expand "hp" -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "odes_hp_s")
                            (("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (typepred "x")
                                  (("3"
                                    (hide 2 3)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide 2)
                            (("4" (skeep)
                              (("4"
                                (expand "dd?" 1)
                                (("4"
                                  (flatten)
                                  (("4"
                                    (inst 1 "1+x")
                                    (("4"
                                      (typepred "x")
                                      (("4" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (skeep)
                            (("5" (typepred "x")
                              (("5" (grind) nil nil)) nil))
                            nil)
                           ("6" (typepred "x") (("6" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "hp_noe")
                        (("2" (inst -1 "0") nil nil)) nil)
                       ("3" (lemma "hp_dd")
                        (("3" (inst -1 "0") nil nil)) nil)
                       ("4" (skeep)
                        (("4" (hide 2)
                          (("4" (typepred "x1") (("4" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("5" (typepred "x")
                        (("5" (typepred "x") (("5" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2"
            (case "env_at_t?(odes, fs_sol_hp(envi, odes), envi, 0)(envi)")
            (("1" (assert)
              (("1" (skeep)
                (("1" (expand "sol_at_t?" 1)
                  (("1" (skeep)
                    (("1" (expand "restrict" 1)
                      (("1"
                        (lemma
                         "deriv_subtype_del[(hp(0)),(closed_interval(0,t+1))]")
                        (("1"
                          (inst -1
                           "LAMBDA (s: (hp(0))): fs_sol_hp(envi, odes)(k)(s)"
                           _ _)
                          (("1"
                            (inst -1
                             "LAMBDA(s:(closed_interval(0,1+t))): fs_sol(closed_interval(0,1+t),envi,odes)(k)(s)"
                             "t")
                            (("1" (split -1)
                              (("1"
                                (expand "deriv" 1)
                                (("1"
                                  (replace -1 1 rl)
                                  (("1"
                                    (typepred
                                     " fs_sol(closed_interval(0, 1 + t), envi, odes)")
                                    (("1"
                                      (expand "solution_odes_u?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "solution_odes?" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -3 "t" "env")
                                              (("1"
                                                (expand "sol_at_t?" -3)
                                                (("1"
                                                  (inst -3 "k")
                                                  (("1"
                                                    (expand
                                                     "restrict"
                                                     -3)
                                                    (("1"
                                                      (expand
                                                       "deriv"
                                                       -3)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand
                                                   "env_at_t?"
                                                   1)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (typepred
                                                         "env")
                                                        (("1"
                                                          (expand
                                                           "env_at_t?"
                                                           -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "i")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "env")
                                                          (("2"
                                                            (expand
                                                             "env_at_t?"
                                                             -1)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "k!1")
                                                                (("2"
                                                                  (expand
                                                                   "fs_sol_hp"
                                                                   -2)
                                                                  (("2"
                                                                    (typepred
                                                                     "t")
                                                                    (("2"
                                                                      (expand
                                                                       "hp"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "odes_hp_s")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -)
                                            (("2"
                                              (typepred "t")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but 1)
                                      (("3"
                                        (expand "dd?" 1)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (inst 1 "1+t")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (typepred "t")
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "ci_deriv_domain")
                                (("2"
                                  (inst -1 "closed_interval(0,1+t)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "ci_ci")
                                      (("1"
                                        (inst -1 "0" "1+t")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "t")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "ci_not_one_element")
                                (("3"
                                  (inst -1 "closed_interval(0,1+t)")
                                  (("1"
                                    (lemma "ci_ci")
                                    (("1" (inst -1 "0" "1+t") nil nil))
                                    nil)
                                   ("2"
                                    (typepred "t")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (decompose-equality 1)
                                (("1"
                                  (lemma "fs_sol_hp_fs")
                                  (("1"
                                    (inst
                                     -1
                                     "envi"
                                     "odes"
                                     "1+t"
                                     "k"
                                     "x!1")
                                    (("1"
                                      (hide-all-but 1)
                                      (("1"
                                        (typepred "t")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "odes_hp_s")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (typepred "t")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (expand "dd?" 1)
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (inst 1 "1+t")
                                        (("3"
                                          (hide -)
                                          (("3"
                                            (typepred "t")
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (skeep)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (typepred "t")
                                      (("4"
                                        (expand "hp" -1)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (hide-all-but 1)
                                  (("5"
                                    (typepred "t")
                                    (("5" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (typepred
                                 "fs_sol(closed_interval(0, 1 + t), envi, odes)")
                                (("1"
                                  (expand "solution_odes_u?" -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "solution_odes?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "derivable_odes?" -1)
                                          (("1"
                                            (inst -1 "k")
                                            (("1"
                                              (expand "restrict" -1)
                                              (("1"
                                                (expand
                                                 "derivable?"
                                                 -1)
                                                (("1"
                                                  (inst -1 "t")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "odes_hp_s")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (typepred "t")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "dd?" 1)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst 1 "1+t")
                                      (("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (typepred "t")
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split 1)
                              (("1"
                                (hide -)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (typepred "t")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "extend" 1)
                                (("2"
                                  (expand "fullset" 1)
                                  (("2"
                                    (inst 1 "1")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (hide -2 -3 2)
                                        (("2"
                                          (typepred "y")
                                          (("2"
                                            (expand "hp" -1)
                                            (("2"
                                              (typepred "t")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (lemma "odes_hp_s")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (hide -1 -2 2 3)
                                    (("3"
                                      (typepred "t")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (skeep)
                              (("4"
                                (expand "dd?" 1)
                                (("4"
                                  (flatten)
                                  (("4"
                                    (inst 1 "1+t")
                                    (("4"
                                      (hide-all-but 1)
                                      (("4"
                                        (typepred "t")
                                        (("4" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (skeep)
                              (("5"
                                (hide 2 -2 -1)
                                (("5"
                                  (grind)
                                  (("5"
                                    (typepred "t")
                                    (("5" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (hide-all-but 1)
                              (("6"
                                (typepred "t")
                                (("6" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "hp_noe")
                          (("2" (inst -1 "0") nil nil)) nil)
                         ("3" (lemma "hp_dd")
                          (("3" (inst -1 "0") nil nil)) nil)
                         ("4" (skeep)
                          (("4" (hide -1 -2 2)
                            (("4" (typepred "x")
                              (("4" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("5" (typepred "t")
                          (("5" (hide -2 -3 2) (("5" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "env_at_t?" 1)
                (("2" (skeep)
                  (("2" (expand "fs_sol_hp" 1)
                    (("2"
                      (typepred
                       " fs_sol(closed_interval(0, 1), envi, odes)")
                      (("2" (expand "solution_odes_u?" -1)
                        (("2" (flatten)
                          (("2" (expand "solution_odes?" -1)
                            (("2" (flatten)
                              (("2"
                                (expand "env_at_t?" -2)
                                (("2" (inst -2 "k") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "dd?" 1) (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((solution_odes? const-decl "bool" hp_expr nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_subtype_del formula-decl nil derivatives_subtype analysis)
    (env_at_t? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (derivable_subtype_del formula-decl nil derivatives_subtype
     analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil) (set type-eq-decl nil sets nil)
    (fullset const-decl "set" sets nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (member const-decl "bool" sets nil)
    (fs_sol_hp_fs formula-decl nil ODEs_equiv nil)
    (ci_not_one_element formula-decl nil interval_def ODEs)
    (ci_deriv_domain formula-decl nil interval_def ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (odes_hp_s formula-decl nil ODEs_equiv nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (hp_noe formula-decl nil interval_def ODEs)
    (hp_dd formula-decl nil interval_def ODEs)
    (restrict const-decl "R" restrict nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (fs_sol_hp const-decl "real" ODEs_equiv nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (fs_sol_hp_sol_u 0
  (fs_sol_hp_sol_u-1 nil 3882282136
   ("" (skeep)
    (("" (lemma "fs_sol_hp_sol")
      (("" (inst?)
        (("" (expand "solution_odes_u?" 1)
          (("" (assert)
            (("" (skeep)
              (("" (skeep)
                (("" (typepred "t")
                  (("" (expand "fs_sol_hp" 1)
                    (("" (typepred "t")
                      (("" (typepred "S")
                        (("" (case "t>=0")
                          (("1" (assert)
                            (("1"
                              (typepred
                               "fs_sol(closed_interval(0, 1 + t), envi, odes)")
                              (("1"
                                (expand "solution_odes_u?" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst -2 "ff" "S")
                                    (("1"
                                      (assert)
                                      (("1" (inst -2 "i" "t") nil nil))
                                      nil)
                                     ("2"
                                      (lemma "solution_odes_sub")
                                      (("2"
                                        (inst
                                         -1
                                         "S"
                                         "odes"
                                         "envi"
                                         "ff"
                                         "closed_interval(0,1+t)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred
                                             "fs_sol(closed_interval(0, 1 + t), envi, odes)")
                                            (("1"
                                              (expand
                                               "solution_odes_u?"
                                               -1)
                                              (("1"
                                                (inst
                                                 -1
                                                 "ff"
                                                 "closed_interval(0,1+t)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -1 "i" "t")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "closed_interval"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (skeep) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (hide -3 3)
                                                (("2"
                                                  (expand "dd?" -4)
                                                  (("2"
                                                    (split -4)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -8 -9)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "dd?" -1)
                              (("2"
                                (split -1)
                                (("1"
                                  (skeep)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fs_sol_hp_sol formula-decl nil ODEs_equiv nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (solution_odes_sub formula-decl nil ODEs_equiv nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (t skolem-const-decl "(S)" ODEs_equiv nil)
    (S skolem-const-decl
     "{SS: (dd?) | FORALL (x: real): SS(x) IMPLIES hp(0)(x)}"
     ODEs_equiv nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (fs_sol_hp const-decl "real" ODEs_equiv nil)
    (Lip_ODEs? const-decl "bool" ODEs_equiv nil)
    (hp const-decl "bool" interval_def ODEs)
    (cont_ODEs? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (diff_sol_eq_dd 0
  (diff_sol_eq_dd-1 nil 3882265758
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "dd?" -1)
        (("" (split -1)
          (("1" (skeep)
            (("1" (lemma "diff_sol_eq")
              (("1" (inst -1 "odes" "envi" "b")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (skeep)
                      (("1" (inst 1 "fs") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "cont_ODEs?" -2)
                        (("2" (assert)
                          (("2" (split -2)
                            (("1" (flatten)
                              (("1"
                                (hide -2)
                                (("1"
                                  (replace -2 -1)
                                  (("1"
                                    (hide -2 -3 1)
                                    (("1"
                                      (grind)
                                      (("1"
                                        (expand "closed_interval" -1)
                                        (("1"
                                          (expand "hp" -1)
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst -1 "b+1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (case "car(cdr(d_b[D])) = b")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (typepred "d_b[D]")
                                  (("2"
                                    (inst-cp -5 "b")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -9)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -5
                                               "car(cdr(d_b[D]))")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (replace -8 1)
                                                (("2"
                                                  (lemma "ci_ci")
                                                  (("2"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma "ci_ci")
                                  (("3"
                                    (inst?)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (expand "Lip_ODEs?" -3)
                        (("3" (split -3)
                          (("1" (flatten)
                            (("1" (hide -2 -4 1)
                              (("1"
                                (replace -2)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (decompose-equality -1)
                                    (("1"
                                      (inst -1 "b+1")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "car(cdr(d_b[D])) = b")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 -3 3 2)
                                (("2"
                                  (typepred "d_b[D]")
                                  (("2"
                                    (inst-cp -5 "b")
                                    (("2"
                                      (inst -5 "car(cdr(d_b[D]))")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (lemma "ci_ci")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "ci_ci")
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "fs_sol_hp_sol_u")
            (("2" (inst?)
              (("2" (inst -1 "odes")
                (("1" (assert)
                  (("1" (inst 1 "fs_sol_hp(envi,odes)")
                    (("1" (assert) nil nil)
                     ("2" (expand "solution_odes_u?")
                      (("2" (flatten)
                        (("2" (expand "solution_odes?")
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (diff_sol_eq formula-decl nil ODEs_equiv nil)
    (D skolem-const-decl "(dd?)" ODEs_equiv nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cont_ODEs? const-decl "bool" ODEs_equiv nil)
    (cont_ODEs? const-decl "bool" ODEs_equiv nil)
    (Lip_ODEs? const-decl "bool" ODEs_equiv nil)
    (Lip_ODEs? const-decl "bool" ODEs_equiv nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ci_ci formula-decl nil interval_def ODEs)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension ODEs)
    (hp const-decl "bool" interval_def ODEs)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (cont_ODEs? const-decl "bool" ODEs_equiv nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (fs_sol_hp const-decl "real" ODEs_equiv nil)
    (odes skolem-const-decl "ODEs" ODEs_equiv nil)
    (envi skolem-const-decl "Environment" ODEs_equiv nil)
    (fs_sol_hp_sol_u formula-decl nil ODEs_equiv nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak)))