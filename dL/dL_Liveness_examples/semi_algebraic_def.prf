(semi_algebraic_def
 (eval_TCC1 0
  (eval_TCC2-1 nil 3853848890 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly))
   nil
   (eval subtype
         "chain_rule_re.env_2_vec(standard_form_mult_poly.max_length(semi_algebraic_def.p), semi_algebraic_def.env)"
         "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(semi_algebraic_def.p))}")))
 (eval_equiv_ddl_TCC1 0
  (eval_equiv_ddl_TCC1-1 nil 3861963685 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (max_length def-decl "nat" standard_form_mult_poly Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil))
   nil
   (eval_equiv_ddl subtype "semi_algebraic_def.i"
    "below[length[real](l)]")))
 (eval_equiv_ddl 0
  (eval_equiv_ddl-1 nil 3861963689
   ("" (skeep)
    (("" (expand "eval" 1)
      (("" (typepred "l")
        (("" (typepred "env_2_vec(max_length(p), env)")
          (("" (lemma "eval_higher_dim_poly")
            (("" (lemma "env_2_vec_nth")
              (("" (case "length(l) > max_length(p)+1")
                (("1" (inst? -3)
                  (("1" (split)
                    (("1" (propax) nil nil)
                     ("2" (skeep)
                      (("2" (inst? -2)
                        (("2" (inst? -7) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (case "length(l)< max_length(p)+1")
                  (("1"
                    (inst -3 "p" "l" "env_2_vec(max_length(p),env)")
                    (("1" (split)
                      (("1" (assert) nil nil)
                       ("2" (skeep)
                        (("2" (inst?)
                          (("2" (inst? -7) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (case "max_length(p)=0")
                    (("1" (copy -3)
                      (("1"
                        (inst -1 "p" "null"
                         "env_2_vec(max_length(p),env)")
                        (("1" (assert)
                          (("1" (split)
                            (("1" (inst -4 "p" "null" "l")
                              (("1"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2" (skeep) nil nil))
                                nil))
                              nil)
                             ("2" (skeep) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (name "x" "l^(0,max_length(p)-1)")
                      (("1" (lemma "caret_length[real]")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (lemma "caret_nth[real]")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (copy -5)
                                    (("1"
                                      (inst
                                       -1
                                       "p"
                                       "x"
                                       "env_2_vec(max_length(p),env)")
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -6 "p" "x" "l")
                                          (("1"
                                            (split)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (replace -4)
                                                (("2"
                                                  (inst -2 "i")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst? -10)
                                                (("2"
                                                  (inst? -4)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval const-decl "real" semi_algebraic_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re DDL)
    (env_2_vec_nth formula-decl nil chain_rule_re DDL)
    (^ def-decl "list[T]" more_list_props structures)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (caret_nth formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (caret_length formula-decl nil more_list_props structures)
    (length_null formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (p skolem-const-decl "MultPoly" semi_algebraic_def nil)
    (env skolem-const-decl "Environment" semi_algebraic_def nil)
    (l skolem-const-decl "{l: list[real] |
   length(l) >= max_length(p) AND
    FORALL (i: below(max_length(p))): nth(l, i) = env(i)}"
     semi_algebraic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (> const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (eval_higher_dim_poly formula-decl nil eval_properties Mult_Poly)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (max_length def-decl "nat" standard_form_mult_poly Mult_Poly)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (Environment type-eq-decl nil hp_def DDL)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly))
   shostak))
 (ANDequiv_TCC1 0
  (ANDequiv_TCC1-1 nil 3850479867
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly))
   nil
   (ANDequiv subtype "semi_algebraic_def.i" "below[length[real](l)]")))
 (ANDequiv 0
  (ANDequiv-1 nil 3850384160
   ("" (induct "Q")
    (("1" (skeep)
      (("1" (expand "ands")
        (("1" (expand "every")
          (("1" (expand "meet") (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst? -1)
          (("2" (inst -1 "l")
            (("1" (expand "ands")
              (("1" (expand "every" 1)
                (("1" (expand "meet" 1)
                  (("1" (assert)
                    (("1" (expand "evalatom")
                      (("1" (expand "atom_eval")
                        (("1" (lemma "eval_equiv_ddl")
                          (("1" (inst? -1)
                            (("1" (inst -1 "l")
                              (("1"
                                (replace -1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (typepred "l")
                                (("2"
                                  (expand "atom_max")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (typepred "i")
                                        (("2"
                                          (inst -4 "i")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "l")
              (("2" (expand "atom_max" -2)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -3 "i")
                      (("2" (typepred "i") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
    nil)
   ((i skolem-const-decl "below(atom_max(cons2_var))"
       semi_algebraic_def nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (eval_equiv_ddl formula-decl nil semi_algebraic_def nil)
    (max_length def-decl "nat" standard_form_mult_poly Mult_Poly)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "below(max_length(cons1_var`poly))"
       semi_algebraic_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (eval const-decl "real" semi_algebraic_def nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re DDL)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (atom_eval const-decl "bool" semi_algebraic Mult_Poly)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "atomic_poly" semi_algebraic_def nil)
    (cons2_var skolem-const-decl "list[atomic_poly]" semi_algebraic_def
     nil)
    (env skolem-const-decl "Environment" semi_algebraic_def nil)
    (l skolem-const-decl "{l: list[real] |
   length(l) >= atom_max(cons(cons1_var, cons2_var)) AND
    FORALL (i: below(atom_max(cons(cons1_var, cons2_var)))):
      nth(l, i) = env(i)}" semi_algebraic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (list_induction formula-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (meet def-decl "bool" semi_algebraic Mult_Poly)
    (ands const-decl "bool" semi_algebraic_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def DDL)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (atom_max def-decl "nat" semi_algebraic Mult_Poly)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (get_SA_TCC1 0
  (get_SA_TCC1-1 nil 3852815759 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def DDL)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (SA? const-decl "bool" semi_algebraic_def nil)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (list type-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (get_SA subtype
    "{Q: semi_algebraic.joining | semi_algebraic_def.SA(Q) = semi_algebraic_def.D}"
    "(sets[semi_algebraic.joining].nonempty?)")))
 (SAequiv_TCC1 0
  (SAequiv_TCC1-1 nil 3850994477 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (meet_max def-decl "nat" semi_algebraic Mult_Poly)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil))
   nil
   (SAequiv subtype "semi_algebraic_def.i" "below[length[real](l)]")))
 (SAequiv 0
  (SAequiv-1 nil 3850221755
   ("" (induct "Q")
    (("1" (skeep) (("1" (expand "SA") (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "env" "l")
          (("1" (expand "SA")
            (("1" (expand "some" 1)
              (("1" (expand "join" 1)
                (("1" (lemma "ANDequiv")
                  (("1" (inst?)
                    (("1" (inst -1 "l")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (typepred "l")
                        (("2" (expand "meet_max" -2)
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (inst -3 "i")
                                (("2"
                                  (typepred "i")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "l")
            (("2" (expand "meet_max" -2)
              (("2" (assert)
                (("2" (skeep)
                  (("2" (inst?)
                    (("2" (expand "meet_max" 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (l skolem-const-decl "{l: list[real] |
   length(l) >= meet_max(cons(cons1_var, cons2_var)) AND
    FORALL (i: below(meet_max(cons(cons1_var, cons2_var)))):
      nth(l, i) = env(i)}" semi_algebraic_def nil)
    (env skolem-const-decl "Environment" semi_algebraic_def nil)
    (cons2_var skolem-const-decl "list[meeting]" semi_algebraic_def
     nil)
    (cons1_var skolem-const-decl "meeting" semi_algebraic_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ANDequiv formula-decl nil semi_algebraic_def nil)
    (atom_max def-decl "nat" semi_algebraic Mult_Poly)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (i skolem-const-decl "below(atom_max(cons1_var))"
       semi_algebraic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (i skolem-const-decl "below(meet_max(cons2_var))"
       semi_algebraic_def nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (some adt-def-decl "boolean" list_adt nil)
    (ands const-decl "bool" semi_algebraic_def nil)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (eval const-decl "real" semi_algebraic_def nil)
    (list_induction formula-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (join def-decl "bool" semi_algebraic Mult_Poly)
    (SA const-decl "bool" semi_algebraic_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def DDL)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (meet_max def-decl "nat" semi_algebraic Mult_Poly)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (andSA 0
  (andSA-1 nil 3852634210
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (decompose-equality)
        (("" (lemma "intersect_join")
          (("" (lemma "SAequiv")
            (("" (copy -1)
              (("" (copy -1)
                (("" (inst? -1)
                  (("" (inst -2 "Q2" "x!1" _)
                    (("" (inst -3 "cap_join(Q1, Q2)" "x!1" _)
                      ((""
                        (name "l"
                              "env_2_vec(max(meet_max(Q1),meet_max(Q2)),x!1)")
                        (("" (inst -2 "l")
                          (("1" (inst -3 "l")
                            (("1" (inst -4 "l")
                              (("1"
                                (inst? -5)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred
                                   "env_2_vec(max(meet_max(Q1), meet_max(Q2)), x!1)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred
                                 "env_2_vec(max(meet_max(Q1), meet_max(Q2)), x!1)")
                                (("2"
                                  (replace -3 1 rl)
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (lemma "max_cap_join")
                                      (("2"
                                        (split)
                                        (("1"
                                          (case "Q1=null")
                                          (("1"
                                            (expand "cap_join" 1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (case "Q2=null")
                                            (("1"
                                              (expand "cap_join" 2)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (inst? -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (lemma "env_2_vec_nth")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (typepred "i")
                                                (("2"
                                                  (case "Q1=null")
                                                  (("1"
                                                    (expand
                                                     "cap_join"
                                                     -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "Q2=null")
                                                    (("1"
                                                      (expand
                                                       "cap_join"
                                                       -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst? -2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (typepred
                               "env_2_vec(max(meet_max(Q1), meet_max(Q2)), x!1)")
                              (("2"
                                (assert)
                                (("2"
                                  (replace -3 1 rl)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (lemma "env_2_vec_nth")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1 1 rl)
                            (("2"
                              (typepred
                               "env_2_vec(max(meet_max(Q1), meet_max(Q2)), x!1)")
                              (("2"
                                (replace -2)
                                (("2"
                                  (expand "max" 1 1)
                                  (("2"
                                    (split)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (lemma "env_2_vec_nth")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (typepred "i")
                                            (("2"
                                              (expand "max" 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLAND const-decl "bool" bool_expr DDL)
    (intersect_join formula-decl nil semi_algebraic Mult_Poly)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Q1 skolem-const-decl "joining" semi_algebraic_def nil)
    (Q2 skolem-const-decl "joining" semi_algebraic_def nil)
    (l skolem-const-decl "VectorN(1 + max(meet_max(Q1), meet_max(Q2)))"
     semi_algebraic_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (x!1 skolem-const-decl "[nat -> real]" semi_algebraic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max_cap_join formula-decl nil semi_algebraic Mult_Poly)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl "below(meet_max(cap_join(Q1, Q2)))"
       semi_algebraic_def nil)
    (env_2_vec_nth formula-decl nil chain_rule_re DDL)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (i skolem-const-decl "below(meet_max(Q1))" semi_algebraic_def nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re DDL)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (meet_max def-decl "nat" semi_algebraic Mult_Poly)
    (SAequiv formula-decl nil semi_algebraic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cap_join def-decl "joining" semi_algebraic Mult_Poly)
    (SA const-decl "bool" semi_algebraic_def nil)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (list type-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def DDL))
   shostak))
 (andSA? 0
  (andSA?-1 nil 3875002029
   ("" (skeep)
    (("" (lemma "andSA")
      (("" (typepred "S1")
        (("" (typepred "S2")
          (("" (expand "SA?")
            (("" (skeep*)
              (("" (inst -3 "Q!1" "Q")
                (("" (inst 1 "cap_join(Q!1, Q)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((andSA formula-decl nil semi_algebraic_def nil)
    (TRUE const-decl "bool" booleans nil)
    (cap_join def-decl "joining" semi_algebraic Mult_Poly)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (list type-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def DDL)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (SA? const-decl "bool" semi_algebraic_def nil))
   shostak))
 (orSA 0
  (orSA-1 nil 3852632857
   ("" (skeep)
    (("" (expand "DLOR")
      (("" (decompose-equality)
        (("" (lemma "union_join")
          (("" (lemma "SAequiv")
            (("" (copy -1)
              (("" (copy -1)
                (("" (lemma "max_meet")
                  (("" (inst? -1)
                    ((""
                      (name "x"
                            "env_2_vec(max(meet_max(Q1), meet_max(Q2)), x!1)")
                      (("" (inst -3 "Q1" "x!1" "x")
                        (("1" (inst -4 "Q2" "x!1" "x")
                          (("1" (inst -5 "append(Q1, Q2)" "x!1" "x")
                            (("1" (inst -6 "Q1" "Q2" "x")
                              (("1" (grind) nil nil)
                               ("2"
                                (replace -1 1 rl)
                                (("2"
                                  (typepred
                                   "env_2_vec(max(meet_max(Q1), meet_max(Q2)), x!1)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1 1 rl)
                              (("2"
                                (typepred
                                 "env_2_vec(max(meet_max(Q1), meet_max(Q2)), x!1)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (lemma "env_2_vec_nth")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (typepred
                             "env_2_vec(max(meet_max(Q1), meet_max(Q2)), x!1)")
                            (("2" (replace -3 1 rl)
                              (("2"
                                (replace -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (lemma "env_2_vec_nth")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -1 1 rl)
                          (("2"
                            (typepred
                             "env_2_vec(max(meet_max(Q1), meet_max(Q2)), x!1)")
                            (("2" (replace -2)
                              (("2"
                                (assert)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (lemma "env_2_vec_nth")
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLOR const-decl "bool" bool_expr DDL)
    (union_join formula-decl nil semi_algebraic Mult_Poly)
    (max_meet formula-decl nil semi_algebraic Mult_Poly)
    (meet_max def-decl "nat" semi_algebraic Mult_Poly)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re DDL)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (env_2_vec_nth formula-decl nil chain_rule_re DDL)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (x!1 skolem-const-decl "[nat -> real]" semi_algebraic_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (x skolem-const-decl "VectorN(1 + max(meet_max(Q1), meet_max(Q2)))"
     semi_algebraic_def nil)
    (Q2 skolem-const-decl "joining" semi_algebraic_def nil)
    (Q1 skolem-const-decl "joining" semi_algebraic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (SAequiv formula-decl nil semi_algebraic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (SA const-decl "bool" semi_algebraic_def nil)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (list type-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def DDL))
   shostak))
 (orSA? 0
  (orSA?-1 nil 3875002545
   ("" (skeep)
    (("" (typepred "S1")
      (("" (typepred "S2")
        (("" (lemma "orSA")
          (("" (expand "SA?")
            (("" (skeep*)
              (("" (inst -1 "Q!1" "Q")
                (("" (replace -2)
                  (("" (replace -3)
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SA? const-decl "bool" semi_algebraic_def nil)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (Environment type-eq-decl nil hp_def DDL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (orSA formula-decl nil semi_algebraic_def nil)
    (TRUE const-decl "bool" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (list type-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly))
   shostak))
 (notSA 0
  (notSA-1 nil 3852631525
   ("" (skeep)
    (("" (expand "DLNOT")
      (("" (decompose-equality)
        (("" (lemma "not_join")
          (("" (lemma "SAequiv")
            (("" (lemma "SAequiv")
              (("" (lemma "max_not")
                (("" (inst?)
                  (("" (name "x" "env_2_vec(meet_max(Q),x!1)")
                    (("" (inst -3 "Q" "x!1" "x")
                      (("1" (inst -4 "not_join(Q)" "x!1" "x")
                        (("1" (inst -5 "Q" "x") (("1" (grind) nil nil))
                          nil)
                         ("2" (replace -1 1 rl)
                          (("2"
                            (typepred "env_2_vec(meet_max(Q), x!1)")
                            (("2" (split -4)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (lemma "env_2_vec_nth")
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 1)
                                    (("2" (skeep) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "env_2_vec(meet_max(Q), x!1)")
                        (("2" (assert)
                          (("2" (skeep)
                            (("2" (lemma "env_2_vec_nth")
                              (("2"
                                (replace -4 1 rl)
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLNOT const-decl "bool" bool_expr DDL)
    (not_join formula-decl nil semi_algebraic Mult_Poly)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Q skolem-const-decl "joining" semi_algebraic_def nil)
    (x skolem-const-decl "VectorN(1 + meet_max(Q))" semi_algebraic_def
     nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (x!1 skolem-const-decl "[nat -> real]" semi_algebraic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (env_2_vec_nth formula-decl nil chain_rule_re DDL)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re DDL)
    (meet_max def-decl "nat" semi_algebraic Mult_Poly)
    (max_not formula-decl nil semi_algebraic Mult_Poly)
    (SAequiv formula-decl nil semi_algebraic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (not_join def-decl "joining" semi_algebraic Mult_Poly)
    (SA const-decl "bool" semi_algebraic_def nil)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (list type-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def DDL))
   shostak))
 (notSA? 0
  (notSA?-1 nil 3875003180
   ("" (skeep)
    (("" (lemma "notSA")
      (("" (typepred "S")
        (("" (expand "SA?")
          (("" (skeep)
            (("" (inst -2 "Q")
              (("" (replace -1)
                (("" (inst 1 "not_join(Q)") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((notSA formula-decl nil semi_algebraic_def nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (not_join def-decl "joining" semi_algebraic Mult_Poly)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def DDL)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (SA? const-decl "bool" semi_algebraic_def nil))
   shostak))
 (pf_TCC1 0
  (pf_TCC1-1 nil 3865588394
   ("" (skeep) (("" (lemma "every_zero") (("" (inst?) nil nil)) nil))
    nil)
   ((every_zero formula-decl nil vector_arithmetic mv_analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (pf subtype "vector_arithmetic.zero_vec(semi_algebraic_def.n)"
    "list[nat]")))
 (pf_TCC2 0
  (pf_TCC2-1 nil 3865588394 ("" (subtype-tcc) nil nil) nil nil
   (pf subtype "(number_fields.-)(semi_algebraic_def.n, 1)"
    "{ii: naturalnumbers.nat | reals.<(ii, semi_algebraic_def.n)}")))
 (pf_TCC3 0
  (pf_TCC3-1 nil 3865588394
   ("" (induct "n")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (expand "e")
          (("1" (assert)
            (("1" (expand "zero_vec") (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "every" 2)
            (("2"
              (case "FORALL(n:nat,l:list[nat]|cons?(l)): cdr(n*l) = n*cdr(l)")
              (("1" (inst -1 "2" "e(1 + j, j)")
                (("1" (replace -1)
                  (("1" (lemma "e_cdr")
                    (("1" (inst -1 "1+j" "j")
                      (("1" (assert)
                        (("1" (replace -1)
                          (("1"
                            (case "FORALL(n:nat,l:list[nat]|cons?(l)): car(n*l) = n*car(l)")
                            (("1" (inst? -1)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "e" 2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "every_e")
                                (("2" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2 3 -1 -2 -3 -4)
                              (("2"
                                (skeep)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "every_e") (("2" (inst?) nil nil)) nil))
                nil)
               ("2" (hide 2 3 -1 -2)
                (("2" (induct "l")
                  (("1" (grind) nil nil) ("2" (assert) nil nil)
                   ("3" (skeep)
                    (("3" (case "cons2_var=null")
                      (("1" (skeep) (("1" (grind) nil nil)) nil)
                       ("2" (skeep) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (grind) nil nil))
                  nil))
                nil)
               ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert) (("4" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (every_e formula-decl nil vector_arithmetic mv_analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (e_cdr formula-decl nil vector_arithmetic mv_analysis)
    (j skolem-const-decl "nat" semi_algebraic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (< const-decl "bool" reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices matrices)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (pf subtype
    "matrices.*(2, vector_arithmetic.e(semi_algebraic_def.n, (number_fields.-)(semi_algebraic_def.n, 1)))"
    "list[nat]")))
 (all_false_mp 0
  (all_false_mp-1 nil 3865588425
   ("" (skeep)
    (("" (case "FORALL(l:list[nat]): length(l) = length(2*l)")
      (("1"
        (case "FORALL(l:list[nat], i:below(length(l))): 2*nth(l,i) = nth(2*l,i)")
        (("1"
          (case "FORALL (n: nat): n > 0 IMPLIES every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (2 * e(n, n - 1))")
          (("1" (split 1)
            (("1" (expand "mv_standard_form?")
              (("1" (expand "pf")
                (("1" (split 1)
                  (("1" (propax) nil nil)
                   ("2" (split 1)
                    (("1" (expand "minlength?" 1)
                      (("1" (assert)
                        (("1" (split)
                          (("1" (propax) nil nil)
                           ("2" (flatten)
                            (("2" (hide 1)
                              (("2"
                                (split)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (split 1)
                                  (("1"
                                    (expand "Unif?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "i=j")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (case
                                           "length(zero_vec(n)) = length(2 * e(n, n - 1))")
                                          (("1"
                                            (expand "nth" 2)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" 2)
                                                    (("1"
                                                      (typepred "i")
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("1"
                                                              (typepred
                                                               "j")
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (lift-if
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "zero_vec(n)")
                                            (("2"
                                              (typepred "e(n,n-1)")
                                              (("2"
                                                (inst -7 "e(n,n-1)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (lemma "every_e")
                                                  (("2"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 1 "1")
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (expand "nth" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -3 "e(n,n-1)")
                                            (("1"
                                              (typepred "e(n, n - 1)")
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "last_is_nth")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace
                                                         -7
                                                         -1
                                                         rl)
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "e(n,n-1)"
                                                           "n-1")
                                                          (("1"
                                                            (replace
                                                             -6
                                                             -1
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "nth_e")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "every_e")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst? -4)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "every_e")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "allnonzero?")
                      (("2" (split 1)
                        (("1" (skeep)
                          (("1" (typepred "i")
                            (("1" (expand "length" -1)
                              (("1"
                                (expand "length" -1)
                                (("1"
                                  (expand "length" -1)
                                  (("1"
                                    (case "i=0")
                                    (("1"
                                      (expand "nth" -3)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "nth" -2)
                                      (("2"
                                        (expand "nth" -2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("3" (expand "is_sorted?")
                      (("3" (skeep)
                        (("3" (expand "length" -1)
                          (("3" (expand "length" -1)
                            (("3" (expand "length" -1)
                              (("3"
                                (expand "nth" 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "nth" 1)
                                    (("3"
                                      (expand "leq" 1)
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (hide 2 3)
                                          (("3"
                                            (case
                                             "FORALL(n:nat): sum(zero_vec(n)) = 0")
                                            (("1"
                                              (case
                                               "FORALL(n:posnat): sum(2 * e(n, n - 1))=2")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (inst? -2)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (induct "n")
                                                (("1" (assert) nil nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (skeep)
                                                  (("3"
                                                    (expand "sum" 1)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (inst
                                                         -7
                                                         "e(j+1,j)")
                                                        (("1"
                                                          (typepred
                                                           "e(1+j,j)")
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -8
                                                                 "e(1 + j, j)"
                                                                 "0")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -8)
                                                                  (("1"
                                                                    (replace
                                                                     -8
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "nth_e")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "j=0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "FORALL(l:list[nat]|cons?(l)): 2*cdr(l) = cdr(2*l)")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "e(1 + j, j)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               2
                                                                                               rl)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "e_cdr")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "every_e")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (reveal
                                                                                           -)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "list_extensionality[nat]")
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "2 * cdr(l)"
                                                                                                 "cdr(2 * l)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (copy
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "cdr(l)")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -5
                                                                                                           "l")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -5)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (skeep)
                                                                                                                      (("2"
                                                                                                                        (copy
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "cdr(l)"
                                                                                                                           "n!1")
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             2
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -6
                                                                                                                               "l"
                                                                                                                               "n!1+1")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "nth"
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (typepred
                                                                                                                                 "n!1")
                                                                                                                                (("2"
                                                                                                                                  (reveal
                                                                                                                                   -)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -5
                                                                                                                                     "l")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "length"
                                                                                                                                       -5)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "length"
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "every_nth[number]")
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -3
                                                                                                           "l"
                                                                                                           "i")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -3
                                                                                                               1
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (lemma
                                                                                                   "every_nth[number]")
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (skeep)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -3
                                                                                                           "l"
                                                                                                           "i+1")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (typepred
                                                                                                             "i")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (reveal
                                                                                             -)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -4
                                                                                               "l")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -4)
                                                                                                (("3"
                                                                                                  (lift-if)
                                                                                                  (("3"
                                                                                                    (split
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "every_e")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "every_e")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (assert)
                                                  (("4"
                                                    (skeep)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skeep)
                                                (("3"
                                                  (inst -3 "n!1")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (induct "n")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (expand "sum" 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "zero_vec(1+j)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "nth_zero")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "0")
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "zero_cdr")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "every_zero")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("4"
                                                (typepred
                                                 "zero_vec(n!1)")
                                                (("4" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma "every_zero")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "simplified?")
                      (("4" (split 1)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (hide 1)
                            (("2" (split)
                              (("1" (propax) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case
                                   "NOT 2 * e(n, n - 1) = zero_vec(n)")
                                  (("1"
                                    (typepred "i")
                                    (("1"
                                      (expand "length" -1)
                                      (("1"
                                        (expand "length" -1)
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (typepred "j")
                                            (("1"
                                              (expand "length" -1)
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (expand "length" -1)
                                                  (("1"
                                                    (case "i=0")
                                                    (("1"
                                                      (expand "nth" -4)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -4)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "nth" -3)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           -3)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -2)
                                    (("2"
                                      (lemma
                                       "list_extensionality[nat]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (typepred
                                                 "zero_vec(n)")
                                                (("1"
                                                  (typepred "e(n,n-1)")
                                                  (("1"
                                                    (inst
                                                     -11
                                                     "e(n,n-1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst -6 "n-1")
                                                        (("1"
                                                          (inst
                                                           -10
                                                           "e(n,n-1)"
                                                           "n-1")
                                                          (("1"
                                                            (lemma
                                                             "nth_e")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "nth_zero")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "every_e")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma "every_e")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "every_zero")
                                          (("2" (inst?) nil nil))
                                          nil)
                                         ("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "evalatom" 1)
                (("2" (expand "eval" -1)
                  (("2" (expand "pf")
                    (("2" (expand "max_length" -1 1)
                      (("2" (expand "max_length" -1 1)
                        (("2" (expand "max_length" -1 1)
                          (("2" (typepred "zero_vec(n)")
                            (("2" (replace -2)
                              (("2"
                                (typepred "e(n, n - 1)")
                                (("2"
                                  (inst? -8)
                                  (("1"
                                    (replace -8 -5 rl)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "max" -5)
                                          (("1"
                                            (lemma "full_eval_recurs")
                                            (("1"
                                              (inst? -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1 -2 -4)
                                                    (("1"
                                                      (lemma
                                                       "full_eval_recurs")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (expand
                                                                 "full_eval"
                                                                 -3
                                                                 1)
                                                                (("1"
                                                                  (case
                                                                   "full_eval((# C := 1, alpha := zero_vec(n) #))(env_2_vec(n, env)) = 1")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "full_eval((# C := 1, alpha := 2 * e(n, n - 1) #)) (env_2_vec(n, env)) = (env(n-1))^2")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "FORALL(n:posnat, val:list[real]|length(val)>=n): full_eval((# C := 1, alpha := 2 * e(n, n - 1) #)) (val) = (nth(val,n - 1)) ^ 2")
                                                                        (("1"
                                                                          (inst?
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "env_2_vec_nth")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               "env_2_vec(n,env)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (induct
                                                                           "n")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (skeep)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "eval_vals")
                                                                                  (("3"
                                                                                    (inst
                                                                                     -1
                                                                                     "j+1"
                                                                                     "(# C := 1, alpha := 2 * e(j + 1, j + 1 - 1) #)"
                                                                                     "val")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -8
                                                                                             "e(1 + j, j)"
                                                                                             "0")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               -8)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -8
                                                                                                 1
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nth_e")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "1+j"
                                                                                                     "j"
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "hat"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "j=0")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "e"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "zero_vec"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "alpha_null_eval")
                                                                                                                        (("1"
                                                                                                                          (reveal
                                                                                                                           -11)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "cons(1, null)")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "length"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (lift-if
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "length"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (lift-if
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               "(# C := 1, alpha := cdr[nat](2 * cons(1, null)) #)"
                                                                                                                                               _
                                                                                                                                               _)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "full_eval"
                                                                                                                                                 2)
                                                                                                                                                (("1"
                                                                                                                                                  (inst?
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "nth"
                                                                                                                                                         2)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "list_length_n[nat]")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand
                                                                                                                                                 "every"
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "e_cdr")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "1+j"
                                                                                                                       "j")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "cdr[nat](2 * e(1 + j, j)) = 2*cdr(e(1 + j, j))")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -4
                                                                                                                                 "cdr(val)")
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "val")
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (lemma
                                                                                                                             "list_extensionality[nat]")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (reveal
                                                                                                                                   -4
                                                                                                                                   -13)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -2
                                                                                                                                     "e(1 + j, j)")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "length"
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skeep)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "e(1 + j, j)"
                                                                                                                                             "n!1+1")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "nth"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1
                                                                                                                                                   1
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (reveal
                                                                                                                                                     -4)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "cdr(e(1 + j, j))"
                                                                                                                                                       "n!1")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (lemma
                                                                                                                                       "every_e")
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (inst?
                                                                                                                                   -9)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "every_e")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst?
                                                                                       -7)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (skeep)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (typepred
                                                                                 "n!2")
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("6"
                                                                            (skeep)
                                                                            (("6"
                                                                              (assert)
                                                                              (("6"
                                                                                (skeep)
                                                                                (("6"
                                                                                  (assert)
                                                                                  (("6"
                                                                                    (case
                                                                                     "FORALL (n: nat): n > 0 IMPLIES every[number] (LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (2 * e(n, n - 1))")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "n!2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (induct
                                                                                       "n")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (reveal
                                                                                             -)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "j+1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("8"
                                                                            (skeep)
                                                                            (("8"
                                                                              (skeep)
                                                                              (("8"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("9"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("10"
                                                                            (skeep)
                                                                            (("10"
                                                                              (skeep)
                                                                              (("10"
                                                                                (reveal
                                                                                 -)
                                                                                (("10"
                                                                                  (inst
                                                                                   -8
                                                                                   "e(n!2, n!2 - 1)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -8
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "val")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "e(n!2, n!2 - 1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "every_e")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("11"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (inst?
                                                                             -5)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (typepred
                                                                             "val")
                                                                            (("4"
                                                                              (reveal
                                                                               -)
                                                                              (("4"
                                                                                (inst
                                                                                 -6
                                                                                 "e(n!1, n!1 - 1)")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "e(n!1, n!1 - 1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "every_e")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (inst?
                                                                         -5)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "FORALL(n:nat,val:list[real] | length(val)>=n): full_eval((# C := 1, alpha := zero_vec(n) #))(val) = 1")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "env_2_vec(n,env)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (induct
                                                                       "n")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (expand
                                                                             "zero_vec"
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "alpha_null_eval")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (expand
                                                                                   "full_eval"
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "list_length_n[nat]")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (lemma
                                                                             "eval_vals")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "j+1"
                                                                               "(# C := 1, alpha := zero_vec(j + 1) #)"
                                                                               "val")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "zero_vec"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "hat"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "cdr(val)")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "val")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (lemma
                                                                                 "every_zero")
                                                                                (("3"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (lemma
                                                                           "every_zero")
                                                                          (("3"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (lemma
                                                                           "every_zero")
                                                                          (("4"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (typepred
                                                                           "zero_vec(n!2)")
                                                                          (("5"
                                                                            (typepred
                                                                             "val")
                                                                            (("5"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (skeep)
                                                                        (("6"
                                                                          (typepred
                                                                           "val")
                                                                          (("6"
                                                                            (typepred
                                                                             "zero_vec(n!2)")
                                                                            (("6"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (lemma
                                                                         "every_zero")
                                                                        (("3"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (skeep)
                                                                      (("4"
                                                                        (typepred
                                                                         "val")
                                                                        (("4"
                                                                          (typepred
                                                                           "zero_vec(n!1)")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "every_zero")
                                                                    (("3"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "every_e")
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (lemma "every_nth[number]")
              (("2" (inst?)
                (("1" (assert)
                  (("1" (inst? -3)
                    (("1" (inst? -2)
                      (("1" (skeep)
                        (("1" (inst -2 "i")
                          (("1" (lemma "nth_e")
                            (("1" (inst?)
                              (("1"
                                (case "i=n!1-1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (replace -4 1 rl)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (replace -3 2 rl)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "every_e") (("2" (inst?) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("3" (skeep) (("3" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (induct "l")
            (("1" (grind) nil nil)
             ("2" (skeep)
              (("2" (skeep)
                (("2" (case "i=0")
                  (("1" (grind) nil nil)
                   ("2" (expand "nth" 2)
                    (("2" (assert)
                      (("2" (inst -1 "i-1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "i")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (induct "l")
        (("1" (assert) nil nil)
         ("2" (skeep)
          (("2" (expand "length" 1)
            (("2" (lift-if 1) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "VectorN(length(v2))" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval const-decl "real" semi_algebraic_def nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (max_length def-decl "nat" standard_form_mult_poly Mult_Poly)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re DDL)
    (Environment type-eq-decl nil hp_def DDL)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (full_eval const-decl "real" eval_MultPoly Mult_Poly)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (n!1 skolem-const-decl "posnat" semi_algebraic_def nil)
    (eval_vals formula-decl nil eval_properties Mult_Poly)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties Mult_Poly)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (add_lists def-decl "list[nat]" list_lemmas Mult_Poly)
    (^ def-decl "list[T]" more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (eval def-decl "monomial" eval_MultPoly Mult_Poly)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (length_null formula-decl nil more_list_props structures)
    (list_length_n def-decl "list[nat]" list_lemmas Mult_Poly)
    (val skolem-const-decl "{val: list[real] | length(val) >= 1 + j}"
         semi_algebraic_def nil)
    (list_length_n formula-decl nil list_lemmas Mult_Poly)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (alpha_null_eval formula-decl nil eval_properties Mult_Poly)
    (j skolem-const-decl "nat" semi_algebraic_def nil)
    (n!2 skolem-const-decl "nat" semi_algebraic_def nil)
    (env skolem-const-decl "Environment" semi_algebraic_def nil)
    (env_2_vec_nth formula-decl nil chain_rule_re DDL)
    (val skolem-const-decl "{val: list[real] | length(val) >= 0}"
         semi_algebraic_def nil)
    (j skolem-const-decl "nat" semi_algebraic_def nil)
    (val skolem-const-decl "{val: list[real] | length(val) >= 1 + j}"
         semi_algebraic_def nil)
    (full_eval def-decl "real" eval_MultPoly Mult_Poly)
    (full_eval_recurs formula-decl nil eval_properties Mult_Poly)
    (evalatom const-decl "bool" semi_algebraic_def nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (simplified? const-decl "bool" standard_form_mult_poly Mult_Poly)
    (is_sorted? const-decl "bool" sorting sorting)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (leq def-decl "bool" standard_form_mult_poly Mult_Poly)
    (nth_zero formula-decl nil vector_arithmetic mv_analysis)
    (zero_cdr formula-decl nil vector_arithmetic mv_analysis)
    (every_zero formula-decl nil vector_arithmetic mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (i skolem-const-decl "below(length[number](2 * cdr[real](l)))"
       semi_algebraic_def nil)
    (every_nth formula-decl nil list_props nil)
    (n!1 skolem-const-decl "below(length(2 * cdr(l)))"
     semi_algebraic_def nil)
    (l skolem-const-decl "{l: list[nat] | cons?(l)}" semi_algebraic_def
     nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (e_cdr formula-decl nil vector_arithmetic mv_analysis)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (j skolem-const-decl "nat" semi_algebraic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sum def-decl "real" standard_form_mult_poly Mult_Poly)
    (allnonzero? const-decl "bool" standard_form_mult_poly Mult_Poly)
    (minlength? const-decl "bool" standard_form_mult_poly Mult_Poly)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (every_e formula-decl nil vector_arithmetic mv_analysis)
    (n skolem-const-decl "posnat" semi_algebraic_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     Mult_Poly)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (Unif? const-decl "bool" standard_form_mult_poly Mult_Poly)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (last_is_nth formula-decl nil standard_form_mult_poly Mult_Poly)
    (pf const-decl "MultPoly" semi_algebraic_def nil)
    (n!1 skolem-const-decl "nat" semi_algebraic_def nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (SA_DLNOT_DLAND 0
  (SA_DLNOT_DLAND-1 nil 3864987110
   ("" (skeep)
    (("" (lemma "notSA")
      (("" (expand "SA?")
        (("" (skeep*)
          (("" (lemma "andSA")
            (("" (replace -3 1 rl)
              (("" (replace -4 1 rl)
                (("" (inst? -1)
                  (("" (replace -1)
                    (("" (inst? -2)
                      (("" (replace -2)
                        (("" (inst 1 "not_join(cap_join(Q!1, Q_1))")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((notSA formula-decl nil semi_algebraic_def nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (INEQ type-eq-decl nil semi_algebraic Mult_Poly)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (MultPoly type-eq-decl nil standard_form_mult_poly Mult_Poly)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly
     Mult_Poly)
    (atomic_poly type-eq-decl nil semi_algebraic Mult_Poly)
    (meeting type-eq-decl nil semi_algebraic Mult_Poly)
    (joining type-eq-decl nil semi_algebraic Mult_Poly)
    (cap_join def-decl "joining" semi_algebraic Mult_Poly)
    (not_join def-decl "joining" semi_algebraic Mult_Poly)
    (andSA formula-decl nil semi_algebraic_def nil)
    (SA? const-decl "bool" semi_algebraic_def nil))
   shostak)))